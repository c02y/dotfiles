# Changes to this file aren't read by tmux automatically,
# compleletely close the tmux sesssion and reopen it or
# ~PREFIX :~ to open command mode and type "source-file ~/.config/tmux/tmux.conf" or
# "tsr" in terminal which is an alias in ~/.fishrc or use binding `M-c r` to make it work
#
# from FAQ file in tmux source code:
# to see the default session options by starting a new tmux server with no configuration file:
#  $ tmux -Lfoo -f/dev/null start\; show -g
# Or the default window options:
#  $ tmux -Lfoo -f/dev/null start\; show -gw

# solve the arrows mess when using vim in tmux
# set -g default-terminal "xterm-256color"

set -s default-terminal "screen-256color"
# set -s terminal-overrides "*256col*:colors=256,xterm*:XT,xterm-termite:Tc"
# setw -g xterm-keys on

# use mouse to scroll the output page instead of the command history
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# fix the konsole/yakuake bug github#933
set -as terminal-overrides ',*:indn@'

set-option -g default-shell /usr/bin/fish
# set the prefix from C-b to M-c
set -g prefix M-c
set -g wrap-search off
# reload the file using Prefix-r
# TODO: if it works, echo reloaded, if fails, print error message
bind M-r source-file ~/.config/tmux/tmux.conf

# switch pane, default is with -r (repeated without prefix)
bind Up select-pane -U
bind k select-pane -U
bind Down select-pane -D
bind j select-pane -D
bind Left select-pane -L
bind h select-pane -L
bind Right select-pane -R
bind l select-pane -R

# only evan-vertical or even-horizontal
bind Space if -F '#{==:#{@lastlayout},eh}' 'selectl even-vertical; set -w @lastlayout ev' 'selectl even-horizontal; set -w @lastlayout eh'
bind M-Space next-layout
bind = select-layout even-vertical
bind M-= select-layout even-horizontal

# choose the right pane using prefix-M-Num
bind 1 select-pane -t 1
bind 2 select-pane -t 2
bind 3 select-pane -t 3
bind 4 select-pane -t 4
bind 5 select-pane -t 5
bind 6 select-pane -t 6

# choose the right window using prefix-M-Num
# The default is prefix+Num
bind M-1 select-window -t :=1
bind M-2 select-window -t :=2
bind M-3 select-window -t :=3
bind M-4 select-window -t :=4
bind M-5 select-window -t :=5
bind M-6 select-window -t :=6
bind M-7 select-window -t :=7
bind M-8 select-window -t :=8
bind M-9 select-window -t :=9

bind M-c last-window
bind t kill-pane
bind ? list-keys -a

# prefix-d is bound to detach, use the d in display-menu instead
unbind d
# NOTE: display-menu is introduced in v3.2
bind M-a display-menu -T "#[align=centre]Menu(j/k)" -xC -yC     \
  Ranger              r "display-popup -E -w 90% -h 90% ranger" \
  Htop                h "display-popup -E -w 90% -h 90% htop"   \
  Top                 t "display-popup -E -w 90% -h 90% top"    \
  Man                 m "display-popup -E -w 90% -h 90% man"    \
  Ranger-new-window   R "new-window -n ranger ranger"           \
  Htop-new-window     H "new-window -n htop htop"               \
  Top-new-window      T "new-window -n top top"                 \
  Man-new-window      M "new-window -n man ~/.local/bin/man"    \
  ""                                                            \
  Kill-pane           x "kill-pane"                             \
  Kill-other-panes    X "kill-pane -a"                          \
  Kill-window         w "kill-window"                           \
  Kill-other-windows  W 'confirm-before "kill-window -a"'       \
  kill-other-sessions s 'confirm-before "kill-session -a"'      \
  Kill-server         Q 'confirm-before "kill-server"'          \
  ""                                                            \
  Swap-left           Left "swap-pane -s '{left-of}'"           \
  Swap-right          Right "swap-pane -s '{right-of}'"         \
  Swap-up             Up "swap-pane -s '{up-of}'"               \
  Swap-down           Down "swap-pane -s '{down-of}'"           \
  ""                                                            \
  Detach              d "confirm-before detach"                 \
  Rename              n "command-prompt -I \"#W \" \"rename-window -- '%%' \"" \
  Capture             c "command-prompt -p 'save-history:' -I '/tmp/tmux.history' 'capture-pane -S -; save-buffer %1 ; delete-buffer'"

# Start Window Numbering at 1
set -g base-index 1
setw -g pane-base-index 1

# Aggressive resize(don't know what this means)
setw -g aggressive-resize on

# prevoius/next-window
bind -r M-x previous-window
bind -r M-v next-window
bind -r Tab next-window
# bind -r C-Tab previous-window
# or
# bind -r M-x select-window -t :-
# bind -r M-v select-window -t :+

# smart split window bindings: if in zoomed mode, unzoom, otherwise, split the window
# Vertial split-window from current dir
bind v if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -h -c "#{pane_current_path}"'
bind '\' if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -h -c "#{pane_current_path}"'
# split pane smart way, 8/20 numbers just make it more equal visually then just pane_width/pane_height
bind Enter if -F '#{e|>=|:#{e|*|:8,#{pane_width}},#{e|*|:20,#{pane_height}}}' \
	 "if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -h -c \"#{pane_current_path}\"'" \
 	 "if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -c \"#{pane_current_path}\"'"
# Horizontal split-window from current dir
bind h if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -c "#{pane_current_path}"'
bind - if -F '#{window_zoomed_flag}' 'resize-pane -Z' 'split-window -p 50 -c "#{pane_current_path}"'
bind c new-window
# create new window from the current dir
bind M-w new-window -c "#{pane_current_path}"

# copy/paste between system clipboard and tmux
# When in mouse mode, Shift-mouse to copy on select
set -g mouse on
# toggle mouse on/off
bind m set -g mouse
# prefix+[ first, select the content with mouse(hold) and then copy using M-w,
# paste using C-y, using prefix+[ will also solve the problem that
# selecting multiple lines with mouse selects contents cross panes.
# To copy:
#bind-key -n -t emacs-copy M-w copy-pipe "xclip -i -sel p -f | xclip -i -sel c "
bind-key -n -Tcopy-mode M-w send -X copy-pipe "xclip -i -sel p -f | xclip -i -sel c "\; display-message "Copied"
# To paste:
bind-key -n C-y run "xclip -o | tmux load-buffer - ; tmux paste-buffer"

set -g mode-keys emacs
# mouse to copy: M-s->copy-mode, Ctrl-Space->visible mode, move cursor to select text, M-w->copy the block
bind M-s copy-mode
bind-key -T copy-mode M-a send-keys -X page-up
bind-key -T copy-mode M-z send-keys -X page-down

# scrollback limit
#set-option -g history-limit 30000
set -g history-limit 30000

# Lower escape timing from 500ms to 50ms for quicker response to scroll-buffer access.
set -s escape-time 50

# Reduce the command delay time to something a bit shorter
#set -sg escape-time 1
# Extend the repeat interval for repeatable commands (e.g., resize-pane)
#set -sg repeat-time 500

# how long to show pane numbers when pressing M-c q
set -g display-panes-time 2000  # (which is 2sec)

# Automatically set window title to reflect the current program
setw -g automatic-rename on
# setw -g automatic-rename-format '{#T}'

# renumber the windows if any of them is closed
set -g renumber-windows on

# disable M-c C-z to suspend tmux
unbind-key C-z
# disable C-d to exit shell, this C-d happens when being first input to prompt
unbind-key C-d

# clear screen
#bind -n C-l send-keys 'C-l'
#unbind-key C-l
#bind -n C-l send-keys 'C-l'

# network speed in status line, ~/.local/bin/net-speed.sh
# set update frequency (default 15 seconds)
set -g status-interval 1
#set -g status-left '#(net-speed.sh wlp5s0)#[default]'
# Set status bar
set -g status-style bg=default,fg=default # default->transparent
set -g status-left "[#S_#[fg=red,bold]#I#[fg=default]_#P] "
# set -g status-right "\"#{=50:pane_current_path}\" %H:%M %a %m/%d"
# check `man shrftime` for the meaning of %... and more
# it seems the pane_current_path is not necessary
#set -g status-right "\"#{=50:pane_current_path}\" %H:%M %a %d-%b"
#set -g status-right "%H:%M %a %m/%d"
# countdown and stopwatch in status line
# in case there is already countdown or stopwatch running
set -g status-right '<#[reverse,bold]%H:%M#[default] %Y-%m-%d %A>'
# set -g status-right '#[fg=red,blink]#(~/.local/bin/ssh_ip)#[default]<#[reverse,bold]%H:%M#[default] %Y-%m-%d %A>'
# use prefix+s to toggle displaying network speed
bind s if-shell 'test $(pgrep speed_net | wc -l) -gt 0' "run 'pkill speed_net'" "split-window -h -l 25 'speed_net'"
# use prefix-p/P to toggle the stopwatch/countdown, if on, disable it, if off, enable it
bind p if-shell 'test $(pgrep timer | wc -l) -gt 0' "run 'pkill timer'" "split-window -h -l 20 'timer'"
bind P if-shell 'test $(pgrep timer | wc -l) -gt 0' "run 'pkill timer'" "split-window -h -l 20 'timer -c'"
set -g status-right-length 200
set -g status-left-length 100
#set -g status-utf8 on
# with the following line, the path in status bar and prompt is unnecessary
set -g pane-border-status top
# inactive/active border colors, set the colors the same as i3wm
set -g pane-border-style fg='#888888'
set -g pane-active-border-style fg='#2e9ef4'
# set-option -g pane-border-format "#{?pane_active,#[reverse],}#{pane_index}#[default] ""\"#(tmux display-message -p \"#{=50:pane_title}\" | sed \"s#$HOME#~#g\")\""
# default of pane-border-format
# set-option -g pane-border-format "#{?pane_active,#[reverse],}#{pane_index}#[default] ""\"#{pane_title}\""
set -g pane-border-format "#{?window_zoomed_flag,#[fg=red bold],}#[reverse]#(echo '#')#{pane_index}: #{s|$HOME|~|:pane_current_path} #(~/.local/bin/gitmux -timeout 2s #{pane_current_path})#[default]"

# use prefix+z to max/restore the current pane
bind z "resize-pane -Z"
# M-z to minimize current pane
bind M-z resize-pane -x 1 -y 1 \; last-pane
bind M-'\' resize-pane -x 50%
bind M-- resize-pane -y 50%

# Highlight active window
setw -g window-status-current-style fg=red,bright
# indentify activity in other windows
setw -g monitor-activity on
set -g visual-activity on
setw -g status-justify centre
setw -g window-status-activity-style bold,reverse,underscore
# setw -g status-justify centre
#setw -g window-status-format "[#I#([ #{window_panes} -gt 1 ] && echo :#{window_panes})]:#{pane_current_command}#F"
set -g window-status-separator '  '
set -g window-status-format '#I:#[fg=yellow][#W]#[fg=default]#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'
set -g window-status-current-format '#[bg=yellow]*#I*:[#W]#[bg=default]#(pwd="#{pane_current_path}"; echo ${pwd####*/})#F'

bind w choose-tree -F '#{?pane_format, #[fg=blue]<#{pane_tty}>#[default] #[fg=red]#{pane_current_command}#[default] "#{pane_title}",#{?window_format,#{window_name}#{window_flags} (#{window_panes} panes)#{?#{==:#{window_panes},1}, "#[fg=blue]<#{pane_tty}>#[default] #{pane_title}",},#{session_windows} windows#{?session_grouped, (group ,}#{session_group}#{?session_grouped,),}#{?session_attached, (attached),}}}'

set -g message-style fg=red,bg=default,bright
set -g display-time 3000

# scroll the screen of the other pane from the current pane
bind -r M-PageDown last-pane \; send-keys "PageDown" \; last-pane
bind -r M-PageUp last-pane \; send-keys "PageUp" \; last-pane
bind -r M-Home last-pane \; send-keys "Up" \; last-pane
bind -r M-End last-pane \; send-keys "Down" \; last-pane

# default is 5 at the end, set them to C-Up/Down/Left/Right since prefix is M-c
bind -r M-Up    resize-pane -U 2
bind -r M-Down  resize-pane -D 2
bind -r M-Left  resize-pane -L 2
bind -r M-Right resize-pane -R 2
