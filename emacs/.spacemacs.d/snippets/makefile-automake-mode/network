;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11075])
            ("ignore-errors" function (:arguments ("body")) nil [11077 11384])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11415 11563])
            ("error" function (:arguments ("args")) nil [11620 12006])
            ("user-error" function (:arguments ("format" "args")) nil [12008 12534])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12536 13448])
            ("frame-configuration-p" function (:arguments ("object")) nil [13562 13817])
            ("caar" function (:arguments ("x")) nil [13842 13913])
            ("cadr" function (:arguments ("x")) nil [13915 13986])
            ("cdar" function (:arguments ("x")) nil [13988 14059])
            ("cddr" function (:arguments ("x")) nil [14061 14132])
            ("last" function (:arguments ("list" "n")) nil [14134 14551])
            ("butlast" function (:arguments ("list" "n")) nil [14553 14781])
            ("nbutlast" function (:arguments ("list" "n")) nil [14783 15060])
            ("delete-dups" function (:arguments ("list")) nil [15062 15415])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15492 15960])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [15962 17779])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [17781 18530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18570 19370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19372 19694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19696 19964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [19966 20401])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20403 20887])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [20889 21382])
            ("remove" function (:arguments ("elt" "seq")) nil [21384 21737])
            ("remq" function (:arguments ("elt" "list")) nil [21739 22070])
            ("kbd" function (:arguments ("keys")) nil [22095 22405])
            ("put" code nil nil [22406 22424])
            ("undefined" function (:user-visible-flag t) nil [22426 22881])
            ("put" code nil nil [22976 23011])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23013 23577])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [23579 24231])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24233 26294])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26296 26976])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [26978 27448])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [27502 28102])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28104 28570])
            ("keymap-canonicalize" function (:arguments ("map")) nil [28572 30441])
            ("put" code nil nil [30443 30500])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [30502 30877])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30908 31654])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31656 32460])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32462 32658])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32660 32889])
            ("key-substitution-in-progress" variable nil nil [32945 33038])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33040 34424])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [34426 36091])
            ("global-map" variable nil nil [36240 36414])
            ("esc-map" variable nil nil [36416 36556])
            ("ctl-x-map" variable nil nil [36558 36693])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [36695 36773])
            ("defalias" code nil nil [36774 36812])
            ("define-key" code nil nil [36813 36855])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [36857 36929])
            ("defalias" code nil nil [36930 36968])
            ("define-key" code nil nil [36969 37011])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37051 37106])
            ("listify-key-sequence" function (:arguments ("key")) nil [37108 37346])
            ("eventp" function (:arguments ("obj")) nil [37348 37549])
            ("event-modifiers" function (:arguments ("event")) nil [37551 38845])
            ("event-basic-type" function (:arguments ("event")) nil [38847 39615])
            ("mouse-movement-p" function (:arguments ("object")) nil [39617 39750])
            ("mouse-event-p" function (:arguments ("object")) nil [39752 39970])
            ("event-start" function (:arguments ("event")) nil [39972 41132])
            ("event-end" function (:arguments ("event")) nil [41134 41452])
            ("event-click-count" function (:arguments ("event")) nil [41454 41664])
            ("posnp" function (:arguments ("obj")) nil [41721 42303])
            ("posn-window" function (:arguments ("position")) nil [42337 42519])
            ("posn-area" function (:arguments ("position")) nil [42521 42845])
            ("posn-point" function (:arguments ("position")) nil [42847 43313])
            ("posn-set-point" function (:arguments ("position")) nil [43315 43635])
            ("posn-x-y" function (:arguments ("position")) nil [43637 43890])
            ("declare-function" code nil nil [43892 43958])
            ("posn-col-row" function (:arguments ("position")) nil [43960 45778])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45780 46370])
            ("posn-timestamp" function (:arguments ("position")) nil [46372 46560])
            ("posn-string" function (:arguments ("position")) nil [46562 46921])
            ("posn-image" function (:arguments ("position")) nil [46923 47163])
            ("posn-object" function (:arguments ("position")) nil [47165 47534])
            ("posn-object-x-y" function (:arguments ("position")) nil [47536 47823])
            ("posn-object-width-height" function (:arguments ("position")) nil [47825 48085])
            ("define-obsolete-function-alias" code nil nil [48128 48193])
            ("define-obsolete-function-alias" code nil nil [48194 48267])
            ("define-obsolete-function-alias" code nil nil [48268 48332])
            ("define-obsolete-function-alias" code nil nil [48333 48404])
            ("define-obsolete-function-alias" code nil nil [48405 48478])
            ("define-obsolete-function-alias" code nil nil [48479 48551])
            ("make-obsolete" code nil nil [48553 48619])
            ("make-obsolete" code nil nil [48620 48669])
            ("insert-string" function (:arguments ("args")) nil [48671 48989])
            ("makehash" function (:arguments ("test")) nil [48991 49111])
            ("log10" function (:arguments ("x")) nil [49113 49222])
            ("defalias" code nil nil [49270 49304])
            ("make-obsolete" code nil nil [49305 49359])
            ("defalias" code nil nil [49360 49396])
            ("make-obsolete" code nil nil [49397 49453])
            ("make-obsolete" code nil nil [49454 49561])
            ("set-advertised-calling-convention" code nil nil [49562 49663])
            ("set-advertised-calling-convention" code nil nil [49664 49732])
            ("set-advertised-calling-convention" code nil nil [49733 49818])
            ("set-advertised-calling-convention" code nil nil [49819 49888])
            ("set-advertised-calling-convention" code nil nil [49889 49958])
            ("make-obsolete-variable" code nil nil [50363 50438])
            ("make-obsolete-variable" code nil nil [50439 50518])
            ("make-obsolete-variable" code nil nil [50519 50586])
            ("make-obsolete-variable" code nil nil [50587 50652])
            ("make-obsolete-variable" code nil nil [50653 50714])
            ("make-obsolete-variable" code nil nil [50715 50786])
            ("make-obsolete-variable" code nil nil [50787 50852])
            ("make-obsolete-variable" code nil nil [50853 50914])
            ("make-obsolete-variable" code nil nil [50915 50990])
            ("make-obsolete-variable" code nil nil [50991 51068])
            ("make-obsolete-variable" code nil nil [51069 51148])
            ("make-obsolete-variable" code nil nil [51149 51226])
            ("make-obsolete-variable" code nil nil [51227 51306])
            ("make-obsolete-variable" code nil nil [51307 51396])
            ("make-obsolete-variable" code nil nil [51397 51472])
            ("make-obsolete-variable" code nil nil [51473 51554])
            ("make-obsolete-variable" code nil nil [51555 51638])
            ("make-obsolete-variable" code nil nil [51639 51734])
            ("make-obsolete-variable" code nil nil [51735 51822])
            ("make-obsolete-variable" code nil nil [51823 51904])
            ("make-obsolete-variable" code nil nil [51905 51992])
            ("make-obsolete-variable" code nil nil [51993 52084])
            ("make-obsolete-variable" code nil nil [52085 52150])
            ("make-obsolete-variable" code nil nil [52151 52216])
            ("make-obsolete-variable" code nil nil [52217 52320])
            ("make-obsolete-variable" code nil nil [52321 52414])
            ("make-obsolete-variable" code nil nil [52415 52478])
            ("make-obsolete-variable" code nil nil [52479 52619])
            ("make-obsolete-variable" code nil nil [52621 52685])
            ("make-obsolete-variable" code nil nil [52686 52769])
            ("make-obsolete-variable" code nil nil [52770 52842])
            ("make-obsolete-variable" code nil nil [52843 52919])
            ("make-obsolete-variable" code nil nil [52920 52977])
            ("make-obsolete" code nil nil [52978 53034])
            ("make-obsolete" code nil nil [53035 53095])
            ("make-obsolete" code nil nil [53097 53151])
            ("make-obsolete" code nil nil [53152 53208])
            ("define-obsolete-variable-alias" code nil nil [53247 53334])
            ("define-obsolete-variable-alias" code nil nil [53336 53429])
            ("define-obsolete-variable-alias" code nil nil [53430 53523])
            ("make-obsolete-variable" code nil nil [53769 53833])
            ("defvaralias" code nil nil [53835 53892])
            ("defalias" code nil nil [53965 54009])
            ("defalias" code nil nil [54010 54054])
            ("defalias" code nil nil [54055 54088])
            ("defalias" code nil nil [54089 54122])
            ("defalias" code nil nil [54123 54158])
            ("defalias" code nil nil [54159 54185])
            ("defalias" code nil nil [54186 54212])
            ("defalias" code nil nil [54213 54235])
            ("defalias" code nil nil [54261 54300])
            ("defalias" code nil nil [54301 54355])
            ("defalias" code nil nil [54356 54426])
            ("defalias" code nil nil [54427 54499])
            ("defalias" code nil nil [54500 54543])
            ("defalias" code nil nil [54544 54588])
            ("defalias" code nil nil [54589 54622])
            ("defalias" code nil nil [54623 54656])
            ("defalias" code nil nil [54688 54731])
            ("defalias" code nil nil [54732 54781])
            ("defalias" code nil nil [54783 54836])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54875 57004])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [57006 58674])
            ("letrec" function (:arguments ("binders" "body")) nil [58676 59305])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [59307 62360])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [62362 65709])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65712 67031])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [67033 68245])
            ("delay-mode-hooks" variable nil nil [68267 68361])
            ("delayed-mode-hooks" variable nil nil [68362 68443])
            ("make-variable-buffer-local" code nil nil [68444 68492])
            ("put" code nil nil [68493 68535])
            ("change-major-mode-after-body-hook" variable nil nil [68537 68651])
            ("after-change-major-mode-hook" variable nil nil [68653 68755])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68757 69640])
            ("delay-mode-hooks" function (:arguments ("body")) nil [69642 70043])
            ("derived-mode-p" function (:arguments ("modes")) nil [70104 70417])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [70608 70801])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70803 73488])
            ("autoloadp" function (:arguments ("object")) nil [73510 73612])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [74096 75303])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [75305 76711])
            ("process-lines" function (:arguments ("program" "args")) nil [76736 77341])
            ("process-live-p" function (:arguments ("process")) nil [77343 77656])
            ("make-obsolete" code nil nil [77676 77801])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77802 78146])
            ("process-kill-buffer-query-function" function nil nil [78148 78567])
            ("add-hook" code nil nil [78569 78644])
            ("process-get" function (:arguments ("process" "propname")) nil [78675 78887])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78889 79128])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79168 79218])
            ("read-key-delay" variable (:default-value 0.01) nil [79220 79248])
            ("read-key" function (:arguments ("prompt")) nil [79297 82003])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [82005 82342])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [82344 85116])
            ("read-number" function (:arguments ("prompt" "default")) nil [85118 86188])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [86190 87929])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87931 90275])
            ("declare-function" code nil nil [90315 90394])
            ("y-or-n-p" function (:arguments ("prompt")) nil [90396 93874])
            ("atomic-change-group" function (:arguments ("body")) nil [93905 95111])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95113 96589])
            ("activate-change-group" function (:arguments ("handle")) nil [96591 96829])
            ("accept-change-group" function (:arguments ("handle")) nil [96831 97122])
            ("cancel-change-group" function (:arguments ("handle")) nil [97124 98295])
            ("define-obsolete-function-alias" code nil nil [98353 98435])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [98437 99937])
            ("copy-overlay" function (:arguments ("o")) nil [99966 100540])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [100542 101550])
            ("suspend-hook" variable nil nil [101572 101656])
            ("suspend-resume-hook" variable nil nil [101658 101756])
            ("temp-buffer-show-hook" variable nil nil [101758 101974])
            ("temp-buffer-setup-hook" variable nil nil [101976 102207])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [102209 102584])
            ("buffer-narrowed-p" function nil nil [102617 102751])
            ("find-tag-default-bounds" function nil nil [102753 103756])
            ("find-tag-default" function nil nil [103758 104024])
            ("find-tag-default-as-regexp" function nil nil [104026 104461])
            ("find-tag-default-as-symbol-regexp" function nil nil [104463 105022])
            ("play-sound" function (:arguments ("sound")) nil [105024 105843])
            ("declare-function" code nil nil [105845 105901])
            ("shell-quote-argument" function (:arguments ("argument")) nil [105903 108048])
            ("string-or-null-p" function (:arguments ("object")) nil [108050 108187])
            ("booleanp" function (:arguments ("object")) nil [108189 108347])
            ("special-form-p" function (:arguments ("object")) nil [108349 108594])
            ("macrop" function (:arguments ("object")) nil [108596 108828])
            ("field-at-pos" function (:arguments ("pos")) nil [108830 109100])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109102 109465])
            ("defalias" code nil nil [109467 109820])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109822 110632])
            ("yank-handled-properties" variable nil nil [110739 110771])
            ("yank-excluded-properties" variable nil nil [110772 110805])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110807 111596])
            ("yank-undo-function" variable nil nil [111598 111625])
            ("insert-for-yank" function (:arguments ("string")) nil [111627 111986])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111988 114338])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114340 114825])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114827 115513])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [115515 115827])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115966 116404])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116442 117426])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [117428 117920])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117922 119563])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [119565 120114])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [120169 120557])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [120559 121079])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [121081 121641])
            ("with-selected-window" function (:arguments ("window" "body")) nil [121643 122781])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [122783 123524])
            ("save-window-excursion" function (:arguments ("body")) nil [123526 124345])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [124347 125742])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [125795 128248])
            ("with-temp-file" function (:arguments ("file" "body")) nil [128250 128945])
            ("with-temp-message" function (:arguments ("message" "body")) nil [128947 129874])
            ("with-temp-buffer" function (:arguments ("body")) nil [129876 130435])
            ("with-silent-modifications" function (:arguments ("body")) nil [130437 131635])
            ("with-output-to-string" function (:arguments ("body")) nil [131637 132082])
            ("with-local-quit" function (:arguments ("body")) nil [132084 132839])
            ("while-no-input" function (:arguments ("body")) nil [132841 133341])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [133343 133896])
            ("define-obsolete-function-alias" code nil nil [133898 133993])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133995 134932])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134934 135629])
            ("with-case-table" function (:arguments ("table" "body")) nil [135631 136152])
            ("save-match-data-internal" variable nil nil [136185 136218])
            ("save-match-data" function (:arguments ("body")) nil [136476 137156])
            ("match-string" function (:arguments ("num" "string")) nil [137158 137803])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [137805 138529])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [138532 139181])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [139184 140369])
            ("looking-at-p" function (:arguments ("regexp")) nil [140371 140549])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [140551 140771])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [140773 142683])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [142705 143058])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [143320 146436])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [146438 146999])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [147001 147637])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [147671 148075])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [148077 150656])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [150659 150958])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [150960 151369])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [151371 152154])
            ("load-history-regexp" function (:arguments ("file")) nil [152194 152830])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [152832 153268])
            ("put" code nil nil [153270 153316])
            ("eval-after-load" function (:arguments ("file" "form")) nil [153317 157198])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [157200 157480])
            ("after-load-functions" variable nil nil [157482 157655])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [157657 159196])
            ("eval-next-after-load" function (:arguments ("file")) nil [159198 159498])
            ("display-delayed-warnings" function nil nil [159502 159769])
            ("collapse-delayed-warnings" function nil nil [159771 160450])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [160580 160920])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [160922 161177])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [161206 161549])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [161551 161775])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [161799 162435])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [162437 162757])
            ("syntax-after" function (:arguments ("pos")) nil [162759 163132])
            ("syntax-class" function (:arguments ("syntax")) nil [163134 163486])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163533 164116])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164131 164680])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164701 165183])
            ("text-clone--maintaining" variable nil nil [165205 165241])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [165243 167309])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [167311 169559])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [169667 171245])
            ("called-interactively-p-functions" variable nil nil [171248 171665])
            ("internal--call-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote call-interactively)))
                nil [171667 171744])
            ("called-interactively-p" function (:arguments ("kind")) nil [171746 175843])
            ("interactive-p" function nil nil [175845 176855])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [176857 177202])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [177204 177512])
            ("define-obsolete-function-alias" code nil nil [177514 177601])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [177603 179906])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [180489 181256])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [181258 183103])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [183105 183604])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [183606 183723])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [183725 185431])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [185433 185588])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [185590 186694])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [186731 186890])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [186893 188388])
            ("version-to-list" function (:arguments ("ver")) nil [188391 190795])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [190798 191629])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [191632 192431])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [192434 193219])
            ("version-list-not-zero" function (:arguments ("lst")) nil [193221 193531])
            ("version<" function (:arguments ("v1" "v2")) nil [193534 194038])
            ("version<=" function (:arguments ("v1" "v2")) nil [194040 194558])
            ("version=" function (:arguments ("v1" "v2")) nil [194560 195054])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [195068 195130])
            ("when" code nil nil [195292 195417])
            ("unmsys--file-name" function (:arguments ("file")) nil [195550 196037]))          
      :file "subr.el.gz"
      :pointmax 196062
      :fsize 58331
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tabify.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "tabify.el.gz"
      :pointmax 4216
      :fsize 1619
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2498])
            ("make-backup-files" variable (:default-value t) nil [2500 3423])
            ("backup-inhibited" variable nil nil [3524 3716])
            ("put" code nil nil [3717 3759])
            ("backup-by-copying" variable nil nil [3761 3939])
            ("backup-by-copying-when-linked" variable nil nil [3941 4234])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4236 4724])
            ("put" code nil nil [4725 4782])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4784 5407])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5409 5628])
            ("buffer-offer-save" variable nil nil [5630 5849])
            ("make-variable-buffer-local" code nil nil [5850 5897])
            ("put" code nil nil [5898 5941])
            ("find-file-existing-other-name" variable (:default-value t) nil [5943 6236])
            ("find-file-visit-truename" variable nil nil [6238 6610])
            ("put" code nil nil [6611 6673])
            ("revert-without-query" variable nil nil [6675 7040])
            ("buffer-file-number" variable nil nil [7042 7311])
            ("make-variable-buffer-local" code nil nil [7312 7360])
            ("put" code nil nil [7361 7405])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7407 7552])
            ("buffer-file-read-only" variable nil nil [7554 7644])
            ("make-variable-buffer-local" code nil nil [7645 7696])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7698 8142])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8210 8279])
            ("declare-function" code nil nil [8281 8331])
            ("declare-function" code nil nil [8332 8381])
            ("declare-function" code nil nil [8382 8468])
            ("declare-function" code nil nil [8469 8536])
            ("declare-function" code nil nil [8537 8609])
            ("declare-function" code nil nil [8610 8666])
            ("declare-function" code nil nil [8667 8726])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8728 9401])
            ("file-precious-flag" variable nil nil [9403 10243])
            ("break-hardlink-on-save" variable nil nil [10245 11000])
            ("version-control" variable nil nil [11002 11372])
            ("put" code nil nil [11373 11469])
            ("dired-kept-versions" variable (:default-value 2) nil [11471 11611])
            ("delete-old-versions" variable nil nil [11613 11879])
            ("kept-old-versions" variable (:default-value 2) nil [11881 12020])
            ("put" code nil nil [12021 12076])
            ("kept-new-versions" variable (:default-value 2) nil [12078 12255])
            ("put" code nil nil [12256 12311])
            ("require-final-newline" variable nil nil [12313 13084])
            ("mode-require-final-newline" variable (:default-value t) nil [13086 14221])
            ("auto-save-default" variable (:default-value t) nil [14223 14365])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14367 15795])
            ("save-abbrevs" variable (:default-value t) nil [15797 16008])
            ("find-file-run-dired" variable (:default-value t) nil [16010 16207])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16209 16537])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16598 16926])
            ("define-obsolete-variable-alias" code nil nil [17034 17135])
            ("find-file-not-found-functions" variable nil nil [17136 17437])
            ("define-obsolete-variable-alias" code nil nil [17535 17607])
            ("find-file-hook" variable nil nil [17608 17885])
            ("define-obsolete-variable-alias" code nil nil [17887 17966])
            ("write-file-functions" variable nil nil [17967 18748])
            ("put" code nil nil [18749 18795])
            ("local-write-file-hooks" variable nil nil [18797 18832])
            ("make-variable-buffer-local" code nil nil [18833 18885])
            ("put" code nil nil [18886 18934])
            ("make-obsolete-variable" code nil nil [18935 19012])
            ("define-obsolete-variable-alias" code nil nil [19014 19105])
            ("write-contents-functions" variable nil nil [19106 19862])
            ("make-variable-buffer-local" code nil nil [19863 19917])
            ("enable-local-variables" variable (:default-value t) nil [19919 21171])
            ("enable-dir-local-variables" variable (:default-value t) nil [21173 21394])
            ("local-enable-local-variables" variable (:default-value t) nil [22757 23142])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23144 23535])
            ("or" code nil nil [23600 23663])
            ("or" code nil nil [23664 23731])
            ("or" code nil nil [23732 23799])
            ("view-read-only" variable nil nil [23801 24151])
            ("file-name-history" variable nil nil [24153 24336])
            ("put" code nil nil [24339 24393])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24394 25000])
            ("declare-function" code nil nil [25002 25074])
            ("declare-function" code nil nil [25075 25147])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25149 26402])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26404 27525])
            ("pwd" function (:user-visible-flag t) nil [27529 27648])
            ("cd-path" variable nil nil [27650 27780])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27782 28401])
            ("cd-absolute" function (:arguments ("dir")) nil [28403 29308])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29310 31200])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [31202 31529])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31531 32910])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32912 35874])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35876 36284])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [36286 36890])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38443 40632])
            ("user-emacs-directory-warning" variable (:default-value t) nil [40634 40836])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [40838 42652])
            ("executable-find" function (:arguments ("command")) nil [42655 42963])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [42965 43562])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [43564 45318])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [45617 46336])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [46338 47563])
            ("file-local-copy" function (:arguments ("file")) nil [47565 47954])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [47956 52847])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [52849 54252])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [54384 55501])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [55503 57094])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [57096 59333])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [59336 59949])
            ("confirm-nonexistent-file-or-buffer" function nil nil [59951 60392])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [60394 61220])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [61222 61336])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61338 62583])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62585 63515])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63517 64441])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [64443 64878])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [64880 65307])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65309 65690])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65692 66143])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66145 66591])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66593 67542])
            ("kill-buffer-hook" variable nil nil [67603 67843])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67845 70814])
            ("create-file-buffer" function (:arguments ("filename")) nil [70939 71619])
            ("generate-new-buffer" function (:arguments ("name")) nil [71621 71826])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [71828 71980])
            ("make-obsolete-variable" code nil nil [71981 72058])
            ("abbreviated-home-dir" variable nil nil [72060 72167])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [72169 74520])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [74522 76449])
            ("find-file-wildcards" variable (:default-value t) nil [76452 76699])
            ("find-file-suppress-same-file-warnings" variable nil nil [76701 77027])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [77029 77308])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [77310 77797])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [77799 84785])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [84787 87281])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [87284 88236])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [88238 88935])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [88937 89358])
            ("put" code nil nil [89359 89437])
            ("find-file-literally" variable nil nil [89439 89646])
            ("put" code nil nil [89647 89692])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [89694 90788])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [90791 94131])
            ("report-errors" function (:arguments ("format" "body")) nil [94133 94613])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [94615 96224])
            ("auto-mode-case-fold" variable (:default-value t) nil [96226 96664])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [96666 108054])
            ("put" code nil nil [108055 108101])
            ("conf-mode-maybe" function nil nil [108103 108353])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [108355 109729])
            ("define-obsolete-variable-alias" code nil nil [109731 109844])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [110043 110903])
            ("define-obsolete-variable-alias" code nil nil [110905 111015])
            ("inhibit-local-variables-suffixes" variable nil nil [111017 111293])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [111365 111471])
            ("inhibit-local-variables-p" function nil nil [111473 112283])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [112285 112803])
            ("magic-mode-alist" variable nil nil [112805 113339])
            ("put" code nil nil [113340 113387])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [113389 114930])
            ("put" code nil nil [114931 114987])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [114989 115131])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [115133 121561])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [121814 122221])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [122223 122489])
            ("set-auto-mode-1" function nil nil [122491 123996])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [124034 124240])
            ("put" code nil nil [124241 124295])
            ("hack-local-variables-hook" variable nil nil [124297 124530])
            ("safe-local-variable-values" variable nil nil [124532 124792])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [124794 125456])
            ("mapc" code nil nil [125484 126101])
            ("dolist" code nil nil [126743 127431])
            ("put" code nil nil [127433 127547])
            ("put" code nil nil [127549 127595])
            ("file-local-variables-alist" variable nil nil [127597 127952])
            ("make-variable-buffer-local" code nil nil [127953 128009])
            ("put" code nil nil [128010 128062])
            ("dir-local-variables-alist" variable nil nil [128064 128446])
            ("make-variable-buffer-local" code nil nil [128447 128502])
            ("before-hack-local-variables-hook" variable nil nil [128504 128922])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [128924 131794])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [131796 131883])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [131885 134339])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [134341 136827])
            ("hack-local-variables--warned-lexical" variable nil nil [136888 136937])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [136939 142855])
            ("hack-local-variables-apply" function nil nil [142857 143658])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [143660 144348])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [144350 145253])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [145255 145359])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [145361 145549])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [145551 147371])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [147373 147750])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [147752 148665])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [148731 148846])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [148848 149424])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [149426 149559])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [149561 150206])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [150208 152219])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [152221 152985])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [152987 154450])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [154452 154634])
            ("dir-locals-find-file" function (:arguments ("file")) nil [154636 157700])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [157702 158545])
            ("enable-remote-dir-locals" variable nil nil [158547 158713])
            ("hack-dir-local-variables--warned-coding" variable nil nil [158715 158767])
            ("hack-dir-local-variables" function nil nil [158769 160427])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [160429 160735])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [160739 161176])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [161178 166155])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [166157 168182])
            ("file-extended-attributes" function (:arguments ("filename")) nil [168185 168499])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [168501 168930])
            ("backup-buffer" function nil nil [168933 172958])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [172960 174230])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [174232 174525])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [174527 175226])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [175228 177095])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [177097 177792])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [177794 178611])
            ("file-name-base" function (:arguments ("filename")) nil [178613 178857])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [178859 179607])
            ("backup-directory-alist" variable nil nil [179609 180646])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [180648 181940])
            ("make-backup-file-name" function (:arguments ("file")) nil [181942 182255])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [182257 183007])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [183009 185116])
            ("backup-file-name-p" function (:arguments ("file")) nil [185118 185379])
            ("backup-extract-version-start" variable nil nil [185381 185418])
            ("backup-extract-version" function (:arguments ("fn")) nil [185593 186045])
            ("find-backup-file-name" function (:arguments ("fn")) nil [186047 188186])
            ("file-nlinks" function (:arguments ("filename")) nil [188188 188305])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [190281 193182])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193185 195587])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [195589 196160])
            ("auto-save-hook" variable nil nil [196162 196234])
            ("before-save-hook" variable nil nil [196236 196406])
            ("after-save-hook" variable nil nil [196408 196599])
            ("save-buffer-coding-system" variable nil nil [196601 196973])
            ("make-variable-buffer-local" code nil nil [196975 197030])
            ("put" code nil nil [197031 197082])
            ("basic-save-buffer" function (:user-visible-flag t) nil [197084 201251])
            ("basic-save-buffer-1" function nil nil [201533 201836])
            ("basic-save-buffer-2" function nil nil [201925 206549])
            ("declare-function" code nil nil [206551 206637])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [206639 207805])
            ("put" code nil nil [207806 207867])
            ("buffer-save-without-query" variable nil nil [207869 207985])
            ("make-variable-buffer-local" code nil nil [207986 208041])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [208043 211501])
            ("clear-visited-file-modtime" function nil nil [211504 211695])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211697 212148])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [212150 212436])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [212438 212834])
            ("put" code nil nil [212835 212893])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [212895 213506])
            ("file-newest-backup" function (:arguments ("filename")) nil [213508 214431])
            ("rename-uniquely" function (:user-visible-flag t) nil [214433 215449])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [215451 217023])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [217025 217171])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [217173 219634])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [219636 220196])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [220198 221136])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [221138 224325])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [224373 224935])
            ("put" code nil nil [224939 224987])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [224988 225440])
            ("put" code nil nil [225442 225511])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [225512 225984])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [225986 226498])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [226500 227415])
            ("before-revert-hook" variable nil nil [227417 227620])
            ("after-revert-hook" variable nil nil [227622 227977])
            ("revert-buffer-in-progress-p" variable nil nil [227979 228093])
            ("revert-buffer-internal-hook" variable nil nil [228095 228131])
            ("revert-buffer-preserve-modes" variable nil nil [228321 228358])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [228360 230572])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [230574 233929])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [233931 236131])
            ("recover-this-file" function (:user-visible-flag t) nil [236133 236284])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [236286 238369])
            ("recover-session" function (:user-visible-flag t) nil [238371 239964])
            ("recover-session-finish" function (:user-visible-flag t) nil [239966 242369])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [242371 242622])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [242624 243227])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [243229 243757])
            ("rename-auto-save-file" function nil nil [243761 244325])
            ("make-auto-save-file-name" function nil nil [244327 248556])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [248558 248786])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [248789 250972])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [250975 251136])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [251138 251304])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [251306 253027])
            ("files" package nil nil [253101 253137])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [253139 254485])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [254487 256319])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [256322 256449])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [256451 256988])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [256990 257177])
            ("get-free-disk-space" function (:arguments ("dir")) nil [257179 258930])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [259002 261391])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [261393 261438])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [262512 272643])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [272645 273211])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [273213 273697])
            ("kill-emacs-query-functions" variable nil nil [273699 274005])
            ("confirm-kill-emacs" variable nil nil [274007 274447])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274449 276096])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [276098 276586])
            ("setq" code nil nil [276696 276817])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [277018 279651])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [279694 280161])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [280163 281012])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [281014 282168])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [282170 283237])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [283239 284304])
            ("define-obsolete-variable-alias" code nil nil [284306 284388])
            ("trash-directory" variable nil nil [284412 284815])
            ("trash--hexify-table" variable nil nil [284817 284845])
            ("declare-function" code nil nil [284847 284913])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [284915 290335])
            ("define-key" code nil nil [290339 290379])
            ("define-key" code nil nil [290380 290430])
            ("define-key" code nil nil [290431 290481])
            ("define-key" code nil nil [290482 290524])
            ("define-key" code nil nil [290525 290570])
            ("define-key" code nil nil [290571 290612])
            ("define-key" code nil nil [290613 290652])
            ("define-key" code nil nil [290653 290691])
            ("define-key" code nil nil [290692 290737])
            ("define-key" code nil nil [290738 290795])
            ("define-key" code nil nil [290796 290841])
            ("define-key" code nil nil [290843 290895])
            ("define-key" code nil nil [290896 290958])
            ("define-key" code nil nil [290959 291014])
            ("define-key" code nil nil [291015 291074])
            ("define-key" code nil nil [291075 291122])
            ("define-key" code nil nil [291124 291182])
            ("define-key" code nil nil [291183 291234])
            ("define-key" code nil nil [291235 291289])
            ("define-key" code nil nil [291290 291351])
            ("define-key" code nil nil [291352 291411]))          
      :file "files.el.gz"
      :pointmax 291436
      :fsize 84308
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dired.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1232 1316])
            ("dired" customgroup (:user-visible-flag t) nil [1346 1445])
            ("dired-mark" customgroup (:user-visible-flag t) nil [1447 1536])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [1554 2078])
            ("dired-subdir-switches" variable nil nil [2080 2354])
            ("dired-chown-program" variable (:default-value (purecopy (cond ((executable-find "chown") "chown") ((file-executable-p "/usr/sbin/chown") "/usr/sbin/chown") ((file-executable-p "/etc/chown") "/etc/chown") (t "chown")))) nil [2356 2690])
            ("dired-use-ls-dired" variable (:default-value (quote unspecified)) nil [2692 3811])
            ("dired-chmod-program" variable (:default-value "chmod") nil [3813 3927])
            ("dired-touch-program" variable (:default-value "touch") nil [3929 4045])
            ("dired-ls-F-marks-symlinks" variable nil nil [4047 4730])
            ("dired-trivial-filenames" variable (:default-value (purecopy "^\\.\\.?$\\|^#")) nil [4732 5060])
            ("dired-keep-marker-rename" variable (:default-value t) nil [5062 5663])
            ("dired-keep-marker-copy" variable (:default-value 67) nil [5665 5984])
            ("dired-keep-marker-hardlink" variable (:default-value 72) nil [5986 6301])
            ("dired-keep-marker-symlink" variable (:default-value 89) nil [6303 6621])
            ("dired-dwim-target" variable nil nil [6623 6961])
            ("dired-copy-preserve-time" variable (:default-value t) nil [6963 7141])
            ("defvaralias" code nil nil [7262 7331])
            ("defvaralias" code nil nil [7332 7395])
            ("dired-load-hook" variable nil nil [7417 7568])
            ("dired-mode-hook" variable nil nil [7570 7672])
            ("dired-before-readin-hook" variable nil nil [7674 7821])
            ("dired-after-readin-hook" variable nil nil [7823 8060])
            ("dired-initial-position-hook" variable nil nil [8199 8387])
            ("dired-dnd-protocol-alist" variable (:default-value (quote (("^file:///" . dired-dnd-handle-local-file) ("^file://" . dired-dnd-handle-file) ("^file:" . dired-dnd-handle-local-file)))) nil [8389 8913])
            ("dired-hide-details-hide-symlink-targets" variable (:default-value t) nil [8915 9092])
            ("dired-hide-details-hide-information-lines" variable (:default-value t) nil [9094 9281])
            ("dired-marker-char" variable (:default-value 42) nil [9306 9841])
            ("dired-del-marker" variable (:default-value 68) nil [9843 9918])
            ("dired-shrink-to-fit" variable (:default-value t) nil [9920 10111])
            ("make-obsolete-variable" code nil nil [10112 10362])
            ("dired-file-version-alist" variable nil nil [10364 10397])
            ("dired-directory" variable nil nil [10414 10717])
            ("dired-safe-switches-p" function (:arguments ("switches")) nil [10764 11041])
            ("dired-actual-switches" variable nil nil [11043 11152])
            ("put" code nil nil [11154 11226])
            ("dired-re-inode-size" variable (:default-value "[0-9 	]*") nil [11228 11343])
            ("dired-re-mark" variable (:default-value "^[^ 
]") nil [11542 11574])
            ("dired-re-maybe-mark" variable (:default-value "^. ") nil [11663 11697])
            ("dired-re-dir" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "d[^:]")) nil [11837 11915])
            ("dired-re-sym" variable (:default-value (concat dired-re-maybe-mark dired-re-inode-size "l[^:]")) nil [11916 11994])
            ("dired-re-exe" variable (:default-value (mapconcat (function (lambda (x) (concat dired-re-maybe-mark dired-re-inode-size x))) (quote ("-[-r][-w][xs][-r][-w].[-r][-w]." "-[-r][-w].[-r][-w][xs][-r][-w]." "-[-r][-w].[-r][-w].[-r][-w][xst]")) "\\|")) nil [11995 12305])
            ("dired-re-perms" variable (:default-value "[-bcdlps][-r][-w].[-r][-w].[-r][-w].") nil [12306 12368])
            ("dired-re-dot" variable (:default-value "^.* \\.\\.?/?$") nil [12369 12407])
            ("dired-subdir-alist" variable nil nil [12471 12742])
            ("defvar-local" code nil nil [12744 12903])
            ("defvaralias" code nil nil [12905 12993])
            ("dired-subdir-regexp" variable (:default-value "^. \\([^
]+\\)\\(:\\)[
]") nil [12995 13341])
            ("dired-faces" customgroup (:user-visible-flag t) nil [13343 13426])
            ("dired-header" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [13428 13567])
            ("dired-header-face" variable (:default-value (quote dired-header)) nil [13568 13650])
            ("dired-mark" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face))))
                :type "face")
                nil [13652 13787])
            ("dired-mark-face" variable (:default-value (quote dired-mark)) nil [13788 13860])
            ("dired-marked" variable
               (:default-value (quote ((t (:inherit warning))))
                :type "face")
                nil [13862 13984])
            ("dired-marked-face" variable (:default-value (quote dired-marked)) nil [13985 14062])
            ("dired-flagged" variable
               (:default-value (quote ((t (:inherit error))))
                :type "face")
                nil [14064 14199])
            ("dired-flagged-face" variable (:default-value (quote dired-flagged)) nil [14200 14293])
            ("dired-warning" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [14295 14592])
            ("dired-warning-face" variable (:default-value (quote dired-warning)) nil [14593 14704])
            ("dired-perm-write" variable
               (:default-value (quote ((((type w32 pc)) :inherit default) (t (:inherit font-lock-comment-delimiter-face))))
                :type "face")
                nil [14706 15102])
            ("dired-perm-write-face" variable (:default-value (quote dired-perm-write)) nil [15103 15222])
            ("dired-directory" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [15224 15372])
            ("dired-directory-face" variable (:default-value (quote dired-directory)) nil [15373 15458])
            ("dired-symlink" variable
               (:default-value (quote ((t (:inherit font-lock-keyword-face))))
                :type "face")
                nil [15460 15600])
            ("dired-symlink-face" variable (:default-value (quote dired-symlink)) nil [15601 15682])
            ("dired-ignored" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15684 15845])
            ("dired-ignored-face" variable (:default-value (quote dired-ignored)) nil [15846 15964])
            ("dired-font-lock-keywords" variable (:default-value (list (list dired-re-mark (quote (0 dired-mark-face))) (list (concat "^[" (char-to-string dired-marker-char) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-marked-face)))) (list (concat "^[" (char-to-string dired-del-marker) "]") (quote (".+" (dired-move-to-filename) nil (0 dired-flagged-face)))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d]....\\(w\\)....") (quote (1 dired-perm-write-face))) (list (concat dired-re-maybe-mark dired-re-inode-size "[-d].......\\(w\\).") (quote (1 dired-perm-write-face))) (list dired-re-dir (quote (".+" (dired-move-to-filename) nil (0 dired-directory-face)))) (list dired-re-sym (quote (".+" (dired-move-to-filename) nil (0 dired-symlink-face)))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$") (quote (".+" (dired-move-to-filename) nil (0 dired-ignored-face))))) (quote (eval list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)[*=|]$") (quote (".+" (progn (end-of-line) (unless (get-text-property (1- (point)) (quote mouse-face)) (dired-move-to-filename))) nil (0 dired-ignored-face))))) (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$") (quote (".+" (dired-move-to-filename) nil (0 (quote default))))) (list dired-subdir-regexp (quote (1 dired-header-face))))) nil [15966 19356])
            ("dnd-protocol-alist" variable nil nil [19358 19385])
            ("dired-mark-if" function (:arguments ("predicate" "msg")) nil [19461 20766])
            ("dired-map-over-marks" function (:arguments ("body" "arg" "show-progress" "distinguish-one-marked")) nil [20768 23579])
            ("dired-get-marked-files" function (:arguments ("localp" "arg" "filter" "distinguish-one-marked")) nil [23581 25015])
            ("dired-read-dir-and-switches" function (:arguments ("str")) nil [25040 25811])
            ("dired-file-name-at-point" function nil nil [28600 29064])
            ("dired" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [29130 30092])
            ("dired-other-window" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [30173 30438])
            ("dired-other-frame" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [30518 30772])
            ("dired-noselect" function (:arguments ("dir-or-list" "switches")) nil [30789 32068])
            ("dired-directory-changed-p" function (:arguments ("dirname")) nil [32275 32511])
            ("dired-buffer-stale-p" function (:arguments ("noconfirm")) nil [32513 33112])
            ("dired-auto-revert-buffer" variable nil nil [33114 33879])
            ("dired-internal-noselect" function (:arguments ("dir-or-list" "switches" "mode")) nil [33881 36697])
            ("dired-buffers" variable nil nil [36699 36946])
            ("dired-find-subdir" variable nil nil [36948 36974])
            ("dired-find-buffer-nocreate" function (:arguments ("dirname" "mode")) nil [37036 38796])
            ("dired-readin" function nil nil [38831 40799])
            ("dired-readin-insert" function nil nil [40833 41704])
            ("dired-align-file" function (:arguments ("beg" "end")) nil [41706 46293])
            ("ls-lisp-use-insert-directory-program" variable nil nil [46296 46341])
            ("dired-check-switches" function (:arguments ("switches" "short" "long")) nil [46343 46653])
            ("dired-switches-escape-p" function (:arguments ("switches")) nil [46655 46884])
            ("dired-switches-recursive-p" function (:arguments ("switches")) nil [46886 47051])
            ("dired-insert-directory" function (:arguments ("dir" "switches" "file-list" "wildcard" "hdr")) nil [47053 51392])
            ("dired-insert-set-properties" function (:arguments ("beg" "end")) nil [51394 52340])
            ("dired-revert" function (:arguments ("_arg" "_noconfirm")) nil [52372 54335])
            ("dired-save-positions" function nil nil [54424 55114])
            ("dired-restore-positions" function (:arguments ("positions")) nil [55116 55816])
            ("dired-remember-marks" function (:arguments ("beg" "end")) nil [55818 56298])
            ("dired-mark-remembered" function (:arguments ("alist")) nil [56300 56673])
            ("dired-remember-hidden" function nil nil [56675 57034])
            ("dired-insert-old-subdirs" function (:arguments ("old-subdir-alist")) nil [57036 57482])
            ("dired-uncache" function (:arguments ("dir")) nil [57484 57681])
            ("dired-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote dired-mouse-find-file-other-window)) (define-key map [follow-link] (quote mouse-face)) (define-key map "#" (quote dired-flag-auto-save-files)) (define-key map "." (quote dired-clean-directory)) (define-key map "~" (quote dired-flag-backup-files)) (define-key map "A" (quote dired-do-search)) (define-key map "C" (quote dired-do-copy)) (define-key map "B" (quote dired-do-byte-compile)) (define-key map "D" (quote dired-do-delete)) (define-key map "G" (quote dired-do-chgrp)) (define-key map "H" (quote dired-do-hardlink)) (define-key map "L" (quote dired-do-load)) (define-key map "M" (quote dired-do-chmod)) (define-key map "O" (quote dired-do-chown)) (define-key map "P" (quote dired-do-print)) (define-key map "Q" (quote dired-do-query-replace-regexp)) (define-key map "R" (quote dired-do-rename)) (define-key map "S" (quote dired-do-symlink)) (define-key map "T" (quote dired-do-touch)) (define-key map "X" (quote dired-do-shell-command)) (define-key map "Z" (quote dired-do-compress)) (define-key map "!" (quote dired-do-shell-command)) (define-key map "&" (quote dired-do-async-shell-command)) (define-key map "=" (quote dired-diff)) (define-key map "\377" (quote dired-unmark-all-files)) (define-key map "\204" (quote dired-tree-down)) (define-key map "\225" (quote dired-tree-up)) (define-key map "\216" (quote dired-next-subdir)) (define-key map "\220" (quote dired-prev-subdir)) (define-key map "\373" (quote dired-prev-marked-file)) (define-key map "\375" (quote dired-next-marked-file)) (define-key map "%" nil) (define-key map "%u" (quote dired-upcase)) (define-key map "%l" (quote dired-downcase)) (define-key map "%d" (quote dired-flag-files-regexp)) (define-key map "%g" (quote dired-mark-files-containing-regexp)) (define-key map "%m" (quote dired-mark-files-regexp)) (define-key map "%r" (quote dired-do-rename-regexp)) (define-key map "%C" (quote dired-do-copy-regexp)) (define-key map "%H" (quote dired-do-hardlink-regexp)) (define-key map "%R" (quote dired-do-rename-regexp)) (define-key map "%S" (quote dired-do-symlink-regexp)) (define-key map "%&" (quote dired-flag-garbage-files)) (define-key map "*" nil) (define-key map "**" (quote dired-mark-executables)) (define-key map "*/" (quote dired-mark-directories)) (define-key map "*@" (quote dired-mark-symlinks)) (define-key map "*%" (quote dired-mark-files-regexp)) (define-key map "*c" (quote dired-change-marks)) (define-key map "*s" (quote dired-mark-subdir-files)) (define-key map "*m" (quote dired-mark)) (define-key map "*u" (quote dired-unmark)) (define-key map "*?" (quote dired-unmark-all-files)) (define-key map "*!" (quote dired-unmark-all-marks)) (define-key map "U" (quote dired-unmark-all-marks)) (define-key map "*" (quote dired-unmark-backward)) (define-key map "*" (quote dired-next-marked-file)) (define-key map "*" (quote dired-prev-marked-file)) (define-key map "*t" (quote dired-toggle-marks)) (define-key map "a" (quote dired-find-alternate-file)) (define-key map "d" (quote dired-flag-file-deletion)) (define-key map "e" (quote dired-find-file)) (define-key map "f" (quote dired-find-file)) (define-key map "" (quote dired-find-file)) (put (quote dired-find-file) :advertised-binding "") (define-key map "g" (quote revert-buffer)) (define-key map "i" (quote dired-maybe-insert-subdir)) (define-key map "j" (quote dired-goto-file)) (define-key map "k" (quote dired-do-kill-lines)) (define-key map "l" (quote dired-do-redisplay)) (define-key map "m" (quote dired-mark)) (define-key map "n" (quote dired-next-line)) (define-key map "o" (quote dired-find-file-other-window)) (define-key map "" (quote dired-display-file)) (define-key map "p" (quote dired-previous-line)) (define-key map "s" (quote dired-sort-toggle-or-edit)) (define-key map "t" (quote dired-toggle-marks)) (define-key map "u" (quote dired-unmark)) (define-key map "v" (quote dired-view-file)) (define-key map "w" (quote dired-copy-filename-as-kill)) (define-key map "x" (quote dired-do-flagged-delete)) (define-key map "y" (quote dired-show-file-type)) (define-key map "+" (quote dired-create-directory)) (define-key map "<" (quote dired-prev-dirline)) (define-key map ">" (quote dired-next-dirline)) (define-key map "^" (quote dired-up-directory)) (define-key map " " (quote dired-next-line)) (define-key map [remap next-line] (quote dired-next-line)) (define-key map [remap previous-line] (quote dired-previous-line)) (define-key map "$" (quote dired-hide-subdir)) (define-key map "\244" (quote dired-hide-all)) (define-key map "(" (quote dired-hide-details-mode)) (define-key map (kbd "M-s a C-s") (quote dired-do-isearch)) (define-key map (kbd "M-s a M-C-s") (quote dired-do-isearch-regexp)) (define-key map (kbd "M-s f C-s") (quote dired-isearch-filenames)) (define-key map (kbd "M-s f M-C-s") (quote dired-isearch-filenames-regexp)) (define-key map [remap read-only-mode] (quote dired-toggle-read-only)) (define-key map [remap toggle-read-only] (quote dired-toggle-read-only)) (define-key map "?" (quote dired-summary)) (define-key map "" (quote dired-unmark-backward)) (define-key map [remap undo] (quote dired-undo)) (define-key map [remap advertised-undo] (quote dired-undo)) (define-key map "d" (quote image-dired-display-thumbs)) (define-key map "t" (quote image-dired-tag-files)) (define-key map "r" (quote image-dired-delete-tag)) (define-key map "j" (quote image-dired-jump-thumbnail-buffer)) (define-key map "i" (quote image-dired-dired-display-image)) (define-key map "x" (quote image-dired-dired-display-external)) (define-key map "a" (quote image-dired-display-thumbs-append)) (define-key map "." (quote image-dired-display-thumb)) (define-key map "c" (quote image-dired-dired-comment-files)) (define-key map "f" (quote image-dired-mark-tagged-files)) (define-key map "" (quote image-dired-dired-toggle-marked-thumbs)) (define-key map "e" (quote image-dired-dired-edit-comment-and-tags)) (define-key map ":d" (quote epa-dired-do-decrypt)) (define-key map ":v" (quote epa-dired-do-verify)) (define-key map ":s" (quote epa-dired-do-sign)) (define-key map ":e" (quote epa-dired-do-encrypt)) (define-key map [menu-bar subdir] (cons "Subdir" (make-sparse-keymap "Subdir"))) (define-key map [menu-bar subdir hide-all] (quote (menu-item "Hide All" dired-hide-all :help "Hide all subdirectories, leave only header lines"))) (define-key map [menu-bar subdir hide-subdir] (quote (menu-item "Hide/UnHide Subdir" dired-hide-subdir :help "Hide or unhide current directory listing"))) (define-key map [menu-bar subdir tree-down] (quote (menu-item "Tree Down" dired-tree-down :help "Go to first subdirectory header down the tree"))) (define-key map [menu-bar subdir tree-up] (quote (menu-item "Tree Up" dired-tree-up :help "Go to first subdirectory header up the tree"))) (define-key map [menu-bar subdir up] (quote (menu-item "Up Directory" dired-up-directory :help "Edit the parent directory"))) (define-key map [menu-bar subdir prev-subdir] (quote (menu-item "Prev Subdir" dired-prev-subdir :help "Go to previous subdirectory header line"))) (define-key map [menu-bar subdir next-subdir] (quote (menu-item "Next Subdir" dired-next-subdir :help "Go to next subdirectory header line"))) (define-key map [menu-bar subdir prev-dirline] (quote (menu-item "Prev Dirline" dired-prev-dirline :help "Move to next directory-file line"))) (define-key map [menu-bar subdir next-dirline] (quote (menu-item "Next Dirline" dired-next-dirline :help "Move to previous directory-file line"))) (define-key map [menu-bar subdir insert] (quote (menu-item "Insert This Subdir" dired-maybe-insert-subdir :help "Insert contents of subdirectory" :enable (let ((f (dired-get-filename nil t))) (and f (file-directory-p f)))))) (define-key map [menu-bar immediate] (cons "Immediate" (make-sparse-keymap "Immediate"))) (define-key map [menu-bar immediate image-dired-dired-display-external] (quote (menu-item "Display Image Externally" image-dired-dired-display-external :help "Display image in external viewer"))) (define-key map [menu-bar immediate image-dired-dired-display-image] (quote (menu-item "Display Image" image-dired-dired-display-image :help "Display sized image in a separate window"))) (define-key map [menu-bar immediate image-dired-dired-toggle-marked-thumbs] (quote (menu-item "Toggle Image Thumbnails in This Buffer" image-dired-dired-toggle-marked-thumbs :help "Add or remove image thumbnails in front of marked file names"))) (define-key map [menu-bar immediate hide-details] (quote (menu-item "Hide Details" dired-hide-details-mode :help "Hide details in buffer" :button (:toggle . dired-hide-details-mode)))) (define-key map [menu-bar immediate revert-buffer] (quote (menu-item "Refresh" revert-buffer :help "Update contents of shown directories"))) (define-key map [menu-bar immediate dashes] (quote ("--"))) (define-key map [menu-bar immediate isearch-filenames-regexp] (quote (menu-item "Isearch Regexp in File Names..." dired-isearch-filenames-regexp :help "Incrementally search for regexp in file names only"))) (define-key map [menu-bar immediate isearch-filenames] (quote (menu-item "Isearch in File Names..." dired-isearch-filenames :help "Incrementally search for string in file names only."))) (define-key map [menu-bar immediate compare-directories] (quote (menu-item "Compare Directories..." dired-compare-directories :help "Mark files with different attributes in two Dired buffers"))) (define-key map [menu-bar immediate backup-diff] (quote (menu-item "Compare with Backup" dired-backup-diff :help "Diff file at cursor with its latest backup"))) (define-key map [menu-bar immediate diff] (quote (menu-item "Diff..." dired-diff :help "Compare file at cursor with another file"))) (define-key map [menu-bar immediate view] (quote (menu-item "View This File" dired-view-file :help "Examine file at cursor in read-only mode"))) (define-key map [menu-bar immediate display] (quote (menu-item "Display in Other Window" dired-display-file :help "Display file at cursor in other window"))) (define-key map [menu-bar immediate find-file-other-window] (quote (menu-item "Find in Other Window" dired-find-file-other-window :help "Edit file at cursor in other window"))) (define-key map [menu-bar immediate find-file] (quote (menu-item "Find This File" dired-find-file :help "Edit file at cursor"))) (define-key map [menu-bar immediate create-directory] (quote (menu-item "Create Directory..." dired-create-directory :help "Create a directory"))) (define-key map [menu-bar immediate wdired-mode] (quote (menu-item "Edit File Names" wdired-change-to-wdired-mode :help "Put a Dired buffer in a mode in which filenames are editable" :keys "C-x C-q" :filter (lambda (x) (if (eq major-mode (quote dired-mode)) x))))) (define-key map [menu-bar regexp] (cons "Regexp" (make-sparse-keymap "Regexp"))) (define-key map [menu-bar regexp image-dired-mark-tagged-files] (quote (menu-item "Mark From Image Tag..." image-dired-mark-tagged-files :help "Mark files whose image tags matches regexp"))) (define-key map [menu-bar regexp dashes-1] (quote ("--"))) (define-key map [menu-bar regexp downcase] (quote (menu-item "Downcase" dired-downcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to lower-case name"))) (define-key map [menu-bar regexp upcase] (quote (menu-item "Upcase" dired-upcase :enable (or (not (fboundp (quote msdos-long-file-names))) (msdos-long-file-names)) :help "Rename marked files to upper-case name"))) (define-key map [menu-bar regexp hardlink] (quote (menu-item "Hardlink..." dired-do-hardlink-regexp :help "Make hard links for files matching regexp"))) (define-key map [menu-bar regexp symlink] (quote (menu-item "Symlink..." dired-do-symlink-regexp :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for files matching regexp"))) (define-key map [menu-bar regexp rename] (quote (menu-item "Rename..." dired-do-rename-regexp :help "Rename marked files matching regexp"))) (define-key map [menu-bar regexp copy] (quote (menu-item "Copy..." dired-do-copy-regexp :help "Copy marked files matching regexp"))) (define-key map [menu-bar regexp flag] (quote (menu-item "Flag..." dired-flag-files-regexp :help "Flag files matching regexp for deletion"))) (define-key map [menu-bar regexp mark] (quote (menu-item "Mark..." dired-mark-files-regexp :help "Mark files matching regexp for future operations"))) (define-key map [menu-bar regexp mark-cont] (quote (menu-item "Mark Containing..." dired-mark-files-containing-regexp :help "Mark files whose contents matches regexp"))) (define-key map [menu-bar mark] (cons "Mark" (make-sparse-keymap "Mark"))) (define-key map [menu-bar mark prev] (quote (menu-item "Previous Marked" dired-prev-marked-file :help "Move to previous marked file"))) (define-key map [menu-bar mark next] (quote (menu-item "Next Marked" dired-next-marked-file :help "Move to next marked file"))) (define-key map [menu-bar mark marks] (quote (menu-item "Change Marks..." dired-change-marks :help "Replace marker with another character"))) (define-key map [menu-bar mark unmark-all] (quote (menu-item "Unmark All" dired-unmark-all-marks))) (define-key map [menu-bar mark symlinks] (quote (menu-item "Mark Symlinks" dired-mark-symlinks :visible (fboundp (quote make-symbolic-link)) :help "Mark all symbolic links"))) (define-key map [menu-bar mark directories] (quote (menu-item "Mark Directories" dired-mark-directories :help "Mark all directories except `.' and `..'"))) (define-key map [menu-bar mark directory] (quote (menu-item "Mark Old Backups" dired-clean-directory :help "Flag old numbered backups for deletion"))) (define-key map [menu-bar mark executables] (quote (menu-item "Mark Executables" dired-mark-executables :help "Mark all executable files"))) (define-key map [menu-bar mark garbage-files] (quote (menu-item "Flag Garbage Files" dired-flag-garbage-files :help "Flag unneeded files for deletion"))) (define-key map [menu-bar mark backup-files] (quote (menu-item "Flag Backup Files" dired-flag-backup-files :help "Flag all backup files for deletion"))) (define-key map [menu-bar mark auto-save-files] (quote (menu-item "Flag Auto-save Files" dired-flag-auto-save-files :help "Flag auto-save files for deletion"))) (define-key map [menu-bar mark deletion] (quote (menu-item "Flag" dired-flag-file-deletion :help "Flag current line's file for deletion"))) (define-key map [menu-bar mark unmark] (quote (menu-item "Unmark" dired-unmark :help "Unmark or unflag current line's file"))) (define-key map [menu-bar mark mark] (quote (menu-item "Mark" dired-mark :help "Mark current line's file for future operations"))) (define-key map [menu-bar mark toggle-marks] (quote (menu-item "Toggle Marks" dired-toggle-marks :help "Mark unmarked files, unmark marked ones"))) (define-key map [menu-bar operate] (cons "Operate" (make-sparse-keymap "Operate"))) (define-key map [menu-bar operate image-dired-delete-tag] (quote (menu-item "Delete Image Tag..." image-dired-delete-tag :help "Delete image tag from current or marked files"))) (define-key map [menu-bar operate image-dired-tag-files] (quote (menu-item "Add Image Tags..." image-dired-tag-files :help "Add image tags to current or marked files"))) (define-key map [menu-bar operate image-dired-dired-comment-files] (quote (menu-item "Add Image Comment..." image-dired-dired-comment-files :help "Add image comment to current or marked files"))) (define-key map [menu-bar operate image-dired-display-thumbs] (quote (menu-item "Display Image Thumbnails" image-dired-display-thumbs :help "Display image thumbnails for current or marked image files"))) (define-key map [menu-bar operate dashes-4] (quote ("--"))) (define-key map [menu-bar operate epa-dired-do-decrypt] (quote (menu-item "Decrypt..." epa-dired-do-decrypt :help "Decrypt current or marked files"))) (define-key map [menu-bar operate epa-dired-do-verify] (quote (menu-item "Verify" epa-dired-do-verify :help "Verify digital signature of current or marked files"))) (define-key map [menu-bar operate epa-dired-do-sign] (quote (menu-item "Sign..." epa-dired-do-sign :help "Create digital signature of current or marked files"))) (define-key map [menu-bar operate epa-dired-do-encrypt] (quote (menu-item "Encrypt..." epa-dired-do-encrypt :help "Encrypt current or marked files"))) (define-key map [menu-bar operate dashes-3] (quote ("--"))) (define-key map [menu-bar operate query-replace] (quote (menu-item "Query Replace in Files..." dired-do-query-replace-regexp :help "Replace regexp in marked files"))) (define-key map [menu-bar operate search] (quote (menu-item "Search Files..." dired-do-search :help "Search marked files for regexp"))) (define-key map [menu-bar operate isearch-regexp] (quote (menu-item "Isearch Regexp Files..." dired-do-isearch-regexp :help "Incrementally search marked files for regexp"))) (define-key map [menu-bar operate isearch] (quote (menu-item "Isearch Files..." dired-do-isearch :help "Incrementally search marked files for string"))) (define-key map [menu-bar operate chown] (quote (menu-item "Change Owner..." dired-do-chown :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the owner of marked files"))) (define-key map [menu-bar operate chgrp] (quote (menu-item "Change Group..." dired-do-chgrp :visible (not (memq system-type (quote (ms-dos windows-nt)))) :help "Change the group of marked files"))) (define-key map [menu-bar operate chmod] (quote (menu-item "Change Mode..." dired-do-chmod :help "Change mode (attributes) of marked files"))) (define-key map [menu-bar operate touch] (quote (menu-item "Change Timestamp..." dired-do-touch :help "Change timestamp of marked files"))) (define-key map [menu-bar operate load] (quote (menu-item "Load" dired-do-load :help "Load marked Emacs Lisp files"))) (define-key map [menu-bar operate compile] (quote (menu-item "Byte-compile" dired-do-byte-compile :help "Byte-compile marked Emacs Lisp files"))) (define-key map [menu-bar operate compress] (quote (menu-item "Compress" dired-do-compress :help "Compress/uncompress marked files"))) (define-key map [menu-bar operate print] (quote (menu-item "Print..." dired-do-print :help "Ask for print command and print marked files"))) (define-key map [menu-bar operate hardlink] (quote (menu-item "Hardlink to..." dired-do-hardlink :help "Make hard links for current or marked files"))) (define-key map [menu-bar operate symlink] (quote (menu-item "Symlink to..." dired-do-symlink :visible (fboundp (quote make-symbolic-link)) :help "Make symbolic links for current or marked files"))) (define-key map [menu-bar operate async-command] (quote (menu-item "Asynchronous Shell Command..." dired-do-async-shell-command :help "Run a shell command asynchronously on current or marked files"))) (define-key map [menu-bar operate command] (quote (menu-item "Shell Command..." dired-do-shell-command :help "Run a shell command on current or marked files"))) (define-key map [menu-bar operate delete] (quote (menu-item "Delete" dired-do-delete :help "Delete current file or all marked files"))) (define-key map [menu-bar operate rename] (quote (menu-item "Rename to..." dired-do-rename :help "Rename current file or move marked files"))) (define-key map [menu-bar operate copy] (quote (menu-item "Copy to..." dired-do-copy :help "Copy current file or all marked files"))) map)) nil [57731 78991])
            ("put" code nil nil [79055 79093])
            ("dired-mode" function (:arguments ("dirname" "switches")) nil [79150 83942])
            ("dired-summary" function (:user-visible-flag t) nil [84006 84304])
            ("dired-undo" function (:user-visible-flag t) nil [84306 84675])
            ("dired-toggle-read-only" function (:user-visible-flag t) nil [84677 85046])
            ("dired-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85048 85503])
            ("dired-previous-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85505 85708])
            ("dired-next-dirline" function
               (:user-visible-flag t
                :arguments ("arg" "opoint"))
                nil [85710 86113])
            ("dired-prev-dirline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86115 86243])
            ("dired-up-directory" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [86245 86939])
            ("dired-get-file-for-visit" function (:user-visible-flag t) nil [86941 87507])
            ("define-obsolete-function-alias" code nil nil [87573 87657])
            ("dired-find-file" function (:user-visible-flag t) nil [87658 87957])
            ("dired-find-alternate-file" function (:user-visible-flag t) nil [87959 88164])
            ("dired-mouse-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [88269 88977])
            ("dired-view-file" function (:user-visible-flag t) nil [88979 89386])
            ("dired-find-file-other-window" function (:user-visible-flag t) nil [89388 89559])
            ("dired-display-file" function (:user-visible-flag t) nil [89561 89743])
            ("dired-get-filename" function (:arguments ("localp" "no-error-if-not-filep")) nil [89822 93886])
            ("dired-string-replace-match" function (:arguments ("regexp" "string" "newtext" "literal" "global")) nil [93888 94598])
            ("dired-make-absolute" function (:arguments ("file" "dir")) nil [94600 95028])
            ("dired-make-relative" function (:arguments ("file" "dir")) nil [95030 95587])
            ("define-minor-mode" code nil nil [95590 96260])
            ("dired-hide-details-update-invisibility-spec" function nil nil [96262 96896])
            ("dired-permission-flags-regexp" variable (:default-value "\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)[-r][-w]\\([^ ]\\)") nil [96964 97136])
            ("dired-move-to-filename" function (:arguments ("raise-error" "eol")) nil [97251 98185])
            ("dired-move-to-end-of-filename" function (:arguments ("no-error")) nil [98187 100574])
            ("dired-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [100626 101925])
            ("dired-buffers-for-dir" function (:arguments ("dir" "file")) nil [102003 103130])
            ("dired-glob-regexp" function (:arguments ("pattern")) nil [103132 104327])
            ("dired-advertise" function nil nil [104331 104771])
            ("dired-unadvertise" function (:arguments ("dir")) nil [104773 105163])
            ("dired-in-this-tree" function (:arguments ("file" "dir")) nil [105204 105384])
            ("dired-normalize-subdir" function (:arguments ("dir")) nil [105386 105705])
            ("dired-get-subdir" function nil nil [105707 106106])
            ("defalias" code nil nil [106187 106224])
            ("dired-get-subdir-max" function (:arguments ("elt")) nil [106226 106345])
            ("dired-clear-alist" function nil nil [106347 106528])
            ("dired-subdir-index" function (:arguments ("dir")) nil [106530 106866])
            ("dired-next-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [106868 107676])
            ("dired-build-subdir-alist" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [107678 110385])
            ("dired-alist-add-1" function (:arguments ("dir" "new-marker")) nil [110387 110583])
            ("dired-goto-next-nontrivial-file" function nil nil [110585 111039])
            ("dired-goto-next-file" function nil nil [111041 111200])
            ("dired-goto-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [111202 112644])
            ("dired-goto-file-1" function (:arguments ("file" "full-name" "limit")) nil [112646 114076])
            ("dired-find-subdir" variable nil nil [114078 114104])
            ("dired-initial-position" function (:arguments ("dirname")) nil [114151 114559])
            ("dired-current-directory" function (:arguments ("localp")) nil [114995 115722])
            ("dired-subdir-max" function nil nil [115862 116013])
            ("dired-recursive-deletes" variable (:default-value (quote top)) nil [116035 116719])
            ("dired-re-no-dot" variable (:default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*") nil [116757 116820])
            ("dired-delete-file" function (:arguments ("file" "recursive" "trash")) nil [117017 118204])
            ("dired-do-flagged-delete" function
               (:user-visible-flag t
                :arguments ("nomessage"))
                nil [118206 118907])
            ("dired-do-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [118909 119352])
            ("dired-deletion-confirmer" variable (:default-value (quote yes-or-no-p)) nil [119354 119400])
            ("dired-internal-do-deletions" function (:arguments ("l" "arg" "trash")) nil [119417 121489])
            ("dired-fun-in-all-buffers" function (:arguments ("directory" "file" "fun" "args")) nil [121491 122099])
            ("dired-delete-entry" function (:arguments ("file")) nil [122135 122394])
            ("dired-clean-up-buffers-too" variable nil nil [122396 122431])
            ("dired-clean-up-after-deletion" function (:arguments ("fn")) nil [122433 123508])
            ("dired-marker-regexp" function nil nil [123529 123624])
            ("dired-plural-s" function (:arguments ("count")) nil [123626 123682])
            ("dired-mark-prompt" function (:arguments ("arg" "files")) nil [123684 124475])
            ("dired-pop-to-buffer" function (:arguments ("buf")) nil [124477 125353])
            ("dired-no-confirm" variable nil nil [125355 126020])
            ("dired-mark-pop-up" function (:arguments ("buffer-or-name" "op-symbol" "files" "function" "args")) nil [126022 128072])
            ("dired-format-columns-of-files" function (:arguments ("files")) nil [128074 128234])
            ("dired-repeat-over-lines" function (:arguments ("arg" "function")) nil [128299 129172])
            ("dired-between-files" function nil nil [129174 129436])
            ("dired-next-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap" "opoint"))
                nil [129438 130124])
            ("dired-prev-marked-file" function
               (:user-visible-flag t
                :arguments ("arg" "wrap"))
                nil [130126 130376])
            ("dired-file-marker" function (:arguments ("file")) nil [130378 130614])
            ("dired-mark-files-in-region" function (:arguments ("start" "end")) nil [130616 131143])
            ("dired-mark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [131145 132242])
            ("dired-unmark" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [132244 132732])
            ("dired-flag-file-deletion" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [132734 133247])
            ("dired-unmark-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [133249 133565])
            ("dired-toggle-marks" function (:user-visible-flag t) nil [133567 134458])
            ("dired-regexp-history" variable nil nil [134538 134635])
            ("dired-read-regexp" function (:arguments ("prompt" "default" "history")) nil [134637 134844])
            ("dired-mark-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [134846 135666])
            ("dired-mark-files-containing-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "marker-char"))
                nil [135668 136865])
            ("dired-flag-files-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [136867 137326])
            ("dired-mark-symlinks" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [137328 137603])
            ("dired-mark-directories" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [137605 137958])
            ("dired-mark-executables" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [137960 138242])
            ("dired-flag-auto-save-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [138353 139537])
            ("dired-garbage-files-regexp" variable (:default-value (concat (regexp-opt (quote (".log" ".toc" ".dvi" ".bak" ".orig" ".rej" ".aux"))) "\\'")) nil [139539 139889])
            ("dired-flag-garbage-files" function (:user-visible-flag t) nil [139891 140070])
            ("dired-flag-backup-files" function
               (:user-visible-flag t
                :arguments ("unflag-p"))
                nil [140072 141004])
            ("dired-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [141006 141734])
            ("dired-unmark-all-marks" function (:user-visible-flag t) nil [141736 141873])
            ("dired-unmark-all-files" function
               (:user-visible-flag t
                :arguments ("mark" "arg"))
                nil [141875 142961])
            ("dired-log-buffer" variable (:default-value "*Dired log*") nil [143030 143069])
            ("dired-why" function (:user-visible-flag t) nil [143071 143624])
            ("dired-log" function (:arguments ("log" "args")) nil [143626 144545])
            ("dired-log-summary" function (:arguments ("string" "failures")) nil [144547 145253])
            ("dired-ls-sorting-switches" variable (:default-value "SXU") nil [145478 145916])
            ("dired-sort-by-date-regexp" variable (:default-value (concat "\\(\\`\\| \\)-[^- ]*t" "[^ " dired-ls-sorting-switches "]*" "\\(\\(\\`\\| +\\)\\(--[^ ]+\\|-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [145918 146224])
            ("dired-sort-by-name-regexp" variable (:default-value (concat "\\`\\(\\(\\`\\| +\\)\\(--[^ ]+\\|" "-[^- t" dired-ls-sorting-switches "]+\\)\\)* *$")) nil [146226 146414])
            ("dired-sort-inhibit" variable nil nil [146416 146566])
            ("dired-sort-set-mode-line" function nil nil [146568 147201])
            ("define-obsolete-function-alias" code nil nil [147203 147295])
            ("dired-sort-toggle-or-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [147297 147700])
            ("dired-sort-toggle" function nil nil [147702 149088])
            ("dired-replace-in-string" function (:arguments ("regexp" "newtext" "string")) nil [149197 149664])
            ("dired-sort-other" function (:arguments ("switches" "no-revert")) nil [149666 150134])
            ("defvar-local" code nil nil [150136 150237])
            ("dired-sort-R-check" function (:arguments ("switches")) nil [150239 151482])
            ("dired-recursive-copies" variable (:default-value (quote top)) nil [151515 152042])
            ("dired-dnd-popup-notice" function nil nil [152044 152189])
            ("declare-function" code nil nil [152191 152247])
            ("dired-dnd-do-ask-action" function (:arguments ("uri")) nil [152249 152675])
            ("declare-function" code nil nil [152677 152733])
            ("declare-function" code nil nil [152734 152782])
            ("declare-function" code nil nil [152819 152894])
            ("declare-function" code nil nil [152895 152948])
            ("dired-overwrite-confirmed" variable nil nil [152950 152984])
            ("dired-dnd-handle-local-file" function (:arguments ("uri" "action")) nil [153014 154820])
            ("dired-dnd-handle-file" function (:arguments ("uri" "action")) nil [154822 155266])
            ("desktop" include nil nil [155312 155330])
            ("declare-function" code nil nil [155332 155397])
            ("dired-desktop-buffer-misc-data" function (:arguments ("dirname")) nil [155399 156017])
            ("dired-restore-desktop-buffer" function (:arguments ("_file-name" "_buffer-name" "misc-data")) nil [156019 156985])
            ("add-to-list" code nil nil [156987 157081])
            ("dired-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157263 157955])
            ("dired-backup-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [157957 158328])
            ("dired-compare-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [158330 159535])
            ("dired-do-chmod" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [159537 159775])
            ("dired-do-chgrp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [159777 159977])
            ("dired-do-chown" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [159979 160179])
            ("dired-do-touch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [160181 160403])
            ("dired-do-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [160405 160602])
            ("dired-clean-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [160604 161024])
            ("dired-do-async-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [161026 161790])
            ("dired-do-shell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [161792 164091])
            ("dired-run-shell-command" function (:prototype-flag t) nil [164093 164168])
            ("dired-do-kill-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164170 164809])
            ("dired-compress-file" function (:prototype-flag t) nil [164811 164879])
            ("dired-query" function (:prototype-flag t) nil [164881 165387])
            ("dired-do-compress" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165389 165512])
            ("dired-do-byte-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165514 165642])
            ("dired-do-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165644 165760])
            ("dired-do-redisplay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [165762 166486])
            ("dired-add-file" function (:prototype-flag t) nil [166488 166577])
            ("dired-remove-file" function (:prototype-flag t) nil [166579 166645])
            ("dired-relist-file" function (:prototype-flag t) nil [166647 166788])
            ("dired-copy-file" function (:prototype-flag t) nil [166790 166865])
            ("dired-rename-file" function (:prototype-flag t) nil [166867 166962])
            ("dired-create-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [166964 167120])
            ("dired-do-copy" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167122 167958])
            ("dired-do-symlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [167960 168495])
            ("dired-do-hardlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168497 168976])
            ("dired-do-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [168978 169401])
            ("dired-do-rename-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169403 170131])
            ("dired-do-copy-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170133 170344])
            ("dired-do-hardlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170346 170565])
            ("dired-do-symlink-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170567 170784])
            ("dired-upcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170786 170906])
            ("dired-downcase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [170908 171030])
            ("dired-maybe-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171032 172036])
            ("dired-insert-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172038 172560])
            ("dired-prev-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172562 172792])
            ("dired-goto-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172794 173020])
            ("dired-mark-subdir-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173022 173268])
            ("dired-kill-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173270 173424])
            ("dired-tree-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173426 173520])
            ("dired-tree-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173522 173605])
            ("dired-hide-subdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173607 173829])
            ("dired-hide-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173831 174096])
            ("dired-isearch-filenames-setup" function (:prototype-flag t) nil [174098 174261])
            ("dired-isearch-filenames" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174263 174401])
            ("dired-isearch-filenames-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174403 174548])
            ("dired-do-isearch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174550 174667])
            ("dired-do-isearch-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174669 174793])
            ("dired-do-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [174795 175017])
            ("dired-do-query-replace-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175019 175374])
            ("dired-show-file-type" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175376 175655])
            ("dired-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175788 176300])
            ("dired-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176302 176440])
            ("dired-do-relsymlink" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176442 176840])
            ("dired" package nil nil [176898 176914])
            ("run-hooks" code nil nil [176916 176944]))          
      :file "dired.el.gz"
      :pointmax 176996
      :fsize 49292
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 155330 . 155331) (symbol 155294 . 155311) (open-paren 155293 . 155294)))
    (semanticdb-table "time.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("display-time" customgroup (:user-visible-flag t) nil [1135 1246])
            ("display-time-mail-file" variable nil nil [1249 1615])
            ("display-time-mail-directory" variable nil nil [1617 1955])
            ("display-time-mail-function" variable nil nil [1957 2331])
            ("display-time-default-load-average" variable nil nil [2333 2904])
            ("display-time-load-average" variable nil nil [2906 3115])
            ("display-time-load-average-threshold" variable (:default-value 0.1) nil [3117 3281])
            ("display-time-day-and-date" variable nil nil [3298 3459])
            ("display-time-timer" variable nil nil [3461 3492])
            ("display-time-interval" variable (:default-value 60) nil [3494 3624])
            ("display-time-24hr-format" variable nil nil [3626 3843])
            ("display-time-string" variable nil nil [3845 3877])
            ("display-time-hook" variable nil nil [3944 4092])
            ("display-time-server-down-time" variable nil nil [4094 4254])
            ("zoneinfo-style-world-list" variable (:default-value (quote (("America/Los_Angeles" "Seattle") ("America/New_York" "New York") ("Europe/London" "London") ("Europe/Paris" "Paris") ("Asia/Calcutta" "Bangalore") ("Asia/Tokyo" "Tokyo")))) nil [4256 4954])
            ("legacy-style-world-list" variable (:default-value (quote (("PST8PDT" "Seattle") ("EST5EDT" "New York") ("GMT0BST" "London") ("CET-1CDT" "Paris") ("IST-5:30" "Bangalore") ("JST-9" "Tokyo")))) nil [4956 5634])
            ("display-time-world-list" variable (:default-value (let ((old-tz (getenv "TZ")) gmt nyt) (unwind-protect (progn (setenv "TZ" "America/New_York") (setq nyt (format-time-string "%z")) (setenv "TZ" "Europe/London") (setq gmt (format-time-string "%z"))) (setenv "TZ" old-tz)) (if (string-equal nyt gmt) legacy-style-world-list zoneinfo-style-world-list))) nil [5636 6591])
            ("display-time-world-time-format" variable (:default-value "%A %d %B %R %Z") nil [6593 6769])
            ("display-time-world-buffer-name" variable (:default-value "*wclock*") nil [6771 6917])
            ("display-time-world-timer-enable" variable (:default-value t) nil [6919 7075])
            ("display-time-world-timer-second" variable (:default-value 60) nil [7077 7235])
            ("display-time" function (:user-visible-flag t) nil [7252 7589])
            ("display-time-mail-face" variable nil nil [7815 8187])
            ("display-time-mail-icon" variable (:default-value (find-image (quote ((:type xpm :file "letter.xpm" :ascent center) (:type pbm :file "letter.pbm" :ascent center))))) nil [8189 8472])
            ("display-time-use-mail-icon" variable nil nil [8522 8807])
            ("display-time-mail-string" variable (:default-value "Mail") nil [8877 9267])
            ("display-time-format" variable nil nil [9269 9639])
            ("display-time-string-forms" variable (:default-value (quote ((if (and (not display-time-format) display-time-day-and-date) (format-time-string "%a %b %e " now) "") (propertize (format-time-string (or display-time-format (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now) (quote help-echo) (format-time-string "%a %b %e, %Y" now)) load (if mail (concat " " (propertize display-time-mail-string (quote display) (\` (when (and display-time-use-mail-icon (display-graphic-p)) (\,@ display-time-mail-icon) (\,@ (if (and display-time-mail-face (memq (plist-get (cdr display-time-mail-icon) :type) (quote (pbm xbm)))) (let ((bg (face-attribute display-time-mail-face :background))) (if (stringp bg) (list :background bg))))))) (quote face) display-time-mail-face (quote help-echo) "You have new mail; mouse-2: Read mail" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) read-mail-command))) "")))) nil [9641 11572])
            ("display-time-event-handler" function nil nil [11574 12497])
            ("display-time-next-load-average" function (:user-visible-flag t) nil [12499 12831])
            ("display-time-mail-check-directory" function nil nil [12833 13249])
            ("with-no-warnings" code nil nil [13251 13631])
            ("display-time-update" function nil nil [13633 17056])
            ("display-time-file-nonempty-p" function (:arguments ("file")) nil [17058 17261])
            ("define-minor-mode" code nil nil [17278 18726])
            ("define-derived-mode" code nil nil [18729 18934])
            ("display-time-world-display" function (:arguments ("alist")) nil [18936 19682])
            ("display-time-world" function (:user-visible-flag t) nil [19699 20380])
            ("display-time-world-timer" function nil nil [20382 20831])
            ("emacs-uptime" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [20848 21373])
            ("emacs-init-time" function (:user-visible-flag t) nil [21390 21696])
            ("time" package nil nil [21698 21713]))          
      :file "time.el.gz"
      :pointmax 21737
      :fsize 6892
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "font-lock.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("syntax" include nil nil [10480 10497])
            ("cl-lib" include nil nil [10517 10534])
            ("font-lock" customgroup
               (:user-visible-flag t
                :value (quote ((jit-lock custom-group))))
                nil [10571 10813])
            ("font-lock-faces" customgroup (:user-visible-flag t) nil [10815 10921])
            ("font-lock-extra-types" customgroup (:user-visible-flag t) nil [10923 11045])
            ("font-lock-maximum-size" variable (:default-value 256000) nil [11068 12124])
            ("make-obsolete-variable" code nil nil [12125 12184])
            ("font-lock-maximum-decoration" variable (:default-value t) nil [12186 13316])
            ("font-lock-verbose" variable nil nil [13318 13631])
            ("font-lock-comment-face" variable (:default-value (quote font-lock-comment-face)) nil [14305 14396])
            ("font-lock-comment-delimiter-face" variable (:default-value (quote font-lock-comment-delimiter-face)) nil [14398 14518])
            ("font-lock-string-face" variable (:default-value (quote font-lock-string-face)) nil [14520 14608])
            ("font-lock-doc-face" variable (:default-value (quote font-lock-doc-face)) nil [14610 14698])
            ("font-lock-keyword-face" variable (:default-value (quote font-lock-keyword-face)) nil [14700 14791])
            ("font-lock-builtin-face" variable (:default-value (quote font-lock-builtin-face)) nil [14793 14884])
            ("font-lock-function-name-face" variable (:default-value (quote font-lock-function-name-face)) nil [14886 14994])
            ("font-lock-variable-name-face" variable (:default-value (quote font-lock-variable-name-face)) nil [14996 15104])
            ("font-lock-type-face" variable (:default-value (quote font-lock-type-face)) nil [15106 15203])
            ("font-lock-constant-face" variable (:default-value (quote font-lock-constant-face)) nil [15205 15314])
            ("font-lock-warning-face" variable (:default-value (quote font-lock-warning-face)) nil [15316 15427])
            ("font-lock-negation-char-face" variable (:default-value (quote font-lock-negation-char-face)) nil [15429 15597])
            ("font-lock-preprocessor-face" variable (:default-value (quote font-lock-preprocessor-face)) nil [15599 15714])
            ("define-obsolete-variable-alias" code nil nil [15716 15808])
            ("font-lock-keywords" variable nil nil [15839 21670])
            ("font-lock-keywords-alist" variable nil nil [21672 22276])
            ("put" code nil nil [22277 22332])
            ("font-lock-removed-keywords-alist" variable nil nil [22334 22734])
            ("font-lock-keywords-only" variable nil nil [22736 22887])
            ("font-lock-keywords-case-fold-search" variable nil nil [22889 23126])
            ("make-variable-buffer-local" code nil nil [23127 23192])
            ("font-lock-syntactically-fontified" variable nil nil [23194 23413])
            ("make-variable-buffer-local" code nil nil [23414 23477])
            ("font-lock-syntactic-face-function" variable (:default-value (lambda (state) (if (nth 3 state) font-lock-string-face font-lock-comment-face))) nil [23479 23896])
            ("font-lock-syntactic-keywords" variable nil nil [23898 25123])
            ("make-obsolete-variable" code nil nil [25124 25237])
            ("font-lock-syntax-table" variable nil nil [25239 25432])
            ("font-lock-beginning-of-syntax-function" variable nil nil [25434 26056])
            ("make-obsolete-variable" code nil nil [26057 26180])
            ("font-lock-mark-block-function" variable nil nil [26182 26448])
            ("font-lock-fontify-buffer-function" variable (:default-value (quote font-lock-default-fontify-buffer)) nil [26450 26620])
            ("font-lock-unfontify-buffer-function" variable (:default-value (quote font-lock-default-unfontify-buffer)) nil [26622 26844])
            ("font-lock-fontify-region-function" variable (:default-value (quote font-lock-default-fontify-region)) nil [26846 27179])
            ("font-lock-unfontify-region-function" variable (:default-value (quote font-lock-default-unfontify-region)) nil [27181 27417])
            ("font-lock-inhibit-thing-lock" variable nil nil [27419 27667])
            ("font-lock-multiline" variable nil nil [27669 27996])
            ("font-lock-fontified" variable nil nil [27998 28030])
            ("font-lock-face-attributes" variable nil nil [28522 28556])
            ("save-buffer-state" function (:arguments ("body")) nil [28231 28482])
            ("font-lock-specified-p" function (:arguments ("mode")) nil [28592 29016])
            ("font-lock-initial-fontify" function nil nil [29018 29580])
            ("font-lock-mode-internal" function (:arguments ("arg")) nil [29582 30003])
            ("font-lock-add-keywords" function (:arguments ("mode" "keywords" "how")) nil [30005 33722])
            ("font-lock-update-removed-keyword-alist" function (:arguments ("mode" "keywords" "how")) nil [33724 34812])
            ("font-lock-remove-keywords" function (:arguments ("mode" "keywords")) nil [35633 38283])
            ("font-lock-support-mode" variable (:default-value (quote jit-lock-mode)) nil [38627 40306])
            ("fast-lock-mode" variable nil nil [40308 40331])
            ("lazy-lock-mode" variable nil nil [40332 40355])
            ("jit-lock-mode" variable nil nil [40356 40378])
            ("declare-function" code nil nil [40380 40441])
            ("declare-function" code nil nil [40442 40505])
            ("declare-function" code nil nil [40506 40551])
            ("declare-function" code nil nil [40552 40613])
            ("declare-function" code nil nil [40614 40677])
            ("declare-function" code nil nil [40678 40723])
            ("font-lock-turn-on-thing-lock" function nil nil [40725 41617])
            ("font-lock-turn-off-thing-lock" function nil nil [41619 41978])
            ("font-lock-after-fontify-buffer" function nil nil [41980 42302])
            ("font-lock-after-unfontify-buffer" function nil nil [42304 42840])
            ("font-lock-extend-after-change-region-function" variable nil nil [45492 46242])
            ("make-variable-buffer-local" code nil nil [46243 46318])
            ("font-lock-fontify-buffer" function (:user-visible-flag t) nil [46320 46623])
            ("font-lock-unfontify-buffer" function nil nil [46625 46710])
            ("font-lock-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [46712 47022])
            ("font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [47024 47253])
            ("font-lock-default-fontify-buffer" function nil nil [47255 47972])
            ("font-lock-default-unfontify-buffer" function nil nil [47974 48313])
            ("font-lock-dont-widen" variable nil nil [48315 48518])
            ("font-lock-beg" variable nil nil [48521 48543])
            ("font-lock-end" variable nil nil [48544 48566])
            ("font-lock-extend-region-functions" variable (:default-value (quote (font-lock-extend-region-wholelines font-lock-extend-region-multiline))) nil [48567 49874])
            ("make-variable-buffer-local" code nil nil [50005 50068])
            ("font-lock-extend-region-multiline" function nil nil [50070 50839])
            ("font-lock-extend-region-wholelines" function nil nil [50841 51268])
            ("font-lock-default-fontify-region" function (:arguments ("beg" "end" "loudly")) nil [51270 53234])
            ("font-lock-extra-managed-props" variable nil nil [53677 53890])
            ("font-lock-default-unfontify-region" function (:arguments ("beg" "end")) nil [53892 54263])
            ("font-lock-after-change-function" function (:arguments ("beg" "end" "old-len")) nil [54321 55458])
            ("jit-lock-start" variable nil nil [55460 55483])
            ("jit-lock-end" variable nil nil [55484 55505])
            ("font-lock-extend-jit-lock-region-after-change" function (:arguments ("beg" "end" "old-len")) nil [55506 58784])
            ("font-lock-fontify-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58786 59938])
            ("font-lock-prepend-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [60372 61301])
            ("font-lock-append-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [61303 62229])
            ("font-lock-fillin-text-property" function (:arguments ("start" "end" "prop" "value" "object")) nil [62231 62864])
            ("font-lock-apply-syntactic-highlight" function (:arguments ("highlight")) nil [65218 66549])
            ("font-lock-fontify-syntactic-anchored-keywords" function (:arguments ("keywords" "limit")) nil [66551 67600])
            ("font-lock-fontify-syntactic-keywords-region" function (:arguments ("start" "end")) nil [67602 69412])
            ("font-lock-comment-start-skip" variable nil nil [69509 69624])
            ("font-lock-comment-end-skip" variable nil nil [69626 69732])
            ("font-lock-fontify-syntactically-region" function (:arguments ("start" "end" "loudly")) nil [69734 71410])
            ("font-lock-apply-highlight" function (:arguments ("highlight")) nil [71505 73029])
            ("font-lock-fontify-anchored-keywords" function (:arguments ("keywords" "limit")) nil [73031 74443])
            ("font-lock-fontify-keywords-region" function (:arguments ("start" "end" "loudly")) nil [74445 76834])
            ("font-lock-compile-keywords" function (:arguments ("keywords" "syntactic-keywords")) nil [76912 78736])
            ("font-lock-compile-keyword" function (:arguments ("keyword")) nil [78738 79593])
            ("font-lock-eval-keywords" function (:arguments ("keywords")) nil [79595 79851])
            ("font-lock-value-in-major-mode" function (:arguments ("values")) nil [79853 80207])
            ("font-lock-choose-keywords" function (:arguments ("keywords" "level")) nil [80209 80597])
            ("font-lock-set-defaults" variable nil nil [80599 80634])
            ("font-lock-refresh-defaults" function nil nil [80671 81247])
            ("font-lock-major-mode" variable nil nil [81249 81347])
            ("make-variable-buffer-local" code nil nil [81348 81398])
            ("font-lock-set-defaults" function nil nil [81400 84325])
            ("font-lock-comment-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "Firebrick") (((class color) (min-colors 88) (background dark)) :foreground "chocolate1") (((class color) (min-colors 16) (background light)) :foreground "red") (((class color) (min-colors 16) (background dark)) :foreground "red1") (((class color) (min-colors 8) (background light)) :foreground "red") (((class color) (min-colors 8) (background dark)) :foreground "yellow") (t :weight bold :slant italic)))
                :type "face")
                nil [84450 85287])
            ("font-lock-comment-delimiter-face" variable
               (:default-value (quote ((default :inherit font-lock-comment-face)))
                :type "face")
                nil [85289 85466])
            ("font-lock-string-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "DimGray" :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :slant italic) (((class color) (min-colors 88) (background light)) :foreground "VioletRed4") (((class color) (min-colors 88) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 16) (background light)) :foreground "RosyBrown") (((class color) (min-colors 16) (background dark)) :foreground "LightSalmon") (((class color) (min-colors 8)) :foreground "green") (t :slant italic)))
                :type "face")
                nil [85468 86149])
            ("font-lock-doc-face" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [86151 86302])
            ("font-lock-keyword-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Purple") (((class color) (min-colors 88) (background dark)) :foreground "Cyan1") (((class color) (min-colors 16) (background light)) :foreground "Purple") (((class color) (min-colors 16) (background dark)) :foreground "Cyan") (((class color) (min-colors 8)) :foreground "cyan" :weight bold) (t :weight bold)))
                :type "face")
                nil [86304 86976])
            ("font-lock-builtin-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "dark slate blue") (((class color) (min-colors 88) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 16) (background light)) :foreground "Orchid") (((class color) (min-colors 16) (background dark)) :foreground "LightSteelBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :weight bold)))
                :type "face")
                nil [86978 87677])
            ("font-lock-function-name-face" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "Blue1") (((class color) (min-colors 88) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 16) (background light)) :foreground "Blue") (((class color) (min-colors 16) (background dark)) :foreground "LightSkyBlue") (((class color) (min-colors 8)) :foreground "blue" :weight bold) (t :inverse-video t :weight bold)))
                :type "face")
                nil [87679 88230])
            ("font-lock-variable-name-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold :slant italic) (((class color) (min-colors 88) (background light)) :foreground "sienna") (((class color) (min-colors 88) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 16) (background light)) :foreground "DarkGoldenrod") (((class color) (min-colors 16) (background dark)) :foreground "LightGoldenrod") (((class color) (min-colors 8)) :foreground "yellow" :weight light) (t :weight bold :slant italic)))
                :type "face")
                nil [88232 88993])
            ("font-lock-type-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "Gray90" :weight bold) (((class grayscale) (background dark)) :foreground "DimGray" :weight bold) (((class color) (min-colors 88) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 16) (background dark)) :foreground "PaleGreen") (((class color) (min-colors 8)) :foreground "green") (t :weight bold :underline t)))
                :type "face")
                nil [88995 89689])
            ("font-lock-constant-face" variable
               (:default-value (quote ((((class grayscale) (background light)) :foreground "LightGray" :weight bold :underline t) (((class grayscale) (background dark)) :foreground "Gray50" :weight bold :underline t) (((class color) (min-colors 88) (background light)) :foreground "dark cyan") (((class color) (min-colors 88) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 16) (background light)) :foreground "CadetBlue") (((class color) (min-colors 16) (background dark)) :foreground "Aquamarine") (((class color) (min-colors 8)) :foreground "magenta") (t :weight bold :underline t)))
                :type "face")
                nil [89691 90430])
            ("font-lock-warning-face" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [90432 90566])
            ("font-lock-negation-char-face" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [90568 90714])
            ("font-lock-preprocessor-face" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [90716 90887])
            ("font-lock-regexp-grouping-backslash" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [90889 91059])
            ("font-lock-regexp-grouping-construct" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [91061 91234])
            ("font-lock-match-c-style-declaration-item-and-skip-to-next" function (:arguments ("limit")) nil [96074 98103])
            ("cpp-font-lock-keywords-source-directives" variable
               (:constant-flag t
                :default-value "define\\|e\\(?:l\\(?:if\\|se\\)\\|ndif\\|rror\\)\\|file\\|i\\(?:f\\(?:n?def\\)?\\|mport\\|nclude\\)\\|line\\|pragma\\|undef\\|warning")
                nil [98728 98974])
            ("cpp-font-lock-keywords-source-depth" variable (:constant-flag t) nil [99229 99411])
            ("cpp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (let* ((directives cpp-font-lock-keywords-source-directives) (directives-depth cpp-font-lock-keywords-source-depth)) (list (quote ("^#[ 	]*\\(?:error\\|warning\\)[ 	]+\\(.+\\)" 1 font-lock-warning-face prepend)) (quote ("^#[ 	]*\\(?:import\\|include\\)[ 	]*\\(<[^>\"
]*>?\\)" 1 font-lock-string-face prepend)) (quote ("^#[ 	]*define[ 	]+\\([[:alpha:]_][[:alnum:]_$]*\\)(" (1 font-lock-function-name-face prepend) ((lambda (limit) (re-search-forward "\\(?:\\([[:alpha:]_][[:alnum:]_]*\\)[,]?\\)" (or (save-excursion (re-search-forward ")" limit t)) limit) t)) nil nil (1 font-lock-variable-name-face prepend)))) (quote ("^#[ 	]*\\(?:elif\\|if\\)\\>" ("\\<\\(defined\\)\\>[ 	]*(?\\([[:alpha:]_][[:alnum:]_]*\\)?" nil nil (1 font-lock-builtin-face prepend) (2 font-lock-variable-name-face prepend t)))) (list (concat "^\\(#[ 	]*\\(?:" directives "\\)\\)\\>[ 	!]*\\([[:alpha:]_][[:alnum:]_]*\\)?") (quote (1 font-lock-preprocessor-face prepend)) (list (+ 2 directives-depth) (quote font-lock-variable-name-face) nil t)))))
                nil [99413 101220])
            ("font-lock" package nil nil [101223 101243]))          
      :file "font-lock.el.gz"
      :pointmax 101272
      :fsize 26222
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 28556 . 28557) (symbol 28094 . 28111) (open-paren 28093 . 28094) (close-paren 10534 . 10535) (symbol 10499 . 10516) (open-paren 10498 . 10499)))
    (semanticdb-table "startup.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1131 1167])
            ("command-line-processed" variable nil nil [1169 1254])
            ("initialization" customgroup (:user-visible-flag t) nil [1256 1337])
            ("initial-buffer-choice" variable nil nil [1339 2235])
            ("inhibit-startup-screen" variable nil nil [2237 2490])
            ("defvaralias" code nil nil [2492 2552])
            ("defvaralias" code nil nil [2553 2615])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2617 2667])
            ("inhibit-startup-echo-area-message" variable nil nil [2789 3474])
            ("inhibit-default-init" variable nil nil [3476 3606])
            ("inhibit-startup-buffer-menu" variable nil nil [3608 3772])
            ("command-switch-alist" variable nil nil [3774 4042])
            ("command-line-args-left" variable nil nil [4044 4128])
            ("defvaralias" code nil nil [4130 4366])
            ("internal-make-var-non-special" code nil nil [4367 4404])
            ("argi" variable nil nil [4406 4458])
            ("internal-make-var-non-special" code nil nil [4459 4496])
            ("command-line-functions" variable nil nil [4498 4952])
            ("command-line-default-directory" variable nil nil [4954 5122])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5230 8414])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8416 11368])
            ("before-init-hook" variable nil nil [11371 11481])
            ("after-init-hook" variable nil nil [11483 11899])
            ("emacs-startup-hook" variable nil nil [11901 12008])
            ("term-setup-hook" variable nil nil [12010 12325])
            ("make-obsolete-variable" code nil nil [12327 12443])
            ("inhibit-startup-hooks" variable nil nil [12445 12586])
            ("keyboard-type" variable nil nil [12588 12809])
            ("window-setup-hook" variable nil nil [12811 13258])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13260 13429])
            ("init-file-user" variable nil nil [13431 14078])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14080 15350])
            ("mail-host-address" variable nil nil [15352 15581])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [15583 16072])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16074 16827])
            ("emacs-basic-display" variable nil nil [16829 16861])
            ("init-file-debug" variable nil nil [16863 16891])
            ("init-file-had-error" variable nil nil [16893 16989])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16991 17043])
            ("no-blinking-cursor" variable nil nil [17045 17076])
            ("pure-space-overflow" variable nil nil [17078 17163])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17165 17341])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [17343 17578])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [17580 17957])
            ("package--description-file" function (:arguments ("dir")) nil [17959 18290])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18292 20032])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20034 20803])
            ("normal-top-level" function nil nil [20805 30177])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30285 30511])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30513 30603])
            ("tool-bar-originally-present" variable nil nil [30605 30724])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [30726 31088])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [31090 31456])
            ("tty-handle-args" function (:arguments ("args")) nil [31458 34205])
            ("declare-function" code nil nil [34207 34301])
            ("declare-function" code nil nil [34302 34361])
            ("declare-function" code nil nil [34362 34406])
            ("server-name" variable nil nil [34408 34428])
            ("server-process" variable nil nil [34429 34452])
            ("command-line" function nil nil [34454 55814])
            ("x-apply-session-resources" function nil nil [55816 56843])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [56845 57287])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [57462 60179])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [60181 63401])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [63404 63523])
            ("fancy-splash-image" variable nil nil [63525 63722])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [63725 64097])
            ("fancy-splash-insert" function (:arguments ("args")) nil [64168 65564])
            ("declare-function" code nil nil [65566 65635])
            ("fancy-splash-image-file" function nil nil [65637 66116])
            ("fancy-splash-head" function nil nil [66118 67134])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [67136 70275])
            ("exit-splash-screen" function (:user-visible-flag t) nil [70277 70386])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [70388 71819])
            ("fancy-about-screen" function nil nil [71821 72579])
            ("fancy-splash-frame" function nil nil [72581 73177])
            ("use-fancy-splash-screens-p" function nil nil [73179 73869])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [73872 76381])
            ("normal-mouse-startup-screen" function nil nil [76383 78160])
            ("normal-no-mouse-startup-screen" function nil nil [78162 82265])
            ("normal-about-screen" function nil nil [82267 83792])
            ("startup-echo-area-message" function nil nil [83794 83991])
            ("display-startup-echo-area-message" function nil nil [83993 85257])
            ("display-startup-screen" function (:arguments ("concise")) nil [85259 85711])
            ("display-about-screen" function (:user-visible-flag t) nil [85713 85959])
            ("defalias" code nil nil [85961 86006])
            ("defalias" code nil nil [86007 86064])
            ("command-line-1" function (:arguments ("args-left")) nil [86066 97406])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [97408 98140]))          
      :file "startup.el.gz"
      :pointmax 98167
      :fsize 27371
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "indent.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags nil
      :file "indent.el.gz"
      :pointmax 28428
      :fsize 7906
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "saveplace.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("save-place" customgroup (:user-visible-flag t) nil [1466 1545])
            ("save-place-alist" variable nil nil [1548 1835])
            ("save-place" variable nil nil [1837 2310])
            ("make-variable-buffer-local" code nil nil [2312 2352])
            ("save-place-file" variable (:default-value (locate-user-emacs-file "places" ".emacs-places")) nil [2354 2597])
            ("save-place-version-control" variable nil nil [2599 3119])
            ("save-place-loaded" variable nil nil [3121 3213])
            ("save-place-limit" variable (:default-value 400) nil [3215 3477])
            ("save-place-forget-unreadable-files" variable (:default-value t) nil [3479 3999])
            ("save-place-save-skipped" variable (:default-value t) nil [4001 4302])
            ("save-place-skip-check-regexp" variable (:default-value "\\`/\\(?:cdrom\\|floppy\\|mnt\\|\\(?:[^@/:]*@\\)?[^@/:]*[^@/:.]:\\)") nil [4304 4821])
            ("save-place-ignore-files-regexp" variable (:default-value "\\(?:COMMIT_EDITMSG\\|hg-editor-[[:alnum:]]+\\.txt\\|svn-commit\\.tmp\\|bzr_log\\.[[:alnum:]]+\\)$") nil [4823 5275])
            ("toggle-save-place" function
               (:user-visible-flag t
                :arguments ("parg"))
                nil [5277 6192])
            ("declare-function" code nil nil [6194 6280])
            ("save-place-to-alist" function nil nil [6282 7898])
            ("save-place-forget-unreadable-files" function (:user-visible-flag t) nil [7900 9080])
            ("save-place-alist-to-file" function nil nil [9082 10154])
            ("load-save-place-alist-from-file" function nil nil [10156 11954])
            ("save-places-to-alist" function nil nil [11956 12637])
            ("save-place-find-file-hook" function nil nil [12639 13005])
            ("declare-function" code nil nil [13007 13056])
            ("save-place-dired-hook" function nil nil [13058 13742])
            ("save-place-kill-emacs-hook" function nil nil [13744 14033])
            ("add-hook" code nil nil [14035 14090])
            ("add-hook" code nil nil [14092 14154])
            ("unless" code nil nil [14156 14237])
            ("add-hook" code nil nil [14239 14288])
            ("saveplace" package nil nil [14290 14310]))          
      :file "saveplace.el.gz"
      :pointmax 14352
      :fsize 4783
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8161])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8163 14297])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14325 17265])
            ("custom-current-group" function nil nil [17294 17383])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17385 18446])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18448 19608])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19610 19956])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19958 20360])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20379 20969])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20971 21682])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21684 22437])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22439 22890])
            ("defalias" code nil nil [22891 22947])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22949 23185])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23187 23337])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23339 23513])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23515 23811])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23813 24099])
            ("custom-variable-p" function (:arguments ("variable")) nil [24101 24534])
            ("define-obsolete-function-alias" code nil nil [24536 24611])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24613 24908])
            ("custom-load-recursion" variable nil nil [25051 25127])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25129 26388])
            ("custom-local-buffer" variable nil nil [26391 26711])
            ("put" code nil nil [26712 26757])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26759 27140])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27142 27566])
            ("custom-quote" function (:arguments ("sexp")) nil [27568 27906])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27908 29071])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29073 30228])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30230 30702])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32529 32917])
            ("custom-theme-p" function (:arguments ("theme")) nil [32919 33028])
            ("custom-check-theme" function (:arguments ("theme")) nil [33030 33208])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33210 35406])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35408 36178])
            ("custom-set-variables" function (:arguments ("args")) nil [36181 36792])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36794 39469])
            ("custom--sort-vars-table" variable nil nil [39471 39503])
            ("custom--sort-vars-result" variable nil nil [39504 39537])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39539 41071])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41073 41657])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42253 42874])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42876 43364])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43366 43871])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [43895 44242])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44244 45045])
            ("custom--inhibit-theme-enable" variable nil nil [45047 45333])
            ("provide-theme" function (:arguments ("theme")) nil [45335 45733])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45735 46355])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46357 49233])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49235 49985])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [49987 50252])
            ("custom-available-themes" function nil nil [50254 51134])
            ("custom-theme--load-path" function nil nil [51136 51455])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51502 52738])
            ("custom-enabled-themes" variable nil nil [52740 54050])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54052 54170])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54172 55771])
            ("declare-function" code nil nil [55813 55907])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [55909 56269])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56271 56664])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56666 57121])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57123 57543])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57760 58131])
            ("custom-reset-variables" function (:arguments ("args")) nil [58133 58474])
            ("custom" package nil nil [58490 58507]))          
      :file "custom.el.gz"
      :pointmax 58533
      :fsize 17003
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "comint.el.gz"
      :file "comint.el.gz"
      :fsize 43836
      :lastmodtime '(21788 61018 0 0))
    (semanticdb-table "skeleton.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1318 1335])
            ("skeleton-transformation-function" variable (:default-value (quote identity)) nil [1499 1785])
            ("defvaralias" code nil nil [1786 1858])
            ("put" code nil nil [1905 2000])
            ("skeleton-autowrap" variable (:default-value t) nil [2003 2343])
            ("make-obsolete-variable" code nil nil [2344 2398])
            ("skeleton-end-newline" variable (:default-value t) nil [2400 2575])
            ("skeleton-end-hook" variable (:default-value (lambda nil (or (eolp) (not skeleton-end-newline) (newline-and-indent)))) nil [2577 2922])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [2940 3057])
            ("defvaralias" code nil nil [3058 3114])
            ("skeleton-untabify" variable nil nil [3116 3230])
            ("skeleton-newline-indent-rigidly" variable nil nil [3232 3387])
            ("defvar-local" code nil nil [3389 3675])
            ("skeleton-subprompt" variable (:default-value (substitute-command-keys "RET, \\<minibuffer-local-map>\\[abort-recursive-edit] or \\[help-command]")) nil [3677 3872])
            ("skeleton-debug" variable nil nil [3875 3970])
            ("skeleton-positions" variable nil nil [3972 4212])
            ("skeleton-il" variable nil nil [4256 4276])
            ("skeleton-modified" variable nil nil [4277 4303])
            ("skeleton-point" variable nil nil [4304 4327])
            ("skeleton-regions" variable nil nil [4328 4353])
            ("def-edebug-spec" code nil nil [4355 4566])
            ("define-skeleton" function (:arguments ("command" "documentation" "skeleton")) nil [4582 5837])
            ("skeleton-proxy-new" function (:arguments ("skeleton" "str" "arg")) nil [5854 7114])
            ("skeleton-insert" function (:arguments ("skeleton" "regions" "str")) nil [7131 11809])
            ("skeleton-read" function (:arguments ("prompt" "initial-input" "recursive")) nil [11811 13835])
            ("skeleton-internal-list" function (:arguments ("skeleton-il" "str" "recursive")) nil [13837 15093])
            ("skeleton-internal-1" function (:arguments ("element" "literal" "recursive")) nil [15096 17813])
            ("skeleton-pair" variable nil nil [18874 19086])
            ("skeleton-pair-on-word" variable nil nil [19089 19198])
            ("skeleton-pair-filter-function" variable (:default-value (lambda nil nil)) nil [19201 19407])
            ("skeleton-pair-alist" variable nil nil [19410 19736])
            ("skeleton-pair-default-alist" variable (:default-value (quote ((40 _ 41) (41) (91 _ 93) (93) (123 _ 125) (125) (60 _ 62) (62) (171 _ 187) (187) (96 _ 39)))) nil [19738 19917])
            ("skeleton-pair-insert-maybe" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19934 21440])
            ("skeleton" package nil nil [22942 22961]))          
      :file "skeleton.el.gz"
      :pointmax 22989
      :fsize 8237
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1335 . 1336) (symbol 1300 . 1317) (open-paren 1299 . 1300)))
    (semanticdb-table "newcomment.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4889])
            ("put" code nil nil [4905 4960])
            ("comment-end-skip" variable nil nil [4977 5081])
            ("put" code nil nil [5097 5150])
            ("comment-end" variable (:default-value (purecopy "")) nil [5167 5313])
            ("put" code nil nil [5329 5377])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5394 5750])
            ("comment-insert-comment-function" variable nil nil [5767 6017])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6019 6370])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6372 6731])
            ("block-comment-start" variable nil nil [6749 6781])
            ("block-comment-end" variable nil nil [6782 6812])
            ("comment-quote-nested" variable (:default-value t) nil [6814 6951])
            ("comment-continue" variable nil nil [6953 7428])
            ("comment-add" variable nil nil [7430 7788])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [7805 10008])
            ("comment-style" variable (:default-value (quote indent)) nil [10025 10451])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10468 10892])
            ("comment-inline-offset" variable (:default-value 1) nil [10894 11337])
            ("comment-multi-line" variable nil nil [11354 11771])
            ("comment-empty-lines" variable nil nil [11773 12157])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12183 12436])
            ("comment-string-reverse" function (:arguments ("s")) nil [12438 12611])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12628 15859])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [15861 16004])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16006 17100])
            ("comment-use-global-state" variable (:default-value t) nil [17129 17583])
            ("make-obsolete-variable" code nil nil [17585 17662])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [17664 19252])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [19254 20466])
            ("comment-beginning" function nil nil [20468 22354])
            ("comment-forward" function (:arguments ("n")) nil [22356 22859])
            ("comment-enter-backward" function nil nil [22861 24425])
            ("comment-indent-default" function nil nil [24467 24814])
            ("comment-choose-indent" function (:arguments ("indent")) nil [24816 27400])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [27417 30383])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30400 31231])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31248 31815])
            ("comment-padright" function (:arguments ("str" "n")) nil [31817 33562])
            ("comment-padleft" function (:arguments ("str" "n")) nil [33589 35276])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [35293 35905])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [35907 39805])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [39807 41323])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [41325 42381])
            ("comment-add" function (:arguments ("arg")) nil [42383 42782])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [42784 46175])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [46192 47192])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [47194 49693])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [49710 50172])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [50174 50368])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [50385 50777])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50794 52419])
            ("comment-auto-fill-only-comments" variable nil nil [52436 52636])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [52638 54730])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [54748 58634])
            ("newcomment" package nil nil [58636 58657]))          
      :file "newcomment.el.gz"
      :pointmax 58687
      :fsize 16623
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cus-face.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [941 972])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [997 1433])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1457 8954])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8956 9591])
            ("custom-set-faces" function (:arguments ("args")) nil [9612 10034])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10036 12339])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12501 12857])
            ("custom-reset-faces" function (:arguments ("args")) nil [12859 13175])
            ("cus-face" package nil nil [13191 13210]))          
      :file "cus-face.el.gz"
      :pointmax 13238
      :fsize 3966
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "window.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8089])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8091 8856])
            ("window-right" function (:arguments ("window")) nil [9163 9375])
            ("window-left" function (:arguments ("window")) nil [9377 9587])
            ("window-child" function (:arguments ("window")) nil [9589 9744])
            ("window-child-count" function (:arguments ("window")) nil [9746 10042])
            ("window-last-child" function (:arguments ("window")) nil [10044 10311])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [10313 10807])
            ("window-normalize-frame" function (:arguments ("frame")) nil [10809 11062])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [11064 11619])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [11658 12430])
            ("ignore-window-parameters" variable nil nil [12432 12776])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [12826 12950])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [12952 13148])
            ("window-min-height" variable (:default-value 4) nil [13150 13830])
            ("window-min-pixel-height" function (:arguments ("window")) nil [13832 14019])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [14069 14192])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [14194 14389])
            ("window-min-width" variable (:default-value 10) nil [14391 15090])
            ("window-min-pixel-width" function (:arguments ("window")) nil [15092 15277])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [15279 15596])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [15598 16230])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [16232 16658])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [16660 17767])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [17769 18481])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [18483 19706])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [19708 20359])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [20361 21319])
            ("window-atom-root" function (:arguments ("window")) nil [21341 21761])
            ("window-make-atom" function (:arguments ("window")) nil [21763 22151])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [22153 24598])
            ("window--atom-check-1" function (:arguments ("window")) nil [24600 25488])
            ("window--atom-check" function (:arguments ("frame")) nil [25490 25878])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [25897 25961])
            ("window-sides-vertical" variable nil nil [25963 26169])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [26171 27592])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [27594 28650])
            ("window--major-side-window" function (:arguments ("side")) nil [28652 30322])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [30324 32376])
            ("delete-side-window" function (:arguments ("window")) nil [32378 32596])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [32598 37601])
            ("window--side-check" function (:arguments ("frame")) nil [37603 40107])
            ("window--check" function (:arguments ("frame")) nil [40109 40288])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [40324 42168])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [42170 43775])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [43795 44743])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [44745 45549])
            ("window-size-fixed" variable nil nil [45551 45988])
            ("make-variable-buffer-local" code nil nil [45989 46036])
            ("window--size-ignore-p" function (:arguments ("window" "ignore")) nil [46038 46214])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [46216 46921])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [46923 47839])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [47841 50693])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [50695 52454])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [52456 52961])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [52963 54103])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [54105 54595])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [54597 55991])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [55993 58118])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [58120 59463])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [59465 61294])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61342 63494])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [63496 64154])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [64156 65578])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [65580 66136])
            ("defalias" code nil nil [66183 66229])
            ("defalias" code nil nil [66230 66273])
            ("window-full-height-p" function (:arguments ("window")) nil [66362 66800])
            ("window-full-width-p" function (:arguments ("window")) nil [66802 67234])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [67236 67767])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [67769 68689])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [68691 70573])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [70575 71152])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [71154 71672])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [71674 72064])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [72355 77850])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [77852 79473])
            ("defalias" code nil nil [79475 79525])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [79527 81178])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [81180 82450])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [82452 83745])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [83747 85278])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [85280 85430])
            ("count-windows" function (:arguments ("minibuf")) nil [85432 85725])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [85750 86700])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [86702 88326])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [88328 90243])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [90245 90681])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [90683 91205])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [91334 92558])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [92560 92966])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [92968 96645])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [96647 97194])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [97196 97373])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [97375 100893])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [100895 107843])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [107845 112023])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [112025 114271])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [114273 115106])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [115108 117029])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [117031 122497])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [122499 123786])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [123788 125131])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125133 125729])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125731 126341])
            ("frame-root-window-p" function (:arguments ("window")) nil [126344 126483])
            ("window--subtree" function (:arguments ("window" "next")) nil [126485 127208])
            ("window-tree" function (:arguments ("frame")) nil [127210 128105])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [128108 130739])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [130875 132148])
            ("window-deletable-p" function (:arguments ("window")) nil [132173 133562])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [133564 133867])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [133869 137265])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [137267 139718])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [139720 140346])
            ("record-window-buffer" function (:arguments ("window")) nil [142082 143501])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [143503 144002])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [144004 144931])
            ("switch-to-visible-buffer" variable (:default-value t) nil [144933 145481])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [145483 150792])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150794 154151])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [154153 155149])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [155151 155878])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [155880 156398])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [156400 157240])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [157242 158375])
            ("unbury-buffer" function (:user-visible-flag t) nil [158377 158502])
            ("next-buffer" function (:user-visible-flag t) nil [158504 158806])
            ("previous-buffer" function (:user-visible-flag t) nil [158808 159118])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [159120 160874])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [160876 161908])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [161910 166445])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [166447 167047])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [167049 168013])
            ("window-split-min-size" function (:arguments ("horizontal" "pixelwise")) nil [168039 168455])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [168457 180056])
            ("split-window-keep-point" variable (:default-value t) nil [180133 180507])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [180509 182764])
            ("defalias" code nil nil [182766 182821])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [182823 184032])
            ("defalias" code nil nil [184034 184091])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [184594 187362])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [187364 187790])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [187792 189049])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [189051 189481])
            ("window-area-factor" variable (:default-value 1) nil [189528 189697])
            ("make-variable-buffer-local" code nil nil [189698 189746])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [189748 190402])
            ("balance-windows-area" function (:user-visible-flag t) nil [190404 194760])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [194830 197625])
            ("window-state-get" function (:arguments ("window" "writable")) nil [197627 199716])
            ("window-state-put-list" variable nil nil [199718 199796])
            ("window-state-put-stale-windows" variable nil nil [199798 199885])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [199887 202589])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [202591 206347])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [206349 210426])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [210429 212584])
            ("display-buffer-function" variable nil nil [212586 213142])
            ("make-obsolete-variable" code nil nil [213144 213225])
            ("pop-up-frame-alist" variable nil nil [213406 214022])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [214024 214353])
            ("special-display-buffer-names" variable nil nil [214355 216945])
            ("make-obsolete-variable" code nil nil [216946 217029])
            ("put" code nil nil [217030 217089])
            ("special-display-regexps" variable nil nil [217091 219733])
            ("make-obsolete-variable" code nil nil [219734 219812])
            ("put" code nil nil [219813 219867])
            ("special-display-p" function (:arguments ("buffer-name")) nil [219869 220764])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [220766 221381])
            ("make-obsolete-variable" code nil nil [221382 221464])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [221466 223486])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [223488 224286])
            ("make-obsolete-variable" code nil nil [224287 224366])
            ("same-window-buffer-names" variable nil nil [224368 224940])
            ("same-window-regexps" variable nil nil [224942 225530])
            ("same-window-p" function (:arguments ("buffer-name")) nil [225532 226503])
            ("pop-up-frames" variable nil nil [226505 226917])
            ("display-buffer-reuse-frames" variable nil nil [226919 227148])
            ("make-obsolete-variable" code nil nil [227150 227278])
            ("pop-up-windows" variable (:default-value t) nil [227280 227404])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [227406 228789])
            ("split-height-threshold" variable (:default-value 80) nil [228791 229317])
            ("split-width-threshold" variable (:default-value 160) nil [229319 229707])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [229709 231986])
            ("split-window-sensibly" function (:arguments ("window")) nil [231988 234373])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [234375 235485])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [235487 236429])
            ("even-window-heights" variable (:default-value t) nil [236431 236747])
            ("window--even-window-heights" function (:arguments ("window")) nil [236749 237613])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [237615 240290])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [240292 240716])
            ("display-buffer-mark-dedicated" variable nil nil [241055 241264])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [241266 241742])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [241744 242119])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [242121 242456])
            ("put" code nil nil [242457 242520])
            ("display-buffer-alist" variable nil nil [242522 243533])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [243535 243959])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [243961 244545])
            ("put" code nil nil [244546 244607])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [244609 245032])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [245034 245206])
            ("put" code nil nil [245207 245272])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [245274 245504])
            ("put" code nil nil [245505 245570])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [245572 251325])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [251327 251660])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [251702 252187])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [252189 252530])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [252532 254178])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [254180 254931])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [254933 255953])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [255955 257269])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [257271 257857])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [257859 258708])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [258710 259801])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [259803 262090])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [262092 263835])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [263837 264292])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [264328 265860])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [265862 266496])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [266498 267642])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [267644 268200])
            ("switch-to-buffer-preserve-window-point" variable nil nil [268202 269091])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [269093 271844])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [271846 272878])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [272880 273892])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [273895 274868])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [274870 275085])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [275087 275306])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [275308 276709])
            ("window-buffer-height" function (:arguments ("window")) nil [276711 277189])
            ("fit-window-to-buffer-horizontally" variable nil nil [277254 277648])
            ("fit-frame-to-buffer" variable nil nil [277762 278211])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [278213 279427])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [279429 280718])
            ("declare-function" code nil nil [280720 280791])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [280793 280997])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [280999 289619])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width"))
                nil [289621 295683])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [295685 296066])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [296068 297176])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [297179 298001])
            ("recenter-last-op" variable nil nil [298005 298157])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [298159 299019])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299021 300168])
            ("define-key" code nil nil [300170 300222])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300224 301358])
            ("define-key" code nil nil [301360 301423])
            ("scroll-error-top-bottom" variable nil nil [301593 302037])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302039 303102])
            ("put" code nil nil [303104 303146])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [303148 304215])
            ("put" code nil nil [304217 304261])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304331 304614])
            ("put" code nil nil [304616 304655])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304657 304942])
            ("put" code nil nil [304944 304985])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [304989 305384])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [305386 306070])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306072 306575])
            ("mouse-autoselect-window-timer" variable nil nil [306578 306668])
            ("mouse-autoselect-window-position" variable nil nil [306670 306781])
            ("mouse-autoselect-window-window" variable nil nil [306783 306884])
            ("mouse-autoselect-window-state" variable nil nil [306886 307183])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [307185 307906])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [307908 308736])
            ("mouse-autoselect-window-select" function nil nil [308738 311939])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [311941 313445])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [313447 314125])
            ("define-key" code nil nil [314215 314256])
            ("define-key" code nil nil [314257 314305])
            ("define-key" code nil nil [314306 314352])
            ("define-key" code nil nil [314353 314399])
            ("define-key" code nil nil [314400 314440])
            ("define-key" code nil nil [314441 314483])
            ("define-key" code nil nil [314484 314539])
            ("define-key" code nil nil [314540 314594])
            ("define-key" code nil nil [314595 314658])
            ("define-key" code nil nil [314659 314702])
            ("define-key" code nil nil [314703 314755]))          
      :file "window.el.gz"
      :pointmax 314781
      :fsize 69800
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "bindings.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24193])
            ("make-variable-buffer-local" code nil nil [24195 24241])
            ("mapc" code nil nil [24497 24863])
            ("base64" package nil nil [24921 24938])
            ("md5" package nil nil [24939 24953])
            ("sha1" package nil nil [24954 24969])
            ("overlay" package nil nil [24970 25018])
            ("text-properties" package nil nil [25019 25089])
            ("define-key" code nil nil [25091 25133])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25135 25514])
            ("garbage-collect" code nil nil [25632 25649])
            ("setq" code nil nil [25653 25690])
            ("make-variable-buffer-local" code nil nil [25692 25753])
            ("global-set-key" code nil nil [25771 25823])
            ("global-set-key" code nil nil [25824 25878])
            ("global-set-key" code nil nil [26074 26126])
            ("global-set-key" code nil nil [26127 26173])
            ("global-set-key" code nil nil [26174 26225])
            ("put" code nil nil [26311 26346])
            ("visual-order-cursor-movement" variable nil nil [26399 27103])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27105 27861])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27863 28618])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28620 29234])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29236 29849])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29851 29926])
            ("define-key" code nil nil [29927 29964])
            ("define-key" code nil nil [29966 30011])
            ("define-key" code nil nil [30012 30046])
            ("define-key" code nil nil [30060 30114])
            ("define-key" code nil nil [30115 30160])
            ("substitute-key-definition" code nil nil [30269 30337])
            ("define-key" code nil nil [30339 30378])
            ("define-key" code nil nil [30379 30420])
            ("define-key" code nil nil [30421 30460])
            ("define-key" code nil nil [30461 30506])
            ("define-key" code nil nil [30507 30551])
            ("define-key" code nil nil [30552 30602])
            ("define-key" code nil nil [30603 30648])
            ("define-key" code nil nil [30649 30698])
            ("define-key" code nil nil [30699 30739])
            ("define-key" code nil nil [30740 30777])
            ("define-key" code nil nil [30778 30822])
            ("define-key" code nil nil [30823 30871])
            ("define-key" code nil nil [30872 30913])
            ("define-key" code nil nil [30987 31031])
            ("define-key" code nil nil [31098 31151])
            ("define-key" code nil nil [31185 31238])
            ("define-key" code nil nil [31239 31271])
            ("put" code nil nil [31272 31314])
            ("define-key" code nil nil [31385 31422])
            ("define-key" code nil nil [31423 31459])
            ("define-key" code nil nil [31638 31677])
            ("define-key" code nil nil [31678 31727])
            ("define-key" code nil nil [31728 31773])
            ("define-key" code nil nil [31775 31818])
            ("define-key" code nil nil [31819 31864])
            ("define-key" code nil nil [31865 31915])
            ("define-key" code nil nil [31916 31962])
            ("define-key" code nil nil [31963 32011])
            ("define-key" code nil nil [32012 32063])
            ("let" code nil nil [32065 32952])
            ("define-key" code nil nil [32954 33004])
            ("let" code nil nil [33005 33119])
            ("define-key" code nil nil [33120 33163])
            ("let" code nil nil [33190 33318])
            ("define-key" code nil nil [33319 33369])
            ("let" code nil nil [33401 33526])
            ("define-key" code nil nil [33527 33580])
            ("define-key" code nil nil [33636 33688])
            ("define-key" code nil nil [33971 34014])
            ("define-key" code nil nil [34016 34057])
            ("define-key" code nil nil [34058 34101])
            ("define-key" code nil nil [34102 34142])
            ("define-key" code nil nil [34143 34188])
            ("define-key" code nil nil [34189 34225])
            ("define-key" code nil nil [34226 34260])
            ("define-key" code nil nil [34311 34359])
            ("define-key" code nil nil [34417 34466])
            ("put" code nil nil [34467 34518])
            ("define-key" code nil nil [34520 34574])
            ("define-key" code nil nil [34575 34621])
            ("define-key" code nil nil [34622 34669])
            ("define-key" code nil nil [34670 34717])
            ("define-key" code nil nil [34719 34760])
            ("define-key" code nil nil [34761 34806])
            ("define-key" code nil nil [34807 34853])
            ("define-key" code nil nil [34854 34908])
            ("define-key" code nil nil [34909 34957])
            ("define-key" code nil nil [34959 34997])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [34999 35073])
            ("define-key" code nil nil [35074 35107])
            ("define-key" code nil nil [35109 35148])
            ("define-key" code nil nil [35149 35188])
            ("define-key" code nil nil [35189 35228])
            ("define-key" code nil nil [35229 35269])
            ("define-key" code nil nil [35270 35310])
            ("define-key" code nil nil [35311 35355])
            ("define-key" code nil nil [35356 35400])
            ("define-key" code nil nil [35401 35445])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35447 35527])
            ("define-key" code nil nil [35528 35563])
            ("define-key" code nil nil [35565 35600])
            ("define-key" code nil nil [35601 35647])
            ("define-key" code nil nil [35648 35694])
            ("define-key" code nil nil [35695 35756])
            ("define-key" code nil nil [35757 35812])
            ("define-key" code nil nil [35813 35861])
            ("define-key" code nil nil [35862 35913])
            ("define-key" code nil nil [35914 35978])
            ("define-key" code nil nil [36088 36144])
            ("define-key" code nil nil [36145 36191])
            ("define-key" code nil nil [36388 36445])
            ("define-key" code nil nil [36446 36501])
            ("define-key" code nil nil [36502 36556])
            ("define-key" code nil nil [36557 36624])
            ("define-key" code nil nil [36625 36690])
            ("define-key" code nil nil [36691 36733])
            ("define-key" code nil nil [36734 36778])
            ("define-key" code nil nil [36779 36823])
            ("define-key" code nil nil [36824 36866])
            ("define-key" code nil nil [36867 36920])
            ("define-key" code nil nil [36921 36971])
            ("define-key" code nil nil [36972 37023])
            ("define-key" code nil nil [37024 37076])
            ("define-key" code nil nil [37077 37124])
            ("put" code nil nil [37125 37155])
            ("define-key" code nil nil [37156 37202])
            ("define-key" code nil nil [37203 37257])
            ("define-key" code nil nil [37258 37310])
            ("define-key" code nil nil [37311 37370])
            ("define-key" code nil nil [37371 37429])
            ("define-key" code nil nil [37430 37488])
            ("define-key" code nil nil [37489 37537])
            ("define-key" code nil nil [37538 37585])
            ("define-key" code nil nil [37586 37646])
            ("define-key" code nil nil [37647 37705])
            ("define-key" code nil nil [37706 37759])
            ("define-key" code nil nil [37760 37827])
            ("define-key" code nil nil [37828 37894])
            ("define-key" code nil nil [38006 38065])
            ("define-key" code nil nil [38066 38115])
            ("define-key" code nil nil [38116 38166])
            ("define-key" code nil nil [38167 38207])
            ("define-key" code nil nil [38306 38358])
            ("define-key" code nil nil [38359 38413])
            ("define-key" code nil nil [38414 38458])
            ("define-key" code nil nil [38459 38496])
            ("define-key" code nil nil [38497 38552])
            ("define-key" code nil nil [38553 38609])
            ("define-key" code nil nil [38625 38667])
            ("define-key" code nil nil [38899 38946])
            ("define-key" code nil nil [38947 38994])
            ("define-key" code nil nil [38995 39052])
            ("let" code nil nil [43013 43859])
            ("define-key" code nil nil [43861 43910])
            ("define-key" code nil nil [43911 43957])
            ("define-key" code nil nil [43958 44007])
            ("define-key" code nil nil [45174 45220])
            ("define-key" code nil nil [45342 45389])
            ("define-key" code nil nil [45391 45439])
            ("define-key" code nil nil [45441 45488])
            ("define-key" code nil nil [45489 45530])
            ("define-key" code nil nil [45531 45575])
            ("define-key" code nil nil [45576 45622])
            ("define-key" code nil nil [45624 45662])
            ("define-key" code nil nil [45663 45712])
            ("define-key" code nil nil [45713 45765])
            ("define-key" code nil nil [45766 45812])
            ("define-key" code nil nil [45813 45856])
            ("define-key" code nil nil [45857 45906])
            ("define-key" code nil nil [45908 45943])
            ("define-key" code nil nil [45944 45982])
            ("define-key" code nil nil [45983 46022])
            ("define-key" code nil nil [46023 46058])
            ("define-key" code nil nil [46059 46106])
            ("define-key" code nil nil [46108 46153])
            ("define-key" code nil nil [46154 46193])
            ("define-key" code nil nil [46194 46239])
            ("define-key" code nil nil [46240 46290])
            ("defalias" code nil nil [46292 46353])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46354 46469])
            ("define-key" code nil nil [46470 46530])
            ("global-set-key" code nil nil [46532 46571])
            ("define-key" code nil nil [46572 46614])
            ("global-set-key" code nil nil [46615 46653])
            ("define-key" code nil nil [46654 46696])
            ("global-set-key" code nil nil [46773 46812])
            ("global-set-key" code nil nil [46813 46851])
            ("global-set-key" code nil nil [46911 46949])
            ("global-set-key" code nil nil [46950 47000])
            ("global-set-key" code nil nil [47061 47101])
            ("global-set-key" code nil nil [47103 47148])
            ("define-key" code nil nil [47149 47194])
            ("global-set-key" code nil nil [47195 47239])
            ("define-key" code nil nil [47240 47284])
            ("global-set-key" code nil nil [47285 47333])
            ("define-key" code nil nil [47334 47382])
            ("global-set-key" code nil nil [47383 47424])
            ("define-key" code nil nil [47425 47466])
            ("global-set-key" code nil nil [47467 47517])
            ("define-key" code nil nil [47518 47568])
            ("global-set-key" code nil nil [47569 47613])
            ("define-key" code nil nil [47614 47658])
            ("define-key" code nil nil [47660 47701])
            ("define-key" code nil nil [47702 47744])
            ("define-key" code nil nil [47745 47790])
            ("define-key" code nil nil [47791 47829])
            ("define-key" code nil nil [47830 47870])
            ("define-key" code nil nil [47871 47909])
            ("define-key" code nil nil [47910 47948])
            ("define-key" code nil nil [48166 48217])
            ("define-key" code nil nil [48218 48272])
            ("define-key" code nil nil [48273 48314])
            ("define-key" code nil nil [48315 48357])
            ("define-key" code nil nil [48358 48405])
            ("define-key" code nil nil [48406 48447])
            ("define-key" code nil nil [48448 48487])
            ("define-key" code nil nil [48488 48532])
            ("define-key" code nil nil [48533 48577])
            ("define-key" code nil nil [48578 48632])
            ("define-key" code nil nil [48634 48679])
            ("define-key" code nil nil [48681 48721])
            ("define-key" code nil nil [48722 48777])
            ("define-key" code nil nil [48778 48832])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48836 49892])
            ("define-key" code nil nil [49893 49931])
            ("define-key" code nil nil [49933 49973])
            ("define-key" code nil nil [49974 50017])
            ("define-key" code nil nil [50020 50064])
            ("define-key" code nil nil [50065 50108])
            ("define-key" code nil nil [50109 50149])
            ("define-key" code nil nil [50150 50193])
            ("define-key" code nil nil [50194 50236])
            ("define-key" code nil nil [50237 50276])
            ("define-key" code nil nil [50277 50330])
            ("define-key" code nil nil [50332 50373])
            ("define-key" code nil nil [50374 50414])
            ("define-key" code nil nil [50415 50455])
            ("define-key" code nil nil [50456 50500])
            ("define-key" code nil nil [50501 50544])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50593 50665])
            ("define-key" code nil nil [50666 50703])
            ("define-key" code nil nil [50705 50749])
            ("define-key" code nil nil [50750 50797])
            ("define-key" code nil nil [50798 50844])
            ("define-key" code nil nil [50845 50889])
            ("define-key" code nil nil [50890 50945])
            ("define-key" code nil nil [50946 50999])
            ("define-key" code nil nil [51061 51115])
            ("define-key" code nil nil [51116 51158])
            ("define-key" code nil nil [51159 51201])
            ("define-key" code nil nil [51418 51462])
            ("define-key" code nil nil [51463 51504])
            ("define-key" code nil nil [51505 51548])
            ("define-key" code nil nil [51550 51584])
            ("define-key" code nil nil [51586 51632])
            ("define-key" code nil nil [51634 51697])
            ("define-key" code nil nil [51698 51762])
            ("define-key" code nil nil [51783 51831])
            ("define-key" code nil nil [51832 51880]))          
      :file "bindings.el.gz"
      :pointmax 52012
      :fsize 13047
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "whitespace.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("whitespace" customgroup (:user-visible-flag t) nil [12984 13173])
            ("whitespace-style" variable (:default-value (quote (face tabs spaces trailing lines space-before-tab newline indentation empty space-after-tab space-mark tab-mark newline-mark))) nil [13176 18728])
            ("whitespace-space" variable (:default-value (quote whitespace-space)) nil [18730 18872])
            ("make-obsolete-variable" code nil nil [18873 18946])
            ("whitespace-space" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey20" :foreground "darkgray") (((class color) (background light)) :background "LightYellow" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [18949 19246])
            ("whitespace-hspace" variable (:default-value (quote whitespace-hspace)) nil [19249 19398])
            ("make-obsolete-variable" code nil nil [19399 19473])
            ("whitespace-hspace" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey24" :foreground "darkgray") (((class color) (background light)) :background "LemonChiffon3" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [19475 19800])
            ("whitespace-tab" variable (:default-value (quote whitespace-tab)) nil [19803 19937])
            ("make-obsolete-variable" code nil nil [19938 20009])
            ("whitespace-tab" variable
               (:default-value (quote ((((class color) (background dark)) :background "grey22" :foreground "darkgray") (((class color) (background light)) :background "beige" :foreground "lightgray") (t :inverse-video t)))
                :type "face")
                nil [20011 20294])
            ("whitespace-newline" variable (:default-value (quote whitespace-newline)) nil [20297 20514])
            ("make-obsolete-variable" code nil nil [20515 20590])
            ("whitespace-newline" variable
               (:default-value (quote ((default :weight normal) (((class color) (background dark)) :foreground "darkgray") (((class color) (min-colors 88) (background light)) :foreground "lightgray") (((class color) (background light)) :foreground "brown") (t :underline t)))
                :type "face")
                nil [20592 21115])
            ("whitespace-trailing" variable (:default-value (quote whitespace-trailing)) nil [21118 21278])
            ("make-obsolete-variable" code nil nil [21279 21355])
            ("whitespace-trailing" variable
               (:default-value (quote ((default :weight bold) (((class mono)) :inverse-video t :underline t) (t :background "red1" :foreground "yellow")))
                :type "face")
                nil [21357 21602])
            ("whitespace-line" variable (:default-value (quote whitespace-line)) nil [21605 21782])
            ("make-obsolete-variable" code nil nil [21783 21855])
            ("whitespace-line" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "gray20" :foreground "violet")))
                :type "face")
                nil [21857 22092])
            ("whitespace-space-before-tab" variable (:default-value (quote whitespace-space-before-tab)) nil [22095 22281])
            ("make-obsolete-variable" code nil nil [22282 22390])
            ("whitespace-space-before-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "DarkOrange" :foreground "firebrick")))
                :type "face")
                nil [22392 22618])
            ("whitespace-indentation" variable (:default-value (quote whitespace-indentation)) nil [22621 22812])
            ("make-obsolete-variable" code nil nil [22813 22892])
            ("whitespace-indentation" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [22894 23131])
            ("whitespace-empty" variable (:default-value (quote whitespace-empty)) nil [23134 23315])
            ("make-obsolete-variable" code nil nil [23316 23389])
            ("whitespace-empty" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [23391 23630])
            ("whitespace-space-after-tab" variable (:default-value (quote whitespace-space-after-tab)) nil [23633 23825])
            ("make-obsolete-variable" code nil nil [23826 23933])
            ("whitespace-space-after-tab" variable
               (:default-value (quote ((((class mono)) :inverse-video t :weight bold :underline t) (t :background "yellow" :foreground "firebrick")))
                :type "face")
                nil [23935 24165])
            ("whitespace-hspace-regexp" variable (:default-value "\\(\302\240+\\)") nil [24168 24816])
            ("whitespace-space-regexp" variable (:default-value "\\( +\\)") nil [24819 25512])
            ("whitespace-tab-regexp" variable (:default-value "\\(	+\\)") nil [25515 26201])
            ("whitespace-trailing-regexp" variable (:default-value "\\([	 \302\240]+\\)$") nil [26204 26657])
            ("whitespace-space-before-tab-regexp" variable (:default-value "\\( +\\)\\(	+\\)") nil [26660 26942])
            ("whitespace-indentation-regexp" variable (:default-value (quote ("^	*\\(\\( \\{%d\\}\\)+\\)[^
	]" . "^ *\\(	+\\)[^
]"))) nil [26945 27442])
            ("whitespace-empty-at-bob-regexp" variable (:default-value "^\\(\\([ 	]*
\\)+\\)") nil [27445 27700])
            ("whitespace-empty-at-eob-regexp" variable (:default-value "^\\([ 	
]+\\)") nil [27703 27939])
            ("whitespace-space-after-tab-regexp" variable (:default-value (quote ("	+\\(\\( \\{%d\\}\\)+\\)" . "\\(	+\\) +"))) nil [27942 28401])
            ("whitespace-line-column" variable (:default-value 80) nil [28404 28778])
            ("whitespace-display-mappings" variable (:default-value (quote ((space-mark 32 [183] [46]) (space-mark 160 [164] [95]) (newline-mark 10 [36 10]) (tab-mark 9 [187 9] [92 9])))) nil [28838 30995])
            ("whitespace-global-modes" variable (:default-value t) nil [30998 31905])
            ("whitespace-action" variable nil nil [31908 33148])
            ("define-minor-mode" code nil nil [33272 33935])
            ("define-minor-mode" code nil nil [33953 34785])
            ("define-minor-mode" code nil nil [34910 36159])
            ("whitespace-enable-predicate" variable (:default-value (lambda nil (and (cond ((eq whitespace-global-modes t)) ((listp whitespace-global-modes) (if (eq (car-safe whitespace-global-modes) (quote not)) (not (memq major-mode (cdr whitespace-global-modes))) (memq major-mode whitespace-global-modes))) (t nil)) (not noninteractive) (not (eq (aref (buffer-name) 0) 32)) (or (not (eq (aref (buffer-name) 0) 42)) (string= (buffer-name) "*scratch*"))))) nil [36161 37179])
            ("whitespace-turn-on-if-enabled" function nil nil [37181 37293])
            ("define-minor-mode" code nil nil [37310 38230])
            ("whitespace-style-value-list" variable
               (:constant-flag t
                :default-value (quote (face tabs spaces trailing lines lines-tail newline empty indentation indentation::tab indentation::space space-after-tab space-after-tab::tab space-after-tab::space space-before-tab space-before-tab::tab space-before-tab::space help-newline tab-mark space-mark newline-mark)))
                nil [38335 38836])
            ("whitespace-toggle-option-alist" variable
               (:constant-flag t
                :default-value (quote ((102 . face) (116 . tabs) (115 . spaces) (114 . trailing) (108 . lines) (76 . lines-tail) (110 . newline) (101 . empty) (9 . indentation) (73 . indentation::tab) (105 . indentation::space) (1 . space-after-tab) (65 . space-after-tab::tab) (97 . space-after-tab::space) (2 . space-before-tab) (66 . space-before-tab::tab) (98 . space-before-tab::space) (84 . tab-mark) (83 . space-mark) (78 . newline-mark) (120 . whitespace-style))))
                nil [38839 39677])
            ("whitespace-active-style" variable nil nil [39680 39767])
            ("whitespace-indent-tabs-mode" variable (:default-value indent-tabs-mode) nil [39769 39873])
            ("whitespace-tab-width" variable (:default-value tab-width) nil [39875 39958])
            ("whitespace-point" variable (:default-value (point)) nil [39960 40098])
            ("whitespace-font-lock-refontify" variable nil nil [40100 40260])
            ("whitespace-bob-marker" variable nil nil [40262 40404])
            ("whitespace-eob-marker" variable nil nil [40406 40548])
            ("whitespace-buffer-changed" variable nil nil [40550 40730])
            ("whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40748 43622])
            ("whitespace-toggle-style" variable nil nil [43625 43717])
            ("global-whitespace-toggle-options" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [43735 46693])
            ("whitespace-cleanup" function (:user-visible-flag t) nil [46814 50197])
            ("whitespace-ensure-local-variables" function nil nil [50199 50469])
            ("whitespace-cleanup-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [50486 55305])
            ("whitespace-replace-action" function (:arguments ("action" "rstart" "rend" "regexp" "index")) nil [55335 55722])
            ("whitespace-regexp" function (:arguments ("regexp" "kind")) nil [55826 56126])
            ("whitespace-indentation-regexp" function (:arguments ("kind")) nil [56129 56318])
            ("whitespace-space-after-tab-regexp" function (:arguments ("kind")) nil [56321 56522])
            ("whitespace-report-list" variable
               (:constant-flag t
                :default-value (list (cons (quote empty) whitespace-empty-at-bob-regexp) (cons (quote empty) whitespace-empty-at-eob-regexp) (cons (quote trailing) whitespace-trailing-regexp) (cons (quote indentation) nil) (cons (quote indentation::tab) nil) (cons (quote indentation::space) nil) (cons (quote space-before-tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::tab) whitespace-space-before-tab-regexp) (cons (quote space-before-tab::space) whitespace-space-before-tab-regexp) (cons (quote space-after-tab) nil) (cons (quote space-after-tab::tab) nil) (cons (quote space-after-tab::space) nil)))
                nil [56525 57272])
            ("whitespace-report-text" variable
               (:constant-flag t
                :default-value (quote (" Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  8 or more SPACEs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

" . " Whitespace Report

 Current Setting                       Whitespace Problem

 empty                    []     []  empty lines at beginning of buffer
 empty                    []     []  empty lines at end of buffer
 trailing                 []     []  SPACEs or TABs at end of line
 indentation              []     []  TABs at beginning of line
 indentation::tab         []     []  8 or more SPACEs at beginning of line
 indentation::space       []     []  TABs at beginning of line
 space-before-tab         []     []  SPACEs before TAB
 space-before-tab::tab    []     []  SPACEs before TAB: SPACEs
 space-before-tab::space  []     []  SPACEs before TAB: TABs
 space-after-tab          []     []  8 or more SPACEs after TAB
 space-after-tab::tab     []     []  8 or more SPACEs after TAB: SPACEs
 space-after-tab::space   []     []  8 or more SPACEs after TAB: TABs

 indent-tabs-mode =
 tab-width        = 

")))
                nil [57275 59440])
            ("whitespace-report-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Report*")
                nil [59443 59554])
            ("whitespace-report" function
               (:user-visible-flag t
                :arguments ("force" "report-if-bogus"))
                nil [59572 61035])
            ("whitespace-report-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "force" "report-if-bogus"))
                nil [61053 64695])
            ("whitespace-font-lock-keywords" variable nil nil [64796 64917])
            ("whitespace-help-text" variable
               (:constant-flag t
                :default-value " Whitespace Toggle Options                  | scroll up  :  SPC   or > |
                                            | scroll down:  M-SPC or < |
 FACES                                      \\__________________________/
 []  f   - toggle face visualization
 []  t   - toggle TAB visualization
 []  s   - toggle SPACE and HARD SPACE visualization
 []  r   - toggle trailing blanks visualization
 []  l   - toggle \"long lines\" visualization
 []  L   - toggle \"long lines\" tail visualization
 []  n   - toggle NEWLINE visualization
 []  e   - toggle empty line at bob and/or eob visualization
 []  C-i - toggle indentation SPACEs visualization (via `indent-tabs-mode')
 []  I   - toggle indentation SPACEs visualization
 []  i   - toggle indentation TABs visualization
 []  C-a - toggle SPACEs after TAB visualization (via `indent-tabs-mode')
 []  A   - toggle SPACEs after TAB: SPACEs visualization
 []  a   - toggle SPACEs after TAB: TABs visualization
 []  C-b - toggle SPACEs before TAB visualization (via `indent-tabs-mode')
 []  B   - toggle SPACEs before TAB: SPACEs visualization
 []  b   - toggle SPACEs before TAB: TABs visualization

 DISPLAY TABLE
 []  T - toggle TAB visualization
 []  S - toggle SPACE and HARD SPACE visualization
 []  N - toggle NEWLINE visualization

      x - restore `whitespace-style' value

      ? - display this text

")
                nil [64920 66358])
            ("whitespace-help-buffer-name" variable
               (:constant-flag t
                :default-value "*Whitespace Toggle Options*")
                nil [66361 66480])
            ("whitespace-insert-value" function (:arguments ("value")) nil [66483 66640])
            ("whitespace-mark-x" function (:arguments ("nchars" "condition")) nil [66643 66815])
            ("whitespace-insert-option-mark" function (:arguments ("the-list" "the-value")) nil [66818 67136])
            ("whitespace-help-on" function (:arguments ("style")) nil [67139 67551])
            ("whitespace-display-window" function (:arguments ("buffer")) nil [67554 67978])
            ("whitespace-kill-buffer" function (:arguments ("buffer-name")) nil [67981 68204])
            ("whitespace-help-off" function nil nil [68207 68359])
            ("whitespace-help-scroll" function (:arguments ("up")) nil [68362 68776])
            ("whitespace-interactive-char" function (:arguments ("local-p")) nil [68779 71240])
            ("whitespace-toggle-list" function (:arguments ("local-p" "arg" "the-list")) nil [71277 72176])
            ("whitespace-display-table" variable nil nil [72179 72256])
            ("whitespace-display-table-was-local" variable nil nil [72258 72380])
            ("whitespace-turn-on" function nil nil [72382 73079])
            ("whitespace-turn-off" function nil nil [73082 73313])
            ("whitespace-style-face-p" function nil nil [73316 74417])
            ("whitespace-color-on" function nil nil [74420 79354])
            ("whitespace-color-off" function nil nil [79357 79749])
            ("whitespace-trailing-regexp" function (:arguments ("limit")) nil [79752 80082])
            ("whitespace-empty-at-bob-regexp" function (:arguments ("limit")) nil [80085 81076])
            ("whitespace-looking-back" function (:arguments ("regexp" "limit")) nil [81079 81267])
            ("whitespace-empty-at-eob-regexp" function (:arguments ("limit")) nil [81270 82586])
            ("whitespace-buffer-changed" function (:arguments ("_beg" "_end")) nil [82589 82722])
            ("whitespace-post-command-hook" function nil nil [82725 84156])
            ("whitespace-style-mark-p" function nil nil [84289 84540])
            ("whitespace-char-valid-p" function (:arguments ("char")) nil [84543 84666])
            ("whitespace-display-vector-p" function (:arguments ("vec")) nil [84669 84923])
            ("whitespace-display-char-on" function nil nil [84926 86464])
            ("whitespace-display-char-off" function nil nil [86467 86761])
            ("whitespace-action-when-on" function nil nil [86848 87091])
            ("whitespace-write-file-hook" function nil nil [87094 87474])
            ("whitespace-warn-read-only" function (:arguments ("msg")) nil [87508 87693])
            ("whitespace-unload-function" function nil nil [87770 88038])
            ("whitespace" package nil nil [88075 88096])
            ("run-hooks" code nil nil [88099 88132]))          
      :file "whitespace.el.gz"
      :pointmax 88163
      :fsize 17192
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "align.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("align" customgroup (:user-visible-flag t) nil [4413 4514])
            ("align-load-hook" variable nil nil [4537 4656])
            ("align-indent-before-aligning" variable nil nil [4658 4796])
            ("align-default-spacing" variable (:default-value 1) nil [4798 5183])
            ("align-to-tab-stop" variable (:default-value (quote indent-tabs-mode)) nil [5185 5400])
            ("align-region-heuristic" variable (:default-value 500) nil [5402 5914])
            ("align-highlight-change-face" variable (:default-value (quote highlight)) nil [5916 6053])
            ("align-highlight-nochange-face" variable (:default-value (quote secondary-selection)) nil [6055 6207])
            ("align-large-region" variable (:default-value 10000) nil [6209 6407])
            ("align-c++-modes" variable (:default-value (quote (c++-mode c-mode java-mode))) nil [6409 6556])
            ("align-perl-modes" variable (:default-value (quote (perl-mode cperl-mode))) nil [6558 6704])
            ("align-lisp-modes" variable (:default-value (quote (emacs-lisp-mode lisp-interaction-mode lisp-mode scheme-mode))) nil [6706 6889])
            ("align-tex-modes" variable (:default-value (quote (tex-mode plain-tex-mode latex-mode slitex-mode))) nil [6891 7072])
            ("align-text-modes" variable (:default-value (quote (text-mode outline-mode))) nil [7074 7218])
            ("align-dq-string-modes" variable (:default-value (append align-lisp-modes align-c++-modes align-perl-modes (quote (python-mode)))) nil [7220 7441])
            ("align-sq-string-modes" variable (:default-value (append align-perl-modes (quote (python-mode)))) nil [7443 7628])
            ("align-open-comment-modes" variable (:default-value (append align-lisp-modes align-c++-modes align-perl-modes (quote (python-mode makefile-mode)))) nil [7630 7974])
            ("align-region-separate" variable (:default-value "^\\s-*[{}]?\\s-*$") nil [7976 11436])
            ("put" code nil nil [11438 11490])
            ("align-rules-list-type" variable (:default-value (quote (repeat (cons :tag "Alignment rule" (symbol :tag "Title") (cons :tag "Required attributes" (cons :tag "Regexp" (const :tag "(Regular expression to match)" regexp) (choice :value "\\(\\s-+\\)" regexp function)) (repeat :tag "Optional attributes" (choice (cons :tag "Repeat" (const :tag "(Repeat this rule throughout line)" repeat) (boolean :value t)) (cons :tag "Paren group" (const :tag "(Parenthesis group to use)" group) (choice :value 2 integer (repeat integer))) (cons :tag "Modes" (const :tag "(Modes where this rule applies)" modes) (sexp :value (text-mode))) (cons :tag "Case-fold" (const :tag "(Should case be ignored for this rule)" case-fold) (boolean :value t)) (cons :tag "To Tab Stop" (const :tag "(Should rule align to tab stops)" tab-stop) (boolean :value nil)) (cons :tag "Valid" (const :tag "(Return non-nil if rule is valid)" valid) (function :value t)) (cons :tag "Run If" (const :tag "(Return non-nil if rule should run)" run-if) (function :value t)) (cons :tag "Column" (const :tag "(Column to fix alignment at)" column) (choice :value comment-column integer symbol)) (cons :tag "Spacing" (const :tag "(Amount of spacing to use)" spacing) (integer :value 1)) (cons :tag "Justify" (const :tag "(Should text be right justified)" justify) (boolean :value t)) (cons :tag "Separate" (const :tag "(Separation to use for this rule)" separate) (choice :value "^\\s-*$" (const entire) (const group) regexp function))))))))) nil [11492 13437])
            ("align-rules-list" variable (:default-value (\` ((lisp-second-arg (regexp . "\\(^\\s-+[^( 	
]\\|(\\(\\S-+\\)\\s-+\\)\\S-+\\(\\s-+\\)") (group . 3) (modes . align-lisp-modes) (run-if \, (function (lambda nil current-prefix-arg)))) (lisp-alist-dot (regexp . "\\(\\s-*\\)\\.\\(\\s-*\\)") (group 1 2) (modes . align-lisp-modes)) (open-comment (regexp \, (function (lambda (end reverse) (funcall (if reverse (quote re-search-backward) (quote re-search-forward)) (concat "[^ 	
\\\\]" (regexp-quote comment-start) "\\(.+\\)$") end t)))) (modes . align-open-comment-modes)) (c-macro-definition (regexp . "^\\s-*#\\s-*define\\s-+\\S-+\\(\\s-+\\)") (modes . align-c++-modes)) (c-variable-declaration (regexp \, (concat "[*&0-9A-Za-z_]>?[&*]*\\(\\s-+[*&]*\\)" "[A-Za-z_][0-9A-Za-z:_]*\\s-*\\(\\()\\|" "=[^=
].*\\|(.*)\\|\\(\\[.*\\]\\)*\\)?" "\\s-*[;,]\\|)\\s-*$\\)")) (group . 1) (modes . align-c++-modes) (justify . t) (valid \, (function (lambda nil (not (or (save-excursion (goto-char (match-beginning 1)) (backward-word 1) (looking-at "\\(goto\\|return\\|new\\|delete\\|throw\\)")) (if (and (boundp (quote font-lock-mode)) font-lock-mode) (eq (get-text-property (point) (quote face)) (quote font-lock-comment-face)) (eq (caar (c-guess-basic-syntax)) (quote c))))))))) (c-assignment (regexp \, (concat "[^-=!^&*+<>/| 	
]\\(\\s-*[-=!^&*+<>/|]*\\)" "=\\(\\s-*\\)\\([^= 	
]\\|$\\)")) (group 1 2) (modes . align-c++-modes) (justify . t) (tab-stop)) (perl-assignment (regexp \, (concat "[^=!^&*-+<>/| 	
]\\(\\s-*\\)=[~>]?" "\\(\\s-*\\)\\([^>= 	
]\\|$\\)")) (group 1 2) (modes . align-perl-modes) (tab-stop)) (python-assignment (regexp \, (concat "[^=!<> 	
]\\(\\s-*\\)=" "\\(\\s-*\\)\\([^>= 	
]\\|$\\)")) (group 1 2) (modes quote (python-mode)) (tab-stop)) (make-assignment (regexp . "^\\s-*\\w+\\(\\s-*\\):?=\\(\\s-*\\)\\([^	
 \\\\]\\|$\\)") (group 1 2) (modes quote (makefile-mode)) (tab-stop)) (c-comma-delimiter (regexp . ",\\(\\s-*\\)[^/ 	
]") (repeat . t) (modes . align-c++-modes) (run-if \, (function (lambda nil current-prefix-arg)))) (basic-comma-delimiter (regexp . ",\\(\\s-*\\)[^# 	
]") (repeat . t) (modes append align-perl-modes (quote (python-mode))) (run-if \, (function (lambda nil current-prefix-arg)))) (c++-comment (regexp . "\\(\\s-*\\)\\(//.*\\|/\\*.*\\*/\\s-*\\)$") (modes . align-c++-modes) (column . comment-column) (valid \, (function (lambda nil (save-excursion (goto-char (match-beginning 1)) (not (bolp))))))) (c-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\|\\<and\\>\\|\\<or\\>\\)") (modes . align-c++-modes) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(/[*/]\\|$\\)")))))) (perl-chain-logic (regexp . "\\(\\s-*\\)\\(&&\\|||\\|\\<and\\>\\|\\<or\\>\\)") (modes . align-perl-modes) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(#\\|$\\)")))))) (python-chain-logic (regexp . "\\(\\s-*\\)\\(\\<and\\>\\|\\<or\\>\\)") (modes quote (python-mode)) (valid \, (function (lambda nil (save-excursion (goto-char (match-end 2)) (looking-at "\\s-*\\(#\\|$\\|\\\\\\)")))))) (c-macro-line-continuation (regexp . "\\(\\s-*\\)\\\\$") (modes . align-c++-modes) (column . c-backslash-column)) (basic-line-continuation (regexp . "\\(\\s-*\\)\\\\$") (modes quote (python-mode makefile-mode))) (tex-record-separator (regexp \, (function (lambda (end reverse) (align-match-tex-pattern "&" end reverse)))) (group 1 2) (modes . align-tex-modes) (repeat . t)) (tex-tabbing-separator (regexp \, (function (lambda (end reverse) (align-match-tex-pattern "\\\\[=>]" end reverse)))) (group 1 2) (modes . align-tex-modes) (repeat . t) (run-if \, (function (lambda nil (eq major-mode (quote latex-mode)))))) (tex-record-break (regexp . "\\(\\s-*\\)\\\\\\\\") (modes . align-tex-modes)) (text-column (regexp . "\\(^\\|\\S-\\)\\([ 	]+\\)\\(\\S-\\|$\\)") (group . 2) (modes . align-text-modes) (repeat . t) (run-if \, (function (lambda nil (and current-prefix-arg (not (eq (quote -) current-prefix-arg))))))) (text-dollar-figure (regexp . "\\$?\\(\\s-+[0-9]+\\)\\.") (modes . align-text-modes) (justify . t) (run-if \, (function (lambda nil (eq (quote -) current-prefix-arg))))) (css-declaration (regexp . "^\\s-*\\w+:\\(\\s-*\\).*;") (group 1) (modes quote (css-mode html-mode)))))) nil [13439 25871])
            ("put" code nil nil [25873 25920])
            ("align-exclude-rules-list-type" variable (:default-value (quote (repeat (cons :tag "Exclusion rule" (symbol :tag "Title") (cons :tag "Required attributes" (cons :tag "Regexp" (const :tag "(Regular expression to match)" regexp) (choice :value "\\(\\s-+\\)" regexp function)) (repeat :tag "Optional attributes" (choice (cons :tag "Repeat" (const :tag "(Repeat this rule throughout line)" repeat) (boolean :value t)) (cons :tag "Paren group" (const :tag "(Parenthesis group to use)" group) (choice :value 2 integer (repeat integer))) (cons :tag "Modes" (const :tag "(Modes where this rule applies)" modes) (sexp :value (text-mode))) (cons :tag "Case-fold" (const :tag "(Should case be ignored for this rule)" case-fold) (boolean :value t))))))))) nil [25922 26829])
            ("align-exclude-rules-list" variable (:default-value (\` ((exc-dq-string (regexp . "\"\\([^\"
]+\\)\"") (repeat . t) (modes . align-dq-string-modes)) (exc-sq-string (regexp . "'\\([^'
]+\\)'") (repeat . t) (modes . align-sq-string-modes)) (exc-open-comment (regexp \, (function (lambda (end reverse) (funcall (if reverse (quote re-search-backward) (quote re-search-forward)) (concat "[^ 	
\\\\]" (regexp-quote comment-start) "\\(.+\\)$") end t)))) (modes . align-open-comment-modes)) (exc-c-comment (regexp . "/\\*\\(.+\\)\\*/") (repeat . t) (modes . align-c++-modes)) (exc-c-func-params (regexp . "(\\([^)
]+\\))") (repeat . t) (modes . align-c++-modes)) (exc-c-macro (regexp . "^\\s-*#\\s-*\\(if\\w*\\|endif\\)\\(.*\\)$") (group . 2) (modes . align-c++-modes))))) nil [26831 27912])
            ("put" code nil nil [27914 27969])
            ("align-mode-rules-list" variable nil nil [27996 28140])
            ("make-variable-buffer-local" code nil nil [28142 28193])
            ("align-mode-exclude-rules-list" variable nil nil [28195 28365])
            ("make-variable-buffer-local" code nil nil [28367 28426])
            ("align-highlight-overlays" variable nil nil [28428 28531])
            ("align-vhdl-rules-list" variable (:default-value (\` ((vhdl-declaration (regexp . "\\(signal\\|variable\\|constant\\)\\(\\s-+\\)\\S-") (group . 2)) (vhdl-case (regexp . "\\(others\\|[^ 	
=<]\\)\\(\\s-*\\)=>\\(\\s-*\\)\\S-") (group 2 3) (valid \, (function (lambda nil (not (string= (downcase (match-string 1)) "others")))))) (vhdl-colon (regexp . "[^ 	
:]\\(\\s-*\\):\\(\\s-*\\)[^=
]") (group 1 2)) (direction (regexp . ":\\s-*\\(in\\|out\\|inout\\|buffer\\)\\(\\s-*\\)") (group . 2)) (sig-assign (regexp . "[^ 	
=<]\\(\\s-*\\)<=\\(\\s-*\\)\\S-") (group 1 2)) (var-assign (regexp . "[^ 	
:]\\(\\s-*\\):=")) (use-entity (regexp . "\\(\\s-+\\)use\\s-+entity"))))) nil [28631 29559])
            ("put" code nil nil [29561 29613])
            ("align-set-vhdl-rules" function nil nil [29615 29763])
            ("add-hook" code nil nil [29765 29813])
            ("add-to-list" code nil nil [29815 29862])
            ("add-to-list" code nil nil [29863 29913])
            ("align" function
               (:user-visible-flag t
                :arguments ("beg" "end" "separate" "rules" "exclude-rules"))
                nil [29951 31840])
            ("align-regexp" function
               (:user-visible-flag t
                :arguments ("beg" "end" "regexp" "group" "spacing" "repeat"))
                nil [31857 34630])
            ("align-entire" function
               (:user-visible-flag t
                :arguments ("beg" "end" "rules" "exclude-rules"))
                nil [34647 35066])
            ("align-current" function
               (:user-visible-flag t
                :arguments ("rules" "exclude-rules"))
                nil [35083 35546])
            ("align-highlight-rule" function
               (:user-visible-flag t
                :arguments ("beg" "end" "title" "rules" "exclude-rules"))
                nil [35563 37253])
            ("align-unhighlight-rule" function (:user-visible-flag t) nil [37270 37546])
            ("align-newline-and-indent" function (:user-visible-flag t) nil [37563 38114])
            ("align-match-tex-pattern" function (:arguments ("regexp" "end" "reverse")) nil [38141 38874])
            ("align-new-section-p" function (:arguments ("beg" "end" "separator")) nil [38876 39684])
            ("align-adjust-col-for-rule" function (:arguments ("column" "_rule" "spacing" "tab-stop")) nil [39686 40132])
            ("align-column" function (:arguments ("pos")) nil [40134 40371])
            ("align-regions" function (:arguments ("regions" "props" "rule" "func")) nil [40373 40878])
            ("align-areas" function (:arguments ("areas" "props" "rule" "func")) nil [40880 44315])
            ("align--set-marker" function (:arguments ("marker-var" "pos" "type")) nil [44317 44614])
            ("align-region" function (:arguments ("beg" "end" "separate" "rules" "exclude-rules" "func")) nil [44616 59279])
            ("align" package nil nil [59294 59310])
            ("run-hooks" code nil nil [59312 59340]))          
      :file "align.el.gz"
      :pointmax 59365
      :fsize 16341
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "abbrev.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1049 1066])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1375])
            ("only-global-abbrevs" variable nil nil [1377 1628])
            ("define-minor-mode" code nil nil [1630 2058])
            ("put" code nil nil [2060 2109])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2113 2393])
            ("define-obsolete-variable-alias" code nil nil [2394 2476])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2478 2649])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2651 2986])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2988 3274])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3276 3574])
            ("abbrev-table-name" function (:arguments ("table")) nil [3576 3862])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3864 4750])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4752 5695])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5697 5892])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5894 6892])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6894 7411])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7413 7738])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7740 9499])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9501 9821])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9823 10056])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10060 10600])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10602 11092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11094 11687])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11689 12120])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12122 12465])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12467 13078])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13080 13741])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13743 14430])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14456 14609])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14611 14836])
            ("defalias" code nil nil [14838 14927])
            ("defalias" code nil nil [14929 15099])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15155 15296])
            ("make-abbrev-table" function (:arguments ("props")) nil [15298 16089])
            ("abbrev-table-p" function (:arguments ("object")) nil [16091 16260])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16262 16726])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16728 16975])
            ("abbrev-minor-mode-table-alist" variable nil nil [16977 17232])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17234 17509])
            ("abbrevs-changed" variable nil nil [17511 17659])
            ("abbrev-all-caps" variable nil nil [17661 17802])
            ("abbrev-start-location" variable nil nil [17804 18006])
            ("abbrev-start-location-buffer" variable nil nil [18008 18186])
            ("last-abbrev" variable nil nil [18188 18285])
            ("last-abbrev-text" variable nil nil [18287 18417])
            ("last-abbrev-location" variable nil nil [18419 18509])
            ("pre-abbrev-expand-hook" variable nil nil [18686 18961])
            ("make-obsolete-variable" code nil nil [18962 19041])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19043 19665])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19667 22678])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22680 23423])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23425 23783])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23785 24207])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24209 25256])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25259 26207])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26209 26903])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [26906 27166])
            ("abbrev--before-point" function nil nil [27169 29753])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29755 32799])
            ("abbrev-expand-functions" variable nil nil [32801 32887])
            ("make-obsolete-variable" code nil nil [32888 32968])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [32970 33173])
            ("expand-abbrev" function (:user-visible-flag t) nil [33175 33640])
            ("abbrev--default-expand" function nil nil [33642 35069])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35071 35969])
            ("abbrev--write" function (:arguments ("sym")) nil [35971 36426])
            ("abbrev--describe" function (:arguments ("sym")) nil [36428 36822])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [36824 37865])
            ("put" code nil nil [37867 37911])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [37912 39916])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [39918 40734])
            ("define-derived-mode" code nil nil [40829 40959])
            ("abbrev" package nil nil [40961 40978]))          
      :file "abbrev.el.gz"
      :pointmax 41004
      :fsize 11960
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 1066 . 1067) (symbol 1031 . 1048) (open-paren 1030 . 1031)))
    (semanticdb-table "hippie-exp.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [9093 9110])
            ("hippie-expand" customgroup (:user-visible-flag t) nil [9112 9335])
            ("he-num" variable (:default-value -1) nil [9337 9355])
            ("he-string-beg" variable (:default-value (make-marker)) nil [9357 9393])
            ("he-string-end" variable (:default-value (make-marker)) nil [9395 9431])
            ("he-search-string" variable nil nil [9433 9461])
            ("he-expand-list" variable nil nil [9463 9489])
            ("he-tried-table" variable nil nil [9491 9517])
            ("he-search-loc" variable (:default-value (make-marker)) nil [9519 9555])
            ("he-search-loc2" variable nil nil [9557 9583])
            ("he-search-bw" variable nil nil [9585 9609])
            ("he-search-bufs" variable nil nil [9611 9637])
            ("he-searched-n-bufs" variable nil nil [9639 9669])
            ("he-search-window" variable nil nil [9671 9699])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [9766 10329])
            ("hippie-expand-verbose" variable (:default-value t) nil [10331 10477])
            ("hippie-expand-dabbrev-skip-space" variable nil nil [10479 10642])
            ("hippie-expand-dabbrev-as-symbol" variable (:default-value t) nil [10644 10807])
            ("hippie-expand-no-restriction" variable (:default-value t) nil [10809 10959])
            ("hippie-expand-max-buffers" variable nil nil [10961 11180])
            ("hippie-expand-ignore-buffers" variable (:default-value (quote ("^ \\*.*\\*$" dired-mode))) nil [11182 11491])
            ("hippie-expand-only-buffers" variable nil nil [11493 11865])
            ("hippie-expand" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11882 13489])
            ("he-init-string" function (:arguments ("beg" "end")) nil [13553 13718])
            ("he-reset-string" function nil nil [13776 13961])
            ("he-substitute-string" function (:arguments ("str" "trans-case")) nil [14238 14653])
            ("he-capitalize-first" function (:arguments ("str")) nil [14655 14875])
            ("he-ordinary-case-p" function (:arguments ("str")) nil [14877 15061])
            ("he-transfer-case" function (:arguments ("from-str" "to-str")) nil [15063 15545])
            ("he-string-member" function (:arguments ("str" "lst" "trans-case")) nil [15650 15862])
            ("he-buffer-member" function (:arguments ("lst")) nil [16005 16211])
            ("make-hippie-expand-function" function (:arguments ("try-list" "verbose")) nil [16777 17341])
            ("try-complete-file-name" function (:arguments ("old")) nil [17404 18773])
            ("try-complete-file-name-partially" function (:arguments ("old")) nil [18775 19869])
            ("he-file-name-chars" variable (:default-value (cond ((memq system-type (quote (ms-dos windows-nt cygwin))) "-a-zA-Z0-9_/.,~^#$+=:\\\\") (t "-a-zA-Z0-9_/.,~^#$+="))) nil [19871 20121])
            ("he-file-name-beg" function nil nil [20123 20333])
            ("he-concat-directory-file-name" function (:arguments ("dir-part" "name-part")) nil [20431 20884])
            ("try-complete-lisp-symbol" function (:arguments ("old")) nil [20886 21955])
            ("try-complete-lisp-symbol-partially" function (:arguments ("old")) nil [21957 22819])
            ("he-lisp-symbol-beg" function nil nil [22821 22913])
            ("try-expand-line" function (:arguments ("old")) nil [22915 24315])
            ("try-expand-line-all-buffers" function (:arguments ("old")) nil [24317 26344])
            ("he-line-search" function (:arguments ("str" "strip-prompt" "reverse")) nil [26346 26849])
            ("he-line-beg" function (:arguments ("strip-prompt")) nil [26851 27044])
            ("he-line-search-regexp" function (:arguments ("pat" "strip-prompt")) nil [27046 27316])
            ("try-expand-list" function (:arguments ("old")) nil [27318 28528])
            ("try-expand-list-all-buffers" function (:arguments ("old")) nil [28530 30278])
            ("he-list-search" function (:arguments ("str" "reverse")) nil [30280 30950])
            ("he-list-beg" function nil nil [30952 31068])
            ("try-expand-all-abbrevs" function (:arguments ("old")) nil [31070 32143])
            ("try-expand-dabbrev" function (:arguments ("old")) nil [32145 33382])
            ("try-expand-dabbrev-all-buffers" function (:arguments ("old")) nil [33384 35141])
            ("try-expand-dabbrev-visible" function (:arguments ("old")) nil [35236 37118])
            ("he-dabbrev-search" function (:arguments ("pattern" "reverse" "limit")) nil [37120 38042])
            ("he-dabbrev-beg" function nil nil [38044 38306])
            ("try-expand-dabbrev-from-kill" function (:arguments ("old")) nil [38308 39052])
            ("he-dabbrev-kill-search" function (:arguments ("pattern")) nil [39054 40226])
            ("try-expand-whole-kill" function (:arguments ("old")) nil [40228 41087])
            ("he-whole-kill-search" function (:arguments ("str")) nil [41089 42209])
            ("he-kill-beg" function nil nil [42211 42372])
            ("hippie-exp" package nil nil [42375 42396]))          
      :file "hippie-exp.el.gz"
      :pointmax 42426
      :fsize 9063
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "man.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [3947 3968])
            ("cl-lib" include nil nil [3969 3986])
            ("button" include nil nil [3987 4004])
            ("man" customgroup (:user-visible-flag t) nil [4006 4105])
            ("Man-notify" variable nil nil [4107 4126])
            ("Man-filter-list" variable nil nil [4128 4732])
            ("Man-uses-untabify-flag" variable (:default-value t) nil [4734 4835])
            ("Man-sed-script" variable nil nil [4836 4931])
            ("Man-fontify-manpage-flag" variable (:default-value t) nil [4933 5052])
            ("Man-overstrike" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [5054 5179])
            ("Man-underline" variable
               (:default-value (quote ((t (:inherit underline))))
                :type "face")
                nil [5181 5311])
            ("Man-reverse" variable
               (:default-value (quote ((t (:inherit highlight))))
                :type "face")
                nil [5313 5443])
            ("Man-ansi-color-map" variable (:default-value (let ((ansi-color-faces-vector [default Man-overstrike default Man-underline Man-underline default default Man-reverse])) (ansi-color-make-color-map))) nil [5445 5693])
            ("Man-notify-method" variable (:default-value (if (boundp (quote Man-notify)) Man-notify (quote friendly))) nil [5760 6838])
            ("Man-width" variable nil nil [6840 7311])
            ("Man-frame-parameters" variable nil nil [7313 7446])
            ("Man-downcase-section-letters-flag" variable (:default-value t) nil [7448 7912])
            ("Man-circular-pages-flag" variable (:default-value t) nil [7914 8055])
            ("Man-section-translations-alist" variable (:default-value (list (quote ("3C++" . "3")) (quote ("3X11" . "3")) (quote ("1-UCB" . "")))) nil [8057 8696])
            ("Man-header-file-path" variable (:default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil (quote (t nil)) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base (quote ("/usr/include" "/usr/local/include")))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include")))))) nil [8736 9390])
            ("Man-name-local-regexp" variable (:default-value (concat "^" (regexp-opt (quote ("NOM" "NAME"))) "$")) nil [9392 9646])
            ("manual-program" variable (:default-value "man") nil [9648 9758])
            ("Man-untabify-command" variable (:default-value "pr") nil [9760 9870])
            ("Man-untabify-command-args" variable (:default-value (list "-t" "-e")) nil [9872 10039])
            ("Man-sed-command" variable (:default-value "sed") nil [10041 10154])
            ("Man-awk-command" variable (:default-value "awk") nil [10156 10269])
            ("Man-mode-hook" variable nil nil [10271 10367])
            ("Man-cooked-hook" variable nil nil [10369 10501])
            ("Man-name-regexp" variable (:default-value "[-a-zA-Z0-9_\302\255+][-a-zA-Z0-9_.:\302\255+]*") nil [10503 10638])
            ("Man-section-regexp" variable (:default-value "[0-9][a-zA-Z0-9+]*\\|[LNln]") nil [10640 10769])
            ("Man-page-header-regexp" variable (:default-value (if (string-match "-solaris2\\." system-configuration) (concat "^[-A-Za-z0-9_].*[ 	]\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\)$") (concat "^[ 	]*\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\).*\\1"))) nil [10771 11107])
            ("Man-heading-regexp" variable (:default-value "^\\([A-Z][A-Z0-9 /-]+\\)$") nil [11109 11223])
            ("Man-see-also-regexp" variable (:default-value "SEE ALSO") nil [11225 11381])
            ("Man-first-heading-regexp" variable (:default-value "^NAME$\\|^[ 	]*No manual entry fo.*$") nil [11597 11791])
            ("Man-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\(
[ 	]+" Man-name-regexp "\\)*\\)[ 	]*(\\(" Man-section-regexp "\\))")) nil [11793 12003])
            ("Man-apropos-regexp" variable (:default-value (concat "\\[\\(" Man-name-regexp "\\)\\][ 	]*(\\(" Man-section-regexp "\\))")) nil [12005 12195])
            ("Man-synopsis-regexp" variable (:default-value "SYNOPSIS") nil [12197 12353])
            ("Man-files-regexp" variable (:default-value "FILES\\>") nil [12355 12585])
            ("Man-include-regexp" variable (:default-value "#[ 	]*include[ 	]*") nil [12587 12704])
            ("Man-file-name-regexp" variable (:default-value "[^<>\", 	
]+") nil [12706 12826])
            ("Man-normal-file-prefix-regexp" variable (:default-value "[/~$]") nil [12828 12947])
            ("Man-header-regexp" variable (:default-value (concat "\\(" Man-include-regexp "\\)" "[<\"]" "\\(" Man-file-name-regexp "\\)" "[>\"]")) nil [12949 13158])
            ("Man-normal-file-regexp" variable (:default-value (concat Man-normal-file-prefix-regexp Man-file-name-regexp)) nil [13160 13315])
            ("Man-hyphenated-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\)\\((\\(" Man-section-regexp "\\))\\)?")) nil [13413 13600])
            ("Man-switches" variable nil nil [13602 13836])
            ("Man-specified-section-option" variable (:default-value (if (string-match "-solaris[0-9.]*$" system-configuration) "-s" "")) nil [13838 14016])
            ("Man-support-local-filenames" variable (:default-value (quote auto-detect)) nil [14018 14291])
            ("man-imenu-title" variable (:default-value "Contents") nil [14293 14444])
            ("Man-original-frame" variable nil nil [14494 14521])
            ("make-variable-buffer-local" code nil nil [14522 14570])
            ("Man-arguments" variable nil nil [14571 14593])
            ("make-variable-buffer-local" code nil nil [14594 14637])
            ("put" code nil nil [14638 14677])
            ("Man--sections" variable nil nil [14679 14705])
            ("make-variable-buffer-local" code nil nil [14706 14749])
            ("Man--refpages" variable nil nil [14750 14776])
            ("make-variable-buffer-local" code nil nil [14777 14820])
            ("Man-page-list" variable nil nil [14821 14847])
            ("make-variable-buffer-local" code nil nil [14848 14891])
            ("Man-current-page" variable nil nil [14892 14919])
            ("make-variable-buffer-local" code nil nil [14920 14966])
            ("Man-page-mode-string" variable (:default-value "1 of 1") nil [14967 15005])
            ("make-variable-buffer-local" code nil nil [15006 15056])
            ("Man-sysv-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g
	s/_//g
        s/o+/o/g
        s/+o/o/g
	:ovstrk
	s/\\(.\\)\\1/\\1/g
	t ovstrk
	}
/\\[[0-9][0-9]*m/ s///g")
                nil [15058 15304])
            ("Man-berkeley-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g\\
	s/_//g\\
        s/o+/o/g\\
        s/+o/o/g\\
	:ovstrk\\
	s/\\(.\\)\\1/\\1/g\\
	t ovstrk\\
	}\\
/\\[[0-9][0-9]*m/ s///g")
                nil [15306 15576])
            ("Man-topic-history" variable nil nil [15578 15630])
            ("Man-mode-syntax-table" variable (:default-value (let ((table (copy-syntax-table (standard-syntax-table)))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 58 "w" table) table)) nil [15632 15933])
            ("Man-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "" (quote scroll-down-command)) (define-key map "n" (quote Man-next-section)) (define-key map "p" (quote Man-previous-section)) (define-key map "n" (quote Man-next-manpage)) (define-key map "p" (quote Man-previous-manpage)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "." (quote beginning-of-buffer)) (define-key map "r" (quote Man-follow-manual-reference)) (define-key map "g" (quote Man-goto-section)) (define-key map "s" (quote Man-goto-see-also-section)) (define-key map "k" (quote Man-kill)) (define-key map "q" (quote Man-quit)) (define-key map "u" (quote Man-update-manpage)) (define-key map "m" (quote man)) (define-key map "" (quote man-follow)) (define-key map "?" (quote describe-mode)) (easy-menu-define nil map "`Man-mode' menu." (quote ("Man" ["Next Section" Man-next-section t] ["Previous Section" Man-previous-section t] ["Go To Section..." Man-goto-section t] ["Go To \"SEE ALSO\" Section" Man-goto-see-also-section :active (cl-member Man-see-also-regexp Man--sections :test (function string-match-p))] ["Follow Reference..." Man-follow-manual-reference :active Man--refpages :help "Go to a manpage referred to in the \"SEE ALSO\" section"] "--" ["Next Manpage" Man-next-manpage :active (> (length Man-page-list) 1)] ["Previous Manpage" Man-previous-manpage :active (> (length Man-page-list) 1)] "--" ["Man..." man t] ["Kill Buffer" Man-kill t] ["Quit" Man-quit t]))) map)) nil [15935 17969])
            ("define-button-type" code nil nil [17982 18145])
            ("Man-xref-button-action" function (:arguments ("button")) nil [18147 18428])
            ("define-button-type" code nil nil [18430 18530])
            ("define-button-type" code nil nil [18533 18848])
            ("define-button-type" code nil nil [18850 19228])
            ("Man-init-defvars" function nil nil [19320 22081])
            ("Man-make-page-mode-string" function nil nil [22083 22314])
            ("Man-build-man-command" function nil nil [22316 23404])
            ("Man-translate-cleanup" function (:arguments ("string")) nil [23407 23827])
            ("Man-translate-references" function (:arguments ("ref")) nil [23829 25194])
            ("Man-support-local-filenames" function nil nil [25196 26622])
            ("Man-default-man-entry" function (:arguments ("pos")) nil [26743 30204])
            ("defalias" code nil nil [30393 30422])
            ("Man-completion-cache" variable nil nil [30424 30662])
            ("Man-man-k-use-anchor" variable (:default-value (memq system-type (quote (gnu gnu/linux gnu/kfreebsd)))) nil [30664 31192])
            ("Man-parse-man-k" function nil nil [31194 32959])
            ("Man-completion-table" function (:arguments ("string" "pred" "action")) nil [32961 36208])
            ("man" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [36225 38422])
            ("man-follow" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [38439 38697])
            ("Man-start-calling" function (:arguments ("body")) nil [38699 40831])
            ("Man-getpage-in-background" function (:arguments ("topic")) nil [40833 42189])
            ("Man-update-manpage" function (:user-visible-flag t) nil [42191 43130])
            ("Man-notify-when-ready" function (:arguments ("man-buffer")) nil [43132 44700])
            ("Man-softhyphen-to-minus" function nil nil [44702 45140])
            ("Man-fontify-manpage" function (:user-visible-flag t) nil [45142 47714])
            ("Man-highlight-references" function (:arguments ("xref-man-type")) nil [47716 48945])
            ("Man-highlight-references0" function (:arguments ("start-section" "regexp" "button-pos" "target" "type")) nil [48947 49742])
            ("Man-cleanup-manpage" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [49744 51138])
            ("Man-bgproc-sentinel" function (:arguments ("process" "msg")) nil [51140 53704])
            ("Man-page-from-arguments" function (:arguments ("args")) nil [53706 53961])
            ("bookmark-make-record-function" variable nil nil [54089 54127])
            ("put" code nil nil [54129 54165])
            ("define-derived-mode" code nil nil [54167 56763])
            ("Man-build-section-alist" function nil nil [56765 57144])
            ("Man-build-references-alist" function nil nil [57146 58385])
            ("Man-build-page-list" function nil nil [58387 59573])
            ("Man-strip-page-headers" function nil nil [59575 60450])
            ("Man-unindent" function nil nil [60452 61750])
            ("Man-next-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [61850 62413])
            ("Man-previous-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [62415 62728])
            ("Man-find-section" function (:arguments ("section")) nil [62730 63092])
            ("Man--last-section" variable nil nil [63094 63124])
            ("Man-goto-section" function
               (:user-visible-flag t
                :arguments ("section"))
                nil [63126 63710])
            ("Man-goto-see-also-section" function (:user-visible-flag t) nil [63713 64031])
            ("Man-possibly-hyphenated-word" function nil nil [64033 64726])
            ("Man--last-refpage" variable nil nil [64728 64758])
            ("Man-follow-manual-reference" function
               (:user-visible-flag t
                :arguments ("reference"))
                nil [64760 66004])
            ("Man-kill" function (:user-visible-flag t) nil [66006 66103])
            ("Man-quit" function (:user-visible-flag t) nil [66105 66200])
            ("Man-goto-page" function
               (:user-visible-flag t
                :arguments ("page" "noerror"))
                nil [66202 67183])
            ("Man-next-manpage" function (:user-visible-flag t) nil [67186 67579])
            ("Man-previous-manpage" function (:user-visible-flag t) nil [67581 67983])
            ("Man-view-header-file" function (:arguments ("file")) nil [68008 68451])
            ("declare-function" code nil nil [68478 68590])
            ("declare-function" code nil nil [68591 68654])
            ("declare-function" code nil nil [68655 68715])
            ("declare-function" code nil nil [68716 68780])
            ("Man-default-bookmark-title" function nil nil [68782 69107])
            ("Man-bookmark-make-record" function nil nil [69109 69383])
            ("Man-bookmark-jump" function (:arguments ("bookmark")) nil [69400 70051])
            ("Man-init-defvars" code nil nil [70111 70129])
            ("man" package nil nil [70131 70145]))          
      :file "man.el.gz"
      :pointmax 70168
      :fsize 20858
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "simple.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6374])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6376 8658])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8660 10429])
            ("next-error-internal" function nil nil [10431 10852])
            ("defalias" code nil nil [10854 10893])
            ("defalias" code nil nil [10894 10928])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10930 11247])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11249 11517])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11519 11971])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11973 12351])
            ("next-error-follow-last-line" variable nil nil [12422 12462])
            ("define-minor-mode" code nil nil [12464 13172])
            ("next-error-follow-mode-post-command-hook" function nil nil [13288 13621])
            ("fundamental-mode" function (:user-visible-flag t) nil [13630 13839])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13917 14401])
            ("put" code nil nil [14403 14443])
            ("define-derived-mode" code nil nil [14444 14589])
            ("self-insert-uses-region-functions" variable nil nil [14622 14995])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [14997 15130])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15132 18256])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18258 18606])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18608 19320])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19322 20123])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20125 20838])
            ("defalias" code nil nil [20840 20882])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20901 22328])
            ("delete-trailing-lines" variable (:default-value t) nil [22330 22616])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22618 24424])
            ("newline-and-indent" function (:user-visible-flag t) nil [24426 24859])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24861 26087])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26089 26310])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26312 28852])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28854 30883])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30885 31078])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31080 31279])
            ("back-to-indentation" function (:user-visible-flag t) nil [31281 31571])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31573 31912])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [31914 32352])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32354 32603])
            ("cycle-spacing--context" variable nil nil [32605 32842])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "single-shot"))
                nil [32844 34999])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35002 35903])
            ("put" code nil nil [35904 35994])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35996 37221])
            ("put" code nil nil [37222 37301])
            ("delete-active-region" variable (:default-value t) nil [37303 37840])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (if (eq delete (quote delete-only)) (delete-region (region-beginning) (region-end)) (filter-buffer-substring (region-beginning) (region-end) delete))))) nil [37842 38385])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [38387 39806])
            ("put" code nil nil [39807 39865])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [39867 40792])
            ("put" code nil nil [40793 40850])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [40852 41256])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [41300 43533])
            ("put" code nil nil [43534 43582])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [43584 44266])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [44268 45052])
            ("count-words--buffer-message" function nil nil [45054 45207])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [45209 45534])
            ("define-obsolete-function-alias" code nil nil [45536 45615])
            ("what-line" function (:user-visible-flag t) nil [45617 45968])
            ("count-lines" function (:arguments ("start" "end")) nil [45970 46807])
            ("line-number-at-pos" function (:arguments ("pos")) nil [46809 47269])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [47271 51608])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [51673 51988])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [51990 52513])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [52515 52972])
            ("minibuffer-completing-symbol" variable nil nil [52974 53077])
            ("make-obsolete-variable" code nil nil [53078 53148])
            ("minibuffer-default" variable nil nil [53150 53343])
            ("eval-expression-print-level" variable (:default-value 4) nil [53345 53575])
            ("eval-expression-print-length" variable (:default-value 12) nil [53577 53810])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [53812 54021])
            ("eval-expression-print-format" function (:arguments ("value")) nil [54023 54667])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [54669 54783])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [54785 55263])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [55393 57667])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [57669 58596])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58598 60645])
            ("repeat-complex-command--called-interactively-skip" function (:arguments ("i" "_frame1" "frame2")) nil [60647 60864])
            ("extended-command-history" variable nil nil [60866 60903])
            ("read-extended-command" function nil nil [60905 62429])
            ("suggest-key-bindings" variable (:default-value t) nil [62431 62797])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [62799 65269])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [65271 67656])
            ("minibuffer-history" variable nil nil [67659 67912])
            ("minibuffer-history-sexp-flag" variable nil nil [67913 68228])
            ("setq" code nil nil [68229 68283])
            ("setq" code nil nil [68284 68322])
            ("minibuffer-history-search-history" variable nil nil [68348 68394])
            ("minibuffer-text-before-history" variable nil nil [68396 68596])
            ("add-hook" code nil nil [68598 68662])
            ("minibuffer-history-initialize" function nil nil [68664 68748])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [68750 68912])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [68914 69304])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69306 72150])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72152 73206])
            ("minibuffer-temporary-goal-position" variable nil nil [73208 73255])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [73257 73897])
            ("minibuffer-default-add-done" variable nil nil [73899 74222])
            ("make-variable-buffer-local" code nil nil [74224 74281])
            ("minibuffer-default-add-completions" function nil nil [74283 74737])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [74739 76931])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76933 77184])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77186 77444])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77446 78102])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78104 78389])
            ("minibuffer-prompt-width" function nil nil [78448 78737])
            ("add-hook" code nil nil [78770 78837])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [78839 78890])
            ("make-variable-buffer-local" code nil nil [78891 78963])
            ("minibuffer-history-isearch-setup" function nil nil [78965 79605])
            ("minibuffer-history-isearch-end" function nil nil [79607 79837])
            ("minibuffer-history-isearch-search" function nil nil [79839 81744])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [81746 83143])
            ("minibuffer-history-isearch-wrap" function nil nil [83145 83762])
            ("minibuffer-history-isearch-push-state" function nil nil [83764 84095])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [84097 84309])
            ("define-obsolete-function-alias" code nil nil [84387 84449])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [84451 84694])
            ("undo-in-region" variable nil nil [84696 84800])
            ("undo-no-redo" variable nil nil [84802 84877])
            ("pending-undo-list" variable nil nil [84879 85030])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85032 89653])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [89655 89936])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89938 90200])
            ("undo-in-progress" variable nil nil [90202 90333])
            ("undo-more" function (:arguments ("n")) nil [90335 91030])
            ("primitive-undo" function (:arguments ("n" "list")) nil [91032 97432])
            ("undo-copy-list" function (:arguments ("list")) nil [97457 97555])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [97557 97666])
            ("undo-start" function (:arguments ("beg" "end")) nil [97668 98256])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [98258 101835])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [101837 102876])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [102878 103386])
            ("undo-delta" function (:arguments ("undo-elt")) nil [103557 103890])
            ("undo-ask-before-discard" variable nil nil [103892 104658])
            ("undo-extra-outer-limit" variable nil nil [104660 104936])
            ("make-variable-buffer-local" code nil nil [104937 104989])
            ("setq" code nil nil [105274 105333])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [105334 107023])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [107026 108415])
            ("shell-command-history" variable nil nil [108417 108607])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [108609 108723])
            ("shell-command-default-error-buffer" variable nil nil [108725 109040])
            ("declare-function" code nil nil [109042 109108])
            ("declare-function" code nil nil [109109 109195])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [109197 109901])
            ("declare-function" code nil nil [109903 109954])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [109956 110201])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [110203 110832])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [110834 112087])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [112089 113394])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [113396 121358])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [121360 123783])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [123879 124090])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [124092 131348])
            ("shell-command-to-string" function (:arguments ("command")) nil [131350 131610])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [131612 133062])
            ("process-file-side-effects" variable (:default-value t) nil [133064 133490])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [133492 134377])
            ("tabulated-list-format" variable nil nil [134399 134429])
            ("tabulated-list-entries" variable nil nil [134430 134461])
            ("tabulated-list-sort-key" variable nil nil [134462 134494])
            ("declare-function" code nil nil [134495 134561])
            ("declare-function" code nil nil [134562 134661])
            ("process-menu-query-only" variable nil nil [134663 134699])
            ("define-derived-mode" code nil nil [134701 135197])
            ("list-processes--refresh" function nil nil [135199 136827])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [136829 136926])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [136928 137891])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [137894 139510])
            ("universal-argument--mode" function nil nil [139512 139592])
            ("universal-argument" function (:user-visible-flag t) nil [139594 140303])
            ("universal-argument-more" function (:arguments ("arg")) nil [140305 140743])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140745 141085])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141087 141821])
            ("filter-buffer-substring-functions" variable nil nil [141825 141942])
            ("make-obsolete-variable" code nil nil [141943 142067])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [142069 142475])
            ("buffer-substring-filters" variable nil nil [142477 142958])
            ("make-obsolete-variable" code nil nil [142959 143074])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [143076 143932])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [143934 144763])
            ("interprogram-cut-function" variable nil nil [144807 145344])
            ("interprogram-paste-function" variable nil nil [145346 146767])
            ("kill-ring" variable nil nil [146808 147263])
            ("kill-ring-max" variable (:default-value 60) nil [147265 147400])
            ("kill-ring-yank-pointer" variable nil nil [147402 147503])
            ("save-interprogram-paste-before-kill" variable nil nil [147505 148007])
            ("kill-do-not-save-duplicates" variable nil nil [148009 148238])
            ("kill-new" function (:arguments ("string" "replace")) nil [148240 150266])
            ("kill-append" function (:arguments ("string" "before-p")) nil [150268 150682])
            ("yank-pop-change-selection" variable nil nil [150684 151032])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [151034 152692])
            ("kill-read-only-ok" variable nil nil [152743 152879])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [152881 155604])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [155798 156698])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [156700 157756])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [157758 159334])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [159336 160156])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [160172 160997])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [161070 161533])
            ("yank-window-start" variable nil nil [161535 161565])
            ("yank-undo-function" variable nil nil [161566 161897])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161899 163629])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163631 165078])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165080 165270])
            ("kill-forward-chars" function (:arguments ("arg")) nil [165335 165480])
            ("kill-backward-chars" function (:arguments ("arg")) nil [165529 165675])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [165677 166152])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [166154 167506])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [167508 168125])
            ("kill-whole-line" variable nil nil [168162 168307])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168309 170525])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170527 172156])
            ("forward-visible-line" function (:arguments ("arg")) nil [172158 174648])
            ("end-of-visible-line" function nil nil [174650 175416])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [175419 176044])
            ("put" code nil nil [176045 176108])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [176110 177010])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177012 177554])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177556 178125])
            ("define-error" code nil nil [178128 178197])
            ("activate-mark-hook" variable nil nil [178199 178388])
            ("deactivate-mark-hook" variable nil nil [178390 178468])
            ("mark" function (:arguments ("force")) nil [178470 179094])
            ("declare-function" code nil nil [179128 179227])
            ("declare-function" code nil nil [179228 179328])
            ("deactivate-mark" function (:arguments ("force")) nil [179330 181248])
            ("activate-mark" function (:arguments ("no-tmm")) nil [181250 181635])
            ("set-mark" function (:arguments ("pos")) nil [181637 182861])
            ("use-empty-active-region" variable nil nil [182863 183359])
            ("use-region-p" function nil nil [183361 183967])
            ("region-active-p" function nil nil [183969 184630])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [184633 184739])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [184741 185612])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [185614 186294])
            ("redisplay--update-region-highlights" function (:arguments ("windows")) nil [186296 187031])
            ("add-function" code nil nil [187033 187130])
            ("defvar-local" code nil nil [187133 187232])
            ("put" code nil nil [187233 187268])
            ("mark-ring-max" variable (:default-value 16) nil [187270 187415])
            ("global-mark-ring" variable nil nil [187417 187501])
            ("global-mark-ring-max" variable (:default-value 16) nil [187503 187664])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [187666 187974])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [187976 188387])
            ("set-mark-command-repeat-pop" variable nil nil [188389 188848])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188850 191192])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [191194 192748])
            ("pop-mark" function nil nil [192750 193169])
            ("define-obsolete-function-alias" code nil nil [193171 193260])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193261 194145])
            ("shift-select-mode" variable (:default-value t) nil [194147 194719])
            ("handle-shift-selection" function nil nil [194721 195890])
            ("define-minor-mode" code nil nil [195892 197235])
            ("widen-automatically" variable (:default-value t) nil [197237 197571])
            ("non-essential" variable nil nil [197573 197971])
            ("pop-global-mark" function (:user-visible-flag t) nil [197973 198788])
            ("next-line-add-newlines" variable nil nil [198791 198965])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [198967 201223])
            ("put" code nil nil [201224 201272])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [201274 203008])
            ("put" code nil nil [203009 203105])
            ("track-eol" variable nil nil [203107 203445])
            ("goal-column" variable nil nil [203447 203714])
            ("make-variable-buffer-local" code nil nil [203715 203756])
            ("temporary-goal-column" variable nil nil [203758 204275])
            ("line-move-ignore-invisible" variable (:default-value t) nil [204277 204935])
            ("line-move-visual" variable (:default-value t) nil [204937 205513])
            ("declare-function" code nil nil [205550 205610])
            ("default-font-height" function nil nil [205612 206129])
            ("default-line-height" function nil nil [206131 206593])
            ("window-screen-lines" function nil nil [206595 207165])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [207212 210985])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [211309 213286])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [213434 216024])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [216178 220851])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [220853 223991])
            ("line-move-to-column" function (:arguments ("col")) nil [223993 225372])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225374 226729])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [226731 228263])
            ("put" code nil nil [228393 228427])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228429 229430])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [229498 230062])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [230064 230655])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230657 232072])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232074 232443])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232445 232824])
            ("visual-line" customgroup (:user-visible-flag t) nil [232826 232927])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [232929 233417])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [233419 234606])
            ("visual-line--saved-state" variable nil nil [234608 234645])
            ("define-minor-mode" code nil nil [234647 236288])
            ("turn-on-visual-line-mode" function nil nil [236290 236348])
            ("define-globalized-minor-mode" code nil nil [236350 236448])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236452 236886])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236888 237332])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237334 238805])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238807 239414])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [239565 240763])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [240765 241769])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241772 242024])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [242026 242778])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242780 242992])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242994 243185])
            ("current-word" function (:arguments ("strict" "really-word")) nil [243187 244667])
            ("fill-prefix" variable nil nil [244670 244836])
            ("make-variable-buffer-local" code nil nil [244837 244878])
            ("put" code nil nil [244879 244936])
            ("auto-fill-inhibit-regexp" variable nil nil [244938 245104])
            ("do-auto-fill" function nil nil [245106 248406])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [248408 248734])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [248736 249843])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [249845 250001])
            ("put" code nil nil [250003 250065])
            ("put" code nil nil [250239 250291])
            ("define-minor-mode" code nil nil [250293 251038])
            ("auto-fill-function" function nil nil [251105 251212])
            ("turn-on-auto-fill" function nil nil [251214 251307])
            ("turn-off-auto-fill" function nil nil [251309 251405])
            ("custom-add-option" code nil nil [251407 251461])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [251463 252301])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [252304 253094])
            ("defvaralias" code nil nil [253096 253154])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253156 253936])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253938 254482])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [254484 254601])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [254602 254729])
            ("define-minor-mode" code nil nil [254731 255464])
            ("define-minor-mode" code nil nil [255466 256394])
            ("define-minor-mode" code nil nil [256396 256872])
            ("define-minor-mode" code nil nil [256874 257178])
            ("define-minor-mode" code nil nil [257180 257488])
            ("define-minor-mode" code nil nil [257490 258486])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [258489 258620])
            ("blink-matching-paren" variable (:default-value t) nil [258622 258956])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [258958 259357])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [259359 259684])
            ("blink-matching-delay" variable (:default-value 1) nil [259686 259822])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [259824 260092])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [260094 261079])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [261081 261447])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [261449 261659])
            ("blink-matching-open" function (:user-visible-flag t) nil [261661 266088])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [266090 266279])
            ("blink-paren-post-self-insert-function" function nil nil [266281 266808])
            ("put" code nil nil [266810 266868])
            ("add-hook" code nil nil [266870 267249])
            ("keyboard-quit" function (:user-visible-flag t) nil [267427 268075])
            ("buffer-quit-function" variable nil nil [268077 268327])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [268329 269155])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [269157 269552])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [269556 270073])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [270075 271619])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [271621 271946])
            ("rfc822-goto-eoh" function nil nil [271948 272352])
            ("mail-encode-mml" variable nil nil [272394 272533])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [272535 275221])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275223 275614])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275616 276004])
            ("set-variable-value-history" variable nil nil [276008 276193])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [276195 279034])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [279089 279626])
            ("put" code nil nil [279694 279742])
            ("completion-reference-buffer" variable nil nil [279744 279973])
            ("completion-no-auto-exit" variable nil nil [279975 280156])
            ("completion-base-position" variable nil nil [280158 280528])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [280530 280829])
            ("completion-base-size" variable nil nil [280831 281286])
            ("make-obsolete-variable" code nil nil [281287 281366])
            ("delete-completion-window" function (:user-visible-flag t) nil [281368 281742])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281744 281875])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281877 283127])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [283129 285088])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [285172 286010])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [286012 286204])
            ("choose-completion-string-functions" variable nil nil [286206 286845])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [286847 290257])
            ("define-derived-mode" code nil nil [290259 290631])
            ("completion-list-mode-finish" function nil nil [290633 290829])
            ("add-hook" code nil nil [290831 290893])
            ("completion-show-help" variable (:default-value t) nil [290957 291108])
            ("completion-setup-function" function nil nil [291239 293254])
            ("add-hook" code nil nil [293256 293316])
            ("define-key" code nil nil [293318 293393])
            ("define-key" code nil nil [293394 293469])
            ("switch-to-completions" function (:user-visible-flag t) nil [293471 294012])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [294174 294417])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [294418 294671])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [294672 294925])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [294926 295179])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [295180 295437])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [295438 295686])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [295688 296752])
            ("define-key" code nil nil [296754 296825])
            ("define-key" code nil nil [296826 296897])
            ("define-key" code nil nil [296898 296968])
            ("define-key" code nil nil [296969 297038])
            ("define-key" code nil nil [297039 297110])
            ("define-key" code nil nil [297111 297184])
            ("mapc" code nil nil [297474 298069])
            ("clone-buffer-hook" variable nil nil [298121 298222])
            ("clone-indirect-buffer-hook" variable nil nil [298224 298343])
            ("clone-process" function (:arguments ("process" "newname")) nil [298345 299854])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [299957 302920])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [302923 304515])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [304518 305001])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [305049 306589])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [306591 307666])
            ("define-minor-mode" code nil nil [307668 311163])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [311166 311289])
            ("define-minor-mode" code nil nil [311291 312444])
            ("define-minor-mode" code nil nil [312446 313216])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [313219 313402])
            ("define-derived-mode" code nil nil [313404 313520])
            ("messages-buffer" function nil nil [313522 313809])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [314768 316196])
            ("bad-package-check" function (:arguments ("package")) nil [316198 316703])
            ("dolist" code nil nil [316705 316827])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [317480 320014])
            ("iswitchb-mode" variable nil nil [320093 320382])
            ("custom-autoload" code nil nil [320384 320431])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320433 320805])
            ("make-obsolete" code nil nil [320807 320905])
            ("simple" package nil nil [320909 320926]))          
      :file "simple.el.gz"
      :pointmax 320952
      :fsize 87791
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "doc-view.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [6259 6276])
            ("dired" include nil nil [6277 6293])
            ("image-mode" include nil nil [6294 6315])
            ("jka-compr" include nil nil [6316 6336])
            ("doc-view" customgroup (:user-visible-flag t) nil [6366 6585])
            ("doc-view-ghostscript-program" variable (:default-value "gs") nil [6587 6713])
            ("doc-view-pdfdraw-program" variable (:default-value (cond ((executable-find "pdfdraw") "pdfdraw") (t "mudraw"))) nil [6715 6908])
            ("doc-view-pdf->png-converter-function" variable (:default-value (if (executable-find doc-view-pdfdraw-program) (function doc-view-pdf->png-converter-mupdf) (function doc-view-pdf->png-converter-ghostscript))) nil [6910 7426])
            ("doc-view-ghostscript-options" variable (:default-value (quote ("-dSAFER" "-dNOPAUSE" "-sDEVICE=png16m" "-dTextAlphaBits=4" "-dBATCH" "-dGraphicsAlphaBits=4" "-dQUIET"))) nil [7428 7754])
            ("doc-view-resolution" variable (:default-value 100) nil [7756 7924])
            ("doc-view-scale-internally" variable (:default-value t) nil [7926 8216])
            ("doc-view-image-width" variable (:default-value 850) nil [8218 8441])
            ("doc-view-dvipdfm-program" variable (:default-value "dvipdfm") nil [8443 8737])
            ("doc-view-dvipdf-program" variable (:default-value "dvipdf") nil [8739 9032])
            ("define-obsolete-variable-alias" code nil nil [9034 9200])
            ("doc-view-odf->pdf-converter-program" variable (:default-value (cond ((executable-find "soffice") "soffice") ((executable-find "unoconv") "unoconv") (t "soffice"))) nil [9202 9542])
            ("doc-view-odf->pdf-converter-function" variable (:default-value (cond ((string-match "unoconv\\'" doc-view-odf->pdf-converter-program) (function doc-view-odf->pdf-converter-unoconv)) ((string-match "soffice\\'" doc-view-odf->pdf-converter-program) (function doc-view-odf->pdf-converter-soffice)))) nil [9544 10153])
            ("doc-view-ps2pdf-program" variable (:default-value "ps2pdf") nil [10155 10337])
            ("doc-view-pdftotext-program" variable (:default-value "pdftotext") nil [10339 10493])
            ("doc-view-cache-directory" variable (:default-value (expand-file-name (format "docview%d" (user-uid)) temporary-file-directory)) nil [10495 10713])
            ("doc-view-conversion-buffer" variable (:default-value " *doc-view conversion output*") nil [10715 10847])
            ("doc-view-conversion-refresh-interval" variable (:default-value 1) nil [10849 11222])
            ("doc-view-continuous" variable nil nil [11224 11570])
            ("defvar-local" code nil nil [11597 11679])
            ("doc-view-new-window-function" function (:arguments ("winprops")) nil [11681 13035])
            ("defvar-local" code nil nil [13037 13105])
            ("defvar-local" code nil nil [13107 13175])
            ("defvar-local" code nil nil [13177 13249])
            ("defvar-local" code nil nil [13251 13328])
            ("doc-view--pending-cache-flush" variable nil nil [13330 13398])
            ("doc-view--previous-major-mode" variable nil nil [13400 13468])
            ("doc-view--buffer-file-name" variable nil nil [13470 13785])
            ("doc-view-doc-type" variable nil nil [13787 13895])
            ("doc-view-single-page-converter-function" variable nil nil [13897 14122])
            ("defvar-local" code nil nil [14124 14232])
            ("defvar-local" code nil nil [14234 14354])
            ("doc-view-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map image-mode-map) (define-key map (kbd "n") (quote doc-view-next-page)) (define-key map (kbd "p") (quote doc-view-previous-page)) (define-key map (kbd "<next>") (quote forward-page)) (define-key map (kbd "<prior>") (quote backward-page)) (define-key map [remap forward-page] (quote doc-view-next-page)) (define-key map [remap backward-page] (quote doc-view-previous-page)) (define-key map (kbd "SPC") (quote doc-view-scroll-up-or-next-page)) (define-key map (kbd "S-SPC") (quote doc-view-scroll-down-or-previous-page)) (define-key map (kbd "DEL") (quote doc-view-scroll-down-or-previous-page)) (define-key map (kbd "C-n") (quote doc-view-next-line-or-next-page)) (define-key map (kbd "<down>") (quote doc-view-next-line-or-next-page)) (define-key map (kbd "C-p") (quote doc-view-previous-line-or-previous-page)) (define-key map (kbd "<up>") (quote doc-view-previous-line-or-previous-page)) (define-key map (kbd "M-<") (quote doc-view-first-page)) (define-key map (kbd "M->") (quote doc-view-last-page)) (define-key map [remap goto-line] (quote doc-view-goto-page)) (define-key map (kbd "RET") (quote image-next-line)) (define-key map "+" (quote doc-view-enlarge)) (define-key map "=" (quote doc-view-enlarge)) (define-key map "-" (quote doc-view-shrink)) (define-key map "0" (quote doc-view-scale-reset)) (define-key map [remap text-scale-adjust] (quote doc-view-scale-adjust)) (define-key map "W" (quote doc-view-fit-width-to-window)) (define-key map "H" (quote doc-view-fit-height-to-window)) (define-key map "P" (quote doc-view-fit-page-to-window)) (define-key map (kbd "k") (quote doc-view-kill-proc-and-buffer)) (define-key map (kbd "K") (quote doc-view-kill-proc)) (define-key map (kbd "s s") (quote doc-view-set-slice)) (define-key map (kbd "s m") (quote doc-view-set-slice-using-mouse)) (define-key map (kbd "s b") (quote doc-view-set-slice-from-bounding-box)) (define-key map (kbd "s r") (quote doc-view-reset-slice)) (define-key map (kbd "C-s") (quote doc-view-search)) (define-key map (kbd "<find>") (quote doc-view-search)) (define-key map (kbd "C-r") (quote doc-view-search-backward)) (define-key map (kbd "C-t") (quote doc-view-show-tooltip)) (define-key map (kbd "C-c C-c") (quote doc-view-toggle-display)) (define-key map (kbd "C-c C-t") (quote doc-view-open-text)) (define-key map (kbd "g") (quote doc-view-revert-buffer)) (define-key map (kbd "r") (quote doc-view-revert-buffer)) map)) nil [14378 17527])
            ("doc-view-revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm"))
                nil [17529 17877])
            ("easy-menu-define" code nil nil [17880 18715])
            ("doc-view-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "C-c C-c") (quote doc-view-toggle-display)) map)) nil [18717 18954])
            ("doc-view-current-page" function (:arguments ("win")) nil [18982 19068])
            ("doc-view-current-info" function nil nil [19069 19135])
            ("doc-view-current-overlay" function nil nil [19136 19208])
            ("doc-view-current-image" function nil nil [19209 19277])
            ("doc-view-current-slice" function nil nil [19278 19346])
            ("doc-view-last-page-number" function nil nil [19348 19419])
            ("doc-view-goto-page" function
               (:user-visible-flag t
                :arguments ("page"))
                nil [19421 21707])
            ("doc-view-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21709 21863])
            ("doc-view-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [21865 22024])
            ("doc-view-first-page" function (:user-visible-flag t) nil [22026 22122])
            ("doc-view-last-page" function (:user-visible-flag t) nil [22124 22244])
            ("doc-view-scroll-up-or-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22246 22913])
            ("doc-view-scroll-down-or-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22915 23609])
            ("doc-view-next-line-or-next-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23611 24210])
            ("doc-view-previous-line-or-previous-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [24212 24842])
            ("doc-view-kill-proc" function (:user-visible-flag t) nil [24868 25325])
            ("doc-view-kill-proc-and-buffer" function (:user-visible-flag t) nil [25327 25532])
            ("doc-view-make-safe-dir" function (:arguments ("dir")) nil [25534 26813])
            ("doc-view--current-cache-dir" function nil nil [26815 27660])
            ("doc-view-mode-p" function (:arguments ("type")) nil [27677 28613])
            ("doc-view-shrink-factor" variable (:default-value 1.125) nil [28642 28679])
            ("doc-view-enlarge" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [28681 29457])
            ("doc-view-shrink" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [29459 29598])
            ("doc-view-scale-reset" function (:user-visible-flag t) nil [29600 30079])
            ("doc-view-scale-adjust" function
               (:user-visible-flag t
                :arguments ("factor"))
                nil [30081 30769])
            ("doc-view-fit-width-to-window" function (:user-visible-flag t) nil [30771 31604])
            ("doc-view-fit-height-to-window" function (:user-visible-flag t) nil [31606 32677])
            ("doc-view-fit-page-to-window" function (:user-visible-flag t) nil [32679 34149])
            ("doc-view-reconvert-doc" function (:user-visible-flag t) nil [34151 34551])
            ("doc-view-sentinel" function (:arguments ("proc" "event")) nil [34553 35315])
            ("doc-view-start-process" function (:arguments ("name" "program" "args" "callback")) nil [35317 36019])
            ("doc-view-dvi->pdf" function (:arguments ("dvi" "pdf" "callback")) nil [36021 36556])
            ("doc-view-pdf->png-converter-ghostscript" function (:arguments ("pdf" "png" "page" "callback")) nil [36558 36949])
            ("defalias" code nil nil [36951 37044])
            ("doc-view-djvu->tiff-converter-ddjvu" function (:arguments ("djvu" "tiff" "page" "callback")) nil [37046 37609])
            ("doc-view-pdf->png-converter-mupdf" function (:arguments ("pdf" "png" "page" "callback")) nil [37611 37879])
            ("doc-view-odf->pdf-converter-unoconv" function (:arguments ("odf" "callback")) nil [37881 38278])
            ("doc-view-odf->pdf-converter-soffice" function (:arguments ("odf" "callback")) nil [38280 39284])
            ("doc-view-pdf/ps->png" function (:arguments ("pdf-ps" "png")) nil [39286 40532])
            ("declare-function" code nil nil [40534 40599])
            ("doc-view-document->bitmap" function (:arguments ("pdf" "png" "pages")) nil [40601 41921])
            ("doc-view-pdf->txt" function (:arguments ("pdf" "txt" "callback")) nil [41923 42312])
            ("doc-view-current-cache-doc-pdf" function nil nil [42314 42557])
            ("doc-view-doc->txt" function (:arguments ("txt" "callback")) nil [42559 43589])
            ("doc-view-ps->pdf" function (:arguments ("ps" "pdf" "callback")) nil [43591 44199])
            ("doc-view-active-pages" function nil nil [44201 44446])
            ("doc-view-convert-current-doc" function nil nil [44448 46676])
            ("declare-function" code nil nil [46692 46761])
            ("doc-view-set-slice" function
               (:user-visible-flag t
                :arguments ("x" "y" "width" "height"))
                nil [46763 47689])
            ("doc-view-set-slice-using-mouse" function (:user-visible-flag t) nil [47691 48444])
            ("doc-view-get-bounding-box" function nil nil [48446 49234])
            ("doc-view-paper-sizes" variable (:default-value (quote ((a4 595 842) (a4-landscape 842 595) (letter 612 792) (letter-landscape 792 612) (legal 612 1008) (legal-landscape 1008 612) (a3 842 1191) (a3-landscape 1191 842) (tabloid 792 1224) (ledger 1224 792)))) nil [49236 49555])
            ("doc-view-guess-paper-size" function (:arguments ("iw" "ih")) nil [49557 49872])
            ("doc-view-scale-bounding-box" function (:arguments ("ps" "iw" "ih" "bb")) nil [49874 50183])
            ("doc-view-set-slice-from-bounding-box" function
               (:user-visible-flag t
                :arguments ("force-paper-size"))
                nil [50185 51191])
            ("doc-view-reset-slice" function (:user-visible-flag t) nil [51193 51432])
            ("doc-view-insert-image" function (:arguments ("file" "args")) nil [51448 53987])
            ("doc-view-sort" function (:arguments ("a" "b")) nil [53989 54212])
            ("doc-view-display" function (:arguments ("buffer" "force")) nil [54214 55448])
            ("doc-view-buffer-message" function nil nil [55450 56300])
            ("declare-function" code nil nil [56302 56374])
            ("doc-view-show-tooltip" function nil nil [56376 56465])
            ("doc-view-open-text" function (:user-visible-flag t) nil [56467 57317])
            ("defvar-local" code nil nil [57361 57457])
            ("put" code nil nil [57458 57507])
            ("doc-view-toggle-display" function (:user-visible-flag t) nil [57509 58435])
            ("doc-view-search-internal" function (:arguments ("regexp" "file")) nil [58454 59466])
            ("doc-view-search-no-of-matches" function (:arguments ("list")) nil [59468 59660])
            ("doc-view-search-backward" function
               (:user-visible-flag t
                :arguments ("new-query"))
                nil [59662 59858])
            ("doc-view-search" function
               (:user-visible-flag t
                :arguments ("new-query" "backward"))
                nil [59860 60983])
            ("doc-view-search-next-match" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60985 61503])
            ("doc-view-search-previous-match" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61505 62049])
            ("put" code nil nil [62094 62135])
            ("doc-view-already-converted-p" function nil nil [62137 62702])
            ("doc-view-initiate-display" function nil nil [62704 64142])
            ("bookmark-make-record-function" variable nil nil [64144 64182])
            ("doc-view-clone-buffer-hook" function nil nil [64184 64946])
            ("doc-view-intersection" function (:arguments ("l1" "l2")) nil [64948 65056])
            ("doc-view-set-doc-type" function nil nil [65058 66401])
            ("doc-view-set-up-single-converter" function nil nil [66403 66965])
            ("doc-view-desktop-save-buffer" function (:arguments ("_desktop-dirname")) nil [66994 67128])
            ("declare-function" code nil nil [67130 67246])
            ("doc-view-restore-desktop-buffer" function (:arguments ("file" "name" "misc")) nil [67248 67612])
            ("add-to-list" code nil nil [67614 67714])
            ("doc-view-mode" function (:user-visible-flag t) nil [67731 72207])
            ("doc-view-fallback-mode" function nil nil [72209 72964])
            ("doc-view-mode-maybe" function nil nil [72981 73325])
            ("define-minor-mode" code nil nil [73342 73997])
            ("doc-view-clear-cache" function (:user-visible-flag t) nil [73999 74158])
            ("doc-view-dired-cache" function (:user-visible-flag t) nil [74160 74290])
            ("declare-function" code nil nil [74320 74432])
            ("declare-function" code nil nil [74433 74496])
            ("declare-function" code nil nil [74497 74557])
            ("doc-view-bookmark-make-record" function nil nil [74559 74737])
            ("doc-view-bookmark-jump" function (:arguments ("bmk")) nil [74754 75429])
            ("doc-view" package nil nil [75431 75450]))          
      :file "doc-view.el.gz"
      :pointmax 75539
      :fsize 20221
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "help.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1149 1170])
            ("add-hook" code nil nil [1241 1292])
            ("add-hook" code nil nil [1293 1344])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1765 1875])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1877 4124])
            ("define-key" code nil nil [4126 4190])
            ("define-key" code nil nil [4191 4235])
            ("define-key" code nil nil [4236 4278])
            ("fset" code nil nil [4279 4308])
            ("help-button-cache" variable nil nil [4377 4407])
            ("help-quit" function (:user-visible-flag t) nil [4411 4505])
            ("help-return-method" variable nil nil [4507 4876])
            ("define-obsolete-function-alias" code nil nil [4878 4971])
            ("help-print-return-message" function (:arguments ("function")) nil [4972 7267])
            ("fset" code nil nil [7327 7388])
            ("defalias" code nil nil [7390 7430])
            ("defalias" code nil nil [7463 7512])
            ("make-help-screen" code nil nil [7558 10594])
            ("function-called-at-point" function nil nil [10599 12331])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12362 12517])
            ("describe-distribution" function (:user-visible-flag t) nil [12519 12663])
            ("describe-copying" function (:user-visible-flag t) nil [12665 12803])
            ("describe-gnu-project" function (:user-visible-flag t) nil [12805 12926])
            ("define-obsolete-function-alias" code nil nil [12928 13007])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13009 13255])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13257 13763])
            ("setq" code nil nil [13854 13906])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [13908 16334])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16336 16455])
            ("define-obsolete-function-alias" code nil nil [16457 16524])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16527 16852])
            ("view-order-manuals" function (:user-visible-flag t) nil [16854 17032])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17034 17221])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17223 17371])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17373 17496])
            ("view-external-packages" function (:user-visible-flag t) nil [17565 17722])
            ("view-lossage" function (:user-visible-flag t) nil [17724 18501])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18522 19358])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19401 20135])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20137 22258])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22260 22620])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [22622 25744])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [25746 31354])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [31357 35118])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [35121 36008])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [36020 36234])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [36236 36580])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [36595 36912])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [36914 37463])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [37465 38255])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (eq (selected-window) (frame-root-window)) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [38303 39046])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (eq (selected-window) (frame-root-window)) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [39048 39786])
            ("define-minor-mode" code nil nil [39788 40944])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [40946 42594])
            ("help-window-select" variable (:default-value (quote other)) nil [42614 43209])
            ("help-enable-auto-load" variable (:default-value t) nil [43211 43598])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [43600 44518])
            ("help-window-setup" function (:arguments ("window" "value")) nil [44520 46634])
            ("with-help-window" function (:arguments ("buffer-name" "body")) nil [47206 48262])
            ("help-form-show" function nil nil [48390 48580])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [48806 49721])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [49723 50497])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [50499 53058])
            ("help-make-usage" function (:arguments ("function" "arglist")) nil [53060 53496])
            ("help" package nil nil [53500 53515]))          
      :file "help.el.gz"
      :pointmax 53539
      :fsize 15419
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1170 . 1171) (symbol 1131 . 1148) (open-paren 1130 . 1131)))
    (semanticdb-table "desktop.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [5737 5754])
            ("frameset" include nil nil [5755 5774])
            ("desktop-file-version" variable (:default-value "206") nil [5776 5944])
            ("desktop" customgroup (:user-visible-flag t) nil [6164 6243])
            ("define-obsolete-variable-alias" code nil nil [6286 6360])
            ("define-minor-mode" code nil nil [6376 7397])
            ("desktop-save-mode-off" function nil nil [7399 7516])
            ("desktop-save" variable (:default-value (quote ask-if-new)) nil [7518 8553])
            ("desktop-auto-save-timeout" variable (:default-value auto-save-timeout) nil [8555 9215])
            ("desktop-load-locked-desktop" variable (:default-value (quote ask)) nil [9217 9701])
            ("define-obsolete-variable-alias" code nil nil [9703 9820])
            ("desktop-base-file-name" variable (:default-value (convert-standard-filename ".emacs.desktop")) nil [9822 10001])
            ("desktop-base-lock-name" variable (:default-value (convert-standard-filename ".emacs.desktop.lock")) nil [10003 10210])
            ("desktop-path" variable (:default-value (list user-emacs-directory "~")) nil [10212 10456])
            ("desktop-missing-file-warning" variable nil nil [10508 10827])
            ("desktop-no-desktop-file-hook" variable nil nil [10829 11085])
            ("desktop-not-loaded-hook" variable nil nil [11087 11420])
            ("desktop-after-read-hook" variable nil nil [11422 11628])
            ("desktop-save-hook" variable nil nil [11630 11910])
            ("desktop-globals-to-save" variable (:default-value (quote (desktop-missing-file-warning tags-file-name tags-table-list search-ring regexp-search-ring register-alist file-name-history))) nil [11912 12517])
            ("desktop-globals-to-clear" variable (:default-value (quote (kill-ring kill-ring-yank-pointer search-ring search-ring-yank-pointer regexp-search-ring regexp-search-ring-yank-pointer))) nil [12519 13052])
            ("desktop-clear-preserve-buffers" variable (:default-value (quote ("\\*scratch\\*" "\\*Messages\\*" "\\*server\\*" "\\*tramp/.+\\*" "\\*Warnings\\*"))) nil [13054 13459])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [13476 14143])
            ("desktop-buffers-not-to-save" variable (:default-value "\\` ") nil [14145 14387])
            ("desktop-files-not-to-save" variable (:default-value "\\(^/[^/:]*:\\|(ftp)$\\)") nil [14422 14633])
            ("desktop-modes-not-to-save" variable (:default-value (quote (tags-table-mode))) nil [14705 14865])
            ("desktop-restore-frames" variable (:default-value t) nil [14867 15157])
            ("desktop-restore-in-current-display" variable nil nil [15159 15657])
            ("desktop-restore-forces-onscreen" variable (:default-value t) nil [15659 16260])
            ("desktop-restore-reuses-frames" variable (:default-value t) nil [16262 16630])
            ("desktop-file-name-format" variable (:default-value (quote absolute)) nil [16632 16973])
            ("desktop-restore-eager" variable (:default-value t) nil [16975 17241])
            ("desktop-lazy-verbose" variable (:default-value t) nil [17243 17379])
            ("desktop-lazy-idle-delay" variable (:default-value 5) nil [17381 17550])
            ("defvar-local" code nil nil [17567 18163])
            ("make-obsolete-variable" code nil nil [18164 18270])
            ("make-obsolete-variable" code nil nil [18271 18378])
            ("desktop-buffer-mode-handlers" variable nil nil [18395 19575])
            ("put" code nil nil [19592 19651])
            ("make-obsolete-variable" code nil nil [19652 19762])
            ("desktop-minor-mode-table" variable (:default-value (quote ((auto-fill-function auto-fill-mode) (defining-kbd-macro nil) (isearch-mode nil) (vc-mode nil) (vc-dired-mode nil) (erc-track-minor-mode nil) (savehist-mode nil)))) nil [19764 20541])
            ("desktop-minor-mode-handlers" variable nil nil [20558 21745])
            ("put" code nil nil [21762 21820])
            ("desktop-dirname" variable nil nil [21902 21991])
            ("desktop-full-file-name" function (:arguments ("dirname")) nil [21993 22225])
            ("desktop-full-lock-name" function (:arguments ("dirname")) nil [22227 22464])
            ("desktop-header" variable
               (:constant-flag t
                :user-visible-flag t
                :default-value ";; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
")
                nil [22466 22712])
            ("desktop-delay-hook" variable nil nil [22714 22816])
            ("desktop-file-checksum" variable nil nil [22818 22979])
            ("desktop-saved-frameset" variable nil nil [22981 23118])
            ("desktop-file-modtime" variable nil nil [23235 23383])
            ("desktop-owner" function (:arguments ("dirname")) nil [23385 23903])
            ("desktop-claim-lock" function (:arguments ("dirname")) nil [23905 24165])
            ("desktop-release-lock" function (:arguments ("dirname")) nil [24167 24421])
            ("desktop-truncate" function (:arguments ("list" "n")) nil [24503 24677])
            ("desktop-clear" function (:user-visible-flag t) nil [24774 26609])
            ("unless" code nil nil [26691 26758])
            ("desktop-kill" function nil nil [26760 28030])
            ("desktop-list*" function (:arguments ("args")) nil [28112 28183])
            ("desktop-buffer-info" function (:arguments ("buffer")) nil [28265 29470])
            ("desktop--v2s" function (:arguments ("value")) nil [29552 31897])
            ("desktop-value-to-string" function (:arguments ("value")) nil [31979 32416])
            ("desktop-outvar" function (:arguments ("varspec")) nil [32498 33189])
            ("desktop-save-buffer-p" function (:arguments ("filename" "bufname" "mode" "_dummy")) nil [33271 34282])
            ("desktop-file-name" function (:arguments ("filename" "dirname")) nil [34364 35032])
            ("desktop--check-dont-save" function (:arguments ("frame")) nil [35115 35206])
            ("desktop--app-id" variable
               (:constant-flag t
                :default-value (\` (desktop \, desktop-file-version)))
                nil [35208 35269])
            ("desktop-save-frameset" function nil nil [35271 35652])
            ("desktop-save" function
               (:user-visible-flag t
                :arguments ("dirname" "release" "only-if-changed"))
                nil [35669 40220])
            ("desktop-remove" function (:user-visible-flag t) nil [40317 40629])
            ("desktop-buffer-args-list" variable nil nil [40631 40714])
            ("desktop-lazy-timer" variable nil nil [40716 40747])
            ("desktop-restoring-frameset-p" function nil nil [40829 40997])
            ("desktop-restore-frameset" function nil nil [40999 41522])
            ("desktop-first-buffer" variable nil nil [41602 41631])
            ("desktop-buffer-ok-count" variable nil nil [41632 41664])
            ("desktop-buffer-fail-count" variable nil nil [41665 41699])
            ("desktop-read" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [41791 46663])
            ("desktop-load-default" function nil nil [46801 47080])
            ("desktop-change-dir" function
               (:user-visible-flag t
                :arguments ("dirname"))
                nil [47177 47593])
            ("desktop-save-in-desktop-dir" function (:user-visible-flag t) nil [47690 47969])
            ("desktop-auto-save-timer" variable nil nil [48067 48103])
            ("desktop-auto-save-enable" function (:arguments ("timeout")) nil [48105 48351])
            ("desktop-auto-save-disable" function nil nil [48353 48503])
            ("desktop-auto-save" function nil nil [48505 48968])
            ("desktop-auto-save-set-timer" function nil nil [48970 49465])
            ("desktop-auto-save-cancel-timer" function nil nil [49467 49623])
            ("desktop-revert" function (:user-visible-flag t) nil [49720 50006])
            ("desktop-buffer-major-mode" variable nil nil [50008 50042])
            ("desktop-buffer-locals" variable nil nil [50043 50073])
            ("auto-insert" variable nil nil [50074 50094])
            ("desktop-restore-file-buffer" function (:arguments ("buffer-filename" "_buffer-name" "_buffer-misc")) nil [50197 51155])
            ("desktop-load-file" function (:arguments ("function")) nil [51157 51337])
            ("desktop-create-buffer" function (:arguments ("file-version" "buffer-filename" "buffer-name" "buffer-majormode" "buffer-minormodes" "buffer-point" "buffer-mark" "buffer-readonly" "buffer-misc" "buffer-locals")) nil [51508 55481])
            ("desktop-buffer" function (:arguments ("buffer-filename" "buffer-name" "buffer-majormode" "mim" "pt" "mk" "ro" "tl" "fc" "cfs" "cr" "buffer-misc")) nil [55628 56044])
            ("desktop-append-buffer-args" function (:arguments ("args")) nil [56046 56432])
            ("desktop-lazy-create-buffer" function nil nil [56434 57317])
            ("desktop-idle-create-buffers" function nil nil [57319 57842])
            ("desktop-lazy-complete" function (:user-visible-flag t) nil [57844 58114])
            ("desktop-lazy-abort" function (:user-visible-flag t) nil [58116 58467])
            ("add-hook" code nil nil [58880 59601])
            ("vc-dir-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [59640 59678])
            ("desktop" package nil nil [59680 59698]))          
      :file "desktop.el.gz"
      :pointmax 59771
      :fsize 16092
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dabbrev.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dabbrev" customgroup (:user-visible-flag t) nil [3900 4019])
            ("dabbrev-backward-only" variable nil nil [4021 4148])
            ("dabbrev-limit" variable nil nil [4150 4321])
            ("dabbrev-abbrev-skip-leading-regexp" variable nil nil [4323 4713])
            ("dabbrev-eliminate-newlines" variable (:default-value t) nil [4715 4880])
            ("dabbrev-case-fold-search" variable (:default-value (quote case-fold-search)) nil [4882 5308])
            ("dabbrev-upcase-means-case-search" variable nil nil [5380 5742])
            ("dabbrev-case-distinction" variable (:default-value (quote case-replace)) nil [5744 6307])
            ("dabbrev-case-replace" variable (:default-value (quote case-replace)) nil [6309 6909])
            ("dabbrev-abbrev-char-regexp" variable nil nil [6977 8177])
            ("dabbrev-check-all-buffers" variable (:default-value t) nil [8179 8674])
            ("dabbrev-ignored-buffer-names" variable (:default-value (quote ("*Messages*" "*Buffer List*"))) nil [8676 8929])
            ("dabbrev-ignored-buffer-regexps" variable nil nil [8931 9156])
            ("dabbrev-check-other-buffers" variable (:default-value t) nil [9158 9652])
            ("dabbrev-select-buffers-function" variable (:default-value (quote dabbrev--select-buffers)) nil [9817 10167])
            ("dabbrev-friend-buffer-function" variable (:default-value (quote dabbrev--same-major-mode-p)) nil [10169 10770])
            ("dabbrev-search-these-buffers-only" variable nil nil [10772 11121])
            ("dabbrev--last-table" variable nil nil [11315 11347])
            ("dabbrev--last-abbreviation" variable nil nil [11384 11423])
            ("dabbrev--last-abbrev-location" variable nil nil [11461 11503])
            ("dabbrev--last-direction" variable nil nil [11542 11576])
            ("dabbrev--last-expansion" variable nil nil [11616 11652])
            ("dabbrev--last-expansion-location" variable nil nil [11696 11741])
            ("dabbrev--friend-buffer-list" variable nil nil [11814 11854])
            ("dabbrev--last-buffer" variable nil nil [11922 11955])
            ("dabbrev--last-buffer-found" variable nil nil [12005 12044])
            ("dabbrev--last-case-pattern" variable nil nil [12150 12189])
            ("dabbrev--check-other-buffers" variable (:default-value dabbrev-check-other-buffers) nil [12260 12325])
            ("dabbrev--abbrev-char-regexp" variable nil nil [12389 12429])
            ("dabbrev--progress-reporter" variable nil nil [12486 12525])
            ("dabbrev--minibuffer-origin" function nil nil [12672 12802])
            ("dabbrev-filter-elements" function (:arguments ("element" "list" "condition")) nil [12998 13361])
            ("dabbrev--ignore-case-p" function (:arguments ("abbrev")) nil [13664 13923])
            ("dabbrev-completion" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13940 16514])
            ("dabbrev-expand" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16531 21611])
            ("dabbrev--same-major-mode-p" function (:arguments ("other-buffer")) nil [21767 21956])
            ("dabbrev--goto-start-of-abbrev" function nil nil [21958 22607])
            ("dabbrev--abbrev-at-point" function nil nil [22609 23648])
            ("dabbrev--reset-global-variables" function nil nil [23650 24154])
            ("dabbrev--select-buffers" function nil nil [24156 24914])
            ("dabbrev--try-find" function (:arguments ("abbrev" "reverse" "n" "ignore-case")) nil [24916 26006])
            ("dabbrev--find-all-expansions" function (:arguments ("abbrev" "ignore-case")) nil [26008 26431])
            ("dabbrev--ignore-buffer-p" function (:arguments ("buffer")) nil [26433 26795])
            ("dabbrev--find-expansion" function (:arguments ("abbrev" "direction" "ignore-case")) nil [26797 29648])
            ("dabbrev--make-friend-buffer-list" function nil nil [29912 31506])
            ("dabbrev--safe-replace-match" function (:arguments ("string" "fixedcase" "literal")) nil [31508 31743])
            ("dabbrev--substitute-expansion" function (:arguments ("old" "abbrev" "expansion" "record-case-pattern")) nil [31813 35872])
            ("dabbrev--search" function (:arguments ("abbrev" "reverse" "ignore-case")) nil [35991 38658])
            ("dabbrev" package nil nil [38660 38678]))          
      :file "dabbrev.el.gz"
      :pointmax 38705
      :fsize 10859
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dired-aux.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1373 1389])
            ("dired-create-files-failures" variable nil nil [1391 1630])
            ("dired-star-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\*\\([ 	]\\|$\\)")
                nil [1693 1763])
            ("dired-quark-subst-regexp" variable
               (:constant-flag t
                :default-value "\\(^\\|[ 	]\\)\\?\\([ 	]\\|$\\)")
                nil [1764 1835])
            ("dired-diff" function
               (:user-visible-flag t
                :arguments ("file" "switches"))
                nil [1852 4420])
            ("dired-backup-diff" function
               (:user-visible-flag t
                :arguments ("switches"))
                nil [4437 5031])
            ("dired-compare-directories" function
               (:user-visible-flag t
                :arguments ("dir2" "predicate"))
                nil [5048 7892])
            ("dired-file-set-difference" function (:arguments ("list1" "list2" "predicate")) nil [7894 8956])
            ("dired-files-attributes" function (:arguments ("dir")) nil [8958 9340])
            ("dired-do-chxxx" function (:arguments ("attribute-name" "program" "op-symbol" "arg")) nil [9371 11335])
            ("dired-do-chmod" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11352 12728])
            ("dired-do-chgrp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12745 13082])
            ("dired-do-chown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13099 13448])
            ("dired-do-touch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13465 13742])
            ("dired-bunch-files" function (:arguments ("max" "function" "args" "files")) nil [13997 15363])
            ("dired-do-print" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15380 16115])
            ("dired-mark-read-string" function (:arguments ("prompt" "initial" "op-symbol" "arg" "files" "default-value" "collection")) nil [16117 17025])
            ("dired-file-version-alist" variable nil nil [17091 17124])
            ("dired-clean-directory" function
               (:user-visible-flag t
                :arguments ("keep"))
                nil [17141 18901])
            ("dired-map-dired-file-lines" function (:arguments ("fun")) nil [18946 19437])
            ("backup-extract-version-start" variable nil nil [19439 19476])
            ("dired-collect-file-versions" function (:arguments ("fn")) nil [19512 20332])
            ("dired-trample-file-versions" function (:arguments ("fn")) nil [20334 20837])
            ("declare-function" code nil nil [20860 20926])
            ("minibuffer-default-add-dired-shell-commands" function (:user-visible-flag t) nil [20928 21437])
            ("dired-read-shell-command" function (:arguments ("prompt" "arg" "files")) nil [21518 22455])
            ("dired-do-async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [22472 23623])
            ("dired-do-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "arg" "file-list"))
                nil [23640 27319])
            ("dired-mark-prefix" variable nil nil [27355 27439])
            ("dired-mark-postfix" variable nil nil [27440 27524])
            ("dired-mark-separator" variable (:default-value " ") nil [27525 27610])
            ("dired-shell-stuff-it" function (:arguments ("command" "file-list" "on-each" "_raw-arg")) nil [27612 29243])
            ("dired-run-shell-command" function (:arguments ("command")) nil [29330 29633])
            ("dired-check-process" function (:arguments ("msg" "program" "arguments")) nil [29637 30613])
            ("dired-kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30680 31387])
            ("dired-do-kill-lines" function
               (:user-visible-flag t
                :arguments ("arg" "fmt"))
                nil [31404 32598])
            ("dired-compress" function nil nil [32658 33240])
            ("dired-compress-file-suffixes" variable (:default-value (quote (("\\.gz\\'" "" "gunzip") ("\\.tgz\\'" ".tar" "gunzip") ("\\.Z\\'" "" "uncompress") ("\\.z\\'" "" "gunzip") ("\\.dz\\'" "" "dictunzip") ("\\.tbz\\'" ".tar" "bunzip2") ("\\.bz2\\'" "" "bunzip2") ("\\.xz\\'" "" "unxz") ("\\.tar\\'" ".tgz" nil)))) nil [33242 34295])
            ("dired-compress-file" function (:arguments ("file")) nil [34312 36191])
            ("dired-mark-confirm" function (:arguments ("op-symbol" "arg")) nil [36194 37117])
            ("dired-map-over-marks-check" function (:arguments ("fun" "arg" "op-symbol" "show-progress")) nil [37119 38480])
            ("dired-query" function (:arguments ("sym" "prompt" "args")) nil [38497 39530])
            ("dired-do-compress" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39549 39738])
            ("dired-byte-compile" function nil nil [39798 40439])
            ("dired-do-byte-compile" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40456 40658])
            ("dired-load" function nil nil [40660 40987])
            ("dired-do-load" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41004 41178])
            ("dired-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [41195 42856])
            ("dired-reset-subdir-switches" function (:user-visible-flag t) nil [42858 43027])
            ("dired-update-file-line" function (:arguments ("file")) nil [43030 43794])
            ("dired-add-file" function (:arguments ("filename" "marker-char")) nil [43811 44014])
            ("dired-omit-mode" variable nil nil [44016 44040])
            ("declare-function" code nil nil [44041 44090])
            ("dired-omit-localp" variable nil nil [44091 44117])
            ("dired-add-entry" function (:arguments ("filename" "marker-char" "relative")) nil [44119 48241])
            ("dired-after-subdir-garbage" function (:arguments ("dir")) nil [48243 48689])
            ("dired-remove-file" function (:arguments ("file")) nil [48706 48865])
            ("dired-remove-entry" function (:arguments ("file")) nil [48867 49068])
            ("dired-relist-file" function (:arguments ("file")) nil [49085 49332])
            ("dired-relist-entry" function (:arguments ("file")) nil [49334 49978])
            ("dired-backup-overwrite" variable nil nil [50036 50316])
            ("dired-overwrite-confirmed" variable nil nil [50484 50518])
            ("dired-handle-overwrite" function (:arguments ("to")) nil [50520 51110])
            ("dired-copy-file" function (:arguments ("from" "to" "ok-flag")) nil [51127 51302])
            ("declare-function" code nil nil [51304 51352])
            ("dired-copy-file-recursive" function (:arguments ("from" "to" "ok-flag" "preserve-time" "top" "recursive")) nil [51354 52198])
            ("dired-rename-file" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [52215 52714])
            ("dired-rename-subdir" function (:arguments ("from-dir" "to-dir")) nil [52716 53506])
            ("dired-rename-subdir-1" function (:arguments ("dir" "to")) nil [53508 54649])
            ("dired-rename-subdir-2" function (:arguments ("elt" "dir" "to")) nil [54651 55782])
            ("overwrite-query" variable nil nil [55816 55840])
            ("overwrite-backup-query" variable nil nil [55841 55872])
            ("dired-create-files" function (:arguments ("file-creator" "operation" "fn-list" "name-constructor" "marker-char")) nil [55943 61516])
            ("dired-do-create-files" function (:arguments ("op-symbol" "file-creator" "operation" "arg" "marker-char" "op1" "how-to")) nil [61519 65781])
            ("dired-mark-read-file-name" function (:arguments ("prompt" "dir" "op-symbol" "arg" "files" "default")) nil [66305 66530])
            ("dired-dwim-target-directory" function nil nil [66532 67348])
            ("dired-dwim-target-defaults" function (:arguments ("fn-list" "target-dir")) nil [67350 69497])
            ("dired-create-directory" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [69516 70240])
            ("dired-into-dir-with-symlinks" function (:arguments ("target")) nil [70242 70358])
            ("dired-copy-how-to-fn" variable nil nil [70977 71133])
            ("dired-do-copy" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71150 72175])
            ("dired-do-symlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72192 72831])
            ("dired-do-hardlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72848 73430])
            ("dired-hardlink" function (:arguments ("file" "newname" "ok-if-already-exists")) nil [73432 73682])
            ("dired-do-rename" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73699 74225])
            ("rename-regexp-query" variable nil nil [74281 74309])
            ("dired-do-create-files-regexp" function (:arguments ("file-creator" "operation" "arg" "regexp" "newname" "whole-name" "marker-char")) nil [74311 76547])
            ("dired-mark-read-regexp" function (:arguments ("operation")) nil [76549 77092])
            ("dired-do-rename-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [77109 77992])
            ("dired-do-copy-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [78009 78482])
            ("dired-do-hardlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [78499 78878])
            ("dired-do-symlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [78895 79271])
            ("rename-non-directory-query" variable nil nil [79273 79308])
            ("dired-create-files-non-directory" function (:arguments ("file-creator" "basename-constructor" "operation" "arg")) nil [79310 80319])
            ("dired-rename-non-directory" function (:arguments ("basename-constructor" "operation" "arg")) nil [80321 80499])
            ("dired-upcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80516 80698])
            ("dired-downcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80715 80903])
            ("dired-maybe-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [80978 82595])
            ("dired-insert-subdir" function
               (:user-visible-flag t
                :arguments ("dirname" "switches" "no-error-if-not-dir-p"))
                nil [82612 85194])
            ("dired-insert-subdir-validate" function (:arguments ("dirname" "switches")) nil [85196 85929])
            ("dired-alist-add" function (:arguments ("dir" "new-marker")) nil [85931 86074])
            ("dired-alist-sort" function nil nil [86076 86317])
            ("dired-kill-tree" function
               (:user-visible-flag t
                :arguments ("dirname" "remember-marks" "kill-root"))
                nil [86319 87177])
            ("dired-insert-subdir-newpos" function (:arguments ("new-dir")) nil [87179 87713])
            ("dired-insert-subdir-del" function (:arguments ("element")) nil [87715 88260])
            ("dired-insert-subdir-doinsert" function (:arguments ("dirname" "switches")) nil [88262 88899])
            ("dired-insert-subdir-doupdate" function (:arguments ("dirname" "elt" "beg-end")) nil [88901 89729])
            ("dired-tree-lessp" function (:arguments ("dir1" "dir2")) nil [89731 90933])
            ("dired-split" function (:arguments ("pat" "str" "limit")) nil [91003 91906])
            ("dired-prev-subdir" function
               (:user-visible-flag t
                :arguments ("arg" "no-error-if-not-found" "no-skip"))
                nil [91954 92422])
            ("dired-subdir-min" function nil nil [92424 92553])
            ("dired-goto-subdir" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [92570 93389])
            ("dired-mark-subdir-files" function (:user-visible-flag t) nil [93407 93738])
            ("dired-kill-subdir" function
               (:user-visible-flag t
                :arguments ("remember-marks"))
                nil [93755 94569])
            ("dired-unsubdir" function (:arguments ("dir")) nil [94571 94716])
            ("dired-tree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [94733 95094])
            ("dired-tree-down" function (:user-visible-flag t) nil [95111 95591])
            ("dired-unhide-subdir" function nil nil [95606 95736])
            ("dired-hide-check" function nil nil [95738 95861])
            ("dired-subdir-hidden-p" function (:arguments ("dir")) nil [95863 95996])
            ("dired-hide-subdir" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96013 96844])
            ("dired-hide-all" function
               (:user-visible-flag t
                :arguments ("ignored"))
                nil [96861 97922])
            ("dired-isearch-filenames" variable nil nil [98001 98502])
            ("define-minor-mode" code nil nil [98504 99204])
            ("dired-isearch-filenames-setup" function nil nil [99221 99677])
            ("dired-isearch-filenames-end" function nil nil [99679 99935])
            ("dired-isearch-filter-filenames" function (:arguments ("beg" "end")) nil [99937 100227])
            ("dired-isearch-filenames" function (:user-visible-flag t) nil [100244 100438])
            ("dired-isearch-filenames-regexp" function (:user-visible-flag t) nil [100455 100663])
            ("dired-do-isearch" function (:user-visible-flag t) nil [100744 100933])
            ("dired-do-isearch-regexp" function (:user-visible-flag t) nil [100950 101153])
            ("dired-do-search" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [101170 101494])
            ("dired-do-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("from" "to" "delimited"))
                nil [101511 102352])
            ("dired-nondirectory-p" function (:arguments ("file")) nil [102354 102421])
            ("dired-show-file-type" function
               (:user-visible-flag t
                :arguments ("file" "deref-symlinks"))
                nil [102439 103013])
            ("dired-aux" package nil nil [103015 103035]))          
      :file "dired-aux.el.gz"
      :pointmax 103159
      :fsize 29431
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "novice.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("define-obsolete-variable-alias" code nil nil [1300 1391])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [1407 1585])
            ("disabled-command-function" function (:arguments ("cmd" "keys")) nil [1701 4358])
            ("en/disable-command" function (:arguments ("command" "disable")) nil [4360 5841])
            ("enable-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [5858 6149])
            ("disable-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [6166 6443])
            ("novice" package nil nil [6445 6462]))          
      :file "novice.el.gz"
      :pointmax 6488
      :fsize 2610
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dirtrack.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("shell" include nil nil [4540 4556])
            ("comint" include nil nil [4520 4537])
            ("dirtrack" customgroup (:user-visible-flag t) nil [4709 4817])
            ("dirtrack-list" variable (:default-value (list "^emacs \\([a-zA-Z]:.*\\)>" 1)) nil [4819 5156])
            ("make-variable-buffer-local" code nil nil [5158 5201])
            ("dirtrack-debug" variable nil nil [5203 5338])
            ("dirtrack-debug-buffer" variable (:default-value "*Directory Tracking Log*") nil [5340 5503])
            ("dirtrack-directory-function" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) (quote dirtrack-windows-directory-function) (quote file-name-as-directory))) nil [5505 5778])
            ("dirtrack-canonicalize-function" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) (quote downcase) (quote identity))) nil [5780 6012])
            ("dirtrack-directory-change-hook" variable nil nil [6014 6150])
            ("dirtrack-windows-directory-function" function (:arguments ("dir")) nil [6290 6570])
            ("dirtrack-cygwin-directory-function" function (:arguments ("dir")) nil [6572 6830])
            ("define-obsolete-function-alias" code nil nil [6833 6904])
            ("define-obsolete-variable-alias" code nil nil [6905 6970])
            ("define-minor-mode" code nil nil [6986 7716])
            ("define-obsolete-function-alias" code nil nil [7719 7804])
            ("define-obsolete-variable-alias" code nil nil [7805 7881])
            ("define-minor-mode" code nil nil [7882 8222])
            ("dirtrack-debug-message" function (:arguments ("msg1" "msg2")) nil [8224 8481])
            ("declare-function" code nil nil [8483 8545])
            ("declare-function" code nil nil [8546 8595])
            ("dirtrack" function (:arguments ("input")) nil [8612 11059])
            ("dirtrack" package nil nil [11061 11080]))          
      :file "dirtrack.el.gz"
      :pointmax 11108
      :fsize 4063
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 4556 . 4557) (symbol 4500 . 4517) (open-paren 4499 . 4500)))
    (semanticdb-table "delim-col.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("columns" customgroup (:user-visible-flag t) nil [3809 3964])
            ("delimit-columns-str-before" variable nil nil [3966 4125])
            ("delimit-columns-str-separator" variable (:default-value ", ") nil [4127 4293])
            ("delimit-columns-str-after" variable nil nil [4295 4451])
            ("delimit-columns-before" variable nil nil [4453 4608])
            ("delimit-columns-after" variable nil nil [4610 4762])
            ("delimit-columns-separator" variable (:default-value "	") nil [4764 4916])
            ("delimit-columns-format" variable (:default-value t) nil [4918 6352])
            ("delimit-columns-extra" variable (:default-value t) nil [6354 6610])
            ("delimit-columns-start" variable nil nil [6612 7164])
            ("delimit-columns-end" variable (:default-value 1000000) nil [7166 7720])
            ("delimit-columns-max" variable nil nil [7849 7881])
            ("delimit-columns-limit" variable nil nil [7882 7916])
            ("delimit-columns-customize" function (:user-visible-flag t) nil [7934 8053])
            ("delimit-columns-str" function (:arguments ("str")) nil [8056 8123])
            ("delimit-columns-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [8141 9606])
            ("rect" include nil nil [9609 9624])
            ("delimit-columns-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9642 11011])
            ("delimit-columns-rectangle-max" function (:arguments ("startpos" "_ignore1" "_ignore2")) nil [11128 12227])
            ("delimit-columns-rectangle-line" function (:arguments ("startpos" "_ignore1" "_ignore2")) nil [12230 14232])
            ("delimit-columns-format" function (:arguments ("spaces")) nil [14235 14802])
            ("delim-col" package nil nil [14882 14902]))          
      :file "delim-col.el.gz"
      :pointmax 14932
      :fsize 3623
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dframe.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dframe-version" variable (:default-value "1.3") nil [206 291])
            ("x-pointer-hand2" variable nil nil [4905 4929])
            ("x-pointer-top-left-arrow" variable nil nil [4930 4963])
            ("defalias" code nil nil [5008 5219])
            ("dframe" customgroup (:user-visible-flag t) nil [5240 5324])
            ("dframe-have-timer-flag" variable (:default-value (if (fboundp (quote display-graphic-p)) (display-graphic-p) window-system)) nil [5326 5588])
            ("dframe-update-speed" variable (:default-value (if (featurep (quote xemacs)) 2 1)) nil [5590 5900])
            ("dframe-activity-change-focus-flag" variable nil nil [5902 6177])
            ("dframe-after-select-attached-frame-hook" variable nil nil [6179 6324])
            ("dframe-track-mouse-function" variable nil nil [6326 6496])
            ("make-variable-buffer-local" code nil nil [6497 6554])
            ("dframe-help-echo-function" variable nil nil [6556 6731])
            ("make-variable-buffer-local" code nil nil [6732 6787])
            ("dframe-mouse-click-function" variable nil nil [6789 6925])
            ("make-variable-buffer-local" code nil nil [6926 6983])
            ("dframe-mouse-position-function" variable nil nil [6985 7093])
            ("make-variable-buffer-local" code nil nil [7094 7154])
            ("dframe-power-click" variable nil nil [7156 7257])
            ("dframe-timer" variable nil nil [7259 7335])
            ("make-variable-buffer-local" code nil nil [7336 7378])
            ("dframe-attached-frame" variable nil nil [7380 7547])
            ("make-variable-buffer-local" code nil nil [7548 7599])
            ("dframe-controlled" variable nil nil [7601 7745])
            ("make-variable-buffer-local" code nil nil [7746 7793])
            ("dframe-update-keymap" function (:arguments ("map")) nil [7795 9515])
            ("dframe-live-p" function (:arguments ("frame")) nil [9517 9657])
            ("x-sensitive-text-pointer-shape" variable nil nil [9659 9698])
            ("x-pointer-shape" variable nil nil [9699 9723])
            ("dframe-frame-mode" function (:arguments ("arg" "frame-var" "cache-var" "buffer-var" "frame-name" "local-mode-fn" "parameters" "delete-hook" "popup-hook" "create-hook")) nil [9725 16669])
            ("dframe-reposition-frame" function (:arguments ("new-frame" "parent-frame" "location")) nil [16671 17028])
            ("declare-function" code nil nil [17097 17167])
            ("declare-function" code nil nil [17168 17239])
            ("dframe-reposition-frame-emacs" function (:arguments ("new-frame" "parent-frame" "location")) nil [17241 20412])
            ("dframe-reposition-frame-xemacs" function (:arguments ("_new-frame" "_parent-frame" "_location")) nil [20414 20629])
            ("dframe-needed-height" function (:arguments ("frame")) nil [20656 21021])
            ("dframe-detach" function (:arguments ("frame-var" "cache-var" "buffer-var")) nil [21023 21552])
            ("if" code nil nil [21589 21893])
            ("dframe-make-frame-visible-function" variable nil nil [21895 22041])
            ("dframe-iconify-frame-function" variable nil nil [22042 22180])
            ("dframe-delete-frame-function" variable nil nil [22181 22325])
            ("dframe-handle-make-frame-visible" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22327 22714])
            ("dframe-handle-iconify-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [22716 23080])
            ("dframe-handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [23082 23586])
            ("dframe-get-focus" function
               (:user-visible-flag t
                :arguments ("frame-var" "activator"))
                nil [23606 24257])
            ("dframe-close-frame" function (:user-visible-flag t) nil [24260 24462])
            ("dframe-current-frame" function (:arguments ("frame-var" "desired-major-mode")) nil [24464 25046])
            ("dframe-attached-frame" function (:arguments ("frame")) nil [25048 25320])
            ("dframe-select-attached-frame" function (:arguments ("frame")) nil [25322 25782])
            ("dframe-with-attached-buffer" function (:arguments ("forms")) nil [25784 26106])
            ("dframe-maybee-jump-to-attached-frame" function nil nil [26108 26433])
            ("dframe-suppress-message-flag" variable nil nil [26436 26546])
            ("dframe-message" function (:arguments ("fmt" "args")) nil [26548 26986])
            ("dframe-y-or-n-p" function (:arguments ("prompt")) nil [26988 27415])
            ("dframe-client-functions" variable nil nil [27845 27934])
            ("dframe-set-timer" function (:arguments ("timeout" "fn" "_null-on-error")) nil [27936 28942])
            ("dframe-set-timer-internal" function (:arguments ("timeout" "_null-on-error")) nil [28944 29414])
            ("dframe-timer-fn" function nil nil [29416 29693])
            ("dframe-pass-event-to-popup-mode-menu" variable
               (:constant-flag t
                :default-value (let (max-args) (and (fboundp (quote popup-mode-menu)) (fboundp (quote function-max-args)) (setq max-args (function-max-args (quote popup-mode-menu))) (not (zerop max-args)))))
                nil [29727 30034])
            ("defalias" code nil nil [30252 31627])
            ("defalias" code nil nil [31677 31994])
            ("dframe-track-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31996 32355])
            ("dframe-track-mouse-xemacs" function (:arguments ("event")) nil [32357 32659])
            ("dframe-help-echo" function (:arguments ("_window" "buffer" "position")) nil [32661 33153])
            ("dframe-mouse-set-point" function (:arguments ("e")) nil [33155 33816])
            ("dframe-quick-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [33818 34101])
            ("dframe-power-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34103 34439])
            ("dframe-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34441 34769])
            ("dframe-double-click" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [34771 35246])
            ("dframe-temp-buffer-show-function" function (:arguments ("buffer")) nil [35424 36164])
            ("dframe-hack-buffer-menu" function
               (:user-visible-flag t
                :arguments ("_e"))
                nil [36166 36934])
            ("dframe-switch-buffer-attached-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [36936 37368])
            ("dframe-mouse-hscroll" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [37515 38136])
            ("dframe" package nil nil [38138 38155]))          
      :file "dframe.el.gz"
      :pointmax 38181
      :fsize 11294
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "descr-text.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("quail" include nil nil [1008 1024])
            ("help-mode" include nil nil [1026 1046])
            ("describe-text-widget" function (:arguments ("widget")) nil [1078 1463])
            ("describe-text-sexp" function (:arguments ("sexp")) nil [1465 2163])
            ("describe-property-list" function (:arguments ("properties")) nil [2165 3449])
            ("describe-text-category" function
               (:user-visible-flag t
                :arguments ("category"))
                nil [3481 3915])
            ("describe-text-properties" function
               (:user-visible-flag t
                :arguments ("pos" "output-buffer" "buffer"))
                nil [3932 5275])
            ("describe-text-properties-1" function (:arguments ("pos" "output-buffer")) nil [5277 6884])
            ("describe-char-unidata-list" variable (:default-value (quote (name old-name general-category decomposition))) nil [6887 8069])
            ("describe-char-unicodedata-file" variable nil nil [8071 8627])
            ("describe-char-unicode-data" function (:arguments ("char")) nil [8629 12327])
            ("declare-function" code nil nil [12395 12468])
            ("describe-char-display" function (:arguments ("pos" "char")) nil [12884 13563])
            ("describe-char-padded-string" function (:arguments ("ch")) nil [13704 13891])
            ("describe-char-categories" function (:arguments ("category-set")) nil [14018 14529])
            ("declare-function" code nil nil [14531 14579])
            ("describe-char" function
               (:user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [14596 36540])
            ("define-obsolete-function-alias" code nil nil [36542 36617])
            ("descr-text" package nil nil [36619 36640]))          
      :file "descr-text.el.gz"
      :pointmax 36670
      :fsize 9246
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1024 . 1025) (symbol 990 . 1007) (open-paren 989 . 990)))
    (semanticdb-table "rect.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("operate-on-rectangle" function (:arguments ("function" "start" "end" "coerce-tabs")) nil [1206 2980])
            ("apply-on-rectangle" function (:arguments ("function" "start" "end" "args")) nil [2982 3992])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [3994 4200])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [4202 4598])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [4767 5731])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value (quote ["" " " "  " "   " "    " "     " "      " "       " "        "]))
                nil [5733 5826])
            ("spaces-string" function (:arguments ("n")) nil [5828 5952])
            ("delete-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [5969 6460])
            ("delete-extract-rectangle" function (:arguments ("start" "end" "fill")) nil [6477 6961])
            ("extract-rectangle" function (:arguments ("start" "end")) nil [6978 7276])
            ("killed-rectangle" variable nil nil [7278 7353])
            ("kill-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [7370 8417])
            ("copy-rectangle-as-kill" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [8434 8753])
            ("yank-rectangle" function (:user-visible-flag t) nil [8770 8921])
            ("insert-rectangle" function (:arguments ("rectangle")) nil [8938 9595])
            ("open-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [9612 10127])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [10129 10332])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [10334 10578])
            ("defalias" code nil nil [10595 10651])
            ("delete-whitespace-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10680 11245])
            ("string-rectangle-history" variable nil nil [11247 11284])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [11285 11458])
            ("string-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [11475 12061])
            ("defalias" code nil nil [12078 12125])
            ("string-insert-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [12142 12814])
            ("clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [12831 13237])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13239 13652])
            ("rectangle-number-line-counter" variable nil nil [13708 13746])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [13748 13979])
            ("rectange--default-line-number-format" function (:arguments ("start" "end" "start-at")) nil [13981 14159])
            ("rectangle-number-lines" function
               (:user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [14176 15132])
            ("add-function" code nil nil [15335 15444])
            ("add-function" code nil nil [15445 15558])
            ("add-function" code nil nil [15559 15647])
            ("rectangle-mark-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [15] (quote open-rectangle)) (define-key map [20] (quote string-rectangle)) map)) nil [15649 15994])
            ("define-minor-mode" code nil nil [16011 16411])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [16413 17160])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [17162 17559])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [17561 21865])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [21867 22061])
            ("rect" package nil nil [22063 22078]))          
      :file "rect.el.gz"
      :pointmax 22102
      :fsize 5758
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dired-x.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [2116 2132])
            ("dired-x" customgroup (:user-visible-flag t) nil [2163 2243])
            ("dired-keys" customgroup (:user-visible-flag t) nil [2245 2338])
            ("dired-bind-vm" variable nil nil [2340 2735])
            ("dired-bind-jump" variable (:default-value t) nil [2737 3405])
            ("dired-bind-man" variable (:default-value t) nil [3407 3860])
            ("dired-bind-info" variable (:default-value t) nil [3862 4319])
            ("dired-vm-read-only-folders" variable nil nil [4321 4675])
            ("dired-omit-size-limit" variable (:default-value 30000) nil [4677 4871])
            ("define-obsolete-variable-alias" code nil nil [4903 4979])
            ("define-minor-mode" code nil nil [4980 5851])
            ("put" code nil nil [5853 5906])
            ("dired-omit-files" variable (:default-value "^\\.?#\\|^\\.$\\|^\\.\\.$") nil [5908 6278])
            ("dired-omit-verbose" variable (:default-value t) nil [6280 6449])
            ("dired-find-subdir" variable nil nil [6451 6978])
            ("dired-enable-local-variables" variable (:default-value t) nil [6980 7404])
            ("make-obsolete-variable" code nil nil [7406 7535])
            ("dired-guess-shell-gnutar" variable (:default-value (catch (quote found) (dolist (exe (quote ("tar" "gtar"))) (if (with-temp-buffer (ignore-errors (call-process exe nil t nil "--version")) (and (re-search-backward "GNU tar" nil t) t)) (throw (quote found) exe))))) nil [7537 8272])
            ("dired-guess-shell-gzip-quiet" variable (:default-value t) nil [8274 8421])
            ("dired-guess-shell-znew-switches" variable nil nil [8423 8633])
            ("dired-clean-up-buffers-too" variable (:default-value t) nil [8635 8792])
            ("define-key" code nil nil [8813 8868])
            ("define-key" code nil nil [8869 8921])
            ("define-key" code nil nil [8922 8973])
            ("define-key" code nil nil [8974 9023])
            ("define-key" code nil nil [9024 9078])
            ("define-key" code nil nil [9079 9140])
            ("define-key" code nil nil [9141 9194])
            ("define-key" code nil nil [9195 9254])
            ("define-key" code nil nil [9255 9308])
            ("define-key" code nil nil [9309 9369])
            ("define-key" code nil nil [9370 9420])
            ("easymenu" include nil nil [9441 9460])
            ("let" code nil nil [9462 11255])
            ("add-hook" code nil nil [11295 11343])
            ("add-hook" code nil nil [11344 11399])
            ("dired-extra-startup" function (:user-visible-flag t) nil [11401 12206])
            ("dired-mark-extension" function
               (:user-visible-flag t
                :arguments ("extension" "marker-char"))
                nil [12279 12885])
            ("dired-flag-extension" function
               (:user-visible-flag t
                :arguments ("extension"))
                nil [12887 13149])
            ("dired-patch-unclean-extensions" variable (:default-value (quote (".rej" ".orig"))) nil [13227 13362])
            ("dired-tex-unclean-extensions" variable (:default-value (quote (".toc" ".log" ".aux"))) nil [13364 13540])
            ("dired-latex-unclean-extensions" variable (:default-value (quote (".idx" ".lof" ".lot" ".glo"))) nil [13542 13676])
            ("dired-bibtex-unclean-extensions" variable (:default-value (quote (".blg" ".bbl"))) nil [13678 13800])
            ("dired-texinfo-unclean-extensions" variable (:default-value (quote (".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs"))) nil [13802 13994])
            ("dired-clean-patch" function (:user-visible-flag t) nil [13996 14201])
            ("dired-clean-tex" function (:user-visible-flag t) nil [14203 14719])
            ("dired-very-clean-tex" function (:user-visible-flag t) nil [14721 15302])
            ("dired-jump" function
               (:user-visible-flag t
                :arguments ("other-window" "file-name"))
                nil [15331 16841])
            ("dired-jump-other-window" function
               (:user-visible-flag t
                :arguments ("file-name"))
                nil [16858 17096])
            ("dired-omit-localp" variable (:default-value (quote no-dir)) nil [17288 17573])
            ("dired-omit-marker-char" variable (:default-value 15) nil [17648 17788])
            ("dired-omit-startup" function nil nil [17790 18029])
            ("dired-mark-omitted" function (:user-visible-flag t) nil [18031 18294])
            ("dired-omit-extensions" variable (:default-value (append completion-ignored-extensions dired-latex-unclean-extensions dired-bibtex-unclean-extensions dired-texinfo-unclean-extensions)) nil [18296 18903])
            ("dired-omit-expunge" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [18905 20853])
            ("dired-omit-regexp" function nil nil [20855 21274])
            ("dired-mark-unmarked-files" function
               (:user-visible-flag t
                :arguments ("regexp" "msg" "unflag-p" "localp"))
                nil [21326 22096])
            ("defalias" code nil nil [22185 22225])
            ("dired-virtual" function
               (:user-visible-flag t
                :arguments ("dirname" "switches"))
                nil [22226 24904])
            ("dired-virtual-guess-dir" function nil nil [24906 26096])
            ("dired-virtual-revert" function (:arguments ("_arg" "_noconfirm")) nil [26099 26404])
            ("dired-virtual-mode" function (:user-visible-flag t) nil [26446 26893])
            ("define-obsolete-variable-alias" code nil nil [27457 27554])
            ("dired-default-directory-alist" variable
               (:constant-flag t
                :default-value (quote ((dired-mode if (fboundp (quote dired-current-directory)) (dired-current-directory) default-directory))))
                nil [27671 28066])
            ("put" code nil nil [28068 28128])
            ("make-obsolete-variable" code nil nil [28143 28266])
            ("dired-default-directory" function nil nil [28268 28743])
            ("dired-smart-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [28745 29408])
            ("dired-local-variables-file" variable (:default-value (convert-standard-filename ".dired")) nil [30178 30607])
            ("make-obsolete-variable" code nil nil [30609 30685])
            ("dired-hack-local-variables" function nil nil [30687 31794])
            ("dired-omit-here-always" function nil nil [31888 32765])
            ("dired-shell-command-history" variable nil nil [33791 33893])
            ("Man-support-local-filenames" function (:prototype-flag t) nil [34042 34087])
            ("dired-guess-shell-alist-default" variable (:default-value (list (list "\\.tar\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " xvf") "tar xvf")) (quote (if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -xvf") (concat "mkdir " (file-name-sans-extension file) "; tar -C " (file-name-sans-extension file) " -xvf"))) (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " tvf") "tar tvf"))) (list "\\.tar\\.Z\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "zcat * | tar xvf -"))) (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (list "\\.t\\(ar\\.\\)?gz\\'" (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " zxvf") (concat "gunzip -qc * | tar xvf -"))) (quote (if dired-guess-shell-gnutar (concat "mkdir " (file-name-sans-extension file) "; " dired-guess-shell-gnutar " -C " (file-name-sans-extension file) " -zxvf") (concat "mkdir " (file-name-sans-extension file) "; gunzip -qc * | tar -C " (file-name-sans-extension file) " -xvf -"))) (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q" ""))) (quote (if dired-guess-shell-gnutar (concat dired-guess-shell-gnutar " ztvf") (concat "gunzip -qc * | tar tvf -")))) (list "\\.t\\(ar\\.bz2\\|bz\\)\\'" "bunzip2 -c * | tar xvf -" (quote (concat "mkdir " (file-name-sans-extension file) "; bunzip2 -c * | tar -C " (file-name-sans-extension file) " -xvf -")) "bunzip2") (list "\\.t\\(ar\\.\\)?xz\\'" "unxz -c * | tar xvf -" (quote (concat "mkdir " (file-name-sans-extension file) "; unxz -c * | tar -C " (file-name-sans-extension file) " -xvf -")) "unxz") (quote ("\\.shar\\.Z\\'" "zcat * | unshar")) (quote ("\\.shar\\.g?z\\'" "gunzip -qc * | unshar")) (quote ("\\.e?ps\\'" "ghostview" "xloadimage" "lpr")) (list "\\.e?ps\\.g?z\\'" "gunzip -qc * | ghostview -" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.e?ps\\.Z\\'" "zcat * | ghostview -" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.patch\\'" "cat * | patch")) (list "\\.patch\\.g?z\\'" "gunzip -qc * | patch" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.patch\\.Z\\'" "zcat * | patch" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (list "\\.\\(?:[0-9]\\|man\\)\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "cat * | tbl | nroff -man -h | col -b"))))) (list "\\.\\(?:[0-9]\\|man\\)\\.g?z\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "gunzip -qc * | tbl | nroff -man -h | col -b")))) (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.[0-9]\\.Z\\'" (quote (let ((loc (Man-support-local-filenames))) (cond ((eq loc (quote man-db)) "man -l") ((eq loc (quote man)) "man ./") (t "zcat * | tbl | nroff -man -h | col -b")))) (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.pod\\'" "perldoc" "pod2man * | nroff -man")) (quote ("\\.dvi\\'" "xdvi" "dvips")) (quote ("\\.au\\'" "play")) (quote ("\\.mpe?g\\'\\|\\.avi\\'" "xine -p")) (quote ("\\.ogg\\'" "ogg123")) (quote ("\\.mp3\\'" "mpg123")) (quote ("\\.wav\\'" "play")) (quote ("\\.uu\\'" "uudecode")) (quote ("\\.hqx\\'" "mcvert")) (quote ("\\.sh\\'" "sh")) (quote ("\\.xbm\\'" "bitmap")) (quote ("\\.gp\\'" "gnuplot")) (quote ("\\.p[bgpn]m\\'" "xloadimage")) (quote ("\\.gif\\'" "xloadimage")) (quote ("\\.tif\\'" "xloadimage")) (quote ("\\.png\\'" "display")) (quote ("\\.jpe?g\\'" "xloadimage")) (quote ("\\.fig\\'" "xfig")) (quote ("\\.out\\'" "xgraph")) (quote ("\\.tex\\'" "latex" "tex")) (quote ("\\.texi\\(nfo\\)?\\'" "makeinfo" "texi2dvi")) (quote ("\\.pdf\\'" "xpdf")) (quote ("\\.doc\\'" "antiword" "strings")) (quote ("\\.rpm\\'" "rpm -qilp" "rpm -ivh")) (quote ("\\.dia\\'" "dia")) (quote ("\\.mgp\\'" "mgp")) (list "\\.zip\\'" "unzip" "unzip -l" (quote (concat "unzip" (if dired-guess-shell-gzip-quiet " -q") " -d " (file-name-sans-extension file)))) (quote ("\\.zoo\\'" "zoo x//")) (quote ("\\.lzh\\'" "lharc x")) (quote ("\\.arc\\'" "arc x")) (quote ("\\.shar\\'" "unshar")) (quote ("\\.rar\\'" "unrar x")) (quote ("\\.7z\\'" "7z x")) (list "\\.g?z\\'" (quote (concat "gunzip" (if dired-guess-shell-gzip-quiet " -q")))) (list "\\.dz\\'" "dictunzip") (list "\\.bz2\\'" "bunzip2") (list "\\.xz\\'" "unxz") (list "\\.Z\\'" "uncompress" (quote (concat "znew" (if dired-guess-shell-gzip-quiet " -q") " " dired-guess-shell-znew-switches))) (quote ("\\.sign?\\'" "gpg --verify")))) nil [34089 40555])
            ("dired-guess-shell-alist-user" variable nil nil [40557 41687])
            ("dired-guess-shell-case-fold-search" variable (:default-value t) nil [41689 41889])
            ("dired-guess-default" function (:arguments ("files")) nil [41891 43255])
            ("dired-guess-shell-command" function (:arguments ("prompt" "files")) nil [43275 44430])
            ("declare-function" code nil nil [44464 44512])
            ("dired-keep-marker-relsymlink" variable (:default-value 83) nil [44514 44597])
            ("dired-make-relative-symlink" function
               (:user-visible-flag t
                :arguments ("file1" "file2" "ok-if-already-exists"))
                nil [44599 46683])
            ("dired-do-create-files" function (:prototype-flag t) nil [46685 46730])
            ("dired-do-relsymlink" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46747 47282])
            ("dired-mark-read-regexp" function (:prototype-flag t) nil [47284 47330])
            ("dired-do-create-files-regexp" function (:prototype-flag t) nil [47331 47383])
            ("dired-do-relsymlink-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "newname" "arg" "whole-name"))
                nil [47385 47798])
            ("dired-do-find-marked-files" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [48754 49405])
            ("dired-simultaneous-find-file" function (:arguments ("file-list" "noselect")) nil [49407 50780])
            ("declare-function" code nil nil [50835 50893])
            ("manual-program" variable nil nil [50895 50918])
            ("dired-man" function (:user-visible-flag t) nil [50934 51378])
            ("dired-info" function (:user-visible-flag t) nil [51403 51499])
            ("declare-function" code nil nil [51531 51603])
            ("vm-folder-directory" variable nil nil [51604 51632])
            ("dired-vm" function
               (:user-visible-flag t
                :arguments ("read-only"))
                nil [51634 52274])
            ("dired-rmail" function (:user-visible-flag t) nil [52276 52373])
            ("dired-do-run-mail" function (:user-visible-flag t) nil [52375 52901])
            ("dired-buffer-more-recently-used-p" function (:arguments ("buffer1" "buffer2")) nil [52972 53294])
            ("dired-mark-sexp" function
               (:user-visible-flag t
                :arguments ("predicate" "unflag-p"))
                nil [54500 59298])
            ("dired-x-hands-off-my-keys" variable (:default-value t) nil [59327 59801])
            ("dired-x-bind-find-file" function (:user-visible-flag t) nil [59803 60464])
            ("dired-x-bind-find-file" code nil nil [60657 60681])
            ("dired-x-find-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [60683 60964])
            ("dired-x-find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [60966 61310])
            ("dired-filename-at-point" function nil nil [61397 62651])
            ("dired-x-read-filename-at-point" function (:arguments ("prompt")) nil [62653 63117])
            ("define-obsolete-function-alias" code nil nil [63119 63216])
            ("define-obsolete-function-alias" code nil nil [63259 63339])
            ("dired-x" package nil nil [63399 63417]))          
      :file "dired-x.el.gz"
      :pointmax 63539
      :fsize 18337
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cus-theme.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [923 940])
            ("cus-edit" include nil nil [941 960])
            ("wid-edit" include nil nil [983 1002])
            ("custom-new-theme-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map (make-composed-keymap widget-keymap special-mode-map)) (suppress-keymap map) (define-key map "" (quote custom-theme-write)) (define-key map "q" (quote Custom-buffer-done)) (define-key map "n" (quote widget-forward)) (define-key map "p" (quote widget-backward)) map)) nil [1005 1412])
            ("define-derived-mode" code nil nil [1414 1749])
            ("put" code nil nil [1750 1799])
            ("custom-theme-name" variable nil nil [1801 1831])
            ("custom-theme-variables" variable nil nil [1894 1929])
            ("custom-theme-faces" variable nil nil [1994 2025])
            ("custom-theme-description" variable nil nil [2026 2063])
            ("custom-theme--migrate-settings" variable nil nil [2064 2107])
            ("custom-theme-insert-variable-marker" variable nil nil [2108 2156])
            ("custom-theme-insert-face-marker" variable nil nil [2157 2201])
            ("custom-theme--listed-faces" variable (:default-value (quote (default cursor fixed-pitch variable-pitch escape-glyph minibuffer-prompt highlight region shadow secondary-selection trailing-whitespace font-lock-builtin-face font-lock-comment-delimiter-face font-lock-comment-face font-lock-constant-face font-lock-doc-face font-lock-function-name-face font-lock-keyword-face font-lock-negation-char-face font-lock-preprocessor-face font-lock-regexp-grouping-backslash font-lock-regexp-grouping-construct font-lock-string-face font-lock-type-face font-lock-variable-name-face font-lock-warning-face button link link-visited fringe header-line tooltip mode-line mode-line-buffer-id mode-line-emphasis mode-line-highlight mode-line-inactive isearch isearch-fail lazy-highlight match next-error query-replace))) nil [2203 3068])
            ("custom-theme--save-name" variable nil nil [3070 3102])
            ("customize-create-theme" function
               (:user-visible-flag t
                :arguments ("theme" "buffer"))
                nil [3119 8195])
            ("custom-theme-revert" function (:arguments ("_ignore-auto" "noconfirm")) nil [8197 8494])
            ("custom-theme-add-variable" function
               (:user-visible-flag t
                :arguments ("var" "value"))
                nil [8517 9379])
            ("custom-theme-add-var-1" function (:arguments ("symbol" "val")) nil [9381 9896])
            ("custom-theme-add-face" function
               (:user-visible-flag t
                :arguments ("face" "spec"))
                nil [9915 10879])
            ("custom-theme-add-face-1" function (:arguments ("symbol" "spec")) nil [10881 11387])
            ("custom-theme-visit-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [11429 11959])
            ("custom-theme-merge-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [11961 12778])
            ("custom-reset-standard-faces-list" variable nil nil [12800 12841])
            ("custom-reset-standard-variables-list" variable nil nil [12842 12887])
            ("custom-theme-write" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [12889 14843])
            ("custom-theme-write-variables" function (:arguments ("theme" "vars")) nil [14845 15771])
            ("custom-theme-write-faces" function (:arguments ("theme" "faces")) nil [15773 16771])
            ("describe-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [16821 17352])
            ("describe-theme-1" function (:arguments ("theme")) nil [17354 18507])
            ("custom--listed-themes" variable nil nil [18530 18560])
            ("custom-theme-allow-multiple-selections" variable nil nil [18562 18744])
            ("custom-theme-choose-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map (make-composed-keymap widget-keymap special-mode-map)) (suppress-keymap map) (define-key map "" (quote custom-theme-save)) (define-key map "n" (quote widget-forward)) (define-key map "p" (quote widget-backward)) (define-key map "?" (quote custom-describe-theme)) map)) nil [18746 19161])
            ("define-derived-mode" code nil nil [19163 19632])
            ("put" code nil nil [19633 19685])
            ("customize-themes" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [19702 23050])
            ("custom-theme-summary" function (:arguments ("theme")) nil [23052 23752])
            ("custom-theme-checkbox-toggle" function (:arguments ("widget" "event")) nil [23754 24736])
            ("custom-describe-theme" function (:user-visible-flag t) nil [24738 24962])
            ("custom-theme-save" function (:arguments ("_ignore")) nil [24964 25149])
            ("custom-theme-selections-toggle" function (:arguments ("widget" "event")) nil [25151 25558])
            ("cus-theme" package nil nil [25560 25580]))          
      :file "cus-theme.el.gz"
      :pointmax 25609
      :fsize 6776
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 1002 . 1003) (symbol 963 . 980) (open-paren 962 . 963)))
    (semanticdb-table "dynamic-setting.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1154 1210])
            ("font-use-system-font" variable nil nil [1212 1241])
            ("font-setting-change-default-font" function (:arguments ("display-or-frame" "set-font")) nil [1243 2451])
            ("dynamic-setting-handle-config-changed-event" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2453 3315])
            ("define-key" code nil nil [3317 3417]))          
      :file "dynamic-setting.el.gz"
      :pointmax 3419
      :fsize 1549
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [948 965])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [968 1450])
            ("window-system-default-frame-alist" variable nil nil [1452 1895])
            ("display-format-alist" variable nil nil [1897 2149])
            ("initial-frame-alist" variable nil nil [2341 3571])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3573 4275])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4277 4746])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [4748 5044])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5046 5306])
            ("frame-initial-frame" variable nil nil [6084 6116])
            ("frame-initial-frame-alist" variable nil nil [6195 6229])
            ("frame-initial-geometry-arguments" variable nil nil [6231 6276])
            ("frame-initialize" function nil nil [6465 8178])
            ("frame-notice-user-settings" variable (:default-value t) nil [8180 8289])
            ("declare-function" code nil nil [8291 8350])
            ("defalias" code nil nil [8352 8402])
            ("frame-notice-user-settings" function nil nil [8599 19900])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19902 20103])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20170 21345])
            ("get-other-frame" function nil nil [21347 21605])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21607 21865])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21867 22131])
            ("window-system-for-display" function (:arguments ("display")) nil [22133 22608])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22610 22879])
            ("declare-function" code nil nil [22881 22938])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22940 24292])
            ("make-frame-command" function (:user-visible-flag t) nil [24294 24557])
            ("before-make-frame-hook" variable nil nil [24559 24642])
            ("after-make-frame-functions" variable nil nil [24644 24791])
            ("after-setting-font-hook" variable nil nil [24793 24889])
            ("define-obsolete-function-alias" code nil nil [24919 24981])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24983 25101])
            ("x-display-name" variable nil nil [25103 25126])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25128 28771])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [28773 29072])
            ("minibuffer-frame-list" function nil nil [29074 29267])
            ("get-device-terminal" function (:arguments ("device")) nil [29319 30072])
            ("frames-on-display-list" function (:arguments ("device")) nil [30074 30516])
            ("framep-on-display" function (:arguments ("terminal")) nil [30518 30957])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30959 31820])
            ("declare-function" code nil nil [31822 31872])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [31874 32984])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32986 33965])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33967 34197])
            ("suspend-frame" function (:user-visible-flag t) nil [34199 34676])
            ("make-frame-names-alist" function nil nil [34678 35084])
            ("frame-name-history" variable nil nil [35086 35117])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35118 35809])
            ("frame-background-mode" variable nil nil [35836 36509])
            ("declare-function" code nil nil [36511 36605])
            ("declare-function" code nil nil [36650 36720])
            ("inhibit-frame-set-background-mode" variable nil nil [36722 36768])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [36770 39668])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39670 40186])
            ("current-frame-configuration" function nil nil [40217 40813])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [40815 42820])
            ("frame-height" function (:arguments ("frame")) nil [42915 43581])
            ("frame-width" function (:arguments ("frame")) nil [43583 43788])
            ("declare-function" code nil nil [43790 43895])
            ("define-obsolete-function-alias" code nil nil [43897 43970])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [43972 47288])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47290 47541])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47543 48288])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48290 49035])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49037 49523])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49525 49991])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49993 50375])
            ("define-minor-mode" code nil nil [50377 51257])
            ("define-minor-mode" code nil nil [51259 52100])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52102 52478])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52480 53007])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [53009 53699])
            ("declare-function" code nil nil [53737 53780])
            ("display-mouse-p" function (:arguments ("display")) nil [53782 54573])
            ("display-popup-menus-p" function (:arguments ("display")) nil [54575 54861])
            ("display-graphic-p" function (:arguments ("display")) nil [54863 55320])
            ("display-images-p" function (:arguments ("display")) nil [55322 55600])
            ("defalias" code nil nil [55602 55654])
            ("defalias" code nil nil [55655 55706])
            ("display-selections-p" function (:arguments ("display")) nil [55708 56339])
            ("declare-function" code nil nil [56341 56407])
            ("display-screens" function (:arguments ("display")) nil [56409 56798])
            ("declare-function" code nil nil [56800 56871])
            ("display-pixel-height" function (:arguments ("display")) nil [56873 57606])
            ("declare-function" code nil nil [57608 57678])
            ("display-pixel-width" function (:arguments ("display")) nil [57680 58408])
            ("display-mm-dimensions-alist" variable nil nil [58410 59028])
            ("declare-function" code nil nil [59030 59098])
            ("display-mm-height" function (:arguments ("display")) nil [59100 59979])
            ("declare-function" code nil nil [59981 60048])
            ("display-mm-width" function (:arguments ("display")) nil [60050 60925])
            ("declare-function" code nil nil [60927 60999])
            ("display-backing-store" function (:arguments ("display")) nil [61104 61622])
            ("declare-function" code nil nil [61624 61693])
            ("display-save-under" function (:arguments ("display")) nil [61695 62092])
            ("declare-function" code nil nil [62094 62159])
            ("display-planes" function (:arguments ("display")) nil [62161 62602])
            ("declare-function" code nil nil [62604 62674])
            ("display-color-cells" function (:arguments ("display")) nil [62676 63121])
            ("declare-function" code nil nil [63123 63194])
            ("display-visual-class" function (:arguments ("display")) nil [63196 63786])
            ("declare-function" code nil nil [63788 63874])
            ("declare-function" code nil nil [63875 63964])
            ("declare-function" code nil nil [63965 64053])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [64055 66580])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [66612 68482])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [68484 69743])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [69747 70799])
            ("define-obsolete-variable-alias" code nil nil [70844 70930])
            ("cursor" customgroup (:user-visible-flag t) nil [70954 71039])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [71041 71169])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [71171 71289])
            ("blink-cursor-blinks" variable (:default-value 10) nil [71291 71501])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [71503 71616])
            ("blink-cursor-idle-timer" variable nil nil [71618 71793])
            ("blink-cursor-timer" variable nil nil [71795 71957])
            ("blink-cursor-start" function nil nil [71959 72658])
            ("blink-cursor-timer-function" function nil nil [72660 73316])
            ("blink-cursor-end" function nil nil [73319 73714])
            ("blink-cursor-suspend" function nil nil [73716 74071])
            ("blink-cursor-check" function nil nil [74073 74558])
            ("define-obsolete-variable-alias" code nil nil [74560 74632])
            ("define-minor-mode" code nil nil [74634 75901])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [75939 76893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [76895 77859])
            ("define-key" code nil nil [77882 77930])
            ("define-key" code nil nil [77931 77980])
            ("define-key" code nil nil [77981 78023])
            ("define-key" code nil nil [78024 78065])
            ("define-key" code nil nil [78066 78120])
            ("define-key" code nil nil [78121 78181])
            ("define-key" code nil nil [78182 78242])
            ("define-obsolete-variable-alias" code nil nil [78292 78374])
            ("make-variable-buffer-local" code nil nil [78376 78430])
            ("make-obsolete-variable" code nil nil [78457 78551])
            ("frame" package nil nil [78553 78569]))          
      :file "frame.el.gz"
      :pointmax 78594
      :fsize 20427
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 965 . 966) (symbol 930 . 947) (open-paren 929 . 930)))
    (semanticdb-table "delsel.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("delete-selection-save-to-register" variable nil nil [2113 2264])
            ("defalias" code nil nil [2281 2335])
            ("define-minor-mode" code nil nil [2352 2969])
            ("delsel--replace-text-or-position" variable nil nil [2971 3016])
            ("delete-active-region" function (:arguments ("killp")) nil [3018 3673])
            ("delete-selection-repeat-replace-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3675 6352])
            ("delete-selection-helper" function (:arguments ("type")) nil [6354 9763])
            ("delete-selection-pre-hook" function nil nil [9765 10290])
            ("put" code nil nil [10292 10449])
            ("put" code nil nil [10451 10489])
            ("put" code nil nil [10490 10530])
            ("put" code nil nil [10532 10567])
            ("put" code nil nil [10568 10613])
            ("put" code nil nil [10614 10656])
            ("put" code nil nil [10770 10817])
            ("put" code nil nil [10819 10878])
            ("put" code nil nil [10879 10924])
            ("put" code nil nil [10925 10959])
            ("put" code nil nil [10960 11020])
            ("put" code nil nil [11021 11061])
            ("minibuffer-keyboard-quit" function (:user-visible-flag t) nil [11166 11489])
            ("define-key" code nil nil [11491 11557])
            ("define-key" code nil nil [11558 11627])
            ("define-key" code nil nil [11628 11705])
            ("define-key" code nil nil [11706 11783])
            ("define-key" code nil nil [11784 11858])
            ("delsel-unload-function" function nil nil [11860 12573])
            ("delsel" package nil nil [12575 12592]))          
      :file "delsel.el.gz"
      :pointmax 12618
      :fsize 3927
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "double.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("double" customgroup (:user-visible-flag t) nil [2102 2205])
            ("double-map" variable (:default-value (quote ((59 "\346" ";") (39 "\370" "'") (91 "\345" "[") (58 "\306" ":") (34 "\330" "\"") (123 "\305" "{")))) nil [2207 2740])
            ("double-prefix-only" variable (:default-value t) nil [2742 3008])
            ("double-last-event" variable nil nil [3026 3056])
            ("double-read-event" function (:arguments ("prompt")) nil [3109 3316])
            ("global-set-key" code nil nil [3318 3351])
            ("or" code nil nil [3353 3413])
            ("define-key" code nil nil [3415 3509])
            ("double-translate-key" function (:arguments ("prompt")) nil [3511 4630])
            ("define-minor-mode" code nil nil [4863 5839])
            ("double" package nil nil [5841 5858]))          
      :file "double.el.gz"
      :pointmax 5884
      :fsize 2554
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "autoinsert.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("auto-insert" customgroup (:user-visible-flag t) nil [1882 2086])
            ("auto-insert" variable (:default-value (quote not-modified)) nil [2089 2881])
            ("auto-insert-query" variable (:default-value (quote function)) nil [2883 3217])
            ("auto-insert-prompt" variable (:default-value "Perform %s auto-insertion? ") nil [3219 3440])
            ("auto-insert-alist" variable (:default-value (quote ((("\\.\\([Hh]\\|hh\\|hpp\\)\\'" . "C / C++ header") (upcase (concat (file-name-nondirectory (file-name-sans-extension buffer-file-name)) "_" (file-name-extension buffer-file-name))) "#ifndef " str n "#define " str "

" _ "

#endif") (("\\.\\([Cc]\\|cc\\|cpp\\)\\'" . "C / C++ program") nil "#include \"" (let ((stem (file-name-sans-extension buffer-file-name))) (cond ((file-exists-p (concat stem ".h")) (file-name-nondirectory (concat stem ".h"))) ((file-exists-p (concat stem ".hh")) (file-name-nondirectory (concat stem ".hh"))))) & 34 | -10) (("[Mm]akefile\\'" . "Makefile") . "makefile.inc") (html-mode lambda nil (sgml-tag "html")) (plain-tex-mode . "tex-insert.tex") (bibtex-mode . "tex-insert.tex") (latex-mode "options, RET: " "\\documentclass[" str & 93 | -1 123 (read-string "class: ") "}
" ("package, %s: " "\\usepackage[" (read-string "options, RET: ") & 93 | -1 123 str "}
") _ "
\\begin{document}
" _ "
\\end{document}") (("/bin/.*[^/]\\'" . "Shell-Script mode magic number") lambda nil (if (eq major-mode (default-value (quote major-mode))) (sh-mode))) (ada-mode . ada-header) (("\\.[1-9]\\'" . "Man page skeleton") "Short description: " ".\\\" Copyright (C), " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "
.\\\" You may distribute this file under the terms of the GNU Free
.\\\" Documentation License.
.TH " (file-name-base) " " (file-name-extension (buffer-file-name)) " " (format-time-string "%Y-%m-%d ") "
.SH NAME
" (file-name-base) " \\- " str "
.SH SYNOPSIS
.B " (file-name-base) "
" _ "
.SH DESCRIPTION
.SH OPTIONS
.SH FILES
.SH \"SEE ALSO\"
.SH BUGS
.SH AUTHOR
" (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
") (("\\.el\\'" . "Emacs Lisp header") "Short description: " ";;; " (file-name-nondirectory (buffer-file-name)) " --- " str (make-string (max 2 (- 80 (current-column) 27)) 32) "-*- lexical-binding: t; -*-" (quote (setq lexical-binding t)) "

;; Copyright (C) " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "

;; Author: " (user-full-name) (quote (if (search-backward "&" (line-beginning-position) t) (replace-match (capitalize (user-login-name)) t t))) (quote (end-of-line 1)) " <" (progn user-mail-address) ">
;; Keywords: " (quote (require (quote finder))) (quote (setq v1 (mapcar (lambda (x) (list (symbol-name (car x)))) finder-known-keywords) v2 (mapconcat (lambda (x) (format "%12s:  %s" (car x) (cdr x))) finder-known-keywords "
"))) ((let ((minibuffer-help-form v2)) (completing-read "Keyword, C-h: " v1 nil t)) str ", ") & -2 "

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; " _ "

;;; Code:



(provide '" (file-name-base) ")
;;; " (file-name-nondirectory (buffer-file-name)) " ends here
") (("\\.texi\\(nfo\\)?\\'" . "Texinfo file skeleton") "Title: " "\\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename " (file-name-base) ".info
" "@settitle " str "
@c %**end of header
@copying
" (setq short-description (read-string "Short description: ")) ".

" "Copyright @copyright{} " (format-time-string "%Y") "  " (getenv "ORGANIZATION") | (progn user-full-name) "

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.

A copy of the license is also available from the Free Software
Foundation Web site at @url{http://www.gnu.org/licenses/fdl.html}.

@end quotation

The document was typeset with
@uref{http://www.texinfo.org/, GNU Texinfo}.

@end copying

@titlepage
@title " str "
@subtitle " short-description "
@author " (getenv "ORGANIZATION") | (progn user-full-name) " <" (progn user-mail-address) ">
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of the contents at the beginning.
@contents

@ifnottex
@node Top
@top " str "

@insertcopying
@end ifnottex

@c Generate the nodes for this menu with `C-c C-u C-m'.
@menu
@end menu

@c Update all node entries with `C-c C-u C-n'.
@c Insert new nodes with `C-c C-c n'.
@node Chapter One
@chapter Chapter One

" _ "

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@c Get fdl.texi from http://www.gnu.org/licenses/fdl.html
@include fdl.texi

@node Index
@unnumbered Index

@printindex cp

@bye

@c " (file-name-nondirectory (buffer-file-name)) " ends here
")))) nil [3443 10053])
            ("auto-insert-directory" variable (:default-value "~/insert/") nil [10111 10354])
            ("auto-insert" function (:user-visible-flag t) nil [10372 12427])
            ("define-auto-insert" function (:arguments ("condition" "action" "after")) nil [12445 13162])
            ("define-minor-mode" code nil nil [13179 13714])
            ("autoinsert" package nil nil [13716 13737]))          
      :file "autoinsert.el.gz"
      :pointmax 13767
      :fsize 4941
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "register.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1199 1216])
            ("cl-defstruct" code nil nil [1230 1562])
            ("cl-defun" code nil nil [1564 2185])
            ("register-alist" variable nil nil [2187 2900])
            ("register" customgroup (:user-visible-flag t) nil [2902 2988])
            ("register-separator" variable nil nil [2990 3386])
            ("register-preview-delay" variable (:default-value 1) nil [3388 3714])
            ("get-register" function (:arguments ("register")) nil [3716 3856])
            ("set-register" function (:arguments ("register" "value")) nil [3858 4190])
            ("register-describe-oneline" function (:arguments ("c")) nil [4192 4511])
            ("register-preview-default" function (:arguments ("r")) nil [4513 4713])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4715 4919])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4921 5529])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5531 6791])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6793 7480])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7482 8126])
            ("set-advertised-calling-convention" code nil nil [8188 8283])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8285 8917])
            ("set-advertised-calling-convention" code nil nil [8979 9073])
            ("make-obsolete" code nil nil [9075 9153])
            ("defalias" code nil nil [9155 9202])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9203 11103])
            ("register-swap-out" function nil nil [11105 11458])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11460 12161])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12163 13016])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13018 13497])
            ("list-registers" function (:user-visible-flag t) nil [13499 13876])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [13878 16079])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16081 17265])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17267 18238])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18240 19241])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19243 20248])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20250 21186])
            ("register" package nil nil [21188 21207]))          
      :file "register.el.gz"
      :pointmax 21234
      :fsize 5864
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1216 . 1217) (symbol 1181 . 1198) (open-paren 1180 . 1181)))
    (semanticdb-table "shell.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [4332 4349])
            ("pcomplete" include nil nil [4350 4370])
            ("shell" customgroup (:user-visible-flag t) nil [4412 4512])
            ("shell-directories" customgroup (:user-visible-flag t) nil [4514 4599])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [4711 5097])
            ("shell-prompt-pattern" variable (:default-value "^[^#$%>
]*[#$%>] *") nil [5099 5739])
            ("shell-completion-fignore" variable nil nil [5741 6089])
            ("shell-delimiter-argument-list" variable (:default-value (quote (124 38 60 62 40 41 59))) nil [6091 6459])
            ("shell-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [6461 6836])
            ("shell-file-name-quote-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) nil (append shell-delimiter-argument-list (quote (32 36 42 33 34 39 96 35 92))))) nil [6838 7254])
            ("shell-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history shell-environment-variable-completion shell-command-completion shell-c-a-p-replace-by-expanded-directory pcomplete-completions-at-point shell-filename-completion comint-filename-completion))) nil [7256 7747])
            ("shell-command-regexp" variable (:default-value "[^;&|
]+") nil [7749 7948])
            ("shell-command-separator-regexp" variable (:default-value "[;&|
 	]*") nil [7950 8161])
            ("shell-completion-execonly" variable (:default-value t) nil [8163 8424])
            ("shell-popd-regexp" variable (:default-value "popd") nil [8426 8564])
            ("shell-pushd-regexp" variable (:default-value "pushd") nil [8566 8707])
            ("shell-pushd-tohome" variable nil nil [8709 8904])
            ("shell-pushd-dextract" variable nil nil [8906 9099])
            ("shell-pushd-dunique" variable nil nil [9101 9294])
            ("shell-cd-regexp" variable (:default-value "cd") nil [9296 9428])
            ("shell-chdrive-regexp" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) "[]a-zA-Z^_`\\[\\\\]:" nil)) nil [9430 9744])
            ("shell-dirtrack-verbose" variable (:default-value t) nil [9746 10067])
            ("explicit-shell-file-name" variable nil nil [10069 10249])
            ("explicit-csh-args" variable (:default-value (if (eq system-type (quote hpux)) (quote ("-i" "-T")) (quote ("-i")))) nil [10393 10766])
            ("explicit-bash-args" variable (:default-value (quote ("--noediting" "-i"))) nil [10924 11280])
            ("shell-input-autoexpand" variable (:default-value (quote history)) nil [11282 11905])
            ("shell-dirstack" variable nil nil [11907 12056])
            ("shell-dirtrackp" variable (:default-value t) nil [12058 12151])
            ("shell-last-dir" variable nil nil [12153 12237])
            ("shell-dirstack-query" variable nil nil [12239 12332])
            ("shell-mode-map" variable (:default-value (let ((map (nconc (make-sparse-keymap) comint-mode-map))) (define-key map "" (quote shell-forward-command)) (define-key map "" (quote shell-backward-command)) (define-key map "	" (quote completion-at-point)) (define-key map (kbd "M-RET") (quote shell-resync-dirs)) (define-key map "\277" (quote comint-dynamic-list-filename-completions)) (define-key map [menu-bar completion] (cons "Complete" (copy-keymap (lookup-key comint-mode-map [menu-bar completion])))) (define-key-after (lookup-key map [menu-bar completion]) [complete-env-variable] (quote ("Complete Env. Variable Name" . shell-dynamic-complete-environment-variable)) (quote complete-file)) (define-key-after (lookup-key map [menu-bar completion]) [expand-directory] (quote ("Expand Directory Reference" . shell-replace-by-expanded-directory)) (quote complete-expand)) map)) nil [12334 13227])
            ("shell-mode-hook" variable (:default-value (quote nil)) nil [13229 13327])
            ("shell-font-lock-keywords" variable (:default-value (quote (("[ 	]\\([+-][^ 	
]+\\)" 1 font-lock-comment-face) ("^[^ 	
]+:.*" . font-lock-string-face) ("^\\[[1-9][0-9]*\\]" . font-lock-string-face)))) nil [13329 13573])
            ("shell--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [13597 15323])
            ("shell--unquote-argument" function (:arguments ("str")) nil [15325 15408])
            ("shell--requote-argument" function (:arguments ("upos" "qstr")) nil [15409 15589])
            ("shell--parse-pcomplete-arguments" function nil nil [15591 17224])
            ("shell-command-completion-function" function nil nil [17226 17578])
            ("shell-completion-vars" function nil nil [17580 19245])
            ("put" code nil nil [19247 19285])
            ("define-derived-mode" code nil nil [19287 24647])
            ("shell-apply-ansi-color" function (:arguments ("beg" "end" "face")) nil [24649 24887])
            ("shell-reapply-ansi-color" function nil nil [24889 25386])
            ("shell-filter-ctrl-a-ctrl-b" function (:arguments ("string")) nil [25388 26016])
            ("shell-write-history-on-exit" function (:arguments ("process" "event")) nil [26018 26615])
            ("shell" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [26632 30604])
            ("shell-directory-tracker" function (:arguments ("str")) nil [32720 35161])
            ("shell-unquote-argument" function (:arguments ("string")) nil [35163 36031])
            ("shell-process-popd" function (:arguments ("arg")) nil [36046 36591])
            ("shell-prefixed-directory-name" function (:arguments ("dir")) nil [36661 36991])
            ("shell-process-cd" function (:arguments ("arg")) nil [37005 37327])
            ("shell-process-pushd" function (:arguments ("arg")) nil [37349 38821])
            ("shell-extract-num" function (:arguments ("str")) nil [38887 38994])
            ("defvaralias" code nil nil [38996 39047])
            ("define-minor-mode" code nil nil [39048 39711])
            ("define-obsolete-function-alias" code nil nil [39713 39798])
            ("shell-cd" function (:arguments ("dir")) nil [39800 39971])
            ("shell-resync-dirs" function (:user-visible-flag t) nil [39973 42355])
            ("defalias" code nil nil [42389 42424])
            ("shell-dirstack-message" function nil nil [42702 43552])
            ("shell-snarf-envar" function (:arguments ("var")) nil [43604 44347])
            ("shell-copy-environment-variable" function
               (:user-visible-flag t
                :arguments ("variable"))
                nil [44349 44875])
            ("shell-forward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [44877 45207])
            ("shell-backward-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [45210 45722])
            ("shell-dynamic-complete-command" function (:user-visible-flag t) nil [45724 46435])
            ("shell-command-completion" function nil nil [46437 46795])
            ("shell--command-completion-data" function nil nil [46797 48946])
            ("shell-dynamic-complete-filename" function (:user-visible-flag t) nil [49186 49467])
            ("shell-filename-completion" function nil nil [49469 49831])
            ("shell-match-partial-variable" function nil nil [49833 50236])
            ("shell-dynamic-complete-environment-variable" function (:user-visible-flag t) nil [50238 51192])
            ("shell-environment-variable-completion" function nil nil [51195 52395])
            ("shell-c-a-p-replace-by-expanded-directory" function nil nil [52398 53581])
            ("shell-replace-by-expanded-directory" function (:user-visible-flag t) nil [53583 53914])
            ("shell" package nil nil [53916 53932]))          
      :file "shell.el.gz"
      :pointmax 53957
      :fsize 15808
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "disp-table.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1005 1051])
            ("make-display-table" function nil nil [1068 1175])
            ("or" code nil nil [1177 1259])
            ("put" code nil nil [1329 1368])
            ("put" code nil nil [1369 1402])
            ("put" code nil nil [1403 1438])
            ("put" code nil nil [1439 1475])
            ("put" code nil nil [1476 1522])
            ("put" code nil nil [1523 1567])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1584 2077])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2094 2608])
            ("describe-display-table" function (:arguments ("dt")) nil [2625 3544])
            ("display-table-print-array" function (:arguments ("desc")) nil [3546 3945])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3962 4284])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4301 5131])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5148 5461])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5656 5875])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5892 6385])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6402 6882])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6899 7251])
            ("create-glyph" function (:arguments ("string")) nil [7268 7697])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7714 8129])
            ("glyph-char" function (:arguments ("glyph")) nil [8146 8285])
            ("glyph-face" function (:arguments ("glyph")) nil [8302 8610])
            ("standard-display-european" function (:arguments ("arg")) nil [8627 10766])
            ("disp-table" package nil nil [10768 10789]))          
      :file "disp-table.el.gz"
      :pointmax 10819
      :fsize 3550
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "completion.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("completion" customgroup (:user-visible-flag t) nil [10612 10712])
            ("enable-completion" variable (:default-value t) nil [10715 10920])
            ("save-completions-flag" variable (:default-value t) nil [10922 11104])
            ("save-completions-file-name" variable (:default-value (locate-user-emacs-file "completions" ".completions")) nil [11106 11276])
            ("save-completions-retention-time" variable (:default-value 336) nil [11278 11553])
            ("completion-on-separator-character" variable nil nil [11555 11760])
            ("completions-file-versions-kept" variable (:default-value kept-new-versions) nil [11762 11923])
            ("completion-prompt-speed-threshold" variable (:default-value 4800) nil [11925 12085])
            ("completion-cdabbrev-prompt-flag" variable nil nil [12087 12267])
            ("completion-search-distance" variable (:default-value 15000) nil [12269 12476])
            ("completions-merging-modes" variable (:default-value (quote (lisp c))) nil [12478 12759])
            ("completion-min-length" variable (:default-value 6) nil [12926 13065])
            ("completion-max-length" variable (:default-value 200) nil [13067 13208])
            ("completion-prefix-min-length" variable (:default-value 3) nil [13210 13363])
            ("cmpl-initialized-p" variable nil nil [13544 13688])
            ("cmpl-completions-accepted-p" variable nil nil [13690 13838])
            ("cmpl-preceding-syntax" variable nil nil [13840 13870])
            ("completion-string" variable nil nil [13872 13898])
            ("cmpl-string-case-type" function (:arguments ("string")) nil [14202 14671])
            ("cmpl-coerce-string-case" function (:arguments ("string" "case-type")) nil [14954 15227])
            ("cmpl-merge-string-cases" function (:arguments ("string-to-coerce" "given-string")) nil [15229 15721])
            ("cmpl-hours-since-origin" function nil nil [15997 16122])
            ("completion-standard-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table)) i) (setq i 0) (while (< i 256) (modify-syntax-entry i " " table) (setq i (1+ i))) (setq i 0) (while (< i 26) (modify-syntax-entry (+ 97 i) "_" table) (modify-syntax-entry (+ 65 i) "_" table) (setq i (1+ i))) (setq i 0) (while (< i 10) (modify-syntax-entry (+ 48 i) "_" table) (setq i (1+ i))) (let ((symbol-chars (quote (64 47 92 42 43 126 36 60 62 37))) (symbol-chars-ignore (quote (95 45 58 46)))) (dolist (char symbol-chars) (modify-syntax-entry char "_" table)) (dolist (char symbol-chars-ignore) (modify-syntax-entry char "w" table))) table))
                nil [18360 19158])
            ("completion-syntax-table" variable (:default-value completion-standard-syntax-table) nil [19160 19286])
            ("make-variable-buffer-local" code nil nil [19287 19340])
            ("cmpl-symbol-start" variable nil nil [19462 19567])
            ("cmpl-symbol-end" variable nil nil [19568 19670])
            ("symbol-under-point" function nil nil [19672 21053])
            ("symbol-before-point" function nil nil [21377 23521])
            ("symbol-under-or-before-point" function nil nil [23896 24327])
            ("symbol-before-point-for-complete" function nil nil [24330 25539])
            ("cmpl-source-unknown" variable (:constant-flag t) nil [26343 26375])
            ("cmpl-source-init-file" variable
               (:constant-flag t
                :default-value 1)
                nil [26376 26410])
            ("cmpl-source-file-parsing" variable
               (:constant-flag t
                :default-value 2)
                nil [26411 26448])
            ("cmpl-source-separator" variable
               (:constant-flag t
                :default-value 3)
                nil [26449 26483])
            ("cmpl-source-cursor-moves" variable
               (:constant-flag t
                :default-value 4)
                nil [26484 26521])
            ("cmpl-source-interactive" variable
               (:constant-flag t
                :default-value 5)
                nil [26522 26558])
            ("cmpl-source-cdabbrev" variable
               (:constant-flag t
                :default-value 6)
                nil [26559 26592])
            ("num-cmpl-sources" variable
               (:constant-flag t
                :default-value 7)
                nil [26593 26622])
            ("current-completion-source" variable (:default-value cmpl-source-unknown) nil [26623 26677])
            ("cdabbrev-completions-tried" variable nil nil [27275 27314])
            ("cdabbrev-current-point" variable nil nil [27384 27417])
            ("cdabbrev-current-window" variable nil nil [27480 27516])
            ("cdabbrev-wrapped-p" variable nil nil [27646 27677])
            ("cdabbrev-abbrev-string" variable nil nil [27747 27781])
            ("cdabbrev-start-point" variable nil nil [27782 27813])
            ("cdabbrev-stop-point" variable nil nil [27814 27842])
            ("reset-cdabbrev" function (:arguments ("abbrev-string" "initial-completions-tried")) nil [28048 28428])
            ("set-cdabbrev-buffer" function nil nil [28430 28619])
            ("reset-cdabbrev-window" function (:arguments ("initializep")) nil [28622 29523])
            ("next-cdabbrev" function nil nil [29525 32392])
            ("cmpl-obarray-length" variable
               (:constant-flag t
                :default-value 511)
                nil [33493 33527])
            ("cmpl-prefix-obarray" variable (:default-value (make-vector cmpl-obarray-length 0)) nil [33529 33711])
            ("cmpl-obarray" variable (:default-value (make-vector cmpl-obarray-length 0)) nil [33713 33877])
            ("completion-string" function (:arguments ("completion-entry")) nil [34402 34480])
            ("completion-num-uses" function (:arguments ("completion-entry")) nil [34482 34656])
            ("completion-last-use-time" function (:arguments ("completion-entry")) nil [34658 34878])
            ("completion-source" function (:arguments ("completion-entry")) nil [34880 34960])
            ("set-completion-string" function (:arguments ("completion-entry" "string")) nil [34979 35078])
            ("set-completion-num-uses" function (:arguments ("completion-entry" "num-uses")) nil [35080 35197])
            ("set-completion-last-use-time" function (:arguments ("completion-entry" "last-use-time")) nil [35199 35343])
            ("make-completion" function (:arguments ("string")) nil [35360 35471])
            ("defalias" code nil nil [35771 35810])
            ("defalias" code nil nil [35812 35851])
            ("set-cmpl-prefix-entry-head" function (:arguments ("prefix-entry" "new-head")) nil [35871 35971])
            ("set-cmpl-prefix-entry-tail" function (:arguments ("prefix-entry" "new-tail")) nil [35973 36073])
            ("make-cmpl-prefix-entry" function (:arguments ("completion-entry-list")) nil [36091 36260])
            ("clear-all-completions" function (:user-visible-flag t) nil [36398 36644])
            ("completions-list-return-value" variable nil nil [36646 36684])
            ("list-all-completions" function nil nil [36686 36911])
            ("list-all-completions-1" function (:arguments ("prefix-symbol")) nil [36913 37136])
            ("list-all-completions-by-hash-bucket" function nil nil [37138 37418])
            ("list-all-completions-by-hash-bucket-1" function (:arguments ("prefix-symbol")) nil [37420 37654])
            ("completion-to-accept" variable nil nil [37858 37943])
            ("cmpl-db-downcase-string" variable nil nil [37998 38107])
            ("cmpl-db-symbol" variable nil nil [38108 38231])
            ("cmpl-db-prefix-symbol" variable nil nil [38232 38341])
            ("cmpl-db-entry" variable nil nil [38342 38368])
            ("cmpl-db-debug-p" variable nil nil [38369 38445])
            ("find-exact-completion" function (:arguments ("string")) nil [38456 38763])
            ("find-cmpl-prefix-entry" function (:arguments ("prefix-string")) nil [38765 39136])
            ("inside-locate-completion-entry" variable nil nil [39138 39181])
            ("locate-completion-entry" function (:arguments ("completion-entry" "prefix-entry")) nil [39234 40324])
            ("locate-completion-entry-retry" function (:arguments ("old-entry")) nil [40326 40933])
            ("locate-completion-db-error" function nil nil [40935 41099])
            ("add-completion-to-tail-if-new" function (:arguments ("string")) nil [41111 42239])
            ("add-completion-to-head" function (:arguments ("completion-string")) nil [42241 44216])
            ("delete-completion" function (:arguments ("completion-string")) nil [44218 45254])
            ("interactive-completion-string-reader" function (:arguments ("prompt")) nil [47497 47840])
            ("check-completion-length" function (:arguments ("string")) nil [47842 48054])
            ("add-completion" function
               (:user-visible-flag t
                :arguments ("string" "num-uses" "last-use-time"))
                nil [48056 48700])
            ("add-permanent-completion" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [48702 49087])
            ("kill-completion" function (:arguments ("string")) nil [49089 49261])
            ("accept-completion" function nil nil [49263 49794])
            ("use-completion-under-point" function nil nil [49796 50078])
            ("use-completion-before-point" function nil nil [50080 50356])
            ("use-completion-under-or-before-point" function nil nil [50358 50652])
            ("use-completion-before-separator" function nil nil [50654 51251])
            ("cmpl-test-string" variable nil nil [52488 52516])
            ("cmpl-test-regexp" variable nil nil [52574 52602])
            ("cmpl-last-index" variable nil nil [52697 52723])
            ("cmpl-cdabbrev-reset-p" variable nil nil [52790 52824])
            ("cmpl-next-possibilities" variable nil nil [52872 52908])
            ("cmpl-starting-possibilities" variable nil nil [53032 53072])
            ("cmpl-next-possibility" variable nil nil [53123 53157])
            ("cmpl-tried-list" variable nil nil [53194 53222])
            ("completion-search-reset" function (:arguments ("string")) nil [53287 53750])
            ("completion-search-reset-1" function nil nil [53752 53946])
            ("completion-search-next" function (:arguments ("index")) nil [53948 55448])
            ("completion-search-peek" function (:arguments ("use-cdabbrev")) nil [55451 56725])
            ("completion-mode" function (:user-visible-flag t) nil [58235 58474])
            ("cmpl-current-index" variable nil nil [58476 58505])
            ("cmpl-original-string" variable nil nil [58506 58539])
            ("cmpl-last-insert-location" variable (:default-value -1) nil [58540 58577])
            ("cmpl-leave-point-at-start" variable nil nil [58578 58616])
            ("complete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58618 61989])
            ("add-completions-from-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [62346 62880])
            ("add-completions-from-buffer" function nil nil [62882 63242])
            ("completion-find-file-hook" function nil nil [63262 63588])
            ("add-completions-from-tags-table" function (:user-visible-flag t) nil [63717 64226])
            ("*lisp-def-regexp*" variable
               (:constant-flag t
                :default-value "
(\\(\\w*:\\)?def\\(\\w\\|\\s_\\)*\\s +(*")
                nil [64605 64733])
            ("add-completions-from-lisp-buffer" function nil nil [65163 65546])
            ("completion-c-def-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table)) (whitespace-chars (quote (32 10 9 12 11 13))) (separator-chars (quote (44 42 61 40 59))) i) (setq i 0) (while (< i 256) (modify-syntax-entry i "w" table) (setq i (1+ i))) (dolist (char whitespace-chars) (modify-syntax-entry char "_" table)) (dolist (char separator-chars) (modify-syntax-entry char " " table)) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 93 ")[" table) (modify-syntax-entry 125 "){" table) table))
                nil [66140 66839])
            ("*c-def-regexp*" variable
               (:constant-flag t
                :default-value "
[_a-zA-Z#]")
                nil [66852 67477])
            ("add-completions-from-c-buffer" function nil nil [68738 72366])
            ("kill-emacs-save-completions" function nil nil [72611 72871])
            ("completion-version" variable
               (:constant-flag t
                :default-value "11")
                nil [73022 73056])
            ("saved-cmpl-file-header" variable
               (:constant-flag t
                :default-value ";;; Completion Initialization file.
;; Version = %s
;; Format is (<string> . <last-use-time>)
;;  <string> is the completion
;;  <last-use-time> is the time the completion was last used
;;    If it is t, the completion will never be pruned from the file.
;;    Otherwise it is in hours since origin.

")
                nil [73058 73400])
            ("completion-backup-filename" function (:arguments ("filename")) nil [73402 73474])
            ("save-completions-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [73476 76749])
            ("load-completions-from-file" function
               (:user-visible-flag t
                :arguments ("filename" "no-message-p"))
                nil [77099 79952])
            ("completion-initialize" function (:user-visible-flag t) nil [79954 80205])
            ("completion-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [80330 81215])
            ("completion-separator-self-insert-command" function (:arguments ("arg")) nil [81777 82028])
            ("completion-separator-self-insert-autofilling" function (:arguments ("arg")) nil [82030 82345])
            ("completion-def-wrapper" function (:arguments ("function-name" "type")) nil [82589 83337])
            ("use-completion-minibuffer-separator" function nil nil [83339 83492])
            ("use-completion-backward-under" function nil nil [83494 83565])
            ("use-completion-backward" function nil nil [83567 83607])
            ("completion-before-command" function nil nil [83609 83783])
            ("completion-lisp-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (symbol-chars (quote (33 38 63 61 94)))) (dolist (char symbol-chars) (modify-syntax-entry char "_" table)) table))
                nil [83807 84037])
            ("completion-lisp-mode-hook" function nil nil [84039 84416])
            ("completion-c-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (separator-chars (quote (43 42 47 58 37)))) (dolist (char separator-chars) (modify-syntax-entry char " " table)) table))
                nil [84436 84669])
            ("completion-def-wrapper" code nil nil [84671 84723])
            ("completion-c-mode-hook" function nil nil [84724 85008])
            ("completion-fortran-syntax-table" variable
               (:constant-flag t
                :default-value (let ((table (copy-syntax-table completion-standard-syntax-table)) (separator-chars (quote (43 45 42 47 58)))) (dolist (char separator-chars) (modify-syntax-entry char " " table)) table))
                nil [85077 85316])
            ("completion-setup-fortran-mode" function nil nil [85318 85679])
            ("fortran-mode-hook" variable nil nil [85710 85736])
            ("completion-saved-bindings" variable nil nil [85738 85776])
            ("define-minor-mode" code nil nil [85793 90069])
            ("completion-def-wrapper" code nil nil [90193 90237])
            ("completion-def-wrapper" code nil nil [90238 90293])
            ("completion-def-wrapper" code nil nil [90294 90348])
            ("completion-def-wrapper" code nil nil [90349 90412])
            ("completion-def-wrapper" code nil nil [90413 90470])
            ("completion-def-wrapper" code nil nil [90471 90522])
            ("completion-def-wrapper" code nil nil [90713 90765])
            ("completion-def-wrapper" code nil nil [90766 90822])
            ("completion-def-wrapper" code nil nil [90823 90885])
            ("completion-def-wrapper" code nil nil [90886 90942])
            ("completion-def-wrapper" code nil nil [90943 91003])
            ("completion-def-wrapper" code nil nil [91004 91058])
            ("completion-def-wrapper" code nil nil [91059 91114])
            ("completion-def-wrapper" code nil nil [91115 91170])
            ("completion-def-wrapper" code nil nil [91171 91226])
            ("completion-def-wrapper" code nil nil [91227 91282])
            ("completion-def-wrapper" code nil nil [91283 91338])
            ("completion-def-wrapper" code nil nil [91339 91394])
            ("completion-def-wrapper" code nil nil [91396 91452])
            ("completion-def-wrapper" code nil nil [91453 91518])
            ("defvaralias" code nil nil [91555 91612])
            ("defalias" code nil nil [91613 91670])
            ("completion" package nil nil [91672 91693]))          
      :file "completion.el.gz"
      :pointmax 91723
      :fsize 22880
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "help-fns.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("help-fns-describe-function-functions" variable nil nil [1222 1526])
            ("describe-function" function
               (:user-visible-flag t
                :arguments ("function"))
                nil [1557 2496])
            ("help-C-file-name" function (:arguments ("subr-or-var" "kind")) nil [2889 3963])
            ("help-downcase-arguments" variable nil nil [3965 4118])
            ("help-highlight-arg" function (:arguments ("arg")) nil [4120 4424])
            ("help-do-arg-highlight" function (:arguments ("doc" "args")) nil [4426 5341])
            ("help-highlight-arguments" function (:arguments ("usage" "doc" "args")) nil [5343 6523])
            ("find-lisp-object-file-name" function (:arguments ("object" "type")) nil [7163 11603])
            ("help-fns--key-bindings" function (:arguments ("function")) nil [11605 13665])
            ("help-fns--compiler-macro" function (:arguments ("function")) nil [13667 14432])
            ("help-fns--signature" function (:arguments ("function" "doc" "real-def" "real-function")) nil [14434 16079])
            ("help-fns--parent-mode" function (:arguments ("function")) nil [16081 16607])
            ("help-fns--obsolete" function (:arguments ("function")) nil [16609 17219])
            ("help-fns--autoloaded-p" function (:arguments ("function" "file")) nil [17289 17811])
            ("describe-function-1" function (:arguments ("function")) nil [17828 22172])
            ("add-hook" code nil nil [22233 22302])
            ("add-hook" code nil nil [22303 22375])
            ("add-hook" code nil nil [22376 22451])
            ("variable-at-point" function (:arguments ("any-symbol")) nil [22484 23521])
            ("describe-variable-custom-version-info" function (:arguments ("variable")) nil [23523 24433])
            ("describe-variable" function
               (:user-visible-flag t
                :arguments ("variable" "buffer" "frame"))
                nil [24450 35061])
            ("describe-syntax" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [35079 35810])
            ("help-describe-category-set" function (:arguments ("value")) nil [35812 36036])
            ("describe-categories" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [36053 38069])
            ("doc-file-to-man" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [38198 39199])
            ("doc-file-to-info" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [39250 42223])
            ("help-fns" package nil nil [42225 42244]))          
      :file "help-fns.el.gz"
      :pointmax 42272
      :fsize 12104
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "composite.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1166 3374])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3392 4587])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4794 5460])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5795 6267])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6724 7034])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7036 9255])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9257 9629])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9631 10595])
            ("decompose-string" function (:arguments ("string")) nil [10597 10769])
            ("compose-chars" function (:arguments ("args")) nil [10771 11647])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11649 13597])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13601 15045])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15047 15958])
            ("global-set-key" code nil nil [15960 16017])
            ("lgstring-header" function (:arguments ("gstring")) nil [16138 16191])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16192 16263])
            ("lgstring-font" function (:arguments ("gstring")) nil [16264 16333])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16334 16410])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16411 16489])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16490 16545])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16546 16605])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16606 16666])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16667 16729])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16730 16806])
            ("lglyph-from" function (:arguments ("glyph")) nil [16808 16853])
            ("lglyph-to" function (:arguments ("glyph")) nil [16854 16897])
            ("lglyph-char" function (:arguments ("glyph")) nil [16898 16943])
            ("lglyph-code" function (:arguments ("glyph")) nil [16944 16989])
            ("lglyph-width" function (:arguments ("glyph")) nil [16990 17036])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17037 17086])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17087 17136])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17137 17184])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17185 17233])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17234 17285])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17287 17380])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17381 17440])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17441 17500])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17501 17563])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17564 17697])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17699 17751])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17753 18252])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18254 18827])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18829 20043])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20045 25966])
            ("when" code nil nil [26013 26330])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [26332 28275])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [28278 29217])
            ("put" code nil nil [29219 29266])
            ("make-variable-buffer-local" code nil nil [29268 29323])
            ("setq-default" code nil nil [29324 29384])
            ("define-minor-mode" code nil nil [29401 30002])
            ("make-variable-buffer-local" code nil nil [30054 30105])
            ("define-minor-mode" code nil nil [30122 30490])
            ("defalias" code nil nil [30492 30550]))          
      :file "composite.el.gz"
      :pointmax 30582
      :fsize 8609
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "minibuffer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4229 4246])
            ("completion-boundaries" function (:arguments ("string" "table" "pred" "suffix")) nil [4319 5231])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5233 6243])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6245 6476])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6478 6554])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6556 6989])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [6991 7517])
            ("completion-table-dynamic" function (:arguments ("fun")) nil [7519 8772])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [8774 9660])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [9662 10477])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [10479 10821])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [10823 12524])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12526 13810])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [13812 17064])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17066 18539])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18541 19040])
            ("completion-table-merge" function (:arguments ("tables")) nil [19042 20059])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20061 27590])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [27592 28838])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [28840 28944])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [28946 32574])
            ("define-obsolete-function-alias" code nil nil [32725 32810])
            ("define-obsolete-function-alias" code nil nil [32811 32904])
            ("minibuffer" customgroup (:user-visible-flag t) nil [32933 33073])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33075 35119])
            ("minibuffer-completion-contents" function nil nil [35121 35377])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35379 35736])
            ("completion-show-inline-help" variable (:default-value t) nil [35738 35841])
            ("completion-auto-help" variable (:default-value t) nil [35843 36225])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36227 38808])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [38810 39019])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39020 39186])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39188 40092])
            ("completion-category-overrides" variable (:default-value (quote ((buffer (styles basic substring))))) nil [40094 41211])
            ("completion--styles" function (:arguments ("metadata")) nil [41213 41505])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [41507 43188])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43190 43747])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43749 44286])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [44288 44437])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [44439 46142])
            ("completion-cycle-threshold" variable nil nil [46144 46574])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [46576 46813])
            ("defvar-local" code nil nil [46815 46867])
            ("defvar-local" code nil nil [46868 46930])
            ("completion-cycling" variable nil nil [46931 46962])
            ("completion-fail-discreetly" variable nil nil [46964 47055])
            ("completion--message" function (:arguments ("msg")) nil [47057 47156])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [47158 53719])
            ("minibuffer-complete" function (:user-visible-flag t) nil [53721 54222])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [54224 55407])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [55409 55723])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [55725 56170])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [56172 56618])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [56620 58773])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [58775 59406])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [59408 62160])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [62162 62428])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [62430 63181])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [63183 63718])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [63720 66320])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [66322 71327])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [71330 71758])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [71760 72143])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [72145 72262])
            ("completions-format" variable (:default-value (quote horizontal)) nil [72264 72660])
            ("completion--insert-strings" function (:arguments ("strings")) nil [72662 76233])
            ("completion-common-substring" variable nil nil [76235 76275])
            ("make-obsolete-variable" code nil nil [76276 76340])
            ("completion-setup-hook" variable nil nil [76342 76679])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [76681 76847])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [76849 77152])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [77154 79032])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [79034 80800])
            ("completion-extra-properties" variable nil nil [80802 81772])
            ("completion-annotate-function" variable nil nil [81774 82657])
            ("make-obsolete-variable" code nil nil [82658 82772])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [82774 83590])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [83592 88706])
            ("minibuffer-hide-completions" function nil nil [88708 89051])
            ("exit-minibuffer" function (:user-visible-flag t) nil [89053 89534])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [89536 89733])
            ("completion-in-region-functions" variable nil nil [89735 89827])
            ("make-obsolete-variable" code nil nil [89828 89946])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [89948 90227])
            ("completion-in-region--data" variable nil nil [90229 90268])
            ("completion-in-region-mode-predicate" variable nil nil [90270 90526])
            ("completion-in-region-mode--predicate" variable nil nil [90528 90749])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [90751 91368])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [91370 91595])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [91597 92612])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [92614 92966])
            ("completion-in-region--postch" function nil nil [93314 93971])
            ("completion-in-region-mode" variable nil nil [94047 94085])
            ("define-minor-mode" code nil nil [94123 95299])
            ("setq" code nil nil [95426 95554])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [95556 96648])
            ("completion--capf-misbehave-funs" variable nil nil [96650 96898])
            ("completion--capf-safe-funs" variable nil nil [96899 97129])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [97131 99054])
            ("completion-at-point" function (:user-visible-flag t) nil [99056 100060])
            ("completion-help-at-point" function (:user-visible-flag t) nil [100062 101828])
            ("let" code nil nil [101849 102013])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [102015 102518])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [102520 102849])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [102851 103146])
            ("define-obsolete-variable-alias" code nil nil [103148 103273])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [103274 103344])
            ("make-obsolete-variable" code nil nil [103345 103422])
            ("let" code nil nil [103424 103587])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [103589 104365])
            ("define-derived-mode" code nil nil [104367 104694])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [104720 104976])
            ("completion--make-envvar-table" function nil nil [104978 105144])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [105146 105415])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [105417 107864])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [107866 110594])
            ("read-file-name-predicate" variable nil nil [110653 110747])
            ("make-obsolete-variable" code nil nil [110748 110861])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [110863 113246])
            ("defalias" code nil nil [113248 113682])
            ("defalias" code nil nil [113684 113907])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [113909 114082])
            ("insert-default-directory" variable (:default-value t) nil [114084 115123])
            ("declare-function" code nil nil [115205 115325])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [115327 116517])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [116519 119603])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [119605 120077])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [120667 127884])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [127886 128385])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [128445 128664])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [128666 128880])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [128882 129919])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [129921 130193])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [130218 130899])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [130901 131096])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [131098 132378])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [132380 133063])
            ("completion-pcm--delim-wild-regex" variable nil nil [133112 133564])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [133566 133682])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [133684 134325])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [134327 134764])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [134766 135051])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [135053 137510])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [137512 138447])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [138449 139259])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [139261 140514])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [140516 141316])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [141318 146552])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [146554 146854])
            ("completion--sreverse" function (:arguments ("str")) nil [146856 147003])
            ("completion--common-suffix" function (:arguments ("strs")) nil [147005 147188])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [147190 152221])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [152223 152494])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [153118 153506])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [153509 155361])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [155363 155739])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [155822 156557])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [156559 156946])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [156948 157283])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [157378 159027])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [159029 159256])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [159258 159483])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [159486 159663])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [159665 161448])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [161469 161842])
            ("minibuffer" package nil nil [161844 161865]))          
      :file "minibuffer.el.gz"
      :pointmax 161895
      :fsize 42602
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 4246 . 4247) (symbol 4211 . 4228) (open-paren 4210 . 4211)))
    (semanticdb-table "ibuf-macs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [991 1008])
            ("ibuffer-aif" function (:arguments ("test" "true-body" "false-body")) nil [1082 1534])
            ("ibuffer-awhen" function (:arguments ("test" "body")) nil [1536 1766])
            ("ibuffer-save-marks" function (:arguments ("body")) nil [1768 2375])
            ("cl-defmacro" code nil nil [2392 4457])
            ("cl-defmacro" code nil nil [4474 5642])
            ("cl-defmacro" code nil nil [5659 9347])
            ("cl-defmacro" code nil nil [9364 10579])
            ("ibuf-macs" package nil nil [10581 10601]))          
      :file "ibuf-macs.el.gz"
      :pointmax 10630
      :fsize 3784
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1008 . 1009) (symbol 973 . 990) (open-paren 972 . 973)))
    (semanticdb-table "dnd.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [1208 2311])
            ("dnd-open-remote-file-function" variable (:default-value (if (eq system-type (quote windows-nt)) (quote dnd-open-local-file) (quote dnd-open-remote-url))) nil [2314 2997])
            ("dnd-open-file-other-window" variable nil nil [3000 3164])
            ("dnd-handle-one-url" function (:arguments ("window" "action" "url")) nil [3181 4229])
            ("dnd-get-local-file-uri" function (:arguments ("uri")) nil [4232 5003])
            ("dnd-unescape-uri" function (:arguments ("uri")) nil [5005 5233])
            ("dnd-get-local-file-name" function (:arguments ("uri" "must-exist")) nil [5306 6112])
            ("dnd-open-local-file" function (:arguments ("uri" "_action")) nil [6114 6900])
            ("dnd-open-remote-url" function (:arguments ("uri" "_action")) nil [6902 7385])
            ("dnd-open-file" function (:arguments ("uri" "action")) nil [7388 8064])
            ("dnd-insert-text" function (:arguments ("window" "action" "text")) nil [8067 8470])
            ("dnd" package nil nil [8473 8487]))          
      :file "dnd.el.gz"
      :pointmax 8510
      :fsize 3125
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ffap.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [4047 4067])
            ("thingatpt" include nil nil [4068 4088])
            ("define-obsolete-variable-alias" code nil nil [4090 4158])
            ("ffap" customgroup (:user-visible-flag t) nil [4160 4350])
            ("ffap-symbol-value" function (:arguments ("sym" "default")) nil [4505 4665])
            ("ffap-shell-prompt-regexp" variable (:default-value "[$%><]*") nil [4667 5129])
            ("ffap-ftp-regexp" variable (:default-value "\\`/[^/:]+:") nil [5131 5405])
            ("ffap-url-unwrap-local" variable (:default-value t) nil [5407 5697])
            ("ffap-url-unwrap-remote" variable (:default-value (quote ("ftp"))) nil [5699 6012])
            ("ffap-ftp-default-user" variable (:default-value "anonymous") nil [6014 6268])
            ("ffap-rfs-regexp" variable (:default-value "\\`/\\(afs\\|net\\)/.") nil [6270 6549])
            ("ffap-url-regexp" variable (:default-value (concat "\\(" "news\\(post\\)?:\\|mailto:\\|file:" "\\|" "\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\)://" "\\)")) nil [6551 6851])
            ("ffap-foo-at-bar-prefix" variable (:default-value "mailto") nil [6853 7159])
            ("ffap-dired-wildcards" variable (:default-value "[*?][^/]*\\'") nil [7506 8328])
            ("ffap-pass-wildcards-to-dired" variable nil nil [8330 8479])
            ("ffap-newfile-prompt" variable nil nil [8481 8736])
            ("ffap-require-prefix" variable nil nil [8738 9005])
            ("ffap-file-finder" variable (:default-value (quote find-file)) nil [9007 9153])
            ("ffap-directory-finder" variable (:default-value (quote dired)) nil [9155 9303])
            ("ffap-url-fetcher" variable (:default-value (if (fboundp (quote browse-url)) (quote browse-url) (quote w3-fetch))) nil [9305 9955])
            ("ffap-next-regexp" variable (:default-value "[/:.~[:alpha:]]/\\|@[[:alpha:]][-[:alnum:]]*\\.") nil [9957 10428])
            ("dired-at-point-require-prefix" variable nil nil [10430 10682])
            ("ffap-mouse-event" function nil nil [10912 11024])
            ("ffap-event-buffer" function (:arguments ("event")) nil [11025 11102])
            ("ffap-next-guess" variable nil nil [11354 11428])
            ("ffap-string-at-point-region" variable (:default-value (quote (1 1))) nil [11430 11554])
            ("ffap-next-guess" function (:arguments ("back" "lim")) nil [11556 12265])
            ("ffap-next" function
               (:user-visible-flag t
                :arguments ("back" "wrap"))
                nil [12282 13227])
            ("ffap-next-url" function
               (:user-visible-flag t
                :arguments ("back" "wrap"))
                nil [13229 13498])
            ("ffap-machine-p-local" variable (:default-value (quote reject)) nil [13729 14004])
            ("ffap-machine-p-known" variable (:default-value (quote ping)) nil [14005 14332])
            ("ffap-machine-p-unknown" variable (:default-value (quote reject)) nil [14333 14639])
            ("ffap-what-domain" function (:arguments ("domain")) nil [14641 14953])
            ("ffap-machine-p" function (:arguments ("host" "service" "quiet" "strategy")) nil [14955 17779])
            ("ffap-replace-file-component" function (:arguments ("fullname" "name")) nil [17815 18175])
            ("ffap-file-suffix" function (:arguments ("file")) nil [18242 18422])
            ("ffap-compression-suffixes" variable (:default-value (quote (".gz" ".Z"))) nil [18424 18549])
            ("ffap-file-exists-string" function (:arguments ("file" "nomodify")) nil [18551 19642])
            ("ffap-file-remote-p" function (:arguments ("filename")) nil [19644 20400])
            ("ffap-machine-at-point" function nil nil [20402 20575])
            ("ffap-host-to-filename" function (:arguments ("host")) nil [20577 21087])
            ("ffap-fixup-machine" function (:arguments ("mach")) nil [21089 21568])
            ("defvaralias" code nil nil [21570 21639])
            ("defvaralias" code nil nil [21640 21708])
            ("defalias" code nil nil [21709 21765])
            ("ffap-url-p" function (:arguments ("string")) nil [21767 22073])
            ("ffap-url-unwrap-local" function (:arguments ("url")) nil [22142 22659])
            ("ffap-url-unwrap-remote" function (:arguments ("url")) nil [22661 23336])
            ("ffap-fixup-url" function (:arguments ("url")) nil [23338 23592])
            ("ffap-list-env" function (:arguments ("env" "empty")) nil [24109 25262])
            ("ffap-reduce-path" function (:arguments ("path")) nil [25264 25609])
            ("ffap-all-subdirs" function (:arguments ("dir" "depth")) nil [25611 25977])
            ("ffap-all-subdirs-loop" function (:arguments ("dir" "depth")) nil [25979 26342])
            ("ffap-kpathsea-depth" variable (:default-value 1) nil [26344 26502])
            ("ffap-kpathsea-expand-path" function (:arguments ("path")) nil [26504 26997])
            ("ffap-locate-file" function (:arguments ("file" "nosuffix" "path")) nil [26999 28322])
            ("ffap-alist" variable (:default-value (quote (("" . ffap-completable) ("\\.info\\'" . ffap-info) ("\\`info/" . ffap-info-2) ("\\`[-[:lower:]]+\\'" . ffap-info-3) ("\\.elc?\\'" . ffap-el) (emacs-lisp-mode . ffap-el-mode) (finder-mode . ffap-el-mode) (help-mode . ffap-el-mode) (c++-mode . ffap-c++-mode) (cc-mode . ffap-c-mode) ("\\.\\([chCH]\\|cc\\|hh\\)\\'" . ffap-c-mode) (fortran-mode . ffap-fortran-mode) ("\\.[fF]\\'" . ffap-fortran-mode) (tex-mode . ffap-tex-mode) (latex-mode . ffap-latex-mode) ("\\.\\(tex\\|sty\\|doc\\|cls\\)\\'" . ffap-tex) ("\\.bib\\'" . ffap-bib) ("\\`\\." . ffap-home) ("\\`~/" . ffap-lcd) ("\\`[Rr][Ff][Cc][-#]?\\([0-9]+\\)" . ffap-rfc) (dired-mode . ffap-dired)))) nil [28625 30499])
            ("put" code nil nil [30501 30542])
            ("ffap-completable" function (:arguments ("name")) nil [31096 31290])
            ("ffap-home" function (:arguments ("name")) nil [31292 31349])
            ("ffap-info" function (:arguments ("name")) nil [31351 31531])
            ("ffap-info-2" function (:arguments ("name")) nil [31533 31590])
            ("ffap-info-3" function (:arguments ("name")) nil [31592 31741])
            ("ffap-el" function (:arguments ("name")) nil [31743 31801])
            ("ffap-el-mode" function (:arguments ("name")) nil [31803 32056])
            ("ffap-c-path" variable (:default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil (quote (t nil)) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base (quote ("/usr/include" "/usr/local/include")))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include")))))) nil [32301 32858])
            ("ffap-c-mode" function (:arguments ("name")) nil [32860 32926])
            ("ffap-c++-path" variable (:default-value (let ((c++-include-dir (with-temp-buffer (when (eq 0 (ignore-errors (call-process "g++" nil t nil "-v"))) (goto-char (point-min)) (if (re-search-forward "--with-gxx-include-dir=\\([^[:space:]]+\\)" nil (quote noerror)) (match-string 1) (when (re-search-forward "gcc version \\([[:digit:]]+.[[:digit:]]+.[[:digit:]]+\\)" nil (quote noerror)) (expand-file-name (match-string 1) "/usr/include/c++/"))))))) (if c++-include-dir (cons c++-include-dir ffap-c-path) ffap-c-path))) nil [32928 33864])
            ("ffap-c++-mode" function (:arguments ("name")) nil [33866 33936])
            ("ffap-fortran-path" variable (:default-value (quote ("../include" "/usr/include"))) nil [33938 33995])
            ("ffap-fortran-mode" function (:arguments ("name")) nil [33997 34075])
            ("ffap-tex-path" variable (:default-value t) nil [34077 34239])
            ("ffap-tex-init" function nil nil [34241 34746])
            ("ffap-tex-mode" function (:arguments ("name")) nil [34748 34847])
            ("ffap-latex-mode" function (:arguments ("name")) nil [34849 34991])
            ("ffap-tex" function (:arguments ("name")) nil [34993 35076])
            ("ffap-bib-path" variable (:default-value (ffap-list-env "BIBINPUTS" (ffap-reduce-path (quote ("/usr/local/lib/tex/macros/bib" "/usr/lib/texmf/bibtex/bib"))))) nil [35078 35300])
            ("ffap-bib" function (:arguments ("name")) nil [35302 35367])
            ("ffap-dired" function (:arguments ("name")) nil [35369 35791])
            ("ffap-lcd" function (:arguments ("name")) nil [35837 36481])
            ("ffap-rfc-path" variable (:default-value (concat (ffap-host-to-filename "ftp.rfc-editor.org") "/in-notes/rfc%s.txt")) nil [36483 36848])
            ("ffap-rfc-directories" variable nil nil [36850 37059])
            ("ffap-rfc" function (:arguments ("name")) nil [37061 37233])
            ("ffap-string-at-point-mode-alist" variable (:default-value (quote ((file "--:\\\\$+<>@-Z_[:alpha:]~*?" "<@" "@>;.,!:") (url "--:=&?$+@-Z_[:alpha:]~#,%;*()!'" "^[0-9a-zA-Z]" ":;.,!?") (nocolon "--9$+<>@-Z_[:alpha:]~" "<@" "@>;.,!?") (machine "-[:alnum:]." "" ".") (math-mode ",-:$+<>@-Z_[:lower:]~`" "<" "@>;.,!?`:")))) nil [37262 38280])
            ("ffap-string-at-point" variable nil nil [38282 38440])
            ("ffap-string-at-point" function (:arguments ("mode")) nil [38442 39514])
            ("ffap-string-around" function nil nil [39516 39971])
            ("ffap-copy-string-as-kill" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [39973 40398])
            ("declare-function" code nil nil [40413 40477])
            ("ffap-url-at-point" function nil nil [40479 40936])
            ("ffap-gopher-regexp" variable (:default-value "^.*\\<\\(Type\\|Name\\|Path\\|Host\\|Port\\) *= *\\(.*\\) *$") nil [40938 41142])
            ("ffap-gopher-at-point" function nil nil [41144 42162])
            ("ffap-ftp-sans-slash-regexp" variable (:default-value (and ffap-ftp-regexp "\\`\\([^:@]+@[^:@]+:\\|[^@.:]+\\.[^@:]+:\\|[^:]+:[~/]\\)\\([^:]\\|\\'\\)")) nil [42164 42603])
            ("ffap-file-at-point" function nil nil [42605 47484])
            ("ffap-read-file-or-url" function (:arguments ("prompt" "guess")) nil [47852 49573])
            ("ffap-read-url-internal" function (:arguments ("string" "pred" "action")) nil [49575 50051])
            ("ffap-read-file-or-url-internal" function (:arguments ("string" "pred" "action")) nil [50053 50277])
            ("ffap-highlight" variable (:default-value t) nil [50555 50642])
            ("ffap" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [50644 50776])
            ("ffap-highlight-overlay" variable nil nil [50778 50860])
            ("ffap-highlight" function (:arguments ("remove")) nil [50862 51618])
            ("ffap-guesser" function nil nil [51675 51965])
            ("ffap-prompter" function (:arguments ("guess")) nil [51967 52779])
            ("find-file-at-point" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [52796 54605])
            ("defalias" code nil nil [54690 54726])
            ("ffap-menu-regexp" variable nil nil [54763 55028])
            ("ffap-menu-alist" variable nil nil [55030 55115])
            ("make-variable-buffer-local" code nil nil [55116 55161])
            ("ffap-menu-text-plist" variable (:default-value (cond ((display-mouse-p) (quote (face bold mouse-face highlight))) (t nil))) nil [55163 55419])
            ("ffap-menu" function
               (:user-visible-flag t
                :arguments ("rescan"))
                nil [55436 56290])
            ("ffap-menu-cont" function (:arguments ("choice")) nil [56292 56659])
            ("ffap-menu-ask" function (:arguments ("title" "alist" "cont")) nil [56661 58090])
            ("ffap-menu-rescan" function (:user-visible-flag t) nil [58092 59666])
            ("ffap-at-mouse-fallback" variable nil nil [59769 59967])
            ("put" code nil nil [59968 60021])
            ("ffap-at-mouse" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [60038 61152])
            ("ffap-other-window" function (:user-visible-flag t) nil [61427 61815])
            ("ffap-other-frame" function (:user-visible-flag t) nil [61817 62438])
            ("ffap--toggle-read-only" function (:arguments ("buffer-or-list")) nil [62440 62644])
            ("ffap-read-only" function (:user-visible-flag t) nil [62646 62956])
            ("ffap-read-only-other-window" function (:user-visible-flag t) nil [62958 63203])
            ("ffap-read-only-other-frame" function (:user-visible-flag t) nil [63205 63447])
            ("ffap-alternate-file" function (:user-visible-flag t) nil [63449 63654])
            ("ffap-alternate-file-other-window" function (:user-visible-flag t) nil [63656 63900])
            ("ffap-literally" function (:user-visible-flag t) nil [63902 64110])
            ("defalias" code nil nil [64112 64168])
            ("define-obsolete-function-alias" code nil nil [64191 64258])
            ("define-obsolete-function-alias" code nil nil [64259 64333])
            ("ffap-ro-mode-hook" function nil nil [64469 64628])
            ("ffap-gnus-hook" function nil nil [64630 64925])
            ("gnus-summary-buffer" variable nil nil [64927 64955])
            ("gnus-article-buffer" variable nil nil [64956 64984])
            ("declare-function" code nil nil [65020 65140])
            ("declare-function" code nil nil [65142 65238])
            ("ffap-gnus-wrapper" function (:arguments ("form")) nil [65240 65946])
            ("ffap-gnus-next" function (:user-visible-flag t) nil [65948 66076])
            ("ffap-gnus-menu" function (:user-visible-flag t) nil [66078 66200])
            ("dired-at-point" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [66220 67465])
            ("dired-at-point-prompter" function (:arguments ("guess")) nil [67467 68421])
            ("ffap-dired-other-window" function (:user-visible-flag t) nil [68479 68797])
            ("ffap-dired-other-frame" function (:user-visible-flag t) nil [68799 69345])
            ("ffap-list-directory" function (:user-visible-flag t) nil [69347 69567])
            ("ffap-guess-file-name-at-point" function nil nil [69639 70099])
            ("ffap-bindings" variable (:default-value (quote ((global-set-key [S-mouse-3] (quote ffap-at-mouse)) (global-set-key [C-S-mouse-3] (quote ffap-menu)) (global-set-key "" (quote find-file-at-point)) (global-set-key "" (quote ffap-read-only)) (global-set-key "" (quote ffap-alternate-file)) (global-set-key "4f" (quote ffap-other-window)) (global-set-key "5f" (quote ffap-other-frame)) (global-set-key "4r" (quote ffap-read-only-other-window)) (global-set-key "5r" (quote ffap-read-only-other-frame)) (global-set-key "d" (quote dired-at-point)) (global-set-key "4d" (quote ffap-dired-other-window)) (global-set-key "5d" (quote ffap-dired-other-frame)) (global-set-key "" (quote ffap-list-directory)) (add-hook (quote gnus-summary-mode-hook) (quote ffap-gnus-hook)) (add-hook (quote gnus-article-mode-hook) (quote ffap-gnus-hook)) (add-hook (quote vm-mode-hook) (quote ffap-ro-mode-hook)) (add-hook (quote rmail-mode-hook) (quote ffap-ro-mode-hook))))) nil [70156 71300])
            ("ffap-bindings" function (:user-visible-flag t) nil [71317 71446])
            ("ffap" package nil nil [71450 71465]))          
      :file "ffap.el.gz"
      :pointmax 71489
      :fsize 22288
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "replace.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("case-replace" variable (:default-value t) nil [1016 1150])
            ("replace-lax-whitespace" variable nil nil [1152 1459])
            ("replace-regexp-lax-whitespace" variable nil nil [1461 1782])
            ("query-replace-history" variable nil nil [1784 1954])
            ("query-replace-defaults" variable nil nil [1956 2144])
            ("query-replace-interactive" variable nil nil [2146 2287])
            ("make-obsolete-variable" code nil nil [2288 2536])
            ("query-replace-from-history-variable" variable (:default-value (quote query-replace-history)) nil [2538 2884])
            ("query-replace-to-history-variable" variable (:default-value (quote query-replace-history)) nil [2886 3221])
            ("query-replace-skip-read-only" variable nil nil [3223 3393])
            ("query-replace-show-replacement" variable (:default-value t) nil [3395 3557])
            ("query-replace-highlight" variable (:default-value t) nil [3559 3697])
            ("query-replace-lazy-highlight" variable (:default-value t) nil [3699 4068])
            ("query-replace" variable
               (:default-value (quote ((t (:inherit isearch))))
                :type "face")
                nil [4070 4211])
            ("replace-count" variable nil nil [4213 4331])
            ("query-replace-descr" function (:arguments ("string")) nil [4333 4424])
            ("query-replace-read-from" function (:arguments ("prompt" "regexp-flag")) nil [4426 6189])
            ("query-replace-compile-replacement" function (:arguments ("to" "regexp-flag")) nil [6191 7539])
            ("query-replace-read-to" function (:arguments ("from" "prompt" "regexp-flag")) nil [7542 8063])
            ("query-replace-read-args" function (:arguments ("prompt" "regexp-flag" "noerror")) nil [8065 8506])
            ("query-replace" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end" "backward"))
                nil [8508 11040])
            ("define-key" code nil nil [11042 11081])
            ("query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end" "backward"))
                nil [11083 14599])
            ("define-key" code nil nil [14601 14651])
            ("query-replace-regexp-eval" function (:arguments ("regexp" "to-expr" "delimited" "start" "end")) nil [14653 17944])
            ("map-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-strings" "n" "start" "end"))
                nil [17946 20014])
            ("replace-string" function
               (:user-visible-flag t
                :arguments ("from-string" "to-string" "delimited" "start" "end" "backward"))
                nil [20016 22289])
            ("put" code nil nil [22290 22386])
            ("replace-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "to-string" "delimited" "start" "end" "backward"))
                nil [22388 25487])
            ("put" code nil nil [25488 25587])
            ("regexp-history" variable nil nil [25591 25779])
            ("occur-collect-regexp-history" variable (:default-value (quote ("\\1"))) nil [25781 25879])
            ("read-regexp-defaults-function" variable nil nil [25881 26854])
            ("read-regexp-suggestions" function nil nil [26856 27437])
            ("read-regexp" function (:arguments ("prompt" "defaults" "history")) nil [27439 30245])
            ("defalias" code nil nil [30248 30297])
            ("defalias" code nil nil [30298 30344])
            ("defalias" code nil nil [30345 30380])
            ("keep-lines-read-args" function (:arguments ("prompt")) nil [30383 30569])
            ("keep-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [30571 33285])
            ("flush-lines" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [33288 35353])
            ("how-many" function
               (:user-visible-flag t
                :arguments ("regexp" "rstart" "rend" "interactive"))
                nil [35356 37178])
            ("occur-menu-map" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [next-error-follow-minor-mode] (quote (menu-item "Auto Occurrence Display" next-error-follow-minor-mode :help "Display another occurrence when moving the cursor" :button (:toggle and (boundp (quote next-error-follow-minor-mode)) next-error-follow-minor-mode)))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [kill-this-buffer] (quote (menu-item "Kill Occur Buffer" kill-this-buffer :help "Kill the current *Occur* buffer"))) (bindings--define-key map [quit-window] (quote (menu-item "Quit Occur Window" quit-window :help "Quit the current *Occur* buffer.  Bury it, and maybe delete the selected frame"))) (bindings--define-key map [revert-buffer] (quote (menu-item "Revert Occur Buffer" revert-buffer :help "Replace the text in the *Occur* buffer with the results of rerunning occur"))) (bindings--define-key map [clone-buffer] (quote (menu-item "Clone Occur Buffer" clone-buffer :help "Create and return a twin copy of the current *Occur* buffer"))) (bindings--define-key map [occur-rename-buffer] (quote (menu-item "Rename Occur Buffer" occur-rename-buffer :help "Rename the current *Occur* buffer to *Occur: original-buffer-name*."))) (bindings--define-key map [occur-edit-buffer] (quote (menu-item "Edit Occur Buffer" occur-edit-mode :help "Edit the *Occur* buffer and apply changes to the original buffers."))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [occur-mode-goto-occurrence-other-window] (quote (menu-item "Go To Occurrence Other Window" occur-mode-goto-occurrence-other-window :help "Go to the occurrence the current line describes, in another window"))) (bindings--define-key map [occur-mode-goto-occurrence] (quote (menu-item "Go To Occurrence" occur-mode-goto-occurrence :help "Go to the occurrence the current line describes"))) (bindings--define-key map [occur-mode-display-occurrence] (quote (menu-item "Display Occurrence" occur-mode-display-occurrence :help "Display in another window the occurrence the current line describes"))) (bindings--define-key map [occur-next] (quote (menu-item "Move to Next Match" occur-next :help "Move to the Nth (default 1) next match in an Occur mode buffer"))) (bindings--define-key map [occur-prev] (quote (menu-item "Move to Previous Match" occur-prev :help "Move to the Nth (default 1) previous match in an Occur mode buffer"))) map)) nil [37182 39784])
            ("occur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "e" (quote occur-edit-mode)) (define-key map "" (quote occur-mode-goto-occurrence)) (define-key map "o" (quote occur-mode-goto-occurrence-other-window)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "\356" (quote occur-next)) (define-key map "\360" (quote occur-prev)) (define-key map "r" (quote occur-rename-buffer)) (define-key map "c" (quote clone-buffer)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [39786 40603])
            ("occur-revert-arguments" variable nil nil [40605 40736])
            ("make-variable-buffer-local" code nil nil [40737 40789])
            ("put" code nil nil [40790 40838])
            ("occur-mode-hook" variable (:default-value (quote (turn-on-font-lock))) nil [40840 40960])
            ("occur-hook" variable nil nil [40962 41071])
            ("occur-mode-find-occurrence-hook" variable nil nil [41073 41365])
            ("put" code nil nil [41367 41405])
            ("define-derived-mode" code nil nil [41406 41870])
            ("occur-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map [mouse-2] (quote occur-mode-mouse-goto)) (define-key map "" (quote occur-cease-edit)) (define-key map "" (quote occur-mode-display-occurrence)) (define-key map "" (quote next-error-follow-minor-mode)) (bindings--define-key map [menu-bar occur] (cons "Occur" occur-menu-map)) map)) nil [41895 42347])
            ("define-derived-mode" code nil nil [42349 42810])
            ("occur-cease-edit" function (:user-visible-flag t) nil [42812 43003])
            ("occur-after-change-function" function (:arguments ("beg" "end" "length")) nil [43005 44507])
            ("occur-revert-function" function (:arguments ("_ignore1" "_ignore2")) nil [44511 44683])
            ("occur-mode-find-occurrence" function nil nil [44685 44951])
            ("defalias" code nil nil [44953 45014])
            ("occur-mode-goto-occurrence" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [45015 45763])
            ("occur-mode-goto-occurrence-other-window" function (:user-visible-flag t) nil [45765 46073])
            ("occur-mode-display-occurrence" function (:user-visible-flag t) nil [46075 46501])
            ("occur-find-match" function (:arguments ("n" "search" "message")) nil [46503 46854])
            ("occur-next" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [46856 47047])
            ("occur-prev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [47049 47251])
            ("occur-next-error" function
               (:user-visible-flag t
                :arguments ("argp" "reset"))
                nil [47253 48244])
            ("match" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "RoyalBlue3") (((class color) (min-colors 8) (background light)) :background "yellow" :foreground "black") (((class color) (min-colors 8) (background dark)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [48247 48800])
            ("list-matching-lines-default-context-lines" variable nil nil [48802 49119])
            ("defalias" code nil nil [49121 49159])
            ("list-matching-lines-face" variable (:default-value (quote match)) nil [49161 49379])
            ("list-matching-lines-buffer-name-face" variable (:default-value (quote underline)) nil [49381 49609])
            ("list-matching-lines-prefix-face" variable (:default-value (quote shadow)) nil [49611 49887])
            ("occur-excluded-properties" variable (:default-value (quote (read-only invisible intangible field mouse-face help-echo local-map keymap yank-handler follow-link))) nil [49889 50307])
            ("occur-read-primary-args" function nil nil [50309 51180])
            ("occur-rename-buffer" function
               (:user-visible-flag t
                :arguments ("unique-p" "interactive-p"))
                nil [51182 52069])
            ("occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [52071 53455])
            ("ido-ignore-item-temp-list" variable nil nil [53457 53491])
            ("multi-occur" function
               (:user-visible-flag t
                :arguments ("bufs" "regexp" "nlines"))
                nil [53493 54412])
            ("multi-occur-in-matching-buffers" function
               (:user-visible-flag t
                :arguments ("bufregexp" "regexp" "allbufs"))
                nil [54414 55367])
            ("occur-1" function (:arguments ("regexp" "nlines" "bufs" "buf-name")) nil [55369 58408])
            ("occur-engine" function (:arguments ("regexp" "buffers" "out-buf" "nlines" "case-fold" "title-face" "prefix-face" "match-face" "keep-props")) nil [58410 65241])
            ("occur-engine-line" function (:arguments ("beg" "end" "keep-props")) nil [65243 65733])
            ("occur-engine-add-prefix" function (:arguments ("lines" "prefix-face")) nil [65735 65959])
            ("occur-accumulate-lines" function (:arguments ("count" "keep-props" "pt")) nil [65961 66481])
            ("occur-context-lines" function (:arguments ("out-line" "nlines" "keep-props" "begpt" "endpt" "curr-line" "prev-line" "prev-after-lines" "prefix-face")) nil [66894 68721])
            ("query-replace-help" variable
               (:constant-flag t
                :default-value "Type Space or `y' to replace one match, Delete or `n' to skip to next,
RET or `q' to exit, Period to replace one match and exit,
Comma to replace but not move point immediately,
C-r to enter recursive edit (\\[exit-recursive-edit] to get out again),
C-w to delete match and recursive edit,
C-l to clear the screen, redisplay, and offer same replacement again,
! to replace all remaining matches in this buffer with no more questions,
^ to move point back to previous match,
E to edit the replacement string.
In multi-buffer replacements type `Y' to replace all remaining
matches in all remaining buffers with no more questions,
`N' to skip to the next buffer without replacing remaining matches
in the current buffer.")
                nil [68832 69626])
            ("query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote act)) (define-key map "" (quote skip)) (define-key map [delete] (quote skip)) (define-key map [backspace] (quote skip)) (define-key map "y" (quote act)) (define-key map "n" (quote skip)) (define-key map "Y" (quote act)) (define-key map "N" (quote skip)) (define-key map "e" (quote edit-replacement)) (define-key map "E" (quote edit-replacement)) (define-key map "," (quote act-and-show)) (define-key map "q" (quote exit)) (define-key map "" (quote exit)) (define-key map [return] (quote exit)) (define-key map "." (quote act-and-exit)) (define-key map "" (quote edit)) (define-key map "" (quote delete-and-edit)) (define-key map "" (quote recenter)) (define-key map "!" (quote automatic)) (define-key map "^" (quote backup)) (define-key map "" (quote help)) (define-key map [f1] (quote help)) (define-key map [help] (quote help)) (define-key map "?" (quote help)) (define-key map "" (quote quit)) (define-key map "" (quote quit)) (define-key map "" (quote scroll-up)) (define-key map "\366" (quote scroll-down)) (define-key map [next] (quote scroll-up)) (define-key map [prior] (quote scroll-down)) (define-key map [134217750] (quote scroll-other-window)) (define-key map [M-next] (quote scroll-other-window)) (define-key map [167772182] (quote scroll-other-window-down)) (define-key map [M-prior] (quote scroll-other-window-down)) (define-key map [escape] (quote exit-prefix)) map)) nil [69628 71664])
            ("multi-query-replace-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "Y" (quote automatic-all)) (define-key map "N" (quote exit-current)) map)) nil [71666 72326])
            ("replace-match-string-symbols" function (:arguments ("n")) nil [72328 73489])
            ("replace-eval-replacement" function (:arguments ("expression" "count")) nil [73491 73854])
            ("replace-quote" function (:arguments ("replacement")) nil [73856 74330])
            ("replace-loop-through-replacements" function (:arguments ("data" "count")) nil [74332 74755])
            ("replace-match-data" function (:arguments ("integers" "reuse" "new")) nil [74757 75160])
            ("replace-match-maybe-edit" function (:arguments ("newtext" "fixedcase" "literal" "noedit" "match-data" "backward")) nil [75162 76583])
            ("replace-search-function" variable nil nil [76585 76800])
            ("replace-re-search-function" variable nil nil [76802 77087])
            ("replace-search" function (:arguments ("search-string" "limit" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [77089 78228])
            ("replace-overlay" variable nil nil [78230 78258])
            ("replace-highlight" function (:arguments ("match-beg" "match-end" "range-beg" "range-end" "search-string" "regexp-flag" "delimited-flag" "case-fold-search" "backward")) nil [78260 79201])
            ("replace-dehighlight" function nil nil [79203 79540])
            ("perform-replace" function (:arguments ("from-string" "replacements" "query-flag" "regexp-flag" "delimited-flag" "repeat-count" "map" "start" "end" "backward")) nil [79542 94579]))          
      :file "replace.el.gz"
      :pointmax 94606
      :fsize 23574
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "button.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) (define-key map [mode-line mouse-2] (quote push-button)) (define-key map [header-line mouse-2] (quote push-button)) map)) nil [2312 2923])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2925 3249])
            ("put" code nil nil [3285 3320])
            ("put" code nil nil [3321 3365])
            ("put" code nil nil [3366 3406])
            ("put" code nil nil [3407 3442])
            ("put" code nil nil [3508 3545])
            ("put" code nil nil [3546 3622])
            ("put" code nil nil [3692 3726])
            ("put" code nil nil [3822 3861])
            ("put" code nil nil [3923 3976])
            ("button-category-symbol" function (:arguments ("type")) nil [4537 4807])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4809 6447])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6449 6588])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6590 6721])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6723 6951])
            ("button-start" function (:arguments ("button")) nil [6998 7244])
            ("button-end" function (:arguments ("button")) nil [7246 7477])
            ("button-get" function (:arguments ("button" "prop")) nil [7479 7808])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7810 8779])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8781 9611])
            ("button-label" function (:arguments ("button")) nil [9613 9867])
            ("button-type" function (:arguments ("button")) nil [9869 9961])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9963 10131])
            ("button--area-button-p" function (:arguments ("b")) nil [10133 10312])
            ("defalias" code nil nil [10314 10405])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [10437 11365])
            ("insert-button" function (:arguments ("label" "properties")) nil [11367 11834])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [11873 14084])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [14086 14771])
            ("button-at" function (:arguments ("pos")) nil [14807 15197])
            ("next-button" function (:arguments ("pos" "count-current")) nil [15199 15765])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [15767 16774])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [16796 18128])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18130 19649])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [19651 20155])
            ("button" package nil nil [20158 20175]))          
      :file "button.el.gz"
      :pointmax 20201
      :fsize 6041
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files-x.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1154 1916])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1918 3570])
            ("read-file-local-variable-mode" function nil nil [3572 4409])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4411 5506])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op" "interactive")) nil [5508 8836])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8853 9575])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9592 9885])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op" "interactive")) nil [9887 14338])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14355 14982])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [14999 15304])
            ("auto-insert" variable nil nil [15306 15326])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [15349 18428])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [18445 18853])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [18870 19175])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [19192 19460])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [19477 19691])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [19708 19930])
            ("files-x" package nil nil [19935 19953]))          
      :file "files-x.el.gz"
      :pointmax 19980
      :fsize 4902
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sort.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("sort" customgroup (:user-visible-flag t) nil [1008 1088])
            ("sort-fold-case" variable nil nil [1090 1213])
            ("sort-subr" function (:arguments ("reverse" "nextrecfun" "endrecfun" "startkeyfun" "endkeyfun" "predicate")) nil [1297 4591])
            ("sort-build-lists" function (:arguments ("nextrecfun" "endrecfun" "startkeyfun" "endkeyfun")) nil [4915 6165])
            ("sort-reorder-buffer" function (:arguments ("sort-lists" "old")) nil [6167 7489])
            ("sort-lines" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [7506 8099])
            ("sort-paragraphs" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [8116 8740])
            ("sort-pages" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [8757 9298])
            ("sort-fields-syntax-table" variable nil nil [9301 9338])
            ("if" code nil nil [9339 9736])
            ("sort-numeric-base" variable (:default-value 10) nil [9738 9854])
            ("sort-numeric-fields" function
               (:user-visible-flag t
                :arguments ("field" "beg" "end"))
                nil [9941 11148])
            ("sort-fields" function
               (:user-visible-flag t
                :arguments ("field" "beg" "end"))
                nil [11963 12689])
            ("sort-fields-1" function (:arguments ("field" "beg" "end" "startkeyfun" "endkeyfun")) nil [12691 13107])
            ("sort-skip-fields" function (:arguments ("n")) nil [13231 14060])
            ("sort-regexp-fields-regexp" variable nil nil [14063 14097])
            ("sort-regexp-record-end" variable nil nil [14098 14129])
            ("sort-regexp-fields-next-record" function nil nil [14348 14764])
            ("sort-regexp-fields" function
               (:user-visible-flag t
                :arguments ("reverse" "record-regexp" "key-regexp" "beg" "end"))
                nil [14781 17207])
            ("sort-columns-subprocess" variable (:default-value t) nil [17211 17245])
            ("sort-columns" function
               (:user-visible-flag t
                :arguments ("reverse" "beg" "end"))
                nil [17262 19998])
            ("reverse-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [20015 21184])
            ("delete-duplicate-lines" function
               (:user-visible-flag t
                :arguments ("beg" "end" "reverse" "adjacent" "keep-blanks" "interactive"))
                nil [21201 23591])
            ("sort" package nil nil [23593 23608]))          
      :file "sort.el.gz"
      :pointmax 23632
      :fsize 7199
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "menu-bar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1056 1091])
            ("cua-enable-cua-keys" variable nil nil [1135 1163])
            ("or" code nil nil [1277 1387])
            ("setq" code nil nil [1541 1581])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1709 1772])
            ("define-obsolete-variable-alias" code nil nil [1840 1922])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1923 8903])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8905 9235])
            ("menu-bar-last-search-type" variable nil nil [9267 9375])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9377 9773])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9775 10175])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10177 10490])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10492 10817])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10819 11158])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11160 11511])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11558 12375])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12377 14841])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [14873 15864])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] menu-bar-separator) (bindings--define-key menu [apropos-tags] (quote (menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [next-tag-otherw] (quote (menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window"))) (bindings--define-key menu [next-tag] (quote (menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name"))) (bindings--define-key menu [find-tag-otherw] (quote (menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [find-tag] (quote (menu-item "Find Tag..." find-tag :help "Find definition of function or variable"))) (bindings--define-key menu [separator-tags] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [15910 18081])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18084 18138])
            ("fset" code nil nil [18139 18181])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (quote (menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18183 22315])
            ("menu-bar-next-tag-other-window" function (:user-visible-flag t) nil [22317 22465])
            ("menu-bar-next-tag" function (:user-visible-flag t) nil [22467 22589])
            ("define-obsolete-function-alias" code nil nil [22591 22673])
            ("put" code nil nil [22817 22905])
            ("put" code nil nil [22906 22963])
            ("put" code nil nil [22964 23154])
            ("clipboard-yank" function (:user-visible-flag t) nil [23156 23323])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23325 23542])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23544 23749])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23751 24374])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24406 26671])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26744 27195])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27197 28405])
            ("menu-set-font" function (:user-visible-flag t) nil [28453 28682])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28684 30769])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [30878 31058])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [31060 31285])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [31287 31498])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [31500 31685])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [31687 31869])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [31871 32041])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [32043 34455])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [34457 34608])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [34610 34796])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [34798 34995])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [34997 35192])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [35194 35365])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [35367 37391])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [37393 37549])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [37551 37704])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [37706 37829])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [37831 39029])
            ("menu-bar-frame-for-menubar" function nil nil [39031 39214])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [39216 39336])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [39338 39486])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [39487 39639])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [39640 39801])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [39802 39966])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [39967 40125])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [40126 40293])
            ("when" code nil nil [40295 43074])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [43076 46723])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [46725 48822])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case for Search" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [48824 54259])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [land] (quote (menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [54290 56378])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [56380 58721])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [58723 58850])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [58852 62913])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [62942 65782])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [65784 65907])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [65909 66045])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [66047 66186])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66188 66359])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66361 66542])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [66544 68765])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [68767 70041])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [70043 70191])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [70193 73940])
            ("bindings--define-key" code nil nil [73942 74029])
            ("bindings--define-key" code nil nil [74030 74124])
            ("bindings--define-key" code nil nil [74125 74218])
            ("bindings--define-key" code nil nil [74219 74303])
            ("bindings--define-key" code nil nil [74304 74388])
            ("bindings--define-key" code nil nil [74389 74489])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [74491 74795])
            ("menu-bar-non-minibuffer-window-p" function nil nil [74797 75243])
            ("kill-this-buffer" function (:user-visible-flag t) nil [75245 75677])
            ("kill-this-buffer-enabled-p" function nil nil [75679 76147])
            ("put" code nil nil [76149 76210])
            ("delete-frame-enabled-p" function nil nil [76285 76570])
            ("yank-menu-length" variable (:default-value 20) nil [76572 76683])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [76685 77676])
            ("put" code nil nil [77678 77724])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [77725 77965])
            ("buffers-menu-max-size" variable (:default-value 10) nil [77987 78331])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [78333 78682])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [78684 79428])
            ("buffers-menu-show-status" variable (:default-value t) nil [79430 79803])
            ("list-buffers-directory" variable nil nil [79805 79914])
            ("make-variable-buffer-local" code nil nil [79915 79967])
            ("menu-bar-select-buffer" function nil nil [79969 80058])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [80060 80171])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [80173 81043])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [81112 81162])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [81164 81352])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [81354 85519])
            ("add-hook" code nil nil [85521 85578])
            ("menu-bar-update-buffers" code nil nil [85580 85605])
            ("dolist" code nil nil [86228 86524])
            ("let" code nil nil [86526 87015])
            ("let" code nil nil [87017 88086])
            ("define-minor-mode" code nil nil [88089 89448])
            ("put" code nil nil [89892 89933])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89935 90341])
            ("declare-function" code nil nil [90343 90408])
            ("declare-function" code nil nil [90409 90478])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [90480 93531])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [93533 94245])
            ("tty-menu-open-use-tmm" variable nil nil [94247 94708])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [94710 94861])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [94863 96314])
            ("global-set-key" code nil nil [96316 96353])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [96355 99900])
            ("menu-bar" package nil nil [99902 99921]))          
      :file "menu-bar.el.gz"
      :pointmax 99949
      :fsize 21847
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "case-table.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1238 2284])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2286 2982])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2984 3104])
            ("make-obsolete" code nil nil [3105 3167])
            ("copy-case-table" function (:arguments ("case-table")) nil [3169 3584])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3586 4420])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4422 5200])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5202 5803])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5805 6410])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6412 7060])
            ("case-table" package nil nil [7062 7083]))          
      :file "case-table.el.gz"
      :pointmax 7113
      :fsize 2027
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "battery.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("timer" include nil nil [1274 1290])
            ("cl-lib" include nil nil [1310 1327])
            ("battery" customgroup (:user-visible-flag t) nil [1331 1433])
            ("battery--linux-sysfs-regexp" variable
               (:constant-flag t
                :default-value "[bB][aA][tT][0-9]?$")
                nil [1478 1538])
            ("battery-status-function" variable (:default-value (cond ((and (eq system-type (quote gnu/linux)) (file-readable-p "/proc/apm")) (quote battery-linux-proc-apm)) ((and (eq system-type (quote gnu/linux)) (file-directory-p "/proc/acpi/battery")) (quote battery-linux-proc-acpi)) ((and (eq system-type (quote gnu/linux)) (file-directory-p "/sys/class/power_supply/") (directory-files "/sys/class/power_supply/" nil battery--linux-sysfs-regexp)) (quote battery-linux-sysfs)) ((and (eq system-type (quote berkeley-unix)) (file-executable-p "/usr/sbin/apm")) (quote battery-bsd-apm)) ((and (eq system-type (quote darwin)) (condition-case nil (with-temp-buffer (and (eq (call-process "pmset" nil t nil "-g" "ps") 0) (> (buffer-size) 0))) (error nil))) (quote battery-pmset)) ((fboundp (quote w32-battery-status)) (quote w32-battery-status)))) nil [1540 2742])
            ("battery-echo-area-format" variable (:default-value (cond ((eq battery-status-function (quote battery-linux-proc-acpi)) "Power %L, battery %B at %r (%p%% load, remaining time %t)") ((eq battery-status-function (quote battery-linux-sysfs)) "Power %L, battery %B (%p%% load, remaining time %t)") ((eq battery-status-function (quote battery-pmset)) "%L power, battery %B (%p%% load, remaining time %t)") (battery-status-function "Power %L, battery %B (%p%% load, remaining time %t)"))) nil [2744 4061])
            ("battery-mode-line-string" variable nil nil [4063 4140])
            ("battery-mode-line-limit" variable (:default-value 100) nil [4213 4376])
            ("battery-mode-line-format" variable (:default-value (cond ((eq battery-status-function (quote battery-linux-proc-acpi)) "[%b%p%%,%d\302\260C]") (battery-status-function "[%b%p%%]"))) nil [4378 5396])
            ("battery-update-interval" variable (:default-value 60) nil [5398 5531])
            ("battery-load-low" variable (:default-value 25) nil [5533 5710])
            ("battery-load-critical" variable (:default-value 10) nil [5712 5904])
            ("battery-update-timer" variable nil nil [5906 5966])
            ("battery" function (:user-visible-flag t) nil [5983 6407])
            ("define-minor-mode" code nil nil [6424 7516])
            ("battery-update-handler" function nil nil [7518 7584])
            ("battery-update" function nil nil [7586 8302])
            ("battery-linux-proc-apm-regexp" variable
               (:constant-flag t
                :default-value (concat "^\\([^ ]+\\)" " \\([^ ]+\\)" " 0x\\([0-9a-f]+\\)" " 0x\\([0-9a-f]+\\)" " 0x\\([0-9a-f]+\\)" " 0x\\([0-9a-f]+\\)" " \\(-?[0-9]+\\)%" " \\(-?[0-9]+\\)" " \\(.*\\)" "$"))
                nil [8343 8814])
            ("battery-linux-proc-apm" function nil nil [8816 11689])
            ("battery-linux-proc-acpi" function nil nil [11733 16319])
            ("battery-linux-sysfs" function nil nil [16380 20607])
            ("battery-bsd-apm" function nil nil [20640 23200])
            ("battery-pmset" function nil nil [23246 25233])
            ("battery-format" function (:arguments ("format" "alist")) nil [25261 25502])
            ("battery-search-for-one-match-in-files" function (:arguments ("files" "regexp" "match-num")) nil [25504 25979])
            ("battery" package nil nil [25983 26001]))          
      :file "battery.el.gz"
      :pointmax 26028
      :fsize 6499
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1327 . 1328) (symbol 1292 . 1309) (open-paren 1291 . 1292)))
    (semanticdb-table "ezimage.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("condition-case" code nil nil [1309 1385])
            ("ezimage-use-images" variable (:default-value (if (featurep (quote xemacs)) (and (fboundp (quote make-image-specifier)) window-system) (and (display-images-p) (image-type-available-p (quote xpm))))) nil [1397 1689])
            ("if" code nil nil [1749 4257])
            ("ezimage-directory" variable
               (:default-value ((:type xpm :file "ezimage/dir.xpm" :ascent center))
                :type "image")
                nil [4260 4383])
            ("ezimage-directory-plus" variable
               (:default-value ((:type xpm :file "ezimage/dir-plus.xpm" :ascent center))
                :type "image")
                nil [4385 4538])
            ("ezimage-directory-minus" variable
               (:default-value ((:type xpm :file "ezimage/dir-minus.xpm" :ascent center))
                :type "image")
                nil [4540 4693])
            ("ezimage-page-plus" variable
               (:default-value ((:type xpm :file "ezimage/page-plus.xpm" :ascent center))
                :type "image")
                nil [4695 4838])
            ("ezimage-page-minus" variable
               (:default-value ((:type xpm :file "ezimage/page-minus.xpm" :ascent center))
                :type "image")
                nil [4840 4983])
            ("ezimage-page" variable
               (:default-value ((:type xpm :file "ezimage/page.xpm" :ascent center))
                :type "image")
                nil [4985 5123])
            ("ezimage-tag" variable
               (:default-value ((:type xpm :file "ezimage/tag.xpm" :ascent center))
                :type "image")
                nil [5125 5229])
            ("ezimage-tag-plus" variable
               (:default-value ((:type xpm :file "ezimage/tag-plus.xpm" :ascent center))
                :type "image")
                nil [5231 5358])
            ("ezimage-tag-minus" variable
               (:default-value ((:type xpm :file "ezimage/tag-minus.xpm" :ascent center))
                :type "image")
                nil [5360 5481])
            ("ezimage-tag-gt" variable
               (:default-value ((:type xpm :file "ezimage/tag-gt.xpm" :ascent center))
                :type "image")
                nil [5483 5619])
            ("ezimage-tag-v" variable
               (:default-value ((:type xpm :file "ezimage/tag-v.xpm" :ascent center))
                :type "image")
                nil [5621 5753])
            ("ezimage-tag-type" variable
               (:default-value ((:type xpm :file "ezimage/tag-type.xpm" :ascent center))
                :type "image")
                nil [5755 5896])
            ("ezimage-box-plus" variable
               (:default-value ((:type xpm :file "ezimage/box-plus.xpm" :ascent center))
                :type "image")
                nil [5898 6014])
            ("ezimage-box-minus" variable
               (:default-value ((:type xpm :file "ezimage/box-minus.xpm" :ascent center))
                :type "image")
                nil [6016 6133])
            ("ezimage-mail" variable
               (:default-value ((:type xpm :file "ezimage/mail.xpm" :ascent center))
                :type "image")
                nil [6135 6242])
            ("ezimage-checkout" variable
               (:default-value ((:type xpm :file "ezimage/checkmark.xpm" :ascent center))
                :type "image")
                nil [6244 6402])
            ("ezimage-object" variable
               (:default-value ((:type xpm :file "ezimage/bits.xpm" :ascent center))
                :type "image")
                nil [6404 6533])
            ("ezimage-object-out-of-date" variable
               (:default-value ((:type xpm :file "ezimage/bitsbang.xpm" :ascent center))
                :type "image")
                nil [6535 6709])
            ("ezimage-label" variable
               (:default-value ((:type xpm :file "ezimage/label.xpm" :ascent center))
                :type "image")
                nil [6711 6827])
            ("ezimage-lock" variable
               (:default-value ((:type xpm :file "ezimage/lock.xpm" :ascent center))
                :type "image")
                nil [6829 6964])
            ("ezimage-unlock" variable
               (:default-value ((:type xpm :file "ezimage/unlock.xpm" :ascent center))
                :type "image")
                nil [6966 7082])
            ("ezimage-key" variable
               (:default-value ((:type xpm :file "ezimage/key.xpm" :ascent center))
                :type "image")
                nil [7084 7183])
            ("ezimage-document-tag" variable
               (:default-value ((:type xpm :file "ezimage/doc.xpm" :ascent center))
                :type "image")
                nil [7185 7325])
            ("ezimage-document-plus" variable
               (:default-value ((:type xpm :file "ezimage/doc-plus.xpm" :ascent center))
                :type "image")
                nil [7327 7470])
            ("ezimage-document-minus" variable
               (:default-value ((:type xpm :file "ezimage/doc-minus.xpm" :ascent center))
                :type "image")
                nil [7472 7615])
            ("ezimage-info-tag" variable
               (:default-value ((:type xpm :file "ezimage/info.xpm" :ascent center))
                :type "image")
                nil [7617 7757])
            ("ezimage-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("%" . ezimage-lock)))) nil [7759 8351])
            ("ezimage-insert-image-button-maybe" function (:arguments ("start" "length" "string")) nil [8353 9303])
            ("ezimage-image-over-string" function (:arguments ("string" "alist")) nil [9305 9685])
            ("ezimage-insert-over-text" function (:arguments ("image" "start" "end" "string")) nil [9687 10226])
            ("ezimage-image-association-dump" function (:user-visible-flag t) nil [10228 11030])
            ("ezimage-image-dump" function (:user-visible-flag t) nil [11032 11746])
            ("ezimage-all-images" function nil nil [11748 12032])
            ("ezimage" package nil nil [12034 12052]))          
      :file "ezimage.el.gz"
      :pointmax 12080
      :fsize 3590
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 4257 . 4258) (symbol 1731 . 1747) (open-paren 1730 . 1731)))
    (semanticdb-table "widget.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("define-widget-keywords" function (:arguments ("_keys")) nil [1380 1834])
            ("put" code nil nil [3028 3066])
            ("define-widget" function (:arguments ("name" "class" "doc" "args")) nil [3106 3662])
            ("defalias" code nil nil [3723 3768])
            ("widget" package nil nil [3784 3801]))          
      :file "widget.el.gz"
      :pointmax 3827
      :fsize 1797
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "loaddefs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("5x5" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [184 1125])
            ("5x5-crack-randomly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1127 1225])
            ("5x5-crack-mutating-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1227 1343])
            ("5x5-crack-mutating-best" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1345 1455])
            ("5x5-crack-xor-mutate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1457 1593])
            ("5x5-crack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1595 1965])
            ("ada-add-extensions" function (:prototype-flag t) nil [2122 2408])
            ("ada-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2410 2507])
            ("ada-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2664 2766])
            ("ada-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2923 3059])
            ("put" code nil nil [3199 3268])
            ("add-log-current-defun-function" variable nil nil [3270 3525])
            ("custom-autoload" code nil nil [3527 3588])
            ("add-log-full-name" variable nil nil [3590 3755])
            ("custom-autoload" code nil nil [3757 3805])
            ("add-log-mailing-address" variable nil nil [3807 4168])
            ("custom-autoload" code nil nil [4170 4224])
            ("prompt-for-change-log-name" function (:prototype-flag t) nil [4226 4323])
            ("find-change-log" function (:prototype-flag t) nil [4325 5100])
            ("add-change-log-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5102 6403])
            ("add-change-log-entry-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6405 6669])
            ("change-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6671 7097])
            ("add-log-current-defun" function (:prototype-flag t) nil [7099 7620])
            ("change-log-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7622 8023])
            ("ad-redefinition-action" variable (:default-value (quote warn)) nil [8176 8830])
            ("custom-autoload" code nil nil [8832 8884])
            ("ad-default-compilation-action" variable (:default-value (quote maybe)) nil [8886 9435])
            ("custom-autoload" code nil nil [9437 9496])
            ("ad-enable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9498 9624])
            ("ad-disable-advice" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [9626 9753])
            ("ad-add-advice" function (:prototype-flag t) nil [9755 10817])
            ("ad-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [10819 11900])
            ("defadvice" function (:prototype-flag t) nil [11902 14076])
            ("put" code nil nil [14078 14113])
            ("put" code nil nil [14115 14156])
            ("align" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [14276 15098])
            ("align-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15100 16908])
            ("align-entire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16910 17286])
            ("align-current" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17288 17716])
            ("align-highlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [17718 18178])
            ("align-unhighlight-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18180 18305])
            ("align-newline-and-indent" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18307 18438])
            ("push" code nil nil [18560 18617])
            ("allout-auto-activation-helper" function (:prototype-flag t) nil [18619 18802])
            ("allout-setup" function (:prototype-flag t) nil [18804 19128])
            ("allout-auto-activation" variable nil nil [19130 19794])
            ("custom-autoload" code nil nil [19796 19850])
            ("put" code nil nil [19852 19974])
            ("put" code nil nil [19976 20068])
            ("put" code nil nil [20070 20184])
            ("put" code nil nil [20186 20243])
            ("put" code nil nil [20245 20303])
            ("put" code nil nil [20305 20369])
            ("put" code nil nil [20371 20441])
            ("put" code nil nil [20443 20584])
            ("put" code nil nil [20586 20707])
            ("put" code nil nil [20709 20828])
            ("put" code nil nil [20830 20970])
            ("put" code nil nil [20972 21113])
            ("put" code nil nil [21115 21180])
            ("put" code nil nil [21182 21283])
            ("put" code nil nil [21285 21355])
            ("put" code nil nil [21357 21423])
            ("allout-mode-p" function (:prototype-flag t) nil [21425 21531])
            ("allout-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21533 34526])
            ("defalias" code nil nil [34528 34575])
            ("outlineify-sticky" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [34577 34853])
            ("push" code nil nil [35007 35072])
            ("allout-widgets-setup" function (:prototype-flag t) nil [35074 35299])
            ("allout-widgets-auto-activation" variable nil nil [35301 35835])
            ("custom-autoload" code nil nil [35837 35907])
            ("put" code nil nil [35909 36032])
            ("allout-widgets-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [36034 37051])
            ("defalias" code nil nil [37196 37249])
            ("ange-ftp-reread-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37251 37646])
            ("ange-ftp-hook-function" function (:prototype-flag t) nil [37648 37734])
            ("animate-string" function (:prototype-flag t) nil [37878 38269])
            ("animate-sequence" function (:prototype-flag t) nil [38271 38635])
            ("animate-birthday-present" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38637 38952])
            ("push" code nil nil [39094 39157])
            ("ansi-color-for-comint-mode-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39159 39269])
            ("ansi-color-process-output" function (:prototype-flag t) nil [39271 39860])
            ("push" code nil nil [40022 40085])
            ("antlr-show-makefile-rules" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40087 40941])
            ("antlr-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40943 41039])
            ("antlr-set-tabs" function (:prototype-flag t) nil [41041 41237])
            ("appt-add" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41380 41744])
            ("appt-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41746 41942])
            ("apropos-read-pattern" function (:prototype-flag t) nil [42076 42429])
            ("apropos-user-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42431 42933])
            ("apropos-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42935 43146])
            ("defalias" code nil nil [43148 43192])
            ("apropos-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [43194 43957])
            ("apropos-documentation-property" function (:prototype-flag t) nil [43959 44119])
            ("apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44121 44800])
            ("apropos-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44802 45095])
            ("apropos-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45097 45739])
            ("apropos-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45741 46457])
            ("archive-mode" function (:prototype-flag t) nil [46594 47119])
            ("array-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [47239 50324])
            ("push" code nil nil [50473 50532])
            ("artist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50534 58217])
            ("asm-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [58374 59102])
            ("auth-source-cache-expiry" variable (:default-value 7200) nil [59258 59425])
            ("custom-autoload" code nil nil [59427 59486])
            ("autoarg-mode" variable nil nil [59620 59754])
            ("custom-autoload" code nil nil [59756 59801])
            ("autoarg-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [59803 60886])
            ("autoarg-kp-mode" variable nil nil [60888 61185])
            ("custom-autoload" code nil nil [61187 61235])
            ("autoarg-kp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61237 61662])
            ("autoconf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [61819 61924])
            ("auto-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [62067 62272])
            ("define-auto-insert" function (:prototype-flag t) nil [62274 62578])
            ("auto-insert-mode" variable nil nil [62580 62881])
            ("custom-autoload" code nil nil [62883 62935])
            ("auto-insert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [62937 63355])
            ("put" code nil nil [63514 63574])
            ("put" code nil nil [63576 63641])
            ("update-file-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [63643 64188])
            ("update-directory-autoloads" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [64190 65006])
            ("batch-update-autoloads" function (:prototype-flag t) nil [65008 65262])
            ("auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [65405 66047])
            ("turn-on-auto-revert-mode" function (:prototype-flag t) nil [66049 66257])
            ("auto-revert-tail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [66259 67067])
            ("turn-on-auto-revert-tail-mode" function (:prototype-flag t) nil [67069 67301])
            ("global-auto-revert-mode" variable nil nil [67303 67632])
            ("custom-autoload" code nil nil [67634 67693])
            ("global-auto-revert-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [67695 68604])
            ("mouse-avoidance-mode" variable nil nil [68724 68967])
            ("custom-autoload" code nil nil [68969 69020])
            ("mouse-avoidance-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [69022 70162])
            ("add-to-list" code nil nil [70319 70387])
            ("bat-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70389 70688])
            ("put" code nil nil [70822 70877])
            ("battery" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [70879 71109])
            ("display-battery-mode" variable nil nil [71111 71428])
            ("custom-autoload" code nil nil [71430 71483])
            ("display-battery-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [71485 71972])
            ("benchmark-run" function (:prototype-flag t) nil [72134 72568])
            ("put" code nil nil [72570 72615])
            ("benchmark-run-compiled" function (:prototype-flag t) nil [72617 72953])
            ("put" code nil nil [72955 73009])
            ("benchmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73011 73271])
            ("bibtex-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [73422 74136])
            ("bibtex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [74138 76807])
            ("bibtex-search-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [76809 77554])
            ("bibtex-style-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [77723 77827])
            ("binhex-begin-line" variable
               (:constant-flag t
                :default-value "^:...............................................................$")
                nil [77968 78135])
            ("binhex-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78137 78380])
            ("binhex-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78382 78526])
            ("binhex-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78528 78640])
            ("blackbox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [78787 83749])
            ("define-key" code nil nil [83886 83929])
            ("define-key" code nil nil [83931 83973])
            ("define-key" code nil nil [83975 84024])
            ("bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "x" (quote bookmark-set)) (define-key map "m" (quote bookmark-set)) (define-key map "j" (quote bookmark-jump)) (define-key map "g" (quote bookmark-jump)) (define-key map "o" (quote bookmark-jump-other-window)) (define-key map "i" (quote bookmark-insert)) (define-key map "e" (quote edit-bookmarks)) (define-key map "f" (quote bookmark-insert-location)) (define-key map "r" (quote bookmark-rename)) (define-key map "d" (quote bookmark-delete)) (define-key map "l" (quote bookmark-load)) (define-key map "w" (quote bookmark-write)) (define-key map "s" (quote bookmark-save)) map)) nil [84026 84866])
            ("fset" code nil nil [84868 84901])
            ("bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [84903 86087])
            ("bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [86089 87021])
            ("bookmark-jump-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87023 87165])
            ("bookmark-relocate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87167 87483])
            ("bookmark-insert-location" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87485 87750])
            ("defalias" code nil nil [87752 87805])
            ("bookmark-rename" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [87807 88416])
            ("bookmark-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88418 88828])
            ("bookmark-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [88830 89324])
            ("bookmark-write" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89326 89513])
            ("bookmark-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [89515 90292])
            ("bookmark-load" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [90294 91187])
            ("bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91189 91457])
            ("defalias" code nil nil [91459 91506])
            ("defalias" code nil nil [91508 91555])
            ("bookmark-bmenu-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [91557 91684])
            ("menu-bar-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap "Bookmark functions"))) (bindings--define-key map [load] (quote (menu-item "Load a Bookmark File..." bookmark-load :help "Load bookmarks from a bookmark file)"))) (bindings--define-key map [write] (quote (menu-item "Save Bookmarks As..." bookmark-write :help "Write bookmarks to a file (reading the file name with the minibuffer)"))) (bindings--define-key map [save] (quote (menu-item "Save Bookmarks" bookmark-save :help "Save currently defined bookmarks"))) (bindings--define-key map [edit] (quote (menu-item "Edit Bookmark List" bookmark-bmenu-list :help "Display a list of existing bookmarks"))) (bindings--define-key map [delete] (quote (menu-item "Delete Bookmark..." bookmark-delete :help "Delete a bookmark from the bookmark list"))) (bindings--define-key map [rename] (quote (menu-item "Rename Bookmark..." bookmark-rename :help "Change the name of a bookmark"))) (bindings--define-key map [locate] (quote (menu-item "Insert Location..." bookmark-locate :help "Insert the name of the file associated with a bookmark"))) (bindings--define-key map [insert] (quote (menu-item "Insert Contents..." bookmark-insert :help "Insert the text of the file pointed to by a bookmark"))) (bindings--define-key map [set] (quote (menu-item "Set Bookmark..." bookmark-set :help "Set a bookmark named inside a file."))) (bindings--define-key map [jump] (quote (menu-item "Jump to Bookmark..." bookmark-jump :help "Jump to a bookmark (a point in some file)"))) map)) nil [91686 93133])
            ("defalias" code nil nil [93135 93190])
            ("browse-url-browser-function" variable (:default-value (quote browse-url-default-browser)) nil [93341 93904])
            ("custom-autoload" code nil nil [93906 93967])
            ("browse-url-of-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [93969 94318])
            ("browse-url-of-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94320 94579])
            ("browse-url-of-dired-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94581 94715])
            ("browse-url-of-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94717 94836])
            ("browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [94838 95153])
            ("browse-url-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95155 95399])
            ("browse-url-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95401 95734])
            ("browse-url-xdg-open" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95736 95983])
            ("browse-url-netscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [95985 96794])
            ("browse-url-mozilla" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [96796 97599])
            ("browse-url-firefox" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [97601 98505])
            ("browse-url-chromium" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98507 98764])
            ("browse-url-galeon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [98766 99563])
            ("browse-url-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99565 99715])
            ("browse-url-gnome-moz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [99717 100361])
            ("browse-url-mosaic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [100363 101064])
            ("browse-url-cci" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101066 101813])
            ("browse-url-w3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [101815 102299])
            ("browse-url-w3-gnudoit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102301 102603])
            ("browse-url-text-xterm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102605 102979])
            ("browse-url-text-emacs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [102981 103674])
            ("browse-url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [103676 104387])
            ("browse-url-generic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104389 104790])
            ("browse-url-kde" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104792 104953])
            ("browse-url-elinks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [104955 105321])
            ("push" code nil nil [105431 105485])
            ("bs-cycle-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105487 105689])
            ("bs-cycle-previous" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105691 105901])
            ("bs-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [105903 106002])
            ("bs-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106004 106630])
            ("bubbles" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [106774 107378])
            ("put" code nil nil [107550 107684])
            ("bug-reference-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [107686 107998])
            ("bug-reference-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [108000 108153])
            ("put" code nil nil [108311 108369])
            ("put" code nil nil [108370 108441])
            ("put" code nil nil [108442 108511])
            ("put" code nil nil [108513 108652])
            ("byte-compile-disable-warning" function (:prototype-flag t) nil [108654 109028])
            ("byte-compile-enable-warning" function (:prototype-flag t) nil [109030 109390])
            ("byte-force-recompile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109392 109591])
            ("byte-recompile-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [109593 110331])
            ("put" code nil nil [110332 110385])
            ("byte-compile-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110387 110784])
            ("compile-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [110786 111003])
            ("byte-compile" function (:prototype-flag t) nil [111005 111186])
            ("display-call-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [111188 111865])
            ("batch-byte-compile-if-not-done" function (:prototype-flag t) nil [111867 112095])
            ("batch-byte-compile" function (:prototype-flag t) nil [112097 112548])
            ("batch-byte-recompile-directory" function (:prototype-flag t) nil [112550 112994])
            ("put" code nil nil [113152 113209])
            ("put" code nil nil [113211 113268])
            ("put" code nil nil [113420 113483])
            ("put" code nil nil [113485 113546])
            ("put" code nil nil [113548 113611])
            ("calendar-hebrew-list-yahrzeits" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [113772 114056])
            ("define-obsolete-function-alias" code nil nil [114058 114150])
            ("define-key" code nil nil [114277 114318])
            ("calc-dispatch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114320 114457])
            ("calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114459 114611])
            ("full-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114613 114735])
            ("quick-calc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [114737 114858])
            ("calc-eval" function (:prototype-flag t) nil [114860 115144])
            ("calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115146 115444])
            ("full-calc-keypad" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115446 115610])
            ("calc-grab-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115612 115753])
            ("calc-grab-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115755 115900])
            ("calc-embedded" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [115902 116038])
            ("calc-embedded-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116040 116248])
            ("defmath" function (:prototype-flag t) nil [116250 116660])
            ("put" code nil nil [116662 116695])
            ("calc-undo" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [116845 116898])
            ("calculator" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117041 117185])
            ("calendar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [117340 119016])
            ("canlock-insert-header" function (:prototype-flag t) nil [119159 119324])
            ("canlock-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119326 119519])
            ("capitalized-words-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [119679 121068])
            ("c-guess-basic-syntax" function (:prototype-flag t) nil [121228 121341])
            ("c-guess-guessed-offsets-alist" variable nil nil [121498 121577])
            ("c-guess-guessed-basic-offset" variable nil nil [121579 121656])
            ("c-guess" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [121658 122028])
            ("c-guess-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122030 122346])
            ("c-guess-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122348 122712])
            ("c-guess-buffer-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [122714 123024])
            ("c-guess-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [123026 123385])
            ("c-guess-region-no-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [123387 124276])
            ("c-guess-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [124278 124717])
            ("c-initialize-cc-mode" function (:prototype-flag t) nil [124870 125322])
            ("add-to-list" code nil nil [125324 125390])
            ("add-to-list" code nil nil [125392 125471])
            ("add-to-list" code nil nil [125473 125541])
            ("add-to-list" code nil nil [125543 125598])
            ("add-to-list" code nil nil [125600 125662])
            ("add-to-list" code nil nil [125664 125718])
            ("add-to-list" code nil nil [125720 125772])
            ("add-to-list" code nil nil [125774 125829])
            ("c-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [125831 126391])
            ("c++-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [126393 126950])
            ("add-to-list" code nil nil [126952 127007])
            ("objc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127009 127579])
            ("add-to-list" code nil nil [127581 127639])
            ("java-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [127641 128203])
            ("add-to-list" code nil nil [128205 128261])
            ("idl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [128263 128844])
            ("add-to-list" code nil nil [128846 128937])
            ("add-to-list" code nil nil [128939 128998])
            ("pike-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129000 129562])
            ("add-to-list" code nil nil [129564 129620])
            ("add-to-list" code nil nil [129622 129679])
            ("add-to-list" code nil nil [129681 129739])
            ("add-to-list" code nil nil [129741 129799])
            ("add-to-list" code nil nil [129801 129859])
            ("awk-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [129861 130419])
            ("c-set-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [130579 131705])
            ("c-add-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [131707 132252])
            ("c-set-offset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [132254 132592])
            ("put" code nil nil [132745 132797])
            ("put" code nil nil [132798 132854])
            ("put" code nil nil [132855 132913])
            ("ccl-compile" function (:prototype-flag t) nil [133063 133188])
            ("ccl-dump" function (:prototype-flag t) nil [133190 133275])
            ("declare-ccl-program" function (:prototype-flag t) nil [133277 133739])
            ("define-ccl-program" function (:prototype-flag t) nil [133741 140292])
            ("put" code nil nil [140294 140338])
            ("check-ccl-program" function (:prototype-flag t) nil [140340 140661])
            ("ccl-execute-with-args" function (:prototype-flag t) nil [140663 140946])
            ("cconv-closure-convert" function (:prototype-flag t) nil [141096 141401])
            ("cconv-warnings-only" function (:prototype-flag t) nil [141403 141524])
            ("push" code nil nil [141663 141719])
            ("push" code nil nil [141875 141934])
            ("cfengine3-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [141936 142169])
            ("cfengine2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142171 142404])
            ("cfengine-auto-mode" function (:prototype-flag t) nil [142406 142552])
            ("push" code nil nil [142701 142757])
            ("check-declare-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [142931 143112])
            ("check-declare-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [143114 143312])
            ("push" code nil nil [143470 143531])
            ("put" code nil nil [143532 143601])
            ("put" code nil nil [143602 143668])
            ("put" code nil nil [143669 143746])
            ("put" code nil nil [143747 143824])
            ("put" code nil nil [143825 143908])
            ("put" code nil nil [143909 143980])
            ("put" code nil nil [143981 144057])
            ("put" code nil nil [144058 144136])
            ("checkdoc-list-of-strings-p" function (:prototype-flag t) nil [144138 144211])
            ("put" code nil nil [144212 144276])
            ("put" code nil nil [144277 144342])
            ("checkdoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [144344 144564])
            ("checkdoc-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [144566 145094])
            ("checkdoc-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145096 145636])
            ("checkdoc-eval-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145638 145927])
            ("checkdoc-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [145929 146230])
            ("checkdoc-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146232 146587])
            ("checkdoc-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146589 146959])
            ("checkdoc-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [146961 147250])
            ("checkdoc-rogue-spaces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147252 147611])
            ("checkdoc-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147613 147828])
            ("checkdoc-eval-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [147830 148171])
            ("checkdoc-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148173 148538])
            ("checkdoc-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148540 148747])
            ("checkdoc-ispell-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148749 148995])
            ("checkdoc-ispell-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [148997 149248])
            ("checkdoc-ispell-message-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149250 149519])
            ("checkdoc-ispell-message-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149521 149769])
            ("checkdoc-ispell-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149771 149990])
            ("checkdoc-ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [149992 150232])
            ("checkdoc-ispell-comments" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150234 150473])
            ("checkdoc-ispell-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150475 150705])
            ("checkdoc-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [150707 151259])
            ("decode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151420 151572])
            ("decode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151574 151681])
            ("encode-hz-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151683 151831])
            ("encode-hz-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [151833 151936])
            ("post-read-decode-hz" function (:prototype-flag t) nil [151938 152006])
            ("pre-write-encode-hz" function (:prototype-flag t) nil [152008 152080])
            ("repeat-matching-complex-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152217 152622])
            ("list-command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152624 152991])
            ("command-history" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [152993 153618])
            ("common-lisp-indent-function" function (:prototype-flag t) nil [153780 157093])
            ("push" code nil nil [157245 157302])
            ("define-obsolete-variable-alias" code nil nil [157304 157394])
            ("cl-custom-print-functions" variable nil nil [157396 157882])
            ("define-error" code nil nil [157884 157949])
            ("cl--defsubst-expand" function (:prototype-flag t) nil [157951 157992])
            ("put" code nil nil [157994 158027])
            ("put" code nil nil [158029 158065])
            ("put" code nil nil [158067 158103])
            ("put" code nil nil [158105 158142])
            ("c-macro-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [158296 158832])
            ("run-scheme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [158972 159636])
            ("color-name-to-rgb" function (:prototype-flag t) nil [159756 160287])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [160410 161078])
            ("make-comint-in-buffer" function (:prototype-flag t) nil [161080 161875])
            ("make-comint" function (:prototype-flag t) nil [161877 162615])
            ("comint-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [162617 162957])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [162959 163179])
            ("comint-redirect-send-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163181 163479])
            ("comint-redirect-send-command-to-process" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [163481 163775])
            ("comint-redirect-results-list" function (:prototype-flag t) nil [163777 164032])
            ("comint-redirect-results-list-from-process" function (:prototype-flag t) nil [164034 164302])
            ("compare-windows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [164448 165637])
            ("compilation-mode-hook" variable nil nil [165791 165879])
            ("custom-autoload" code nil nil [165881 165933])
            ("compilation-start-hook" variable nil nil [165935 166077])
            ("custom-autoload" code nil nil [166079 166132])
            ("compilation-window-height" variable nil nil [166134 166244])
            ("custom-autoload" code nil nil [166246 166302])
            ("compilation-process-setup-function" variable nil nil [166304 166609])
            ("compilation-buffer-name-function" variable nil nil [166611 166908])
            ("compilation-finish-function" variable nil nil [166910 167115])
            ("compilation-finish-functions" variable nil nil [167117 167335])
            ("put" code nil nil [167336 167394])
            ("compilation-ask-about-save" variable (:default-value t) nil [167396 167565])
            ("custom-autoload" code nil nil [167567 167624])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [167626 167872])
            ("custom-autoload" code nil nil [167874 167928])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [167930 168510])
            ("custom-autoload" code nil nil [168512 168558])
            ("put" code nil nil [168559 168704])
            ("compilation-disable-input" variable nil nil [168706 168948])
            ("custom-autoload" code nil nil [168950 169006])
            ("compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [169008 170261])
            ("compilation-start" function (:prototype-flag t) nil [170263 171215])
            ("compilation-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171217 171619])
            ("put" code nil nil [171621 171669])
            ("compilation-shell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [171671 172163])
            ("compilation-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172165 172577])
            ("compilation-next-error-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [172579 172808])
            ("dynamic-completion-mode" variable nil nil [172951 173280])
            ("custom-autoload" code nil nil [173282 173341])
            ("dynamic-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173343 173618])
            ("conf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [173778 175205])
            ("conf-unix-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175207 175528])
            ("conf-windows-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [175530 176002])
            ("conf-javaprop-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176004 176428])
            ("conf-space-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [176430 177190])
            ("conf-space-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177192 177351])
            ("conf-colon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177353 177679])
            ("conf-ppd-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [177681 178009])
            ("conf-xdefaults-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178011 178328])
            ("cookie" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [178472 178794])
            ("cookie-insert" function (:prototype-flag t) nil [178796 179044])
            ("cookie-snarf" function (:prototype-flag t) nil [179046 179324])
            ("put" code nil nil [179485 179544])
            ("put" code nil nil [179545 179604])
            ("put" code nil nil [179605 179664])
            ("copyright-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [179666 180118])
            ("copyright-fix-years" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180120 180387])
            ("copyright" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180389 180511])
            ("copyright-update-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [180513 180731])
            ("put" code nil nil [180893 180949])
            ("put" code nil nil [180950 181006])
            ("put" code nil nil [181007 181073])
            ("put" code nil nil [181074 181130])
            ("put" code nil nil [181131 181201])
            ("put" code nil nil [181202 181272])
            ("put" code nil nil [181273 181336])
            ("cperl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [181338 189631])
            ("cperl-perldoc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [189633 189716])
            ("cperl-perldoc-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [189718 189824])
            ("cpp-highlight-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [189966 190262])
            ("cpp-parse-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [190264 190360])
            ("completing-read-multiple" function (:prototype-flag t) nil [190504 191466])
            ("css-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [191623 191714])
            ("cua-mode" variable nil nil [191871 192140])
            ("custom-autoload" code nil nil [192142 192184])
            ("cua-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [192186 193304])
            ("cua-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193306 193432])
            ("cua-rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [193589 193777])
            ("custom-browse-sort-alphabetically" variable nil nil [193914 194036])
            ("custom-autoload" code nil nil [194038 194103])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [194105 194223])
            ("custom-autoload" code nil nil [194225 194290])
            ("custom-menu-sort-alphabetically" variable nil nil [194292 194407])
            ("custom-autoload" code nil nil [194409 194472])
            ("customize-set-value" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [194474 194999])
            ("customize-set-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195001 195654])
            ("customize-save-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [195656 196315])
            ("customize-push-and-save" function (:prototype-flag t) nil [196317 196729])
            ("customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [196731 197025])
            ("customize-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197027 197274])
            ("customize-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197276 197469])
            ("customize-group-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197471 197628])
            ("defalias" code nil nil [197630 197678])
            ("customize-option" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197680 197790])
            ("defalias" code nil nil [197792 197866])
            ("customize-option-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [197868 198047])
            ("customize-package-emacs-version-alist" variable nil nil [198049 199382])
            ("defalias" code nil nil [199384 199440])
            ("customize-changed-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [199442 199905])
            ("customize-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [199907 200326])
            ("customize-face-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200328 200658])
            ("customize-unsaved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200660 200784])
            ("customize-rogue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200786 200898])
            ("customize-saved" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200900 200994])
            ("customize-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [200996 201529])
            ("customize-apropos-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201531 201680])
            ("customize-apropos-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201682 201796])
            ("customize-apropos-groups" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [201798 201914])
            ("custom-buffer-create" function (:prototype-flag t) nil [201916 202262])
            ("custom-buffer-create-other-window" function (:prototype-flag t) nil [202264 202677])
            ("customize-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202679 202802])
            ("custom-file" variable nil nil [202804 204325])
            ("custom-autoload" code nil nil [204327 204370])
            ("custom-save-all" function (:prototype-flag t) nil [204372 204471])
            ("customize-save-customized" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [204473 204597])
            ("custom-menu-create" function (:prototype-flag t) nil [204599 204768])
            ("customize-menu-create" function (:prototype-flag t) nil [204770 205074])
            ("customize-create-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205214 205636])
            ("custom-theme-visit-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205638 205760])
            ("describe-theme" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205762 205883])
            ("customize-themes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [205885 206114])
            ("cvs-status-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206263 206353])
            ("push" code nil nil [206500 206558])
            ("cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [206560 207071])
            ("define-obsolete-function-alias" code nil nil [207073 207144])
            ("global-cwarn-mode" variable nil nil [207146 207451])
            ("custom-autoload" code nil nil [207453 207501])
            ("global-cwarn-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [207503 207896])
            ("cyrillic-encode-koi8-r-char" function (:prototype-flag t) nil [208057 208195])
            ("cyrillic-encode-alternativnyj-char" function (:prototype-flag t) nil [208197 208349])
            ("standard-display-cyrillic-translit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [208351 208940])
            ("put" code nil nil [209073 209128])
            ("put" code nil nil [209129 209180])
            ("define-key" code nil nil [209182 209222])
            ("define-key" code nil nil [209224 209272])
            ("dabbrev-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209274 209764])
            ("dabbrev-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [209766 210642])
            ("data-debug-new-buffer" function (:prototype-flag t) nil [210797 210909])
            ("dbus-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211034 211312])
            ("dcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [211469 215478])
            ("setq" code nil nil [215628 215650])
            ("debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [215652 216065])
            ("debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216067 216779])
            ("cancel-debug-on-entry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [216781 217104])
            ("decipher" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [217251 217372])
            ("decipher-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [217374 218101])
            ("push" code nil nil [218240 218300])
            ("delimit-columns-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [218302 218402])
            ("delimit-columns-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [218404 218557])
            ("delimit-columns-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [218559 218732])
            ("defalias" code nil nil [218855 218909])
            ("delete-selection-mode" variable nil nil [218911 219232])
            ("custom-autoload" code nil nil [219234 219287])
            ("delete-selection-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [219289 219739])
            ("define-derived-mode" function (:prototype-flag t) nil [219895 222003])
            ("put" code nil nil [222005 222050])
            ("derived-mode-init-mode-variables" function (:prototype-flag t) nil [222052 222336])
            ("describe-text-properties" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [222479 222897])
            ("describe-char" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [222899 223780])
            ("desktop-save-mode" variable nil nil [223914 224219])
            ("custom-autoload" code nil nil [224221 224271])
            ("desktop-save-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [224273 225203])
            ("desktop-locals-to-save" variable (:default-value (quote (desktop-locals-to-save truncate-lines case-fold-search case-replace fill-column overwrite-mode change-log-default-name line-number-mode column-number-mode size-indication-mode buffer-file-coding-system indent-tabs-mode tab-width indicate-buffer-boundaries indicate-empty-lines show-trailing-whitespace))) nil [225205 225737])
            ("custom-autoload" code nil nil [225739 225792])
            ("defvar-local" code nil nil [225794 226390])
            ("desktop-buffer-mode-handlers" variable nil nil [226392 227572])
            ("put" code nil nil [227574 227633])
            ("desktop-minor-mode-handlers" variable nil nil [227635 228822])
            ("put" code nil nil [228824 228882])
            ("desktop-clear" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [228884 229337])
            ("desktop-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229339 229799])
            ("desktop-remove" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229801 229946])
            ("desktop-read" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [229948 230472])
            ("desktop-load-default" function (:prototype-flag t) nil [230474 230617])
            ("make-obsolete" code nil nil [230619 230683])
            ("desktop-change-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230685 230940])
            ("desktop-save-in-desktop-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [230942 231057])
            ("desktop-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231059 231147])
            ("gnus-article-outlook-unwrap-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231293 231708])
            ("gnus-article-outlook-repair-attribution" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231710 231904])
            ("gnus-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [231906 232184])
            ("gnus-article-outlook-deuglify-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232186 232321])
            ("diary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232479 232829])
            ("diary-mail-entries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [232831 233595])
            ("diary-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [233597 233687])
            ("diff-switches" variable (:default-value (purecopy "-c")) nil [233810 233922])
            ("custom-autoload" code nil nil [233924 233965])
            ("diff-command" variable (:default-value (purecopy "diff")) nil [233967 234042])
            ("custom-autoload" code nil nil [234044 234084])
            ("diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234086 234652])
            ("diff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [234654 234987])
            ("diff-latest-backup-file" function (:prototype-flag t) nil [234989 235104])
            ("diff-buffer-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235106 235310])
            ("diff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [235456 236036])
            ("diff-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236038 236318])
            ("dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [236440 236660])
            ("dired-listing-switches" variable (:default-value (purecopy "-al")) nil [236780 237269])
            ("custom-autoload" code nil nil [237271 237322])
            ("dired-directory" variable nil nil [237324 237627])
            ("define-key" code nil nil [237629 237662])
            ("dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [237664 238487])
            ("define-key" code nil nil [238489 238537])
            ("dired-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238539 238694])
            ("define-key" code nil nil [238696 238743])
            ("dired-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [238745 238891])
            ("dired-noselect" function (:prototype-flag t) nil [238893 239049])
            ("dired-mode" function (:prototype-flag t) nil [239051 242092])
            ("put" code nil nil [242094 242138])
            ("dirtrack-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [242275 242867])
            ("dirtrack" function (:prototype-flag t) nil [242869 243198])
            ("disassemble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [243351 243719])
            ("make-display-table" function (:prototype-flag t) nil [243862 243959])
            ("display-table-slot" function (:prototype-flag t) nil [243961 244280])
            ("set-display-table-slot" function (:prototype-flag t) nil [244282 244612])
            ("describe-display-table" function (:prototype-flag t) nil [244614 244731])
            ("describe-current-display-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [244733 244874])
            ("standard-display-8bit" function (:prototype-flag t) nil [244876 245382])
            ("standard-display-default" function (:prototype-flag t) nil [245384 245523])
            ("standard-display-ascii" function (:prototype-flag t) nil [245525 245641])
            ("standard-display-g1" function (:prototype-flag t) nil [245643 245874])
            ("standard-display-graphic" function (:prototype-flag t) nil [245876 246094])
            ("standard-display-underline" function (:prototype-flag t) nil [246096 246225])
            ("create-glyph" function (:prototype-flag t) nil [246227 246358])
            ("make-glyph-code" function (:prototype-flag t) nil [246360 246498])
            ("glyph-char" function (:prototype-flag t) nil [246500 246602])
            ("glyph-face" function (:prototype-flag t) nil [246604 246735])
            ("standard-display-european" function (:prototype-flag t) nil [246737 247638])
            ("dissociated-press" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [247791 248178])
            ("dnd-protocol-alist" variable (:default-value (\` (((\, (purecopy "^file:///")) . dnd-open-local-file) ((\, (purecopy "^file://")) . dnd-open-file) ((\, (purecopy "^file:")) . dnd-open-local-file) ((\, (purecopy "^\\(https?\\|ftp\\|file\\|nfs\\)://")) . dnd-open-file)))) nil [248292 249235])
            ("custom-autoload" code nil nil [249237 249282])
            ("dns-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249439 249851])
            ("defalias" code nil nil [249853 249884])
            ("dns-mode-soa-increment-serial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [249886 250005])
            ("doc-view-mode-p" function (:prototype-flag t) nil [250142 250358])
            ("doc-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250360 250705])
            ("doc-view-mode-maybe" function (:prototype-flag t) nil [250707 250894])
            ("doc-view-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [250896 251263])
            ("doc-view-bookmark-jump" function (:prototype-flag t) nil [251265 251334])
            ("doctor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [251475 251577])
            ("double-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [251700 252102])
            ("push" code nil nil [252242 252299])
            ("dunnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [252301 252388])
            ("defalias" code nil nil [252553 252612])
            ("define-minor-mode" function (:prototype-flag t) nil [252614 255836])
            ("put" code nil nil [255838 255881])
            ("defalias" code nil nil [255883 255954])
            ("defalias" code nil nil [255956 256022])
            ("define-globalized-minor-mode" function (:prototype-flag t) nil [256024 257351])
            ("put" code nil nil [257353 257407])
            ("easy-mmode-define-keymap" function (:prototype-flag t) nil [257409 258090])
            ("easy-mmode-defmap" function (:prototype-flag t) nil [258092 258342])
            ("easy-mmode-defsyntax" function (:prototype-flag t) nil [258344 258540])
            ("easy-menu-define" function (:prototype-flag t) nil [258699 262177])
            ("put" code nil nil [262179 262231])
            ("easy-menu-do-define" function (:prototype-flag t) nil [262233 262316])
            ("easy-menu-create-menu" function (:prototype-flag t) nil [262318 262616])
            ("easy-menu-change" function (:prototype-flag t) nil [262618 263509])
            ("push" code nil nil [263662 263720])
            ("ebnf-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263722 263805])
            ("ebnf-print-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [263807 264128])
            ("ebnf-print-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264130 264440])
            ("ebnf-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264442 265015])
            ("ebnf-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265017 265231])
            ("ebnf-spool-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265233 265554])
            ("ebnf-spool-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265556 265866])
            ("ebnf-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [265868 266186])
            ("ebnf-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266188 266466])
            ("ebnf-eps-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266468 266766])
            ("ebnf-eps-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [266768 267039])
            ("ebnf-eps-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [267041 267778])
            ("ebnf-eps-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [267780 268525])
            ("defalias" code nil nil [268527 268563])
            ("ebnf-syntax-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [268565 268868])
            ("ebnf-syntax-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [268870 269149])
            ("ebnf-syntax-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269151 269255])
            ("ebnf-syntax-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269257 269359])
            ("ebnf-setup" function (:prototype-flag t) nil [269361 269446])
            ("ebnf-find-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269448 269624])
            ("ebnf-insert-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269626 269820])
            ("ebnf-delete-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269822 269944])
            ("ebnf-merge-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [269946 270107])
            ("ebnf-apply-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [270109 270275])
            ("ebnf-reset-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [270277 270442])
            ("ebnf-push-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [270444 270687])
            ("ebnf-pop-style" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [270689 270921])
            ("ebrowse-tree-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271075 271467])
            ("ebrowse-electric-choose-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271469 271607])
            ("ebrowse-member-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271609 271706])
            ("ebrowse-tags-view-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271708 271813])
            ("ebrowse-tags-find-declaration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271815 271920])
            ("ebrowse-tags-view-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [271922 272025])
            ("ebrowse-tags-find-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272027 272130])
            ("ebrowse-tags-find-declaration-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272132 272266])
            ("ebrowse-tags-view-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272268 272400])
            ("ebrowse-tags-find-definition-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272402 272534])
            ("ebrowse-tags-find-declaration-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272536 272667])
            ("ebrowse-tags-view-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272669 272799])
            ("ebrowse-tags-find-definition-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272801 272931])
            ("ebrowse-tags-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [272933 273229])
            ("ebrowse-tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273231 273502])
            ("ebrowse-tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273504 273716])
            ("ebrowse-tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273718 273903])
            ("ebrowse-tags-search-member-use" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [273905 274242])
            ("ebrowse-back-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274244 274384])
            ("ebrowse-forward-in-position-stack" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274386 274528])
            ("ebrowse-electric-position-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274530 274659])
            ("ebrowse-save-tree" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274661 274768])
            ("ebrowse-save-tree-as" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [274770 275014])
            ("ebrowse-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275016 275110])
            ("electric-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [275253 276632])
            ("Electric-command-history-redo-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [276772 277004])
            ("ecomplete-setup" function (:prototype-flag t) nil [277153 277212])
            ("push" code nil nil [277337 277391])
            ("global-ede-mode" variable nil nil [277393 277690])
            ("custom-autoload" code nil nil [277692 277736])
            ("global-ede-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [277738 278113])
            ("edebug-all-defs" variable nil nil [278266 278730])
            ("custom-autoload" code nil nil [278732 278777])
            ("edebug-all-forms" variable nil nil [278779 279013])
            ("custom-autoload" code nil nil [279015 279061])
            ("edebug-basic-spec" function (:prototype-flag t) nil [279063 279269])
            ("defalias" code nil nil [279271 279323])
            ("edebug-eval-top-level-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [279325 280202])
            ("edebug-all-defs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280204 280295])
            ("edebug-all-forms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280297 280383])
            ("push" code nil nil [280508 280567])
            ("ediff-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280569 280704])
            ("ediff-files3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280706 280854])
            ("defalias" code nil nil [280856 280888])
            ("defalias" code nil nil [280890 280920])
            ("ediff-current-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [280922 281143])
            ("ediff-backup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281145 281358])
            ("ediff-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281360 281516])
            ("defalias" code nil nil [281518 281553])
            ("ediff-buffers3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281555 281728])
            ("defalias" code nil nil [281730 281767])
            ("ediff-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [281769 282055])
            ("defalias" code nil nil [282057 282093])
            ("ediff-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282095 282397])
            ("defalias" code nil nil [282399 282452])
            ("ediff-directories3" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282454 282753])
            ("defalias" code nil nil [282755 282793])
            ("ediff-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [282795 283115])
            ("defalias" code nil nil [283117 283165])
            ("ediff-merge-directories-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283167 283674])
            ("ediff-merge-directory-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [283676 284012])
            ("defalias" code nil nil [284014 284079])
            ("ediff-merge-directory-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284081 284445])
            ("defalias" code nil nil [284447 284540])
            ("defalias" code nil nil [284542 284618])
            ("ediff-windows-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284620 284962])
            ("ediff-windows-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [284964 285306])
            ("ediff-regions-wordwise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285308 285669])
            ("ediff-regions-linewise" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [285671 286066])
            ("defalias" code nil nil [286068 286110])
            ("ediff-merge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286112 286256])
            ("ediff-merge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286258 286427])
            ("defalias" code nil nil [286429 286499])
            ("ediff-merge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286501 286658])
            ("ediff-merge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286660 286844])
            ("ediff-merge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [286846 287079])
            ("ediff-merge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287081 287351])
            ("ediff-patch-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287353 287696])
            ("ediff-patch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [287698 288261])
            ("defalias" code nil nil [288263 288299])
            ("defalias" code nil nil [288301 288346])
            ("ediff-revision" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288348 288664])
            ("defalias" code nil nil [288666 288703])
            ("ediff-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288705 288851])
            ("ediff-documentation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [288853 288987])
            ("ediff-files-command" function (:prototype-flag t) nil [288989 289048])
            ("ediff3-files-command" function (:prototype-flag t) nil [289050 289110])
            ("ediff-merge-command" function (:prototype-flag t) nil [289112 289171])
            ("ediff-merge-with-ancestor-command" function (:prototype-flag t) nil [289173 289246])
            ("ediff-directories-command" function (:prototype-flag t) nil [289248 289313])
            ("ediff-directories3-command" function (:prototype-flag t) nil [289315 289381])
            ("ediff-merge-directories-command" function (:prototype-flag t) nil [289383 289454])
            ("ediff-merge-directories-with-ancestor-command" function (:prototype-flag t) nil [289456 289541])
            ("ediff-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289690 289748])
            ("ediff-show-registry" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [289897 289984])
            ("defalias" code nil nil [289986 290028])
            ("ediff-toggle-multiframe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290177 290389])
            ("ediff-toggle-use-toolbar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290391 290619])
            ("push" code nil nil [290752 290810])
            ("edit-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [290812 291234])
            ("edit-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291236 291358])
            ("edit-named-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291360 291512])
            ("read-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [291514 292189])
            ("format-kbd-macro" function (:prototype-flag t) nil [292191 292572])
            ("edt-set-scroll-margins" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292714 292952])
            ("edt-emulation-on" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [292954 293028])
            ("with-electric-help" function (:prototype-flag t) nil [293148 294371])
            ("electric-helpify" function (:prototype-flag t) nil [294373 294448])
            ("push" code nil nil [294597 294653])
            ("push" code nil nil [294817 294878])
            ("eieio-defclass-autoload" function (:prototype-flag t) nil [294880 295267])
            ("eldoc-minor-mode-string" variable (:default-value (purecopy " ElDoc")) nil [295417 295546])
            ("custom-autoload" code nil nil [295548 295600])
            ("eldoc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [295602 296226])
            ("define-obsolete-function-alias" code nil nil [296228 296299])
            ("eldoc-documentation-function" variable nil nil [296301 297017])
            ("electric-pair-text-pairs" variable (:default-value (quote ((34 . 34)))) nil [297157 297449])
            ("custom-autoload" code nil nil [297451 297508])
            ("electric-pair-mode" variable nil nil [297510 297819])
            ("custom-autoload" code nil nil [297821 297874])
            ("electric-pair-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [297876 298346])
            ("elide-head" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298489 298804])
            ("elint-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [298954 299026])
            ("elint-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299028 299180])
            ("elint-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299182 299315])
            ("elint-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299317 299444])
            ("elint-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299446 299637])
            ("elp-instrument-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299781 299926])
            ("elp-instrument-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [299928 300158])
            ("elp-instrument-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300160 300398])
            ("elp-results" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300400 300626])
            ("emacs-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [300769 301584])
            ("report-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [301731 301892])
            ("set-advertised-calling-convention" code nil nil [301894 301964])
            ("emerge-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302101 302238])
            ("emerge-files-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302240 302442])
            ("emerge-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302444 302576])
            ("emerge-buffers-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [302578 302779])
            ("emerge-files-command" function (:prototype-flag t) nil [302781 302842])
            ("emerge-files-with-ancestor-command" function (:prototype-flag t) nil [302844 302919])
            ("emerge-files-remote" function (:prototype-flag t) nil [302921 303004])
            ("emerge-files-with-ancestor-remote" function (:prototype-flag t) nil [303006 303112])
            ("emerge-revisions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303114 303270])
            ("emerge-revisions-with-ancestor" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303272 303486])
            ("emerge-merge-directories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303488 303587])
            ("enriched-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [303744 304296])
            ("enriched-encode" function (:prototype-flag t) nil [304298 304373])
            ("enriched-decode" function (:prototype-flag t) nil [304375 304441])
            ("epa-list-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304555 304675])
            ("epa-list-secret-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [304677 304805])
            ("epa-select-keys" function (:prototype-flag t) nil [304807 305167])
            ("epa-decrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305169 305371])
            ("epa-verify-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305373 305441])
            ("epa-sign-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305443 305545])
            ("epa-encrypt-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305547 305643])
            ("epa-decrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [305645 306573])
            ("epa-decrypt-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306575 306825])
            ("epa-verify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [306827 307462])
            ("epa-verify-cleartext-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307464 307734])
            ("epa-sign-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [307736 308385])
            ("epa-encrypt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [308387 309060])
            ("epa-delete-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309062 309162])
            ("epa-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309164 309242])
            ("epa-import-keys-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309244 309340])
            ("epa-import-armor-in-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309342 309498])
            ("epa-export-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309500 309590])
            ("epa-insert-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309592 309685])
            ("epa-dired-do-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309825 309908])
            ("epa-dired-do-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309910 309991])
            ("epa-dired-do-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [309993 310070])
            ("epa-dired-do-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310072 310155])
            ("epa-file-handler" function (:prototype-flag t) nil [310292 310372])
            ("epa-file-enable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310374 310430])
            ("epa-file-disable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310432 310489])
            ("epa-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310626 310903])
            ("epa-mail-decrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [310905 311099])
            ("epa-mail-verify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311101 311312])
            ("epa-mail-sign" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311314 311507])
            ("epa-mail-encrypt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [311509 312069])
            ("epa-mail-import-keys" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312071 312286])
            ("epa-global-mail-mode" variable nil nil [312288 312605])
            ("custom-autoload" code nil nil [312607 312661])
            ("epa-global-mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [312663 312933])
            ("push" code nil nil [313046 313102])
            ("epg-make-context" function (:prototype-flag t) nil [313104 313283])
            ("epg-configuration" function (:prototype-flag t) nil [313426 313560])
            ("epg-check-configuration" function (:prototype-flag t) nil [313562 313718])
            ("epg-expand-group" function (:prototype-flag t) nil [313720 313833])
            ("push" code nil nil [313954 314008])
            ("erc-select-read-args" function (:prototype-flag t) nil [314010 314131])
            ("erc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314133 314958])
            ("defalias" code nil nil [314960 314987])
            ("erc-tls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [314989 315136])
            ("erc-handle-irc-url" function (:prototype-flag t) nil [315138 315410])
            ("erc-autoaway-mode" function (:prototype-flag t) nil [315567 315611])
            ("erc-button-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315762 315808])
            ("erc-capab-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [315956 316009])
            ("erc-define-minor-mode" function (:prototype-flag t) nil [316160 316206])
            ("erc-dcc-mode" function (:prototype-flag t) nil [316348 316382])
            ("erc-cmd-DCC" function (:prototype-flag t) nil [316384 316684])
            ("pcomplete/erc-mode/DCC" function (:prototype-flag t) nil [316686 316791])
            ("erc-ctcp-query-DCC-hook" variable (:default-value (quote (erc-ctcp-query-DCC))) nil [316793 316887])
            ("erc-ctcp-query-DCC" function (:prototype-flag t) nil [316889 317136])
            ("erc-notifications-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [317331 317398])
            ("erc-cmd-ezb" function (:prototype-flag t) nil [317555 317678])
            ("erc-ezb-get-login" function (:prototype-flag t) nil [317680 317941])
            ("erc-ezb-lookup-action" function (:prototype-flag t) nil [317943 318019])
            ("erc-ezb-notice-autodetect" function (:prototype-flag t) nil [318021 318141])
            ("erc-ezb-identify" function (:prototype-flag t) nil [318143 318247])
            ("erc-ezb-init-session-list" function (:prototype-flag t) nil [318249 318368])
            ("erc-ezb-end-of-session-list" function (:prototype-flag t) nil [318370 318501])
            ("erc-ezb-add-session" function (:prototype-flag t) nil [318503 318621])
            ("erc-ezb-select" function (:prototype-flag t) nil [318623 318746])
            ("erc-ezb-select-session" function (:prototype-flag t) nil [318748 318852])
            ("erc-ezb-initialize" function (:prototype-flag t) nil [318854 318962])
            ("erc-fill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319107 319149])
            ("erc-fill" function (:prototype-flag t) nil [319151 319345])
            ("erc-identd-mode" function (:prototype-flag t) nil [319496 319536])
            ("erc-identd-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319538 319923])
            ("erc-identd-stop" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319925 319996])
            ("erc-create-imenu-index" function (:prototype-flag t) nil [320144 320210])
            ("erc-autojoin-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320355 320401])
            ("erc-list-mode" function (:prototype-flag t) nil [320546 320582])
            ("erc-log-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320724 320764])
            ("erc-logging-enabled" function (:prototype-flag t) nil [320766 321122])
            ("erc-save-buffer-in-logs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321124 321620])
            ("erc-match-mode" function (:prototype-flag t) nil [321768 321806])
            ("erc-add-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321808 321897])
            ("erc-delete-pal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321899 321994])
            ("erc-add-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [321996 322088])
            ("erc-delete-fool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322090 322188])
            ("erc-add-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322190 322291])
            ("erc-delete-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322293 322400])
            ("erc-add-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322402 322524])
            ("erc-delete-dangerous-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322526 322654])
            ("erc-menu-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [322799 322841])
            ("erc-netsplit-mode" function (:prototype-flag t) nil [322998 323042])
            ("erc-cmd-WHOLEFT" function (:prototype-flag t) nil [323044 323122])
            ("erc-determine-network" function (:prototype-flag t) nil [323279 323532])
            ("erc-server-select" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323534 323665])
            ("erc-notify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [323816 323862])
            ("erc-cmd-NOTIFY" function (:prototype-flag t) nil [323864 324108])
            ("pcomplete/erc-mode/NOTIFY" function (:prototype-flag t) nil [324110 324180])
            ("erc-page-mode" function (:prototype-flag t) nil [324325 324361])
            ("erc-completion-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324521 324574])
            ("erc-replace-mode" function (:prototype-flag t) nil [324728 324770])
            ("erc-ring-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [324915 324957])
            ("erc-services-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325114 325164])
            ("erc-nickserv-identify-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325166 325299])
            ("erc-nickserv-identify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325301 325494])
            ("erc-sound-mode" function (:prototype-flag t) nil [325642 325680])
            ("erc-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [325837 325993])
            ("erc-spelling-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326150 326200])
            ("erc-timestamp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326348 326396])
            ("erc-track-minor-mode" variable nil nil [326544 326702])
            ("custom-autoload" code nil nil [326704 326759])
            ("erc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [326761 327302])
            ("erc-track-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327304 327348])
            ("erc-truncate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327505 327555])
            ("erc-truncate-buffer-to-size" function (:prototype-flag t) nil [327557 327821])
            ("erc-truncate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [327823 327997])
            ("erc-xdcc-mode" function (:prototype-flag t) nil [328142 328178])
            ("erc-xdcc-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [328180 328274])
            ("ert-deftest" function (:prototype-flag t) nil [328418 329009])
            ("put" code nil nil [329011 329053])
            ("put" code nil nil [329055 329094])
            ("ert-run-tests-batch" function (:prototype-flag t) nil [329096 329502])
            ("ert-run-tests-batch-and-exit" function (:prototype-flag t) nil [329504 329853])
            ("ert-run-tests-interactively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [329855 330248])
            ("defalias" code nil nil [330250 330294])
            ("ert-describe-test" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330296 330438])
            ("put" code nil nil [330588 330639])
            ("ert-kill-all-test-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330641 330746])
            ("eshell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [330897 330978])
            ("push" code nil nil [331122 331181])
            ("eshell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331183 331719])
            ("eshell-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [331721 331903])
            ("eshell-command-result" function (:prototype-flag t) nil [331905 332269])
            ("define-obsolete-function-alias" code nil nil [332271 332347])
            ("tags-file-name" variable nil nil [332495 332731])
            ("put" code nil nil [332733 332809])
            ("put" code nil nil [332811 332862])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [332864 333092])
            ("custom-autoload" code nil nil [333094 333144])
            ("tags-table-list" variable nil nil [333146 333485])
            ("custom-autoload" code nil nil [333487 333531])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [333533 333744])
            ("custom-autoload" code nil nil [333746 333801])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [333803 334081])
            ("custom-autoload" code nil nil [334083 334127])
            ("find-tag-hook" variable nil nil [334129 334342])
            ("custom-autoload" code nil nil [334344 334386])
            ("find-tag-default-function" variable nil nil [334388 334667])
            ("custom-autoload" code nil nil [334669 334723])
            ("tags-table-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334725 334817])
            ("visit-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [334819 335365])
            ("visit-tags-table-buffer" function (:prototype-flag t) nil [335367 335949])
            ("tags-table-files" function (:prototype-flag t) nil [335951 336228])
            ("tags-completion-at-point-function" function nil nil [336230 336398])
            ("find-tag-noselect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [336400 337398])
            ("find-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [337400 338364])
            ("define-key" code nil nil [338366 338400])
            ("find-tag-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [338402 339394])
            ("define-key" code nil nil [339396 339447])
            ("find-tag-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [339449 340430])
            ("define-key" code nil nil [340432 340482])
            ("find-tag-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [340484 341385])
            ("define-key" code nil nil [341387 341432])
            ("define-key" code nil nil [341434 341472])
            ("pop-tag-mark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341474 341735])
            ("next-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [341737 342286])
            ("tags-loop-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342288 342886])
            ("define-key" code nil nil [342888 342932])
            ("tags-search" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [342934 343401])
            ("tags-query-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [343403 344116])
            ("list-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344118 344394])
            ("tags-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344396 344507])
            ("select-tags-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344509 344774])
            ("complete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [344776 345033])
            ("setup-ethiopic-environment-internal" function (:prototype-flag t) nil [345194 345274])
            ("ethio-sera-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345276 345894])
            ("ethio-sera-to-fidel-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [345896 346532])
            ("ethio-sera-to-fidel-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346534 346828])
            ("ethio-fidel-to-sera-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [346830 347538])
            ("ethio-fidel-to-sera-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [347540 348246])
            ("ethio-fidel-to-sera-marker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348248 348480])
            ("ethio-modify-vowel" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348482 348598])
            ("ethio-replace-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [348600 349109])
            ("ethio-input-special-character" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349111 349215])
            ("ethio-fidel-to-tex-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349217 349362])
            ("ethio-tex-to-fidel-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [349364 349498])
            ("ethio-fidel-to-java-buffer" function (:prototype-flag t) nil [349500 349816])
            ("ethio-java-to-fidel-buffer" function (:prototype-flag t) nil [349818 349962])
            ("ethio-find-file" function (:prototype-flag t) nil [349964 350094])
            ("ethio-write-file" function (:prototype-flag t) nil [350096 350232])
            ("ethio-insert-ethio-space" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350234 350406])
            ("ethio-composition-function" function (:prototype-flag t) nil [350408 350505])
            ("eudc-set-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350630 350856])
            ("eudc-get-email" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [350858 351039])
            ("eudc-get-phone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351041 351222])
            ("eudc-expand-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [351224 352029])
            ("eudc-query-form" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352031 352310])
            ("eudc-load-eudc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [352312 352466])
            ("cond" code nil nil [352468 354448])
            ("eudc-display-generic-binary" function (:prototype-flag t) nil [354593 354714])
            ("eudc-display-url" function (:prototype-flag t) nil [354716 354813])
            ("eudc-display-mail" function (:prototype-flag t) nil [354815 354925])
            ("eudc-display-sound" function (:prototype-flag t) nil [354927 355033])
            ("eudc-display-jpeg-inline" function (:prototype-flag t) nil [355035 355157])
            ("eudc-display-jpeg-as-button" function (:prototype-flag t) nil [355159 355269])
            ("eudc-insert-record-at-point-into-bbdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355423 355621])
            ("eudc-try-bbdb-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355623 355747])
            ("eudc-edit-hotlist" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [355904 356028])
            ("ewoc-create" function (:prototype-flag t) nil [356175 356976])
            ("eww" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357098 357285])
            ("defalias" code nil nil [357287 357314])
            ("eww-open-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357316 357394])
            ("eww-browse-url" function (:prototype-flag t) nil [357396 357473])
            ("executable-command-find-posix-p" function (:prototype-flag t) nil [357636 357830])
            ("executable-interpret" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [357832 358177])
            ("executable-set-magic" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358179 358590])
            ("executable-self-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [358592 358777])
            ("executable-make-buffer-file-executable-if-script-p" function (:prototype-flag t) nil [358779 359024])
            ("expand-add-abbrevs" function (:prototype-flag t) nil [359147 360049])
            ("expand-abbrev-hook" function (:prototype-flag t) nil [360051 360236])
            ("expand-jump-to-previous-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360238 360431])
            ("expand-jump-to-next-slot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360433 360618])
            ("define-key" code nil nil [360620 360677])
            ("define-key" code nil nil [360679 360732])
            ("f90-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [360874 363245])
            ("face-remap-add-relative" function (:prototype-flag t) nil [363388 364480])
            ("face-remap-reset-base" function (:prototype-flag t) nil [364482 364733])
            ("face-remap-set-base" function (:prototype-flag t) nil [364735 365444])
            ("text-scale-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365446 365874])
            ("text-scale-increase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [365876 366329])
            ("text-scale-decrease" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366331 366516])
            ("define-key" code nil nil [366518 366574])
            ("define-key" code nil nil [366576 366632])
            ("define-key" code nil nil [366634 366690])
            ("define-key" code nil nil [366692 366748])
            ("text-scale-adjust" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [366750 367904])
            ("buffer-face-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [367906 368289])
            ("buffer-face-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368291 368776])
            ("buffer-face-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [368778 369474])
            ("variable-pitch-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [369476 369724])
            ("push" code nil nil [369864 369922])
            ("feedmail-send-it" function (:prototype-flag t) nil [369924 370180])
            ("feedmail-run-the-queue-no-prompts" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370182 370335])
            ("feedmail-run-the-queue-global-prompt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370337 370638])
            ("feedmail-run-the-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370640 370966])
            ("feedmail-queue-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [370968 372114])
            ("ffap-next" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [372231 372653])
            ("find-file-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [372655 373120])
            ("defalias" code nil nil [373122 373158])
            ("ffap-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373160 373517])
            ("ffap-at-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373519 373845])
            ("dired-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [373847 374046])
            ("ffap-guess-file-name-at-point" function (:prototype-flag t) nil [374048 374215])
            ("ffap-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374217 374314])
            ("file-cache-add-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374454 374696])
            ("file-cache-add-directory-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [374698 375119])
            ("file-cache-add-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375121 375214])
            ("file-cache-add-directory-using-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375216 375383])
            ("file-cache-add-directory-using-locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375385 375582])
            ("file-cache-add-directory-recursively" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375584 375980])
            ("file-cache-minibuffer-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [375982 376418])
            ("file-notify-handle-event" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376560 376839])
            ("add-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [376972 377489])
            ("delete-file-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377491 377661])
            ("add-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [377663 378071])
            ("delete-file-local-variable-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378073 378241])
            ("add-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378243 378396])
            ("delete-dir-local-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378398 378545])
            ("copy-file-locals-to-dir-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378547 378661])
            ("copy-dir-locals-to-file-locals" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378663 378792])
            ("copy-dir-locals-to-file-locals-prop-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [378794 378921])
            ("filesets-init" function (:prototype-flag t) nil [379057 379209])
            ("push" code nil nil [379345 379404])
            ("find-cmd" function (:prototype-flag t) nil [379406 379837])
            ("find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [379979 380306])
            ("find-name-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380308 380687])
            ("find-grep-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [380689 381080])
            ("ff-special-constructs" variable (:default-value (\` (((\, (purecopy "^#\\s *\\(include\\|import\\)\\s +[<\"]\\(.*\\)[>\"]")) lambda nil (buffer-substring (match-beginning 2) (match-end 2)))))) nil [381219 381736])
            ("custom-autoload" code nil nil [381738 381792])
            ("ff-get-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [381794 382064])
            ("defalias" code nil nil [382066 382118])
            ("ff-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [382120 384013])
            ("ff-mouse-find-other-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384015 384115])
            ("ff-mouse-find-other-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384117 384248])
            ("find-library" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [384410 384564])
            ("find-function-search-for-symbol" function (:prototype-flag t) nil [384566 385069])
            ("find-function-noselect" function (:prototype-flag t) nil [385071 385756])
            ("find-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [385758 386289])
            ("find-function-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386291 386470])
            ("find-function-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [386472 386649])
            ("find-variable-noselect" function (:prototype-flag t) nil [386651 387153])
            ("find-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387155 387684])
            ("find-variable-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387686 387865])
            ("find-variable-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [387867 388044])
            ("find-definition-noselect" function (:prototype-flag t) nil [388046 388570])
            ("find-face-definition" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [388572 389119])
            ("find-function-on-key" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389121 389295])
            ("find-function-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389297 389417])
            ("find-variable-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389419 389539])
            ("find-function-setup-keys" function (:prototype-flag t) nil [389541 389676])
            ("find-lisp-find-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389815 389923])
            ("find-lisp-find-dired-subdirectories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [389925 390037])
            ("find-lisp-find-dired-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390039 390178])
            ("push" code nil nil [390299 390356])
            ("finder-list-keywords" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390358 390475])
            ("finder-commentary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390477 390639])
            ("finder-by-keyword" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390641 390736])
            ("enable-flow-control" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [390875 391127])
            ("enable-flow-control-on" function (:prototype-flag t) nil [391129 391513])
            ("fill-flowed-encode" function (:prototype-flag t) nil [391662 391741])
            ("fill-flowed" function (:prototype-flag t) nil [391743 391828])
            ("push" code nil nil [391981 392039])
            ("flymake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392041 392350])
            ("flymake-mode-on" function (:prototype-flag t) nil [392352 392430])
            ("flymake-mode-off" function (:prototype-flag t) nil [392432 392512])
            ("flymake-find-file-hook" function (:prototype-flag t) nil [392514 392578])
            ("flyspell-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392735 392843])
            ("flyspell-mode" variable nil nil [392844 392909])
            ("flyspell-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [392911 394172])
            ("turn-on-flyspell" function (:prototype-flag t) nil [394174 394271])
            ("turn-off-flyspell" function (:prototype-flag t) nil [394273 394372])
            ("flyspell-mode-off" function (:prototype-flag t) nil [394374 394457])
            ("flyspell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394459 394557])
            ("flyspell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [394559 394637])
            ("push" code nil nil [394769 394828])
            ("turn-on-follow-mode" function (:prototype-flag t) nil [394950 395070])
            ("turn-off-follow-mode" function (:prototype-flag t) nil [395072 395194])
            ("follow-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [395196 396622])
            ("follow-delete-other-windows-and-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [396624 397315])
            ("push" code nil nil [397461 397521])
            ("footnote-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [397523 397960])
            ("forms-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398079 398883])
            ("forms-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398885 398968])
            ("forms-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [398970 399082])
            ("fortran-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [399236 402277])
            ("fortune-add-fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402421 402647])
            ("fortune-from-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402649 402902])
            ("fortune-compile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [402904 403137])
            ("fortune-to-signature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403139 403530])
            ("fortune" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [403532 403882])
            ("frameset-session-filter-alist" variable (:default-value (quote ((name . :never) (left . frameset-filter-iconified) (minibuffer . frameset-filter-minibuffer) (top . frameset-filter-iconified)))) nil [404019 404328])
            ("frameset-persistent-filter-alist" variable (:default-value (nconc (quote ((background-color . frameset-filter-sanitize-color) (buffer-list . :never) (buffer-predicate . :never) (buried-buffer-list . :never) (font . frameset-filter-shelve-param) (foreground-color . frameset-filter-sanitize-color) (fullscreen . frameset-filter-shelve-param) (GUI:font . frameset-filter-unshelve-param) (GUI:fullscreen . frameset-filter-unshelve-param) (GUI:height . frameset-filter-unshelve-param) (GUI:width . frameset-filter-unshelve-param) (height . frameset-filter-shelve-param) (outer-window-id . :never) (parent-id . :never) (tty . frameset-filter-tty-to-GUI) (tty-type . frameset-filter-tty-to-GUI) (width . frameset-filter-shelve-param) (window-id . :never) (window-system . :never))) frameset-session-filter-alist)) nil [404330 405231])
            ("frameset-filter-alist" variable (:default-value frameset-persistent-filter-alist) nil [405233 407448])
            ("frameset-frame-id" function (:prototype-flag t) nil [407450 407885])
            ("frameset-frame-id-equal-p" function (:prototype-flag t) nil [407887 408004])
            ("frameset-frame-with-id" function (:prototype-flag t) nil [408006 408240])
            ("frameset-save" function (:prototype-flag t) nil [408242 409003])
            ("frameset-restore" function (:prototype-flag t) nil [409005 411985])
            ("frameset--jump-to-register" function (:prototype-flag t) nil [411987 412159])
            ("frameset-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [412161 412446])
            ("push" code nil nil [412592 412651])
            ("gdb-enable-debug" variable nil nil [412802 412953])
            ("custom-autoload" code nil nil [412955 413003])
            ("gdb-enable-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [413005 413443])
            ("gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [413445 416317])
            ("generic-mode-list" variable nil nil [416473 416637])
            ("define-generic-mode" function (:prototype-flag t) nil [416639 418215])
            ("put" code nil nil [418217 418268])
            ("put" code nil nil [418270 418315])
            ("generic-mode-internal" function (:prototype-flag t) nil [418317 418470])
            ("generic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [418472 418867])
            ("generic-make-keywords-list" function (:prototype-flag t) nil [418869 419370])
            ("make-obsolete" code nil nil [419372 419435])
            ("glasses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [419589 419968])
            ("gmm-regexp-concat" function (:prototype-flag t) nil [420118 420285])
            ("gmm-message" function (:prototype-flag t) nil [420287 420611])
            ("gmm-error" function (:prototype-flag t) nil [420613 420775])
            ("gmm-widget-p" function (:prototype-flag t) nil [420777 420870])
            ("gmm-tool-bar-from-list" function (:prototype-flag t) nil [420872 421719])
            ("push" code nil nil [421845 421901])
            ("when" code nil nil [421902 421981])
            ("gnus-slave-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [421983 422123])
            ("gnus-no-server" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422125 422516])
            ("gnus-slave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422518 422600])
            ("gnus-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [422602 423211])
            ("gnus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423213 423498])
            ("gnus-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423650 423728])
            ("gnus-plugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423730 423804])
            ("gnus-slave-unplugged" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423806 423914])
            ("gnus-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [423916 424324])
            ("gnus-agent-possibly-save-gcc" function (:prototype-flag t) nil [424326 424429])
            ("gnus-agent-rename-group" function (:prototype-flag t) nil [424431 424760])
            ("gnus-agent-delete-group" function (:prototype-flag t) nil [424762 425060])
            ("gnus-agent-get-undownloaded-list" function (:prototype-flag t) nil [425062 425196])
            ("gnus-agent-possibly-alter-active" function (:prototype-flag t) nil [425198 425388])
            ("gnus-agent-find-parameter" function (:prototype-flag t) nil [425390 425647])
            ("gnus-agent-batch-fetch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425649 425743])
            ("gnus-agent-batch" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425745 425845])
            ("gnus-agent-regenerate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [425847 426000])
            ("gnus-article-prepare-display" function (:prototype-flag t) nil [426147 426267])
            ("gnus-bookmark-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426429 426524])
            ("gnus-bookmark-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426526 426644])
            ("gnus-bookmark-bmenu-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [426646 426934])
            ("gnus-jog-cache" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427087 427263])
            ("gnus-cache-generate-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427265 427385])
            ("gnus-cache-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [427387 427514])
            ("gnus-cache-rename-group" function (:prototype-flag t) nil [427516 427831])
            ("gnus-cache-delete-group" function (:prototype-flag t) nil [427833 428130])
            ("gnus-delay-article" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428283 428831])
            ("gnus-delay-send-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [428833 428944])
            ("gnus-delay-initialize" function (:prototype-flag t) nil [428946 429323])
            ("gnus-user-format-function-d" function (:prototype-flag t) nil [429475 429554])
            ("gnus-user-format-function-D" function (:prototype-flag t) nil [429556 429635])
            ("turn-on-gnus-dired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [429787 429899])
            ("gnus-draft-reminder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430051 430154])
            ("gnus-random-x-face" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430301 430431])
            ("gnus-insert-random-x-face-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430433 430565])
            ("gnus-x-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430567 430773])
            ("gnus-face-from-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430775 430974])
            ("gnus-convert-face-to-png" function (:prototype-flag t) nil [430976 431129])
            ("gnus-convert-png-to-face" function (:prototype-flag t) nil [431131 431305])
            ("gnus-treat-from-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431466 431633])
            ("gnus-treat-mail-gravatar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431635 431813])
            ("gnus-fetch-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [431966 432179])
            ("gnus-fetch-group-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432181 432289])
            ("gnus-article-html" function (:prototype-flag t) nil [432439 432517])
            ("gnus-html-prefetch-images" function (:prototype-flag t) nil [432519 432596])
            ("defalias" code nil nil [432745 432790])
            ("gnus-batch-score" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [432792 432930])
            ("turn-on-gnus-mailing-list-mode" function (:prototype-flag t) nil [433073 433145])
            ("gnus-mailing-list-insinuate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433147 433318])
            ("gnus-mailing-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433320 433475])
            ("gnus-group-split-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [433628 434764])
            ("gnus-group-split-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [434766 435124])
            ("gnus-group-split" function (:prototype-flag t) nil [435126 435364])
            ("gnus-group-split-fancy" function (:prototype-flag t) nil [435366 437543])
            ("gnus-msg-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [437690 438053])
            ("gnus-button-mailto" function (:prototype-flag t) nil [438055 438140])
            ("gnus-button-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [438142 438247])
            ("define-mail-user-agent" code nil nil [438249 438368])
            ("gnus-notifications" function (:prototype-flag t) nil [438545 438899])
            ("gnus-treat-from-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439052 439196])
            ("gnus-treat-mail-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439198 439348])
            ("gnus-treat-newsgroups-picon" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [439350 439523])
            ("gnus-sorted-difference" function (:prototype-flag t) nil [439675 439887])
            ("gnus-sorted-ndifference" function (:prototype-flag t) nil [439889 440088])
            ("gnus-sorted-complement" function (:prototype-flag t) nil [440090 440272])
            ("gnus-intersection" function (:prototype-flag t) nil [440274 440348])
            ("gnus-sorted-intersection" function (:prototype-flag t) nil [440350 440512])
            ("gnus-sorted-range-intersection" function (:prototype-flag t) nil [440514 440688])
            ("defalias" code nil nil [440690 440757])
            ("gnus-sorted-nintersection" function (:prototype-flag t) nil [440759 440957])
            ("gnus-sorted-union" function (:prototype-flag t) nil [440959 441107])
            ("gnus-sorted-nunion" function (:prototype-flag t) nil [441109 441293])
            ("gnus-add-to-sorted-list" function (:prototype-flag t) nil [441295 441412])
            ("gnus-registry-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441574 441673])
            ("gnus-registry-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441675 441775])
            ("gnus-sieve-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [441926 442299])
            ("gnus-sieve-generate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442301 442632])
            ("gnus-sieve-article-add-rule" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442634 442704])
            ("gnus-update-format" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [442854 442961])
            ("gnus-declare-backend" function (:prototype-flag t) nil [443114 443256])
            ("gnus-summary-bookmark-jump" function (:prototype-flag t) nil [443403 443607])
            ("gnus-sync-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443757 443853])
            ("gnus-sync-install-hooks" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [443855 443943])
            ("gnus-add-configuration" function (:prototype-flag t) nil [444090 444225])
            ("gnutls-min-prime-bits" variable (:default-value 256) nil [444364 444760])
            ("custom-autoload" code nil nil [444762 444813])
            ("gomoku" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [444954 445718])
            ("define-obsolete-function-alias" code nil nil [445866 445951])
            ("goto-address-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [445953 446245])
            ("goto-address" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [446247 446681])
            ("put" code nil nil [446682 446729])
            ("goto-address-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [446731 447030])
            ("goto-address-prog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [447032 447170])
            ("gravatar-retrieve" function (:prototype-flag t) nil [447317 447526])
            ("gravatar-retrieve-synchronously" function (:prototype-flag t) nil [447528 447661])
            ("grep-window-height" variable nil nil [447806 447917])
            ("custom-autoload" code nil nil [447919 447965])
            ("grep-command" variable nil nil [447967 448405])
            ("custom-autoload" code nil nil [448407 448449])
            ("grep-find-command" variable nil nil [448451 448709])
            ("custom-autoload" code nil nil [448711 448758])
            ("grep-setup-hook" variable nil nil [448760 448862])
            ("custom-autoload" code nil nil [448864 448907])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^\\(.+?\\)\\(:[ 	]*\\)\\([1-9][0-9]*\\)\\2" 1 3 ((lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face))) (when mbeg (- mbeg beg))))) lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face)) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [448909 449638])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [449640 449827])
            ("find-program" variable (:default-value (purecopy "find")) nil [449829 449974])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [449976 450174])
            ("grep-find-use-xargs" variable nil nil [450176 450490])
            ("grep-history" variable nil nil [450492 450544])
            ("grep-find-history" variable nil nil [450546 450608])
            ("grep-process-setup" function (:prototype-flag t) nil [450610 450787])
            ("grep-compute-defaults" function (:prototype-flag t) nil [450789 450849])
            ("grep-mode" function (:prototype-flag t) nil [450851 450955])
            ("grep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [450957 451775])
            ("grep-find" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [451777 452136])
            ("defalias" code nil nil [452138 452170])
            ("lgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452172 452958])
            ("rgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [452960 453933])
            ("zrgrep" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [453935 454234])
            ("defalias" code nil nil [454236 454262])
            ("gs-load-image" function (:prototype-flag t) nil [454373 454732])
            ("gud-gdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [454874 455088])
            ("sdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455090 455300])
            ("dbx" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455302 455512])
            ("xdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455514 455875])
            ("perldb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [455877 456093])
            ("pdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456095 456307])
            ("jdb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456309 456938])
            ("gdb-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [456940 457026])
            ("gud-tooltip-mode" variable nil nil [457028 457329])
            ("custom-autoload" code nil nil [457331 457376])
            ("gud-tooltip-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [457378 457630])
            ("gv-get" function (:prototype-flag t) nil [457771 458261])
            ("gv-letplace" function (:prototype-flag t) nil [458263 458813])
            ("put" code nil nil [458815 458858])
            ("gv-define-expander" function (:prototype-flag t) nil [458860 459171])
            ("put" code nil nil [459173 459223])
            ("gv--defun-declaration" function (:prototype-flag t) nil [459225 459322])
            ("or" code nil nil [459324 459476])
            ("or" code nil nil [459478 459624])
            ("gv-define-setter" function (:prototype-flag t) nil [459626 460296])
            ("put" code nil nil [460298 460346])
            ("gv-define-simple-setter" function (:prototype-flag t) nil [460348 460931])
            ("setf" function (:prototype-flag t) nil [460933 461285])
            ("put" code nil nil [461287 461339])
            ("gv-ref" function (:prototype-flag t) nil [461341 461630])
            ("handwrite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [461780 462206])
            ("hanoi" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462329 462424])
            ("hanoi-unix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462426 462648])
            ("hanoi-unix-64" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [462650 462893])
            ("hashcash-insert-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463040 463170])
            ("hashcash-insert-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463172 463366])
            ("hashcash-verify-payment" function (:prototype-flag t) nil [463368 463491])
            ("mail-add-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463493 463789])
            ("mail-add-payment-async" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [463791 464033])
            ("mail-check-payment" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [464035 464209])
            ("help-at-pt-string" function (:prototype-flag t) nil [464352 464745])
            ("help-at-pt-kbd-string" function (:prototype-flag t) nil [464747 465025])
            ("display-local-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465027 465508])
            ("help-at-pt-cancel-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465510 465669])
            ("help-at-pt-set-timer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [465671 465834])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [465836 467212])
            ("custom-autoload" code nil nil [467214 467278])
            ("scan-buf-move-to-region" function (:prototype-flag t) nil [467280 468223])
            ("scan-buf-next-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [468225 469239])
            ("scan-buf-previous-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [469241 469617])
            ("describe-function" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [469754 469875])
            ("help-C-file-name" function (:prototype-flag t) nil [469877 470076])
            ("find-lisp-object-file-name" function (:prototype-flag t) nil [470078 470878])
            ("describe-function-1" function (:prototype-flag t) nil [470880 470951])
            ("variable-at-point" function (:prototype-flag t) nil [470953 471189])
            ("describe-variable" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471191 471533])
            ("describe-syntax" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471535 471785])
            ("describe-categories" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [471787 472112])
            ("doc-file-to-man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472114 472244])
            ("doc-file-to-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [472246 472375])
            ("three-step-help" variable nil nil [472518 472847])
            ("custom-autoload" code nil nil [472849 472898])
            ("help-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [473038 473240])
            ("help-mode-setup" function (:prototype-flag t) nil [473242 473301])
            ("help-mode-finish" function (:prototype-flag t) nil [473303 473363])
            ("help-setup-xref" function (:prototype-flag t) nil [473365 473959])
            ("help-buffer" function (:prototype-flag t) nil [473961 474298])
            ("help-make-xrefs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [474300 475321])
            ("help-xref-button" function (:prototype-flag t) nil [475323 475692])
            ("help-insert-xref-button" function (:prototype-flag t) nil [475694 475995])
            ("help-xref-on-pp" function (:prototype-flag t) nil [475997 476122])
            ("help-bookmark-jump" function (:prototype-flag t) nil [476124 476350])
            ("Helper-describe-bindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476503 476610])
            ("Helper-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476612 476692])
            ("hexl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [476809 480349])
            ("hexl-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480351 480572])
            ("hexlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480574 480709])
            ("hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [480843 483662])
            ("global-hi-lock-mode" variable nil nil [483664 483977])
            ("custom-autoload" code nil nil [483979 484031])
            ("global-hi-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484033 484437])
            ("defalias" code nil nil [484439 484508])
            ("hi-lock-line-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484510 484924])
            ("defalias" code nil nil [484926 484975])
            ("hi-lock-face-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [484977 485368])
            ("defalias" code nil nil [485370 485426])
            ("hi-lock-face-phrase-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [485428 486033])
            ("defalias" code nil nil [486035 486102])
            ("hi-lock-face-symbol-at-point" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486104 486526])
            ("defalias" code nil nil [486528 486581])
            ("hi-lock-unface-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486583 486934])
            ("hi-lock-write-interactive-patterns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [486936 487260])
            ("hide-ifdef-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [487411 488796])
            ("hs-special-modes-alist" variable (:default-value (mapcar (quote purecopy) (quote ((c-mode "{" "}" "/[*/]" nil nil) (c++-mode "{" "}" "/[*/]" nil nil) (bibtex-mode ("@\\S(*\\(\\s(\\)" 1)) (java-mode "{" "}" "/[*/]" nil nil) (js-mode "{" "}" "/[*/]" nil))))) nil [488953 490394])
            ("hs-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [490396 491299])
            ("turn-off-hideshow" function (:prototype-flag t) nil [491301 491402])
            ("highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [491542 492633])
            ("highlight-changes-visible-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [492635 493270])
            ("highlight-changes-remove-highlight" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [493272 493491])
            ("highlight-changes-next-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [493493 493635])
            ("highlight-changes-previous-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [493637 493787])
            ("highlight-changes-rotate-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [493789 494460])
            ("highlight-compare-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [494462 495046])
            ("highlight-compare-with-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [495048 495666])
            ("global-highlight-changes-mode" variable nil nil [495668 496021])
            ("custom-autoload" code nil nil [496023 496087])
            ("global-highlight-changes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [496089 496559])
            ("push" code nil nil [496701 496762])
            ("hippie-expand-try-functions-list" variable (:default-value (quote (try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol))) nil [496764 497235])
            ("custom-autoload" code nil nil [497237 497303])
            ("hippie-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [497305 497791])
            ("make-hippie-expand-function" function (:prototype-flag t) nil [497793 498060])
            ("hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [498194 499055])
            ("global-hl-line-mode" variable nil nil [499057 499370])
            ("custom-autoload" code nil nil [499372 499424])
            ("global-hl-line-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [499426 500007])
            ("define-obsolete-variable-alias" code nil nil [500162 500245])
            ("holiday-general-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-fixed 1 1 "New Year's Day") (holiday-float 1 1 3 "Martin Luther King Day") (holiday-fixed 2 2 "Groundhog Day") (holiday-fixed 2 14 "Valentine's Day") (holiday-float 2 1 3 "President's Day") (holiday-fixed 3 17 "St. Patrick's Day") (holiday-fixed 4 1 "April Fools' Day") (holiday-float 5 0 2 "Mother's Day") (holiday-float 5 1 -1 "Memorial Day") (holiday-fixed 6 14 "Flag Day") (holiday-float 6 0 3 "Father's Day") (holiday-fixed 7 4 "Independence Day") (holiday-float 9 1 1 "Labor Day") (holiday-float 10 1 2 "Columbus Day") (holiday-fixed 10 31 "Halloween") (holiday-fixed 11 11 "Veteran's Day") (holiday-float 11 4 4 "Thanksgiving"))))) nil [500247 501068])
            ("custom-autoload" code nil nil [501070 501126])
            ("put" code nil nil [501128 501183])
            ("define-obsolete-variable-alias" code nil nil [501185 501270])
            ("holiday-oriental-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-chinese-new-year) (if calendar-chinese-all-holidays-flag (append (holiday-chinese 1 15 "Lantern Festival") (holiday-chinese-qingming) (holiday-chinese 5 5 "Dragon Boat Festival") (holiday-chinese 7 7 "Double Seventh Festival") (holiday-chinese 8 15 "Mid-Autumn Festival") (holiday-chinese 9 9 "Double Ninth Festival") (holiday-chinese-winter-solstice))))))) nil [501272 501773])
            ("custom-autoload" code nil nil [501775 501832])
            ("put" code nil nil [501834 501890])
            ("define-obsolete-variable-alias" code nil nil [501892 501971])
            ("holiday-local-holidays" variable nil nil [501973 502087])
            ("custom-autoload" code nil nil [502089 502143])
            ("put" code nil nil [502145 502198])
            ("define-obsolete-variable-alias" code nil nil [502200 502279])
            ("holiday-other-holidays" variable nil nil [502281 502402])
            ("custom-autoload" code nil nil [502404 502458])
            ("put" code nil nil [502460 502513])
            ("hebrew-holidays-1" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-rosh-hashanah) (if calendar-hebrew-all-holidays-flag (holiday-julian 11 (let ((m displayed-month) (y displayed-year) year) (calendar-increment-month m y -1) (setq year (calendar-extract-year (calendar-julian-from-absolute (calendar-absolute-from-gregorian (list m 1 y))))) (if (zerop (% (1+ year) 4)) 22 21)) "\"Tal Umatar\" (evening)")))))) nil [502515 502986])
            ("put" code nil nil [502988 503036])
            ("hebrew-holidays-2" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (holiday-hebrew 10 (let ((h-year (calendar-extract-year (calendar-hebrew-from-absolute (calendar-absolute-from-gregorian (list displayed-month 28 displayed-year)))))) (if (= 6 (% (calendar-hebrew-to-absolute (list 10 10 h-year)) 7)) 11 10)) "Tzom Teveth")) (if calendar-hebrew-all-holidays-flag (holiday-hebrew 11 15 "Tu B'Shevat")))))) nil [503038 503552])
            ("put" code nil nil [503554 503602])
            ("hebrew-holidays-3" variable (:default-value (mapcar (quote purecopy) (quote ((if calendar-hebrew-all-holidays-flag (holiday-hebrew 11 (let* ((m displayed-month) (y displayed-year) (h-year (progn (calendar-increment-month m y 1) (calendar-extract-year (calendar-hebrew-from-absolute (calendar-absolute-from-gregorian (list m (calendar-last-day-of-month m y) y)))))) (s-s (calendar-hebrew-from-absolute (if (= 6 (% (calendar-hebrew-to-absolute (list 7 1 h-year)) 7)) (calendar-dayname-on-or-before 6 (calendar-hebrew-to-absolute (list 11 17 h-year))) (calendar-dayname-on-or-before 6 (calendar-hebrew-to-absolute (list 11 16 h-year)))))) (day (calendar-extract-day s-s))) day) "Shabbat Shirah")))))) nil [503604 504338])
            ("put" code nil nil [504340 504388])
            ("hebrew-holidays-4" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (and calendar-hebrew-all-holidays-flag (let* ((m displayed-month) (y displayed-year) (year (progn (calendar-increment-month m y -1) (calendar-extract-year (calendar-julian-from-absolute (calendar-absolute-from-gregorian (list m 1 y))))))) (= 21 (% year 28))) (holiday-julian 3 26 "Kiddush HaHamah")) (if calendar-hebrew-all-holidays-flag (holiday-hebrew-tisha-b-av)))))) nil [504390 504900])
            ("put" code nil nil [504902 504950])
            ("define-obsolete-variable-alias" code nil nil [504952 505033])
            ("holiday-hebrew-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-hebrew-passover) (holiday-hebrew-rosh-hashanah) (holiday-hebrew-hanukkah) (if calendar-hebrew-all-holidays-flag (append (holiday-hebrew-tisha-b-av) (holiday-hebrew-misc))))))) nil [505035 505350])
            ("custom-autoload" code nil nil [505352 505407])
            ("put" code nil nil [505409 505463])
            ("define-obsolete-variable-alias" code nil nil [505465 505552])
            ("holiday-christian-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-easter-etc) (holiday-fixed 12 25 "Christmas") (if calendar-christian-all-holidays-flag (append (holiday-fixed 1 6 "Epiphany") (holiday-julian 12 25 "Christmas (Julian calendar)") (holiday-greek-orthodox-easter) (holiday-fixed 8 15 "Assumption") (holiday-advent 0 "Advent"))))))) nil [505554 505978])
            ("custom-autoload" code nil nil [505980 506038])
            ("put" code nil nil [506040 506097])
            ("define-obsolete-variable-alias" code nil nil [506099 506182])
            ("holiday-islamic-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-islamic-new-year) (holiday-islamic 9 1 "Ramadan Begins") (if calendar-islamic-all-holidays-flag (append (holiday-islamic 1 10 "Ashura") (holiday-islamic 3 12 "Mulad-al-Nabi") (holiday-islamic 7 26 "Shab-e-Mi'raj") (holiday-islamic 8 15 "Shab-e-Bara't") (holiday-islamic 9 27 "Shab-e Qadr") (holiday-islamic 10 1 "Id-al-Fitr") (holiday-islamic 12 10 "Id-al-Adha"))))))) nil [506184 506694])
            ("custom-autoload" code nil nil [506696 506752])
            ("put" code nil nil [506754 506809])
            ("define-obsolete-variable-alias" code nil nil [506811 506890])
            ("holiday-bahai-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((holiday-bahai-new-year) (holiday-bahai-ridvan) (holiday-fixed 5 23 "Declaration of the B\303\241b") (holiday-fixed 5 29 "Ascension of Bah\303\241'u'll\303\241h") (holiday-fixed 7 9 "Martyrdom of the B\303\241b") (holiday-fixed 10 20 "Birth of the B\303\241b") (holiday-fixed 11 12 "Birth of Bah\303\241'u'll\303\241h") (if calendar-bahai-all-holidays-flag (append (holiday-fixed 11 26 "Day of the Covenant") (holiday-fixed 11 28 "Ascension of `Abdu'l-Bah\303\241"))))))) nil [506892 507437])
            ("custom-autoload" code nil nil [507439 507493])
            ("put" code nil nil [507495 507548])
            ("define-obsolete-variable-alias" code nil nil [507550 507629])
            ("holiday-solar-holidays" variable (:default-value (mapcar (quote purecopy) (quote ((solar-equinoxes-solstices) (holiday-sexp calendar-daylight-savings-starts (format "Daylight Saving Time Begins %s" (solar-time-string (/ calendar-daylight-savings-starts-time (float 60)) calendar-standard-time-zone-name))) (holiday-sexp calendar-daylight-savings-ends (format "Daylight Saving Time Ends %s" (solar-time-string (/ calendar-daylight-savings-ends-time (float 60)) calendar-daylight-time-zone-name))))))) nil [507631 508183])
            ("custom-autoload" code nil nil [508185 508239])
            ("put" code nil nil [508241 508294])
            ("put" code nil nil [508296 508344])
            ("holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508346 508605])
            ("list-holidays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [508607 509430])
            ("defalias" code nil nil [509432 509471])
            ("html2text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [509621 509721])
            ("push" code nil nil [509866 509929])
            ("htmlfontify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [509931 510641])
            ("htmlfontify-copy-and-link-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [510643 510952])
            ("define-ibuffer-column" function (:prototype-flag t) nil [511092 512205])
            ("define-ibuffer-sorter" function (:prototype-flag t) nil [512207 512720])
            ("define-ibuffer-op" function (:prototype-flag t) nil [512722 514368])
            ("define-ibuffer-filter" function (:prototype-flag t) nil [514370 514947])
            ("ibuffer-list-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [515081 515308])
            ("ibuffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [515310 515551])
            ("ibuffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [515553 516420])
            ("push" code nil nil [516577 516638])
            ("icalendar-export-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [516640 516901])
            ("icalendar-export-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [516903 517377])
            ("icalendar-import-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517379 517726])
            ("icalendar-import-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [517728 518432])
            ("icomplete-mode" variable nil nil [518572 518865])
            ("custom-autoload" code nil nil [518867 518916])
            ("icomplete-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [518918 519677])
            ("icon-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [519822 521248])
            ("idlwave-shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [521411 522261])
            ("push" code nil nil [522414 522475])
            ("idlwave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [522477 527437])
            ("ido-mode" variable nil nil [527551 528015])
            ("custom-autoload" code nil nil [528017 528054])
            ("ido-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528056 528571])
            ("ido-switch-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [528573 530269])
            ("ido-switch-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530271 530510])
            ("ido-display-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530512 530739])
            ("ido-kill-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530741 530924])
            ("ido-insert-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [530926 531155])
            ("ido-switch-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531157 531394])
            ("ido-find-file-in-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531396 531497])
            ("ido-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [531499 533988])
            ("ido-find-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [533990 534217])
            ("ido-find-alternate-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534219 534443])
            ("ido-find-file-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534445 534670])
            ("ido-find-file-read-only-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534672 534926])
            ("ido-find-file-read-only-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [534928 535180])
            ("ido-display-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535182 535399])
            ("ido-find-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535401 535626])
            ("ido-write-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535628 535821])
            ("ido-insert-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [535823 536028])
            ("ido-dired" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [536030 536212])
            ("ido-read-buffer" function (:prototype-flag t) nil [536214 536595])
            ("ido-read-file-name" function (:prototype-flag t) nil [536597 536888])
            ("ido-read-directory-name" function (:prototype-flag t) nil [536890 537190])
            ("ido-completing-read" function (:prototype-flag t) nil [537192 538166])
            ("ielm" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538283 538483])
            ("define-obsolete-function-alias" code nil nil [538606 538679])
            ("iimage-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [538681 538985])
            ("image-type-from-data" function (:prototype-flag t) nil [539105 539297])
            ("image-type-from-buffer" function (:prototype-flag t) nil [539299 539499])
            ("image-type-from-file-header" function (:prototype-flag t) nil [539501 539718])
            ("image-type-from-file-name" function (:prototype-flag t) nil [539720 539924])
            ("image-type" function (:prototype-flag t) nil [539926 540394])
            ("image-type-available-p" function (:prototype-flag t) nil [540396 540556])
            ("image-type-auto-detected-p" function (:prototype-flag t) nil [540558 541055])
            ("create-image" function (:prototype-flag t) nil [541057 541936])
            ("put-image" function (:prototype-flag t) nil [541938 542657])
            ("insert-image" function (:prototype-flag t) nil [542659 543509])
            ("insert-sliced-image" function (:prototype-flag t) nil [543511 544094])
            ("remove-images" function (:prototype-flag t) nil [544096 544344])
            ("find-image" function (:prototype-flag t) nil [544346 545174])
            ("defimage" function (:prototype-flag t) nil [545176 545991])
            ("put" code nil nil [545993 546027])
            ("imagemagick-register-types" function (:prototype-flag t) nil [546029 546606])
            ("push" code nil nil [546751 546816])
            ("image-dired-dired-toggle-marked-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [546818 547206])
            ("image-dired-dired-with-window-configuration" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547208 547839])
            ("image-dired-display-thumbs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [547841 548831])
            ("image-dired-show-all-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [548833 549113])
            ("defalias" code nil nil [549115 549169])
            ("define-obsolete-function-alias" code nil nil [549171 549230])
            ("image-dired-tag-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549232 549366])
            ("image-dired-delete-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549368 549527])
            ("image-dired-jump-thumbnail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549529 549631])
            ("image-dired-setup-dired-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549633 549877])
            ("image-dired-display-thumbs-append" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [549879 550008])
            ("image-dired-display-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550010 550143])
            ("image-dired-dired-display-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550145 550270])
            ("image-dired-dired-display-image" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550272 550522])
            ("image-dired-dired-comment-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550524 550647])
            ("image-dired-mark-tagged-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [550649 551075])
            ("image-dired-dired-edit-comment-and-tags" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [551077 551288])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [551431 551969])
            ("custom-autoload" code nil nil [551971 552033])
            ("image-file-name-regexps" variable nil nil [552035 552508])
            ("custom-autoload" code nil nil [552510 552569])
            ("image-file-name-regexp" function (:prototype-flag t) nil [552571 552696])
            ("insert-image-file" function (:prototype-flag t) nil [552698 552955])
            ("auto-image-file-mode" variable nil nil [552957 553274])
            ("custom-autoload" code nil nil [553276 553332])
            ("auto-image-file-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [553334 553774])
            ("image-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [553917 554145])
            ("image-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554147 554578])
            ("image-mode-as-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [554580 555174])
            ("image-bookmark-jump" function (:prototype-flag t) nil [555176 555244])
            ("imenu-sort-function" variable nil nil [555364 555900])
            ("custom-autoload" code nil nil [555902 555950])
            ("imenu-generic-expression" variable nil nil [555952 557461])
            ("put" code nil nil [557462 557517])
            ("make-variable-buffer-local" code nil nil [557519 557573])
            ("imenu-create-index-function" variable (:default-value (quote imenu-default-create-index-function)) nil [557575 557941])
            ("make-variable-buffer-local" code nil nil [557943 558000])
            ("imenu-prev-index-position-function" variable (:default-value (quote beginning-of-defun)) nil [558002 558442])
            ("make-variable-buffer-local" code nil nil [558444 558508])
            ("imenu-extract-index-name-function" variable nil nil [558510 558803])
            ("make-variable-buffer-local" code nil nil [558805 558868])
            ("imenu-name-lookup-function" variable nil nil [558870 559228])
            ("make-variable-buffer-local" code nil nil [559230 559286])
            ("imenu-default-goto-function" variable (:default-value (quote imenu-default-goto-function)) nil [559288 559491])
            ("make-variable-buffer-local" code nil nil [559493 559550])
            ("put" code nil nil [559551 559600])
            ("make-variable-buffer-local" code nil nil [559602 559650])
            ("make-variable-buffer-local" code nil nil [559652 559704])
            ("imenu-add-to-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559706 559924])
            ("imenu-add-menubar-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [559926 560130])
            ("imenu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560132 560347])
            ("indian-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560502 560633])
            ("indian-compose-string" function (:prototype-flag t) nil [560635 560706])
            ("in-is13194-post-read-conversion" function (:prototype-flag t) nil [560708 560786])
            ("in-is13194-pre-write-conversion" function (:prototype-flag t) nil [560788 560870])
            ("indian-2-column-to-ucs-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [560872 560997])
            ("inferior-lisp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [561154 561632])
            ("defalias" code nil nil [561634 561669])
            ("Info-default-directory-list" variable (:default-value (let* ((config-dir (file-name-as-directory (or (and (featurep (quote ns)) (let ((dir (expand-file-name "../info" data-directory))) (if (file-directory-p dir) dir))) configure-info-directory))) (prefixes (prune-directory-list (quote ("/usr/local/" "/usr/" "/opt/" "/")))) (suffixes (quote ("share/" "" "gnu/" "gnu/lib/" "gnu/lib/emacs/" "emacs/" "lib/" "lib/emacs/"))) (standard-info-dirs (apply (function nconc) (mapcar (lambda (pfx) (let ((dirs (mapcar (lambda (sfx) (concat pfx sfx "info/")) suffixes))) (prune-directory-list dirs))) prefixes))) (dirs (if (member config-dir standard-info-dirs) (nconc standard-info-dirs (list config-dir)) (cons config-dir standard-info-dirs)))) (if (not (eq system-type (quote windows-nt))) dirs (let* ((instdir (file-name-directory invocation-directory)) (dir1 (expand-file-name "../info/" instdir)) (dir2 (expand-file-name "../../../info/" instdir))) (cond ((file-exists-p dir1) (append dirs (list dir1))) ((file-exists-p dir2) (append dirs (list dir2))) (t dirs)))))) nil [561786 563799])
            ("info-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563801 563940])
            ("put" code nil nil [563942 563983])
            ("info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [563985 564933])
            ("info-emacs-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [564935 565027])
            ("info-emacs-bug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565029 565152])
            ("info-standalone" function (:prototype-flag t) nil [565154 565361])
            ("Info-on-current-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565363 565590])
            ("Info-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565592 565673])
            ("Info-index" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [565675 566070])
            ("info-apropos" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566072 566231])
            ("info-finder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566233 566565])
            ("Info-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [566567 570258])
            ("put" code nil nil [570260 570325])
            ("Info-goto-emacs-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570327 570663])
            ("put" code nil nil [570665 570734])
            ("Info-goto-emacs-key-command-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [570736 571149])
            ("Info-speedbar-browser" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571151 571306])
            ("Info-bookmark-jump" function (:prototype-flag t) nil [571308 571489])
            ("info-display-manual" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571491 571705])
            ("info-lookup-reset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571845 572089])
            ("put" code nil nil [572091 572135])
            ("info-lookup-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572137 572582])
            ("put" code nil nil [572584 572626])
            ("info-lookup-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [572628 573031])
            ("info-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573033 573155])
            ("info-complete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573157 573275])
            ("push" code nil nil [573414 573472])
            ("info-xref-check" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [573474 574709])
            ("info-xref-check-all" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [574711 575301])
            ("info-xref-check-all-custom" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575303 575689])
            ("info-xref-docstrings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [575691 576561])
            ("Info-tagify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [576698 576848])
            ("Info-split-threshold" variable (:default-value 262144) nil [576850 576958])
            ("custom-autoload" code nil nil [576960 577012])
            ("Info-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577014 577699])
            ("Info-validate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [577701 577863])
            ("batch-info-validate" function (:prototype-flag t) nil [577865 578195])
            ("push" code nil nil [578346 578406])
            ("inversion-require-emacs" function (:prototype-flag t) nil [578408 578633])
            ("isearch-toggle-specified-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578801 578940])
            ("isearch-toggle-input-method" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [578942 579053])
            ("isearch-process-search-multibyte-characters" function (:prototype-flag t) nil [579055 579168])
            ("push" code nil nil [579304 579363])
            ("isearchb-activate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579365 579630])
            ("iso-spanish" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [579792 580062])
            ("iso-german" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580064 580323])
            ("iso-iso2tex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580325 580592])
            ("iso-tex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580594 580861])
            ("iso-gtex2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [580863 581139])
            ("iso-iso2gtex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581141 581417])
            ("iso-iso2duden" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581419 581692])
            ("iso-iso2sgml" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581694 581959])
            ("iso-sgml2iso" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [581961 582226])
            ("iso-cvt-read-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582228 582328])
            ("iso-cvt-write-only" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582330 582432])
            ("iso-cvt-define-menu" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582434 582563])
            ("define-key" code nil nil [582734 582798])
            ("iso-transl-ctl-x-8-map" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [582800 582884])
            ("put" code nil nil [583035 583125])
            ("ispell-personal-dictionary" variable nil nil [583127 583442])
            ("custom-autoload" code nil nil [583444 583500])
            ("put" code nil nil [583502 583571])
            ("ispell-menu-map" variable nil nil [583573 583630])
            ("ispell-menu-xemacs" variable nil nil [583632 583798])
            ("ispell-menu-map-needed" variable (:default-value (and (not ispell-menu-map) (not (featurep (quote xemacs))) (quote reload))) nil [583800 583892])
            ("if" code nil nil [583894 585644])
            ("if" code nil nil [585646 586327])
            ("if" code nil nil [586329 586961])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")) ((\, (purecopy "\\(--+\\|_+\\|\\(/\\w\\|\\(\\(\\w\\|[-_]\\)+[.:@]\\)\\)\\(\\w\\|[-_]\\)*\\([.:/@]+\\(\\w\\|[-_~=?&]\\)+\\)+\\)")))))) nil [586963 587989])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [587991 588797])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [588799 589344])
            ("put" code nil nil [589345 589400])
            ("define-key" code nil nil [589402 589439])
            ("ispell-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [589441 590816])
            ("ispell-pdict-save" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [590818 590998])
            ("ispell-help" function (:prototype-flag t) nil [591000 592093])
            ("ispell-kill-ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592095 592359])
            ("ispell-change-dictionary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592361 592673])
            ("ispell-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592675 592926])
            ("ispell-comments-and-strings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [592928 593063])
            ("ispell-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593065 593176])
            ("ispell-buffer-with-debug" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593178 593388])
            ("ispell-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593390 593511])
            ("ispell-complete-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593513 593785])
            ("ispell-complete-word-interior-frag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593787 593917])
            ("ispell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [593919 594364])
            ("ispell-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [594366 595014])
            ("ispell-message" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [595016 595958])
            ("setup-japanese-environment-internal" function (:prototype-flag t) nil [596119 596199])
            ("japanese-katakana" function (:prototype-flag t) nil [596201 596678])
            ("japanese-hiragana" function (:prototype-flag t) nil [596680 596922])
            ("japanese-hankaku" function (:prototype-flag t) nil [596924 597262])
            ("japanese-zenkaku" function (:prototype-flag t) nil [597264 597506])
            ("japanese-katakana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597508 597792])
            ("japanese-hiragana-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597794 597937])
            ("japanese-hankaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [597939 598283])
            ("japanese-zenkaku-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [598285 598634])
            ("read-hiragana-string" function (:prototype-flag t) nil [598636 598880])
            ("jka-compr-inhibit" variable nil nil [599020 599234])
            ("jka-compr-handler" function (:prototype-flag t) nil [599236 599318])
            ("jka-compr-uninstall" function (:prototype-flag t) nil [599320 599560])
            ("push" code nil nil [599698 599749])
            ("js-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [599751 599827])
            ("defalias" code nil nil [599829 599865])
            ("push" code nil nil [599981 600036])
            ("keypad-setup" variable nil nil [600187 600398])
            ("custom-autoload" code nil nil [600400 600444])
            ("keypad-numlock-setup" variable nil nil [600446 600664])
            ("custom-autoload" code nil nil [600666 600718])
            ("keypad-shifted-setup" variable nil nil [600720 600937])
            ("custom-autoload" code nil nil [600939 600991])
            ("keypad-numlock-shifted-setup" variable nil nil [600993 601218])
            ("custom-autoload" code nil nil [601220 601280])
            ("keypad-setup" function (:prototype-flag t) nil [601282 602317])
            ("kinsoku" function (:prototype-flag t) nil [602479 603123])
            ("kkc-after-update-conversion-functions" variable nil nil [603273 603651])
            ("kkc-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [603653 604080])
            ("global-set-key" code nil nil [604203 604247])
            ("global-set-key" code nil nil [604249 604291])
            ("global-set-key" code nil nil [604293 604344])
            ("global-set-key" code nil nil [604346 604405])
            ("global-set-key" code nil nil [604407 604454])
            ("global-set-key" code nil nil [604456 604498])
            ("kmacro-keymap" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [604500 604582])
            ("kmacro-exec-ring-item" function (:prototype-flag t) nil [604584 604741])
            ("kmacro-start-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [604743 605750])
            ("kmacro-end-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [605752 606215])
            ("kmacro-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606217 606861])
            ("kmacro-start-macro-or-insert-counter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [606863 607612])
            ("kmacro-end-or-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607614 607885])
            ("kmacro-end-and-call-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [607887 608271])
            ("kmacro-end-call-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [608273 608479])
            ("default-korean-keyboard" variable (:default-value (purecopy (if (string-match "3" (or (getenv "HANGUL_KEYBOARD_TYPE") "")) "3" ""))) nil [608640 608836])
            ("setup-korean-environment-internal" function (:prototype-flag t) nil [608838 608916])
            ("defalias" code nil nil [609063 609109])
            ("landmark-test-run" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [609111 609245])
            ("landmark" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [609247 609927])
            ("lao-compose-string" function (:prototype-flag t) nil [610082 610147])
            ("lao-transcribe-single-roman-syllable-to-lao" function (:prototype-flag t) nil [610149 610685])
            ("lao-transcribe-roman-to-lao-string" function (:prototype-flag t) nil [610687 610828])
            ("lao-composition-function" function (:prototype-flag t) nil [610830 610905])
            ("lao-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [610907 610974])
            ("latex-inputenc-coding-alist" variable (:default-value (purecopy (quote (("ansinew" . windows-1252) ("applemac" . mac-roman) ("ascii" . us-ascii) ("cp1250" . windows-1250) ("cp1252" . windows-1252) ("cp1257" . cp1257) ("cp437de" . cp437) ("cp437" . cp437) ("cp850" . cp850) ("cp852" . cp852) ("cp858" . cp858) ("cp865" . cp865) ("latin1" . iso-8859-1) ("latin2" . iso-8859-2) ("latin3" . iso-8859-3) ("latin4" . iso-8859-4) ("latin5" . iso-8859-5) ("latin9" . iso-8859-15) ("next" . next) ("utf8" . utf-8) ("utf8x" . utf-8))))) nil [611139 611848])
            ("custom-autoload" code nil nil [611850 611909])
            ("latexenc-inputenc-to-coding-system" function (:prototype-flag t) nil [611911 612123])
            ("latexenc-coding-system-to-inputenc" function (:prototype-flag t) nil [612125 612332])
            ("latexenc-find-file-coding-system" function (:prototype-flag t) nil [612334 612626])
            ("latin1-display" variable nil nil [612800 613503])
            ("custom-autoload" code nil nil [613505 613556])
            ("latin1-display" function (:prototype-flag t) nil [613558 613899])
            ("latin1-display-ucs-per-lynx" variable nil nil [613901 614236])
            ("custom-autoload" code nil nil [614238 614302])
            ("ld-script-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614462 614558])
            ("life" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [614685 614950])
            ("push" code nil nil [615069 615128])
            ("linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615130 615453])
            ("global-linum-mode" variable nil nil [615455 615760])
            ("custom-autoload" code nil nil [615762 615810])
            ("global-linum-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [615812 616184])
            ("unload-feature" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [616321 617495])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [617618 617817])
            ("custom-autoload" code nil nil [617819 617874])
            ("locate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [617876 618940])
            ("locate-with-filter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [618942 619702])
            ("log-edit" function (:prototype-flag t) nil [619845 621085])
            ("log-view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [621228 621321])
            ("lpr-windows-system" variable (:default-value (memq system-type (quote (ms-dos windows-nt)))) nil [621435 621550])
            ("lpr-lp-system" variable (:default-value (memq system-type (quote (usg-unix-v hpux irix)))) nil [621552 621687])
            ("printer-name" variable (:default-value (and (eq system-type (quote ms-dos)) "PRN")) nil [621689 622503])
            ("custom-autoload" code nil nil [622505 622544])
            ("lpr-switches" variable nil nil [622546 622754])
            ("custom-autoload" code nil nil [622756 622795])
            ("lpr-command" variable (:default-value (purecopy (cond (lpr-windows-system "") (lpr-lp-system "lp") (t "lpr")))) nil [622797 623363])
            ("custom-autoload" code nil nil [623365 623403])
            ("lpr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623405 623601])
            ("print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [623603 624169])
            ("lpr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624171 624377])
            ("print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [624379 624959])
            ("ls-lisp-support-shell-wildcards" variable (:default-value t) nil [625093 625276])
            ("custom-autoload" code nil nil [625278 625340])
            ("lunar-phases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625486 625759])
            ("define-obsolete-function-alias" code nil nil [625761 625830])
            ("m4-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [625984 626067])
            ("name-last-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626190 626493])
            ("insert-kbd-macro" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [626495 627193])
            ("kbd-macro-query" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627195 627854])
            ("apply-macro-to-region-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [627856 629323])
            ("define-key" code nil nil [629325 629368])
            ("mail-extract-address-components" function (:prototype-flag t) nil [629518 630441])
            ("what-domain" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [630443 630563])
            ("mail-hist-define-keys" function (:prototype-flag t) nil [630713 630843])
            ("mail-hist-enable" function (:prototype-flag t) nil [630845 630905])
            ("mail-hist-keep-history" variable (:default-value t) nil [630907 631012])
            ("custom-autoload" code nil nil [631014 631069])
            ("mail-hist-put-headers-into-history" function (:prototype-flag t) nil [631071 631359])
            ("mail-use-rfc822" variable nil nil [631512 631690])
            ("custom-autoload" code nil nil [631692 631741])
            ("mail-dont-reply-to-names" variable nil nil [631743 632084])
            ("custom-autoload" code nil nil [632086 632144])
            ("mail-file-babyl-p" function (:prototype-flag t) nil [632146 632252])
            ("mail-quote-printable" function (:prototype-flag t) nil [632254 632608])
            ("mail-quote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [632610 632862])
            ("mail-unquote-printable" function (:prototype-flag t) nil [632864 633115])
            ("mail-unquote-printable-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [633117 633763])
            ("mail-fetch-field" function (:prototype-flag t) nil [633765 634241])
            ("mail-abbrevs-mode" variable nil nil [634394 634699])
            ("custom-autoload" code nil nil [634701 634754])
            ("mail-abbrevs-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [634756 635285])
            ("mail-abbrevs-setup" function (:prototype-flag t) nil [635287 635393])
            ("build-mail-abbrevs" function (:prototype-flag t) nil [635395 635624])
            ("define-mail-abbrev" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [635626 636068])
            ("mail-complete-style" variable (:default-value (quote angles)) nil [636218 636534])
            ("custom-autoload" code nil nil [636536 636588])
            ("expand-mail-aliases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [636590 637001])
            ("define-mail-alias" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637003 637462])
            ("mail-completion-at-point-function" function (:prototype-flag t) nil [637464 637626])
            ("mail-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [637628 637900])
            ("make-obsolete" code nil nil [637902 637975])
            ("mailclient-send-it" function (:prototype-flag t) nil [638128 638342])
            ("makefile-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [638502 641803])
            ("makefile-automake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641805 641922])
            ("makefile-gmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [641924 642035])
            ("makefile-makepp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642037 642150])
            ("makefile-bsdmake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642152 642268])
            ("makefile-imake-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642270 642381])
            ("make-command-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642515 642689])
            ("defalias" code nil nil [642803 642832])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [642834 644023])
            ("man-follow" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644025 644150])
            ("Man-bookmark-jump" function (:prototype-flag t) nil [644152 644257])
            ("push" code nil nil [644379 644438])
            ("master-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [644440 644995])
            ("minibuffer-depth-indicate-mode" variable nil nil [645132 645489])
            ("custom-autoload" code nil nil [645491 645555])
            ("minibuffer-depth-indicate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [645557 646092])
            ("push" code nil nil [646205 646259])
            ("define-mail-user-agent" code nil nil [646403 646524])
            ("message-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [646526 648940])
            ("message-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [648942 649351])
            ("message-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649353 649474])
            ("message-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649476 649630])
            ("message-wide-reply" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649632 649770])
            ("message-followup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649772 649954])
            ("message-cancel-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [649956 650109])
            ("message-supersede" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650111 650334])
            ("message-recover" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650336 650454])
            ("message-forward" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650456 650670])
            ("message-forward-make-body" function (:prototype-flag t) nil [650672 650771])
            ("message-forward-rmail-make-body" function (:prototype-flag t) nil [650773 650861])
            ("message-insinuate-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650863 650959])
            ("message-resend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [650961 651061])
            ("message-bounce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651063 651287])
            ("message-mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651289 651446])
            ("message-mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651448 651603])
            ("message-news-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651605 651739])
            ("message-news-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651741 651874])
            ("message-bold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [651876 652116])
            ("message-unbold-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652118 652341])
            ("push" code nil nil [652500 652560])
            ("metafont-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652562 652657])
            ("metapost-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652659 652754])
            ("metamail-interpret-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [652901 653068])
            ("metamail-interpret-body" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653070 653464])
            ("metamail-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653466 653878])
            ("metamail-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [653880 654300])
            ("mh-smail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654444 654584])
            ("mh-smail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [654586 654755])
            ("mh-smail-batch" function (:prototype-flag t) nil [654757 655315])
            ("define-mail-user-agent" code nil nil [655317 655446])
            ("mh-user-agent-compose" function (:prototype-flag t) nil [655448 656248])
            ("mh-send-letter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [656250 657333])
            ("mh-fully-kill-draft" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657335 657645])
            ("push" code nil nil [657771 657826])
            ("put" code nil nil [657828 657867])
            ("put" code nil nil [657869 657906])
            ("put" code nil nil [657908 657951])
            ("mh-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [657953 658071])
            ("mh-rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658221 658436])
            ("mh-nmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658438 658659])
            ("mh-folder-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [658661 660402])
            ("clean-buffer-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [660539 661161])
            ("midnight-delay-set" function (:prototype-flag t) nil [661163 661382])
            ("minibuffer-electric-default-mode" variable nil nil [661534 661899])
            ("custom-autoload" code nil nil [661901 661972])
            ("minibuffer-electric-default-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [661974 662649])
            ("butterfly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [662766 663340])
            ("list-dynamic-libraries" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [663342 663786])
            ("add-hook" code nil nil [663923 663973])
            ("multi-isearch-next-buffer-function" variable nil nil [663975 665014])
            ("multi-isearch-next-buffer-current-function" variable nil nil [665016 665214])
            ("multi-isearch-current-buffer" variable nil nil [665216 665378])
            ("multi-isearch-setup" function (:prototype-flag t) nil [665380 665529])
            ("multi-isearch-buffers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665531 665875])
            ("multi-isearch-buffers-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [665877 666235])
            ("multi-isearch-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666237 666662])
            ("multi-isearch-files-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [666664 667103])
            ("push" code nil nil [667265 667326])
            ("mixal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [667328 667419])
            ("mm-default-file-encoding" function (:prototype-flag t) nil [667569 667677])
            ("mm-extern-cache-contents" function (:prototype-flag t) nil [667827 667954])
            ("mm-inline-external-body" function (:prototype-flag t) nil [667956 668249])
            ("mm-inline-partial" function (:prototype-flag t) nil [668402 668684])
            ("mm-url-insert-file-contents" function (:prototype-flag t) nil [668825 668984])
            ("mm-url-insert-file-contents-external" function (:prototype-flag t) nil [668986 669118])
            ("mm-uu-dissect" function (:prototype-flag t) nil [669256 669562])
            ("mm-uu-dissect-text-parts" function (:prototype-flag t) nil [669564 669755])
            ("mml-to-mime" function (:prototype-flag t) nil [669879 669974])
            ("mml-attach-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [669976 670673])
            ("mml1991-encrypt" function (:prototype-flag t) nil [670817 670894])
            ("mml1991-sign" function (:prototype-flag t) nil [670896 670955])
            ("mml2015-decrypt" function (:prototype-flag t) nil [671099 671167])
            ("mml2015-decrypt-test" function (:prototype-flag t) nil [671169 671242])
            ("mml2015-verify" function (:prototype-flag t) nil [671244 671311])
            ("mml2015-verify-test" function (:prototype-flag t) nil [671313 671385])
            ("mml2015-encrypt" function (:prototype-flag t) nil [671387 671464])
            ("mml2015-sign" function (:prototype-flag t) nil [671466 671525])
            ("mml2015-self-encrypt" function (:prototype-flag t) nil [671527 671589])
            ("put" code nil nil [671744 671797])
            ("defalias" code nil nil [671945 671979])
            ("m2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [671981 673127])
            ("morse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673265 673372])
            ("unmorse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673374 673492])
            ("nato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673494 673612])
            ("denato-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673614 673737])
            ("mouse-drag-throw" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [673880 674817])
            ("mouse-drag-drag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [674819 675436])
            ("mpc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675550 675614])
            ("mpuz" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [675741 675819])
            ("msb-mode" variable nil nil [675933 676202])
            ("custom-autoload" code nil nil [676204 676241])
            ("msb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676243 676591])
            ("list-character-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [676759 677253])
            ("read-charset" function (:prototype-flag t) nil [677255 677785])
            ("list-charset-chars" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677787 677909])
            ("describe-character-set" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [677911 678040])
            ("describe-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [678042 678160])
            ("describe-current-coding-system-briefly" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [678162 679336])
            ("describe-current-coding-system" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [679338 679459])
            ("list-coding-systems" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [679461 679767])
            ("list-coding-categories" function (:prototype-flag t) nil [679769 679875])
            ("describe-font" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [679877 680037])
            ("describe-fontset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680039 680193])
            ("list-fontsets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680195 680467])
            ("list-input-methods" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680469 680573])
            ("mule-diag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680575 680908])
            ("font-show-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [680910 681149])
            ("string-to-list" function (:arguments ("string")) nil [681317 681414])
            ("string-to-vector" function (:arguments ("string")) nil [681416 681514])
            ("store-substring" function (:prototype-flag t) nil [681516 681645])
            ("truncate-string-to-width" function (:prototype-flag t) nil [681647 682894])
            ("nested-alist-p" function (:arguments ("obj")) nil [682896 683351])
            ("set-nested-alist" function (:prototype-flag t) nil [683353 683731])
            ("lookup-nested-alist" function (:prototype-flag t) nil [683733 684376])
            ("coding-system-post-read-conversion" function (:prototype-flag t) nil [684378 684538])
            ("coding-system-pre-write-conversion" function (:prototype-flag t) nil [684540 684700])
            ("coding-system-translation-table-for-decode" function (:prototype-flag t) nil [684702 684874])
            ("coding-system-translation-table-for-encode" function (:prototype-flag t) nil [684876 685048])
            ("with-coding-priority" function (:prototype-flag t) nil [685050 685415])
            ("put" code nil nil [685416 685467])
            ("detect-coding-with-priority" function (:prototype-flag t) nil [685469 685738])
            ("make-obsolete" code nil nil [685740 685814])
            ("detect-coding-with-language-environment" function (:prototype-flag t) nil [685816 686087])
            ("char-displayable-p" function (:prototype-flag t) nil [686089 686441])
            ("ifconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686589 686682])
            ("iwconfig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686684 686777])
            ("netstat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686779 686870])
            ("arp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686872 686955])
            ("route" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [686957 687044])
            ("traceroute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687046 687139])
            ("ping" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687141 687297])
            ("nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687299 687395])
            ("nslookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687397 687468])
            ("dns-lookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687470 687589])
            ("run-dig" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687591 687661])
            ("ftp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687663 687729])
            ("finger" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687731 687809])
            ("whois" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [687811 688084])
            ("whois-reverse-lookup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688086 688148])
            ("network-connection-to-service" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688150 688279])
            ("network-connection" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [688281 688393])
            ("netrc-credentials" function (:prototype-flag t) nil [688529 688727])
            ("open-network-stream" function (:prototype-flag t) nil [688890 692741])
            ("defalias" code nil nil [692743 692796])
            ("newsticker-running-p" function (:prototype-flag t) nil [692956 693193])
            ("newsticker-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693195 693558])
            ("newsticker-plainview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693724 693819])
            ("newsticker-show-news" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [693976 694097])
            ("newsticker-ticker-running-p" function (:prototype-flag t) nil [694254 694509])
            ("newsticker-start-ticker" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694511 694711])
            ("newsticker-treeview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [694874 694966])
            ("push" code nil nil [695116 695178])
            ("nndiary-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [695322 695459])
            ("nndoc-add-type" function (:prototype-flag t) nil [695597 695945])
            ("nnfolder-generate-active-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [696092 696293])
            ("nnml-generate-nov-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [696420 696548])
            ("define-obsolete-variable-alias" code nil nil [696671 696760])
            ("disabled-command-function" variable (:default-value (quote disabled-command-function)) nil [696762 696940])
            ("disabled-command-function" function (:prototype-flag t) nil [696942 697027])
            ("enable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697029 697273])
            ("disable-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697275 697506])
            ("nroff-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [697669 697990])
            ("push" code nil nil [698114 698169])
            ("nxml-glyph-display-string" function (:prototype-flag t) nil [698322 698583])
            ("nxml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [698733 701281])
            ("defalias" code nil nil [701282 701313])
            ("nxml-enable-unicode-char-name-sets" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [701466 701707])
            ("octave-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [701858 702304])
            ("inferior-octave" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [702306 702873])
            ("defalias" code nil nil [702875 702914])
            ("define-obsolete-function-alias" code nil nil [703068 703134])
            ("opascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [703136 704199])
            ("org-babel-do-load-languages" function (:prototype-flag t) nil [704321 704453])
            ("org-babel-load-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704455 704820])
            ("org-version" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [704822 705100])
            ("turn-on-orgtbl" function (:prototype-flag t) nil [705102 705192])
            ("org-clock-persistence-insinuate" function (:prototype-flag t) nil [705194 705298])
            ("org-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [705300 706179])
            ("org-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [706181 708508])
            ("org-global-cycle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708510 708764])
            ("put" code nil nil [708765 708833])
            ("orgstruct-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [708835 709147])
            ("turn-on-orgstruct" function (:prototype-flag t) nil [709149 709245])
            ("turn-on-orgstruct++" function (:prototype-flag t) nil [709247 709347])
            ("org-run-like-in-org-mode" function (:prototype-flag t) nil [709349 709630])
            ("org-store-link" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [709632 710200])
            ("org-insert-link-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710202 710369])
            ("org-open-at-point-global" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710371 710546])
            ("org-open-link-from-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710548 710696])
            ("org-switchb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [710698 711029])
            ("defalias" code nil nil [711031 711071])
            ("defalias" code nil nil [711073 711110])
            ("org-cycle-agenda-files" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711112 711352])
            ("org-submit-bug-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711354 711711])
            ("org-reload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711713 711864])
            ("org-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [711866 711964])
            ("org-toggle-sticky-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712115 712223])
            ("org-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [712225 714003])
            ("org-batch-agenda" function (:prototype-flag t) nil [714005 714443])
            ("org-batch-agenda-csv" function (:prototype-flag t) nil [714445 716227])
            ("org-store-agenda-views" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716229 716330])
            ("org-batch-store-agenda-views" function (:prototype-flag t) nil [716332 716477])
            ("org-agenda-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [716479 717199])
            ("org-search-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [717201 719523])
            ("org-todo-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719525 719905])
            ("org-tags-view" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [719907 720121])
            ("org-agenda-list-stuck-projects" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [720123 720427])
            ("org-diary" function (:prototype-flag t) nil [720429 721592])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:prototype-flag t) nil [721594 721787])
            ("org-agenda-set-restriction-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [721789 722142])
            ("org-calendar-goto-agenda" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722144 722352])
            ("org-agenda-to-appt" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [722354 723594])
            ("org-capture-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723748 723882])
            ("org-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [723884 725100])
            ("org-capture-import-remember-templates" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725102 725253])
            ("org-columns-remove-overlays" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725407 725522])
            ("org-columns-get-format-and-top-level" function (:prototype-flag t) nil [725524 725606])
            ("org-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725608 725797])
            ("org-columns-compute" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [725799 725945])
            ("org-columns-number-to-string" function (:prototype-flag t) nil [725947 726113])
            ("org-dblock-write:columnview" function (:prototype-flag t) nil [726115 727153])
            ("org-insert-columns-dblock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727155 727277])
            ("org-agenda-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [727279 727385])
            ("org-check-version" function (:prototype-flag t) nil [727536 727646])
            ("org-load-noerror-mustsuffix" function (:prototype-flag t) nil [727791 727991])
            ("org-release" function (:prototype-flag t) nil [728139 728289])
            ("org-git-version" function (:prototype-flag t) nil [728291 728441])
            ("put" code nil nil [728574 728625])
            ("put" code nil nil [728626 728689])
            ("outline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [728691 730886])
            ("outline-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [730888 731217])
            ("put" code nil nil [731218 731262])
            ("push" code nil nil [731417 731477])
            ("package-enable-at-startup" variable (:default-value t) nil [731479 731866])
            ("custom-autoload" code nil nil [731868 731924])
            ("package-install" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [731926 732159])
            ("package-install-from-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732161 732457])
            ("package-install-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732459 732611])
            ("package-import-keyring" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732613 732712])
            ("package-refresh-contents" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732714 732927])
            ("package-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [732929 733184])
            ("describe-package" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [733186 733303])
            ("list-packages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [733305 733573])
            ("defalias" code nil nil [733575 733623])
            ("show-paren-mode" variable nil nil [733743 734040])
            ("custom-autoload" code nil nil [734042 734088])
            ("show-paren-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [734090 734547])
            ("put" code nil nil [734707 734754])
            ("parse-time-string" function (:prototype-flag t) nil [734756 735003])
            ("pascal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [735154 737146])
            ("password-cache" variable (:default-value t) nil [737301 737358])
            ("custom-autoload" code nil nil [737360 737412])
            ("password-cache-expiry" variable (:default-value 16) nil [737414 737589])
            ("custom-autoload" code nil nil [737591 737650])
            ("password-in-cache-p" function (:prototype-flag t) nil [737652 737753])
            ("pcase" function (:prototype-flag t) nil [737903 739585])
            ("put" code nil nil [739587 739624])
            ("pcase-let*" function (:prototype-flag t) nil [739626 739854])
            ("put" code nil nil [739856 739898])
            ("pcase-let" function (:prototype-flag t) nil [739900 740134])
            ("put" code nil nil [740136 740177])
            ("pcomplete/cvs" function (:prototype-flag t) nil [740317 740413])
            ("pcomplete/gzip" function (:prototype-flag t) nil [740553 740633])
            ("pcomplete/bzip2" function (:prototype-flag t) nil [740635 740717])
            ("pcomplete/make" function (:prototype-flag t) nil [740719 740803])
            ("pcomplete/tar" function (:prototype-flag t) nil [740805 740897])
            ("defalias" code nil nil [740899 740941])
            ("pcomplete/kill" function (:prototype-flag t) nil [741087 741203])
            ("pcomplete/umount" function (:prototype-flag t) nil [741205 741301])
            ("pcomplete/mount" function (:prototype-flag t) nil [741303 741397])
            ("pcomplete/rpm" function (:prototype-flag t) nil [741537 741627])
            ("pcomplete/cd" function (:prototype-flag t) nil [741770 741847])
            ("defalias" code nil nil [741849 741890])
            ("pcomplete/rmdir" function (:prototype-flag t) nil [741892 741975])
            ("pcomplete/rm" function (:prototype-flag t) nil [741977 742054])
            ("pcomplete/xargs" function (:prototype-flag t) nil [742056 742139])
            ("defalias" code nil nil [742141 742184])
            ("pcomplete/which" function (:prototype-flag t) nil [742186 742269])
            ("pcomplete/chown" function (:prototype-flag t) nil [742271 742366])
            ("pcomplete/chgrp" function (:prototype-flag t) nil [742368 742463])
            ("pcomplete/ssh" function (:prototype-flag t) nil [742465 742562])
            ("pcomplete/scp" function (:prototype-flag t) nil [742564 742719])
            ("pcomplete/tlmgr" function (:prototype-flag t) nil [742853 742945])
            ("pcomplete/ack" function (:prototype-flag t) nil [742947 743115])
            ("defalias" code nil nil [743117 743162])
            ("pcomplete/ag" function (:prototype-flag t) nil [743164 743250])
            ("pcomplete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743390 743647])
            ("pcomplete-reverse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743649 743757])
            ("pcomplete-expand-and-complete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743759 743916])
            ("pcomplete-continue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [743918 744032])
            ("pcomplete-expand" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744034 744178])
            ("pcomplete-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744180 744298])
            ("pcomplete-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744300 744419])
            ("pcomplete-comint-setup" function (:prototype-flag t) nil [744421 744692])
            ("pcomplete-shell-setup" function (:prototype-flag t) nil [744694 744795])
            ("cvs-checkout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [744918 745185])
            ("cvs-quickdir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745187 745567])
            ("cvs-examine" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [745569 746077])
            ("cvs-update" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746079 746531])
            ("cvs-status" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [746533 746978])
            ("cvs-dired-action" variable (:default-value (quote cvs-quickdir)) nil [746980 747148])
            ("custom-autoload" code nil nil [747150 747194])
            ("cvs-dired-use-hook" variable (:default-value (quote (4))) nil [747196 747527])
            ("custom-autoload" code nil nil [747529 747575])
            ("cvs-dired-noselect" function (:arguments ("dir")) nil [747577 748111])
            ("cvs-global-menu" variable (:default-value (let ((m (make-sparse-keymap "PCL-CVS"))) (define-key m [status] (\` (menu-item (\, (purecopy "Directory Status")) cvs-status :help (\, (purecopy "A more verbose status of a workarea"))))) (define-key m [checkout] (\` (menu-item (\, (purecopy "Checkout Module")) cvs-checkout :help (\, (purecopy "Check out a module from the repository"))))) (define-key m [update] (\` (menu-item (\, (purecopy "Update Directory")) cvs-update :help (\, (purecopy "Fetch updates from the repository"))))) (define-key m [examine] (\` (menu-item (\, (purecopy "Examine Directory")) cvs-examine :help (\, (purecopy "Examine the current state of a workarea"))))) (fset (quote cvs-global-menu) m))) nil [748257 748934])
            ("put" code nil nil [749093 749148])
            ("put" code nil nil [749149 749218])
            ("put" code nil nil [749219 749284])
            ("put" code nil nil [749285 749340])
            ("put" code nil nil [749341 749406])
            ("put" code nil nil [749407 749462])
            ("perl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [749464 751670])
            ("picture-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [751824 755582])
            ("defalias" code nil nil [755584 755622])
            ("plstore-open" function (:prototype-flag t) nil [755766 755872])
            ("plstore-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [755874 755963])
            ("po-find-file-coding-system" function (:prototype-flag t) nil [756102 756322])
            ("pong" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [756449 756699])
            ("pop3-movemail" function (:prototype-flag t) nil [756826 756961])
            ("pp-to-string" function (:prototype-flag t) nil [757102 757365])
            ("pp-buffer" function (:prototype-flag t) nil [757367 757486])
            ("pp" function (:prototype-flag t) nil [757488 757794])
            ("pp-eval-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [757796 757977])
            ("pp-macroexpand-expression" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [757979 758100])
            ("pp-eval-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758102 758296])
            ("pp-macroexpand-last-sexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758298 758506])
            ("push" code nil nil [758642 758703])
            ("pr-interface" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758705 758925])
            ("pr-ps-directory-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [758927 759776])
            ("pr-ps-directory-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [759778 760656])
            ("pr-ps-directory-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [760658 761512])
            ("pr-ps-directory-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [761514 762439])
            ("pr-ps-buffer-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [762441 763079])
            ("pr-ps-buffer-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763081 763739])
            ("pr-ps-buffer-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [763741 764375])
            ("pr-ps-buffer-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [764377 765082])
            ("pr-ps-region-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765084 765234])
            ("pr-ps-region-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765236 765425])
            ("pr-ps-region-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765427 765580])
            ("pr-ps-region-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765582 765764])
            ("pr-ps-mode-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765766 765918])
            ("pr-ps-mode-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [765920 766111])
            ("pr-ps-mode-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766113 766268])
            ("pr-ps-mode-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766270 766446])
            ("pr-printify-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [766448 767011])
            ("pr-printify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767013 767294])
            ("pr-printify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767296 767577])
            ("pr-txt-directory" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767579 767947])
            ("pr-txt-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [767949 768035])
            ("pr-txt-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768037 768123])
            ("pr-txt-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768125 768213])
            ("pr-despool-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768215 768706])
            ("pr-despool-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [768708 769216])
            ("pr-despool-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769218 769714])
            ("pr-despool-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [769716 770246])
            ("pr-ps-file-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770248 770349])
            ("pr-ps-file-up-preview" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770351 770481])
            ("pr-ps-file-using-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770483 770610])
            ("pr-ps-file-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770612 770709])
            ("pr-ps-file-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770711 770852])
            ("pr-ps-file-up-ps-print" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [770854 771771])
            ("pr-toggle-file-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771773 771869])
            ("pr-toggle-file-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [771871 772129])
            ("pr-toggle-file-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772131 772233])
            ("pr-toggle-ghostscript" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772235 772331])
            ("pr-toggle-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772333 772416])
            ("pr-toggle-spool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772418 772490])
            ("pr-toggle-duplex" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772492 772563])
            ("pr-toggle-tumble" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772565 772798])
            ("pr-toggle-landscape" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772800 772877])
            ("pr-toggle-upside-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772879 772960])
            ("pr-toggle-line" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [772962 773036])
            ("pr-toggle-zebra" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773038 773115])
            ("pr-toggle-header" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773117 773197])
            ("pr-toggle-header-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773199 773291])
            ("pr-toggle-lock" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773293 773365])
            ("pr-toggle-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773367 773476])
            ("pr-toggle-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773478 773550])
            ("pr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773552 773656])
            ("lpr-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773658 773758])
            ("pr-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773760 773851])
            ("pr-ps-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773853 773946])
            ("pr-txt-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [773948 774036])
            ("pr-ps-utility" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774038 774134])
            ("pr-show-ps-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774136 774237])
            ("pr-show-pr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774239 774340])
            ("pr-show-lpr-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774342 774439])
            ("pr-ps-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [774441 776953])
            ("pr-txt-fast-fire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [776955 777945])
            ("proced" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778068 778424])
            ("profiler-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778561 778835])
            ("profiler-find-profile" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778837 778930])
            ("profiler-find-profile-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [778932 779038])
            ("profiler-find-profile-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779040 779145])
            ("prolog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779296 779703])
            ("mercury-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779705 779844])
            ("run-prolog" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [779846 780040])
            ("bdf-directory-list" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt))) (list (expand-file-name "fonts/bdf" installation-directory)) (quote ("/usr/local/share/emacs/fonts/bdf")))) nil [780163 780452])
            ("custom-autoload" code nil nil [780454 780502])
            ("push" code nil nil [780655 780715])
            ("ps-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [780717 781818])
            ("push" code nil nil [781954 782015])
            ("ps-page-dimensions-database" variable (:default-value (purecopy (list (list (quote a4) (/ (* 72 21.0) 2.54) (/ (* 72 29.7) 2.54) "A4") (list (quote a3) (/ (* 72 29.7) 2.54) (/ (* 72 42.0) 2.54) "A3") (list (quote letter) (* 72 8.5) (* 72 11.0) "Letter") (list (quote legal) (* 72 8.5) (* 72 14.0) "Legal") (list (quote letter-small) (* 72 7.68) (* 72 10.16) "LetterSmall") (list (quote tabloid) (* 72 11.0) (* 72 17.0) "Tabloid") (list (quote ledger) (* 72 17.0) (* 72 11.0) "Ledger") (list (quote statement) (* 72 5.5) (* 72 8.5) "Statement") (list (quote executive) (* 72 7.5) (* 72 10.0) "Executive") (list (quote a4small) (* 72 7.47) (* 72 10.85) "A4Small") (list (quote b4) (* 72 10.125) (* 72 14.33) "B4") (list (quote b5) (* 72 7.16) (* 72 10.125) "B5") (quote (addresslarge 236.0 99.0 "AddressLarge")) (quote (addresssmall 236.0 68.0 "AddressSmall")) (quote (cuthanging13 90.0 222.0 "CutHanging13")) (quote (cuthanging15 90.0 114.0 "CutHanging15")) (quote (diskette 181.0 136.0 "Diskette")) (quote (eurofilefolder 139.0 112.0 "EuropeanFilefolder")) (quote (eurofoldernarrow 526.0 107.0 "EuroFolderNarrow")) (quote (eurofolderwide 526.0 136.0 "EuroFolderWide")) (quote (euronamebadge 189.0 108.0 "EuroNameBadge")) (quote (euronamebadgelarge 223.0 136.0 "EuroNameBadgeLarge")) (quote (filefolder 230.0 37.0 "FileFolder")) (quote (jewelry 76.0 136.0 "Jewelry")) (quote (mediabadge 180.0 136.0 "MediaBadge")) (quote (multipurpose 126.0 68.0 "MultiPurpose")) (quote (retaillabel 90.0 104.0 "RetailLabel")) (quote (shipping 271.0 136.0 "Shipping")) (quote (slide35mm 26.0 104.0 "Slide35mm")) (quote (spine8mm 187.0 26.0 "Spine8mm")) (quote (topcoated 425.19685 136.0 "TopCoatedPaper")) (quote (topcoatedpaper 396.0 136.0 "TopcoatedPaper150")) (quote (vhsface 205.0 127.0 "VHSFace")) (quote (vhsspine 400.0 50.0 "VHSSpine")) (quote (zipdisk 156.0 136.0 "ZipDisk"))))) nil [782017 783722])
            ("custom-autoload" code nil nil [783724 783783])
            ("ps-paper-type" variable (:default-value (quote letter)) nil [783785 783974])
            ("custom-autoload" code nil nil [783976 784021])
            ("ps-print-color-p" variable (:default-value (or (fboundp (quote x-color-values)) (fboundp (quote color-instance-rgb-components)))) nil [784023 784360])
            ("custom-autoload" code nil nil [784362 784410])
            ("ps-print-customize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784412 784503])
            ("ps-print-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [784505 785020])
            ("ps-print-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785022 785362])
            ("ps-print-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785364 785559])
            ("ps-print-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785561 785909])
            ("ps-spool-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [785911 786208])
            ("ps-spool-buffer-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786210 786616])
            ("ps-spool-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786618 786875])
            ("ps-spool-region-with-faces" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [786877 787287])
            ("ps-despool" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787289 787798])
            ("ps-line-lengths" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [787800 788038])
            ("ps-nb-pages-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788040 788228])
            ("ps-nb-pages-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [788230 788417])
            ("ps-setup" function (:prototype-flag t) nil [788419 788517])
            ("ps-extend-face-list" function (:prototype-flag t) nil [788519 789016])
            ("ps-extend-face" function (:prototype-flag t) nil [789018 790105])
            ("push" code nil nil [790244 790300])
            ("push" code nil nil [790450 790510])
            ("add-to-list" code nil nil [790512 790584])
            ("add-to-list" code nil nil [790586 790670])
            ("run-python" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [790672 791305])
            ("python-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791307 791414])
            ("quoted-printable-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [791535 792077])
            ("quail-title" function (:prototype-flag t) nil [792233 792330])
            ("quail-use-package" function (:prototype-flag t) nil [792332 792627])
            ("quail-define-package" function (:prototype-flag t) nil [792629 796806])
            ("quail-set-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [796808 797246])
            ("quail-show-keyboard-layout" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [797248 797483])
            ("quail-define-rules" function (:prototype-flag t) nil [797485 798956])
            ("quail-install-map" function (:prototype-flag t) nil [798958 799242])
            ("quail-install-decode-map" function (:prototype-flag t) nil [799244 799570])
            ("quail-defrule" function (:prototype-flag t) nil [799572 800840])
            ("quail-defrule-internal" function (:prototype-flag t) nil [800842 801280])
            ("quail-update-leim-list-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [801282 801857])
            ("hangul-input-method-activate" function (:prototype-flag t) nil [802016 802272])
            ("ucs-input-activate" function (:prototype-flag t) nil [802440 802734])
            ("quickurl-reread-hook-postfix" variable
               (:constant-flag t
                :default-value "
;; Local Variables:
;; eval: (progn (require 'quickurl) (add-hook 'local-write-file-hooks (lambda () (quickurl-read) nil)))
;; End:
")
                nil [802879 803400])
            ("quickurl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803402 803650])
            ("quickurl-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803652 803773])
            ("quickurl-add-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [803775 804005])
            ("quickurl-browse-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804007 804275])
            ("quickurl-browse-url-ask" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804277 804418])
            ("quickurl-edit-urls" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804420 804535])
            ("quickurl-list-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804537 804714])
            ("quickurl-list" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804716 804841])
            ("rcirc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [804977 805189])
            ("defalias" code nil nil [805191 805213])
            ("rcirc-connect" function (:prototype-flag t) nil [805215 805352])
            ("rcirc-track-minor-mode" variable nil nil [805354 805679])
            ("custom-autoload" code nil nil [805681 805734])
            ("rcirc-track-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [805736 806021])
            ("defalias" code nil nil [806186 806224])
            ("re-builder" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [806226 806614])
            ("recentf-mode" variable nil nil [806748 807033])
            ("custom-autoload" code nil nil [807035 807080])
            ("recentf-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807082 807504])
            ("delete-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [807621 808049])
            ("delete-extract-rectangle" function (:prototype-flag t) nil [808051 808426])
            ("extract-rectangle" function (:prototype-flag t) nil [808428 808629])
            ("kill-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [808631 809274])
            ("copy-rectangle-as-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809276 809406])
            ("yank-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809408 809522])
            ("insert-rectangle" function (:prototype-flag t) nil [809524 809895])
            ("open-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [809897 810331])
            ("defalias" code nil nil [810333 810389])
            ("delete-whitespace-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810391 810882])
            ("string-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [810884 811137])
            ("defalias" code nil nil [811139 811186])
            ("string-insert-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811188 811533])
            ("clear-rectangle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811535 811879])
            ("rectangle-number-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [811881 812273])
            ("rectangle-mark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812275 812455])
            ("refill-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [812606 813121])
            ("turn-on-reftex" function (:prototype-flag t) nil [813272 813347])
            ("reftex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [813349 814760])
            ("reftex-reset-scanning-information" function (:prototype-flag t) nil [814762 814947])
            ("reftex-citation" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [815113 816213])
            ("reftex-isearch-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [816385 816811])
            ("reftex-index-phrases-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [816980 817923])
            ("reftex-all-document-files" function (:prototype-flag t) nil [818092 818324])
            ("put" code nil nil [818489 818581])
            ("put" code nil nil [818582 818674])
            ("put" code nil nil [818675 818732])
            ("put" code nil nil [818733 818815])
            ("regexp-opt" function (:prototype-flag t) nil [818980 819733])
            ("regexp-opt-depth" function (:prototype-flag t) nil [819735 819930])
            ("push" code nil nil [820076 820131])
            ("push" code nil nil [820287 820346])
            ("remember" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820348 820625])
            ("remember-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820627 820739])
            ("remember-clipboard" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [820741 820907])
            ("remember-diary-extract-entries" function (:prototype-flag t) nil [820909 821020])
            ("remember-notes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [821022 821976])
            ("push" code nil nil [822098 822156])
            ("repeat" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [822158 822846])
            ("reporter-submit-bug-report" function (:prototype-flag t) nil [822993 824199])
            ("reposition-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [824342 825472])
            ("reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [825595 825978])
            ("global-reveal-mode" variable nil nil [825980 826289])
            ("custom-autoload" code nil nil [826291 826341])
            ("global-reveal-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [826343 826697])
            ("ring-p" function (:prototype-flag t) nil [826844 826930])
            ("make-ring" function (:prototype-flag t) nil [826932 827028])
            ("rlogin" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [827167 828892])
            ("rmail-file-name" variable (:default-value (purecopy "~/RMAIL")) nil [829030 829113])
            ("custom-autoload" code nil nil [829115 829159])
            ("put" code nil nil [829161 829394])
            ("rmail-spool-directory" variable (:default-value (purecopy (cond ((file-exists-p "/var/mail") "/var/mail/") ((file-exists-p "/var/spool/mail") "/var/spool/mail/") ((memq system-type (quote (hpux usg-unix-v irix))) "/usr/mail/") (t "/usr/spool/mail/")))) nil [829396 829726])
            ("custom-autoload" code nil nil [829728 829778])
            ("custom-initialize-delay" code nil nil [829779 829831])
            ("rmail-movemail-variant-p" function (:prototype-flag t) nil [829833 830024])
            ("rmail-user-mail-address-regexp" variable nil nil [830026 830646])
            ("custom-autoload" code nil nil [830648 830707])
            ("define-obsolete-variable-alias" code nil nil [830709 830801])
            ("rmail-default-dont-reply-to-names" variable nil nil [830803 831007])
            ("make-obsolete-variable" code nil nil [831009 831101])
            ("rmail-ignored-headers" variable (:default-value (purecopy (concat "^via:\\|^mail-from:\\|^origin:\\|^references:\\|^sender:" "\\|^status:\\|^received:\\|^x400-originator:\\|^x400-recipients:" "\\|^x400-received:\\|^x400-mts-identifier:\\|^x400-content-type:" "\\|^\\(resent-\\|\\)message-id:\\|^summary-line:\\|^resent-date:" "\\|^nntp-posting-host:\\|^path:\\|^x-char.*:\\|^x-face:\\|^face:" "\\|^x-mailer:\\|^delivered-to:\\|^lines:" "\\|^content-transfer-encoding:\\|^x-coding-system:" "\\|^return-path:\\|^errors-to:\\|^return-receipt-to:" "\\|^precedence:\\|^mime-version:" "\\|^list-owner:\\|^list-help:\\|^list-post:\\|^list-subscribe:" "\\|^list-id:\\|^list-unsubscribe:\\|^list-archive:" "\\|^content-length:\\|^nntp-posting-date:\\|^user-agent" "\\|^importance:\\|^envelope-to:\\|^delivery-date\\|^openpgp:" "\\|^mbox-line:\\|^cancel-lock:" "\\|^DomainKey-Signature:\\|^dkim-signature:" "\\|^resent-face:\\|^resent-x.*:\\|^resent-organization:\\|^resent-openpgp:" "\\|^x-.*:"))) nil [831103 832518])
            ("custom-autoload" code nil nil [832520 832570])
            ("rmail-displayed-headers" variable nil nil [832572 832752])
            ("custom-autoload" code nil nil [832754 832806])
            ("rmail-retry-ignored-headers" variable (:default-value (purecopy "^x-authentication-warning:\\|^x-detected-operating-system:\\|^x-spam[-a-z]*:\\|content-type:\\|content-transfer-encoding:\\|mime-version:\\|message-id:")) nil [832808 833077])
            ("custom-autoload" code nil nil [833079 833135])
            ("rmail-highlighted-headers" variable (:default-value (purecopy "^From:\\|^Subject:")) nil [833137 833347])
            ("custom-autoload" code nil nil [833349 833403])
            ("rmail-primary-inbox-list" variable nil nil [833405 833768])
            ("custom-autoload" code nil nil [833770 833823])
            ("rmail-secondary-file-directory" variable (:default-value (purecopy "~/")) nil [833825 833932])
            ("custom-autoload" code nil nil [833934 833993])
            ("rmail-secondary-file-regexp" variable (:default-value (purecopy "\\.xmail$")) nil [833995 834108])
            ("custom-autoload" code nil nil [834110 834166])
            ("rmail-mode-hook" variable nil nil [834168 834249])
            ("rmail-show-message-hook" variable nil nil [834251 834348])
            ("custom-autoload" code nil nil [834350 834402])
            ("rmail-file-coding-system" variable nil nil [834404 834511])
            ("rmail-insert-mime-forwarded-message-function" variable nil nil [834513 834885])
            ("rmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [834887 835468])
            ("rmail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [835470 838813])
            ("rmail-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838815 838900])
            ("rmail-set-remote-password" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [838902 839044])
            ("put" code nil nil [839190 839244])
            ("rmail-output" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [839246 840506])
            ("rmail-output-as-seen" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [840508 841058])
            ("rmail-output-body-to-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [841060 841644])
            ("rng-c-load-schema" function (:prototype-flag t) nil [841794 841937])
            ("rng-nxml-mode-init" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [842084 842327])
            ("rng-validate-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [842477 843775])
            ("put" code nil nil [843919 844003])
            ("rng-xsd-compile" function (:prototype-flag t) nil [844005 845092])
            ("robin-define-package" function (:prototype-flag t) nil [845242 845685])
            ("robin-modify-package" function (:prototype-flag t) nil [845687 845973])
            ("robin-use-package" function (:prototype-flag t) nil [845975 846087])
            ("rot13" function (:prototype-flag t) nil [846207 846333])
            ("rot13-string" function (:prototype-flag t) nil [846335 846428])
            ("rot13-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [846430 846555])
            ("rot13-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [846557 846929])
            ("toggle-rot13-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [846931 847042])
            ("add-to-list" code nil nil [847184 847253])
            ("rst-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [847255 847517])
            ("rst-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [847519 847936])
            ("push" code nil nil [848095 848155])
            ("ruby-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848157 848260])
            ("add-to-list" code nil nil [848262 848480])
            ("dolist" code nil nil [848482 848617])
            ("push" code nil nil [848759 848820])
            ("ruler-mode" variable nil nil [848822 848937])
            ("ruler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [848939 849214])
            ("rx-to-string" function (:prototype-flag t) nil [849355 849585])
            ("rx" function (:prototype-flag t) nil [849587 858144])
            ("push" code nil nil [858291 858346])
            ("push" code nil nil [858482 858540])
            ("savehist-mode" variable nil nil [858542 858831])
            ("custom-autoload" code nil nil [858833 858880])
            ("savehist-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [858882 859563])
            ("scheme-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [859714 860545])
            ("dsssl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [860547 860993])
            ("gnus-score-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861146 861305])
            ("scroll-all-mode" variable nil nil [861448 861745])
            ("custom-autoload" code nil nil [861747 861798])
            ("scroll-all-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [861800 862220])
            ("scroll-lock-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [862366 862862])
            ("when" code nil nil [863003 863080])
            ("push" code nil nil [863228 863287])
            ("semantic-default-submodes" variable (:default-value (quote (global-semantic-idle-scheduler-mode global-semanticdb-minor-mode))) nil [863289 864838])
            ("custom-autoload" code nil nil [864840 864897])
            ("semantic-mode" variable nil nil [864899 865188])
            ("custom-autoload" code nil nil [865190 865237])
            ("semantic-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [865239 865800])
            ("bovine-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [865994 866108])
            ("wisent-grammar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [866302 866416])
            ("mail-from-style" variable (:default-value (quote default)) nil [866563 866971])
            ("custom-autoload" code nil nil [866973 867020])
            ("mail-specify-envelope-from" variable nil nil [867022 867478])
            ("custom-autoload" code nil nil [867480 867538])
            ("mail-self-blind" variable nil nil [867540 867741])
            ("custom-autoload" code nil nil [867743 867790])
            ("mail-interactive" variable (:default-value t) nil [867792 867949])
            ("custom-autoload" code nil nil [867951 867999])
            ("send-mail-function" variable (:default-value (if (and (boundp (quote smtpmail-smtp-server)) smtpmail-smtp-server) (quote smtpmail-send-it) (quote sendmail-query-once))) nil [868001 868461])
            ("custom-autoload" code nil nil [868463 868513])
            ("mail-header-separator" variable (:default-value (purecopy "--text follows this line--")) nil [868515 868657])
            ("custom-autoload" code nil nil [868659 868712])
            ("mail-archive-file-name" variable nil nil [868714 868907])
            ("custom-autoload" code nil nil [868909 868963])
            ("mail-default-reply-to" variable nil nil [868965 869164])
            ("custom-autoload" code nil nil [869166 869219])
            ("mail-personal-alias-file" variable (:default-value (purecopy "~/.mailrc")) nil [869221 869483])
            ("custom-autoload" code nil nil [869485 869541])
            ("mail-setup-hook" variable nil nil [869543 869641])
            ("custom-autoload" code nil nil [869643 869690])
            ("mail-aliases" variable (:default-value t) nil [869692 869998])
            ("mail-yank-prefix" variable (:default-value "> ") nil [870000 870169])
            ("custom-autoload" code nil nil [870171 870219])
            ("mail-indentation-spaces" variable (:default-value 3) nil [870221 870380])
            ("custom-autoload" code nil nil [870382 870437])
            ("mail-citation-hook" variable nil nil [870439 870935])
            ("custom-autoload" code nil nil [870937 870987])
            ("mail-citation-prefix-regexp" variable (:default-value (purecopy "\\([ 	]*\\(\\w\\|[_.]\\)+>+\\|[ 	]*[]>|]\\)+")) nil [870989 871362])
            ("custom-autoload" code nil nil [871364 871423])
            ("mail-signature" variable (:default-value t) nil [871425 871873])
            ("custom-autoload" code nil nil [871875 871921])
            ("mail-signature-file" variable (:default-value (purecopy "~/.signature")) nil [871923 872038])
            ("custom-autoload" code nil nil [872040 872091])
            ("mail-default-directory" variable (:default-value (purecopy "~/")) nil [872093 872361])
            ("custom-autoload" code nil nil [872363 872417])
            ("mail-default-headers" variable nil nil [872419 872657])
            ("custom-autoload" code nil nil [872659 872711])
            ("sendmail-query-once" function (:prototype-flag t) nil [872713 872893])
            ("define-mail-user-agent" code nil nil [872895 872989])
            ("sendmail-user-agent-compose" function (:prototype-flag t) nil [872991 873174])
            ("mail-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [873176 874304])
            ("mail-mailing-lists" variable nil nil [874306 874518])
            ("custom-autoload" code nil nil [874520 874570])
            ("sendmail-coding-system" variable nil nil [874572 874891])
            ("default-sendmail-coding-system" variable (:default-value (quote iso-latin-1)) nil [874893 875369])
            ("mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [875371 877559])
            ("mail-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877561 877750])
            ("mail-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [877752 877939])
            ("put" code nil nil [878062 878104])
            ("put" code nil nil [878106 878148])
            ("put" code nil nil [878150 878196])
            ("server-start" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878198 878945])
            ("server-force-delete" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [878947 879180])
            ("server-mode" variable nil nil [879182 879463])
            ("custom-autoload" code nil nil [879465 879508])
            ("server-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879510 879897])
            ("server-save-buffers-kill-terminal" function (:prototype-flag t) nil [879899 880214])
            ("ses-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [880328 881777])
            ("sgml-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [881937 882652])
            ("html-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [882654 884457])
            ("push" code nil nil [884616 884678])
            ("put" code nil nil [884679 884724])
            ("sh-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [884726 887133])
            ("defalias" code nil nil [887135 887173])
            ("list-load-path-shadows" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [887326 889264])
            ("shadow-define-cluster" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [889407 889847])
            ("shadow-define-literal-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [889849 890190])
            ("shadow-define-regexp-group" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [890192 890648])
            ("shadow-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [890650 890732])
            ("shell-dumb-shell-regexp" variable (:default-value (purecopy "cmd\\(proxy\\)?\\.exe")) nil [890852 891203])
            ("custom-autoload" code nil nil [891205 891257])
            ("shell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [891259 892919])
            ("shr-render-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893041 893184])
            ("shr-insert-document" function (:prototype-flag t) nil [893186 893384])
            ("sieve-manage" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893522 893594])
            ("sieve-upload" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893596 893661])
            ("sieve-upload-and-bury" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893663 893737])
            ("sieve-upload-and-kill" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893739 893813])
            ("sieve-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [893966 894309])
            ("simula-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [894460 896605])
            ("skeleton-filter-function" variable (:default-value (quote identity)) nil [896742 896859])
            ("define-skeleton" function (:prototype-flag t) nil [896861 897108])
            ("put" code nil nil [897110 897151])
            ("skeleton-proxy-new" function (:prototype-flag t) nil [897153 897735])
            ("skeleton-insert" function (:prototype-flag t) nil [897737 901232])
            ("skeleton-pair-insert-maybe" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [901234 901941])
            ("smerge-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902093 902309])
            ("smerge-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902311 902615])
            ("smerge-start-session" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902617 902798])
            ("smiley-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [902939 903109])
            ("smiley-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903111 903312])
            ("smtpmail-send-it" function (:prototype-flag t) nil [903459 903518])
            ("smtpmail-send-queued-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903520 903657])
            ("snake" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [903795 904359])
            ("snmp-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904507 904884])
            ("snmpv2-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904886 905269])
            ("sunrise-sunset" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905415 905809])
            ("solitaire" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [905959 907623])
            ("put" code nil nil [907739 907791])
            ("sort-subr" function (:prototype-flag t) nil [907793 909944])
            ("sort-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [909946 910286])
            ("sort-paragraphs" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910288 910638])
            ("sort-pages" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [910640 910980])
            ("put" code nil nil [910981 911036])
            ("sort-numeric-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [911038 911615])
            ("sort-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [911617 912075])
            ("sort-regexp-fields" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [912077 913195])
            ("sort-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913197 913990])
            ("reverse-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [913992 914155])
            ("delete-duplicate-lines" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [914157 915102])
            ("spam-initialize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [915229 915589])
            ("spam-report-process-queue" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [915745 916074])
            ("spam-report-url-ping-mm-url" function (:prototype-flag t) nil [916076 916299])
            ("spam-report-url-to-file" function (:prototype-flag t) nil [916301 916506])
            ("spam-report-agentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [916508 916759])
            ("spam-report-deagentize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [916761 916957])
            ("defalias" code nil nil [917094 917135])
            ("speedbar-frame-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917137 917596])
            ("speedbar-get-focus" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917598 917844])
            ("spook" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [917982 918080])
            ("snarf-spooks" function (:prototype-flag t) nil [918082 918197])
            ("push" code nil nil [918338 918392])
            ("sql-add-product-keywords" function (:prototype-flag t) nil [918394 919126])
            ("sql-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [919128 920217])
            ("sql-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920219 920545])
            ("sql-product-interactive" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [920547 921102])
            ("sql-oracle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [921104 922329])
            ("sql-sybase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [922331 923567])
            ("sql-informix" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [923569 924687])
            ("sql-sqlite" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [924689 925943])
            ("sql-mysql" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [925945 927221])
            ("sql-solid" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [927223 928356])
            ("sql-ingres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [928358 929461])
            ("sql-ms" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [929463 930682])
            ("sql-postgres" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [930684 932176])
            ("sql-interbase" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [932178 933331])
            ("sql-db2" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [933333 934660])
            ("sql-linter" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [934662 935873])
            ("push" code nil nil [936018 936076])
            ("srecode-template-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [936249 936357])
            ("defalias" code nil nil [936359 936402])
            ("starttls-open-stream" function (:prototype-flag t) nil [936549 937418])
            ("strokes-global-set-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [937552 937986])
            ("strokes-read-stroke" function (:prototype-flag t) nil [937988 938424])
            ("strokes-read-complex-stroke" function (:prototype-flag t) nil [938426 938905])
            ("strokes-do-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [938907 939071])
            ("strokes-do-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939073 939246])
            ("strokes-describe-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939248 939390])
            ("strokes-help" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939392 939489])
            ("strokes-load-user-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939491 939616])
            ("strokes-list-strokes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [939618 939964])
            ("strokes-mode" variable nil nil [939966 940251])
            ("custom-autoload" code nil nil [940253 940298])
            ("strokes-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [940300 941079])
            ("strokes-decode-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941081 941350])
            ("strokes-compose-complex-stroke" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941352 941489])
            ("studlify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941623 941712])
            ("studlify-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941714 941840])
            ("studlify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [941842 941929])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [942083 943213])
            ("global-subword-mode" variable nil nil [943215 943528])
            ("custom-autoload" code nil nil [943530 943582])
            ("global-subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943584 943991])
            ("superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943993 944626])
            ("global-superword-mode" variable nil nil [944628 944949])
            ("custom-autoload" code nil nil [944951 945005])
            ("global-superword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [945007 945428])
            ("sc-cite-original" function (:prototype-flag t) nil [945578 946579])
            ("define-obsolete-function-alias" code nil nil [946713 946782])
            ("gpm-mouse-mode" variable (:default-value t) nil [946784 947075])
            ("custom-autoload" code nil nil [947077 947124])
            ("gpm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947126 947586])
            ("untabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [947709 948104])
            ("tabify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [948106 948600])
            ("table-cell-map-hook" variable nil nil [948748 948916])
            ("custom-autoload" code nil nil [948918 948966])
            ("table-load-hook" variable nil nil [948968 949064])
            ("custom-autoload" code nil nil [949066 949110])
            ("table-point-entered-cell-hook" variable nil nil [949112 949223])
            ("custom-autoload" code nil nil [949225 949283])
            ("table-point-left-cell-hook" variable nil nil [949285 949390])
            ("custom-autoload" code nil nil [949392 949447])
            ("table-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [949449 954549])
            ("table-insert-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954551 954878])
            ("table-insert-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [954880 955232])
            ("table-insert-row-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955234 955385])
            ("table-recognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955387 955756])
            ("table-unrecognize" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955758 955813])
            ("table-recognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [955815 956153])
            ("table-unrecognize-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956155 956225])
            ("table-recognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956227 956491])
            ("table-unrecognize-table" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956493 956554])
            ("table-recognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [956556 957021])
            ("table-unrecognize-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957023 957083])
            ("table-heighten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957085 957523])
            ("table-shorten-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [957525 958017])
            ("table-widen-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958019 958266])
            ("table-narrow-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958268 958492])
            ("table-forward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [958494 960368])
            ("table-backward-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960370 960586])
            ("table-span-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960588 960759])
            ("table-split-cell-vertically" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960761 960922])
            ("table-split-cell-horizontally" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [960924 961105])
            ("table-split-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961107 961266])
            ("table-justify" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961268 961515])
            ("table-justify-cell" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961517 961877])
            ("table-justify-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [961879 962074])
            ("table-justify-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962076 962277])
            ("table-fixed-width-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962279 962808])
            ("table-query-dimension" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [962810 963566])
            ("table-generate-source" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [963568 964732])
            ("table-insert-sequence" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [964734 966361])
            ("table-delete-row" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966363 966614])
            ("table-delete-column" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966616 966887])
            ("table-capture" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [966889 972027])
            ("table-release" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972029 972337])
            ("talk-connect" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972454 972563])
            ("talk" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972565 972678])
            ("tar-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [972815 973594])
            ("tcl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [973736 974800])
            ("inferior-tcl" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [974802 975003])
            ("tcl-help-on-word" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975005 975197])
            ("telnet" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975336 975939])
            ("rsh" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [975941 976173])
            ("make-term" function (:prototype-flag t) nil [976290 976709])
            ("term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976711 976958])
            ("ansi-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [976960 977082])
            ("serial-term" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977084 977658])
            ("testcover-this-defun" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [977820 977921])
            ("push" code nil nil [978061 978118])
            ("tetris" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [978120 978857])
            ("tex-shell-file-name" variable nil nil [979014 979122])
            ("custom-autoload" code nil nil [979124 979175])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [979177 979464])
            ("custom-autoload" code nil nil [979466 979511])
            ("tex-first-line-header-regexp" variable nil nil [979513 979790])
            ("custom-autoload" code nil nil [979792 979852])
            ("tex-main-file" variable nil nil [979854 980045])
            ("custom-autoload" code nil nil [980047 980092])
            ("tex-offer-save" variable (:default-value t) nil [980094 980197])
            ("custom-autoload" code nil nil [980199 980245])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [980247 980408])
            ("custom-autoload" code nil nil [980410 980457])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [980459 980628])
            ("custom-autoload" code nil nil [980630 980679])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [980681 980854])
            ("custom-autoload" code nil nil [980856 980906])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [980908 981204])
            ("custom-autoload" code nil nil [981206 981255])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [981257 981512])
            ("custom-autoload" code nil nil [981514 981564])
            ("latex-block-names" variable nil nil [981566 981702])
            ("custom-autoload" code nil nil [981704 981753])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [981755 982014])
            ("custom-autoload" code nil nil [982016 982066])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [982068 982318])
            ("custom-autoload" code nil nil [982320 982373])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [982375 982984])
            ("custom-autoload" code nil nil [982986 983043])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [983045 983535])
            ("custom-autoload" code nil nil [983537 983589])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [983591 983767])
            ("custom-autoload" code nil nil [983769 983823])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [983825 984123])
            ("custom-autoload" code nil nil [984125 984173])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [984175 984286])
            ("custom-autoload" code nil nil [984288 984334])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [984336 984449])
            ("custom-autoload" code nil nil [984451 984498])
            ("tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [984500 984932])
            ("defalias" code nil nil [984934 984964])
            ("defalias" code nil nil [984966 985008])
            ("defalias" code nil nil [985010 985044])
            ("plain-tex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [985046 986779])
            ("latex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [986781 988473])
            ("slitex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [988475 990236])
            ("tex-start-shell" function (:prototype-flag t) nil [990238 990296])
            ("doctex-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990298 990382])
            ("texinfo-format-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990539 990965])
            ("texinfo-format-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [990967 991308])
            ("texi2info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [991310 991937])
            ("texinfo-open-quote" variable (:default-value (purecopy "``")) nil [992091 992210])
            ("custom-autoload" code nil nil [992212 992261])
            ("texinfo-close-quote" variable (:default-value (purecopy "''")) nil [992263 992384])
            ("custom-autoload" code nil nil [992386 992436])
            ("texinfo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [992438 995261])
            ("thai-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995419 995632])
            ("thai-compose-string" function (:prototype-flag t) nil [995634 995770])
            ("thai-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [995772 995879])
            ("thai-composition-function" function (:prototype-flag t) nil [995881 995958])
            ("forward-thing" function (:prototype-flag t) nil [996098 996422])
            ("bounds-of-thing-at-point" function (:prototype-flag t) nil [996424 996937])
            ("thing-at-point" function (:prototype-flag t) nil [996939 997456])
            ("sexp-at-point" function (:prototype-flag t) nil [997458 997565])
            ("symbol-at-point" function (:prototype-flag t) nil [997567 997678])
            ("number-at-point" function (:prototype-flag t) nil [997680 997791])
            ("list-at-point" function (:prototype-flag t) nil [997793 997905])
            ("thumbs-find-thumb" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998028 998118])
            ("thumbs-show-from-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998120 998360])
            ("thumbs-dired-show-marked" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998362 998474])
            ("thumbs-dired-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998476 998599])
            ("defalias" code nil nil [998601 998641])
            ("thumbs-dired-setroot" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [998643 998759])
            ("tibetan-char-p" function (:prototype-flag t) nil [998920 999078])
            ("tibetan-tibetan-to-transcription" function (:prototype-flag t) nil [999080 999233])
            ("tibetan-transcription-to-tibetan" function (:prototype-flag t) nil [999235 999429])
            ("tibetan-compose-string" function (:prototype-flag t) nil [999431 999529])
            ("tibetan-compose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999531 999648])
            ("tibetan-decompose-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [999650 999909])
            ("tibetan-decompose-string" function (:prototype-flag t) nil [999911 1000148])
            ("tibetan-decompose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000150 1000354])
            ("tibetan-compose-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1000356 1000532])
            ("tibetan-post-read-conversion" function (:prototype-flag t) nil [1000534 1000611])
            ("tibetan-pre-write-conversion" function (:prototype-flag t) nil [1000613 1000694])
            ("tibetan-pre-write-canonicalize-for-unicode" function (:prototype-flag t) nil [1000696 1000791])
            ("push" code nil nil [1000944 1001002])
            ("tildify-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001004 1001325])
            ("tildify-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001327 1001628])
            ("display-time-day-and-date" variable nil nil [1001745 1001863])
            ("custom-autoload" code nil nil [1001865 1001918])
            ("put" code nil nil [1001919 1001969])
            ("display-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1001971 1002289])
            ("display-time-mode" variable nil nil [1002291 1002596])
            ("custom-autoload" code nil nil [1002598 1002645])
            ("display-time-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1002647 1003250])
            ("display-time-world" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003252 1003477])
            ("emacs-uptime" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003479 1003737])
            ("emacs-init-time" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1003739 1003855])
            ("date-to-time" function (:prototype-flag t) nil [1004013 1004198])
            ("if" code nil nil [1004199 1004395])
            ("seconds-to-time" function (:prototype-flag t) nil [1004397 1004522])
            ("time-less-p" function (:prototype-flag t) nil [1004524 1004647])
            ("days-to-time" function (:prototype-flag t) nil [1004649 1004741])
            ("time-since" function (:prototype-flag t) nil [1004743 1004895])
            ("defalias" code nil nil [1004897 1004937])
            ("time-subtract" function (:prototype-flag t) nil [1004939 1005093])
            ("time-add" function (:prototype-flag t) nil [1005095 1005224])
            ("date-to-day" function (:prototype-flag t) nil [1005226 1005371])
            ("days-between" function (:prototype-flag t) nil [1005373 1005536])
            ("date-leap-year-p" function (:prototype-flag t) nil [1005538 1005635])
            ("time-to-day-in-year" function (:prototype-flag t) nil [1005637 1005765])
            ("time-to-days" function (:prototype-flag t) nil [1005767 1005985])
            ("safe-date-to-time" function (:prototype-flag t) nil [1005987 1006177])
            ("format-seconds" function (:prototype-flag t) nil [1006179 1007133])
            ("put" code nil nil [1007275 1007329])
            ("put" code nil nil [1007330 1007396])
            ("put" code nil nil [1007397 1007456])
            ("put" code nil nil [1007457 1007510])
            ("put" code nil nil [1007511 1007562])
            ("put" code nil nil [1007563 1007624])
            ("put" code nil nil [1007625 1007679])
            ("put" code nil nil [1007680 1007735])
            ("time-stamp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1007737 1008673])
            ("time-stamp-toggle-active" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1008675 1008896])
            ("push" code nil nil [1009053 1009115])
            ("timeclock-mode-line-display" variable nil nil [1009117 1009467])
            ("custom-autoload" code nil nil [1009469 1009531])
            ("timeclock-mode-line-display" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1009533 1010098])
            ("timeclock-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010100 1010866])
            ("timeclock-out" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1010868 1011343])
            ("timeclock-status-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011345 1011682])
            ("timeclock-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1011684 1012024])
            ("timeclock-query-out" function (:prototype-flag t) nil [1012026 1012193])
            ("timeclock-reread-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012195 1012362])
            ("timeclock-workday-remaining-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012364 1012760])
            ("timeclock-workday-elapsed-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1012762 1013058])
            ("timeclock-when-to-leave-string" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013060 1013477])
            ("titdic-convert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1013648 1013901])
            ("batch-titdic-convert" function (:prototype-flag t) nil [1013903 1014359])
            ("define-key" code nil nil [1014473 1014516])
            ("define-key" code nil nil [1014518 1014579])
            ("tmm-menubar" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1014581 1015076])
            ("tmm-menubar-mouse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1015078 1015360])
            ("tmm-prompt" function (:prototype-flag t) nil [1015362 1015991])
            ("todo-show" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1016148 1018099])
            ("todo-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018101 1018232])
            ("todo-archive-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018234 1018360])
            ("todo-filtered-items-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018362 1018519])
            ("toggle-tool-bar-mode-from-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1018656 1018852])
            ("tool-bar-add-item" function (:prototype-flag t) nil [1018854 1019619])
            ("tool-bar-local-item" function (:prototype-flag t) nil [1019621 1020262])
            ("tool-bar-add-item-from-menu" function (:prototype-flag t) nil [1020264 1020973])
            ("tool-bar-local-item-from-menu" function (:prototype-flag t) nil [1020975 1021541])
            ("tq-create" function (:prototype-flag t) nil [1021682 1021970])
            ("trace-buffer" variable (:default-value "*trace-output*") nil [1022120 1022210])
            ("custom-autoload" code nil nil [1022212 1022253])
            ("trace-values" function (:prototype-flag t) nil [1022255 1022430])
            ("trace-function-foreground" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1022432 1023316])
            ("trace-function-background" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1023318 1023578])
            ("defalias" code nil nil [1023580 1023633])
            ("tramp-mode" variable (:default-value t) nil [1023769 1023883])
            ("custom-autoload" code nil nil [1023885 1023924])
            ("tramp-syntax" variable (:default-value (if (featurep (quote xemacs)) (quote sep) (quote ftp))) nil [1023926 1024161])
            ("custom-autoload" code nil nil [1024163 1024204])
            ("tramp-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/\\(\\[.*\\]\\|[^/|:]\\{2,\\}[^/|]*\\):" "\\`/[^/|:][^/|]*:"))
                nil [1024206 1024600])
            ("tramp-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\[.*\\]")
                nil [1024602 1024834])
            ("tramp-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-file-name-regexp-separate) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1024836 1025777])
            ("tramp-completion-file-name-regexp-unified" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (cygwin windows-nt))) "\\`/[^/]\\{2,\\}\\'" "\\`/[^/]*\\'"))
                nil [1025779 1026157])
            ("tramp-completion-file-name-regexp-separate" variable
               (:constant-flag t
                :default-value "\\`/\\([[][^]]*\\)?\\'")
                nil [1026159 1026423])
            ("tramp-completion-file-name-regexp" variable
               (:constant-flag t
                :default-value (cond ((equal tramp-syntax (quote ftp)) tramp-completion-file-name-regexp-unified) ((equal tramp-syntax (quote sep)) tramp-completion-file-name-regexp-separate) (t (error "Wrong `tramp-syntax' defined"))))
                nil [1026425 1027084])
            ("tramp-completion-file-name-handler-alist" variable
               (:constant-flag t
                :default-value (quote ((file-name-all-completions . tramp-completion-handle-file-name-all-completions) (file-name-completion . tramp-completion-handle-file-name-completion))))
                nil [1027086 1027505])
            ("tramp-completion-run-real-handler" function (:arguments ("operation" "args")) nil [1027507 1028003])
            ("tramp-completion-file-name-handler" function (:arguments ("operation" "args")) nil [1028005 1028610])
            ("tramp-autoload-file-name-handler" function (:arguments ("operation" "args")) nil [1028612 1028861])
            ("tramp-register-autoload-file-name-handlers" function nil nil [1028863 1029381])
            ("tramp-register-autoload-file-name-handlers" code nil nil [1029383 1029427])
            ("tramp-unload-file-name-handlers" function (:prototype-flag t) nil [1029429 1029500])
            ("tramp-completion-handle-file-name-all-completions" function (:prototype-flag t) nil [1029502 1029667])
            ("tramp-completion-handle-file-name-completion" function (:prototype-flag t) nil [1029669 1029836])
            ("tramp-unload-tramp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1029838 1029934])
            ("tramp-ftp-enable-ange-ftp" function (:prototype-flag t) nil [1030082 1030151])
            ("help-with-tutorial" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1030288 1031074])
            ("tai-viet-composition-function" function (:prototype-flag t) nil [1031220 1031318])
            ("2C-command" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031481 1031529])
            ("global-set-key" code nil nil [1031531 1031567])
            ("global-set-key" code nil nil [1031569 1031602])
            ("2C-two-columns" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1031604 1032067])
            ("2C-associate-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032069 1032328])
            ("2C-split" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1032330 1033116])
            ("type-break-mode" variable nil nil [1033259 1033556])
            ("custom-autoload" code nil nil [1033558 1033609])
            ("type-break-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1033611 1037208])
            ("type-break" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037210 1037491])
            ("type-break-statistics" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037493 1037765])
            ("type-break-guesstimate-keystroke-threshold" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1037767 1039046])
            ("uce-reply-to-uce" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039170 1039481])
            ("ucs-normalize-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039661 1039787])
            ("ucs-normalize-NFD-string" function (:prototype-flag t) nil [1039789 1039909])
            ("ucs-normalize-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1039911 1040037])
            ("ucs-normalize-NFC-string" function (:prototype-flag t) nil [1040039 1040159])
            ("ucs-normalize-NFKD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040161 1040289])
            ("ucs-normalize-NFKD-string" function (:prototype-flag t) nil [1040291 1040413])
            ("ucs-normalize-NFKC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040415 1040543])
            ("ucs-normalize-NFKC-string" function (:prototype-flag t) nil [1040545 1040667])
            ("ucs-normalize-HFS-NFD-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040669 1040821])
            ("ucs-normalize-HFS-NFD-string" function (:prototype-flag t) nil [1040823 1040969])
            ("ucs-normalize-HFS-NFC-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1040971 1041123])
            ("ucs-normalize-HFS-NFC-string" function (:prototype-flag t) nil [1041125 1041271])
            ("underline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041431 1041676])
            ("ununderline-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1041678 1041904])
            ("batch-unrmail" function (:prototype-flag t) nil [1042048 1042375])
            ("unrmail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1042377 1042575])
            ("unsafep" function (:prototype-flag t) nil [1042731 1042972])
            ("url-retrieve" function (:prototype-flag t) nil [1043094 1044582])
            ("url-retrieve-synchronously" function (:prototype-flag t) nil [1044584 1044915])
            ("url-get-authentication" function (:prototype-flag t) nil [1045060 1046227])
            ("url-register-auth-scheme" function (:prototype-flag t) nil [1046229 1046910])
            ("url-store-in-cache" function (:prototype-flag t) nil [1047058 1047166])
            ("url-is-cached" function (:prototype-flag t) nil [1047168 1047338])
            ("url-cache-extract" function (:prototype-flag t) nil [1047340 1047445])
            ("url-cid" function (:prototype-flag t) nil [1047587 1047640])
            ("url-dav-supported-p" function (:prototype-flag t) nil [1047782 1047935])
            ("url-dav-request" function (:prototype-flag t) nil [1047937 1048720])
            ("url-dav-vc-registered" function (:prototype-flag t) nil [1048722 1048789])
            ("url-file" function (:prototype-flag t) nil [1048934 1049032])
            ("url-gateway-nslookup-host" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1049171 1049301])
            ("url-open-stream" function (:prototype-flag t) nil [1049303 1049595])
            ("url-handler-mode" variable nil nil [1049752 1050053])
            ("custom-autoload" code nil nil [1050055 1050109])
            ("url-handler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1050111 1050412])
            ("url-file-handler" function (:prototype-flag t) nil [1050414 1050683])
            ("url-copy-file" function (:prototype-flag t) nil [1050685 1051339])
            ("url-file-local-copy" function (:prototype-flag t) nil [1051341 1051548])
            ("url-insert-file-contents" function (:prototype-flag t) nil [1051550 1051657])
            ("url-default-expander" function (:prototype-flag t) nil [1051802 1051847])
            ("defalias" code nil nil [1051849 1051909])
            ("url-https" function (:prototype-flag t) nil [1051911 1051943])
            ("url-https-file-exists-p" function (:prototype-flag t) nil [1051945 1051991])
            ("url-https-file-readable-p" function (:prototype-flag t) nil [1051993 1052041])
            ("url-https-file-attributes" function (:prototype-flag t) nil [1052043 1052091])
            ("url-irc" function (:prototype-flag t) nil [1052233 1052286])
            ("url-ldap" function (:prototype-flag t) nil [1052431 1052684])
            ("url-mail" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1052835 1052897])
            ("url-mailto" function (:prototype-flag t) nil [1052899 1052988])
            ("url-man" function (:prototype-flag t) nil [1053133 1053216])
            ("url-info" function (:prototype-flag t) nil [1053218 1053294])
            ("url-generic-emulator-loader" function (:prototype-flag t) nil [1053296 1053370])
            ("defalias" code nil nil [1053372 1053423])
            ("defalias" code nil nil [1053425 1053476])
            ("defalias" code nil nil [1053478 1053529])
            ("url-data" function (:prototype-flag t) nil [1053531 1053614])
            ("url-news" function (:prototype-flag t) nil [1053759 1053814])
            ("url-snews" function (:prototype-flag t) nil [1053816 1053872])
            ("isPlainHostName" function (:prototype-flag t) nil [1054011 1054072])
            ("dnsDomainIs" function (:prototype-flag t) nil [1054074 1054135])
            ("dnsResolve" function (:prototype-flag t) nil [1054137 1054193])
            ("isResolvable" function (:prototype-flag t) nil [1054195 1054253])
            ("isInNet" function (:prototype-flag t) nil [1054255 1054315])
            ("url-ns-prefs" function (:prototype-flag t) nil [1054317 1054385])
            ("url-ns-user-pref" function (:prototype-flag t) nil [1054387 1054466])
            ("url-recreate-url" function (:prototype-flag t) nil [1054614 1054726])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1054728 1056175])
            ("url-setup-privacy-info" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1056329 1056454])
            ("url-queue-retrieve" function (:prototype-flag t) nil [1056602 1057040])
            ("url-debug" variable nil nil [1057185 1057493])
            ("custom-autoload" code nil nil [1057495 1057536])
            ("url-debug" function (:prototype-flag t) nil [1057538 1057605])
            ("url-parse-args" function (:prototype-flag t) nil [1057607 1057689])
            ("url-insert-entities-in-string" function (:prototype-flag t) nil [1057691 1058108])
            ("url-normalize-url" function (:prototype-flag t) nil [1058110 1058249])
            ("url-lazy-message" function (:prototype-flag t) nil [1058251 1058441])
            ("url-get-normalized-date" function (:prototype-flag t) nil [1058443 1058600])
            ("url-eat-trailing-space" function (:prototype-flag t) nil [1058602 1058711])
            ("url-strip-leading-spaces" function (:prototype-flag t) nil [1058713 1058821])
            ("url-display-percentage" function (:prototype-flag t) nil [1058823 1058908])
            ("url-percentage" function (:prototype-flag t) nil [1058910 1058971])
            ("defalias" code nil nil [1058973 1059017])
            ("url-file-directory" function (:prototype-flag t) nil [1059019 1059130])
            ("url-file-nondirectory" function (:prototype-flag t) nil [1059132 1059249])
            ("url-parse-query-string" function (:prototype-flag t) nil [1059251 1059356])
            ("url-build-query-string" function (:prototype-flag t) nil [1059358 1059981])
            ("url-unhex-string" function (:prototype-flag t) nil [1059983 1060286])
            ("url-hexify-string" function (:prototype-flag t) nil [1060288 1060913])
            ("url-encode-url" function (:prototype-flag t) nil [1060915 1061228])
            ("url-file-extension" function (:prototype-flag t) nil [1061230 1061447])
            ("url-truncate-url-for-viewing" function (:prototype-flag t) nil [1061449 1061655])
            ("url-view-url" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1061657 1061906])
            ("ask-user-about-lock" function (:prototype-flag t) nil [1062043 1062517])
            ("ask-user-about-supersession-threat" function (:prototype-flag t) nil [1062519 1063022])
            ("utf-7-post-read-conversion" function (:prototype-flag t) nil [1063178 1063248])
            ("utf-7-imap-post-read-conversion" function (:prototype-flag t) nil [1063250 1063325])
            ("utf-7-pre-write-conversion" function (:prototype-flag t) nil [1063327 1063401])
            ("utf-7-imap-pre-write-conversion" function (:prototype-flag t) nil [1063403 1063482])
            ("utf7-encode" function (:prototype-flag t) nil [1063609 1063752])
            ("uudecode-decode-region-external" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1063899 1064179])
            ("uudecode-decode-region-internal" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1064181 1064410])
            ("uudecode-decode-region" function (:prototype-flag t) nil [1064412 1064600])
            ("vc-checkout-hook" variable nil nil [1064717 1064830])
            ("custom-autoload" code nil nil [1064832 1064874])
            ("vc-checkin-hook" variable nil nil [1064876 1065005])
            ("custom-autoload" code nil nil [1065007 1065048])
            ("vc-before-checkin-hook" variable nil nil [1065050 1065177])
            ("custom-autoload" code nil nil [1065179 1065227])
            ("vc-next-action" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1065229 1066431])
            ("vc-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1066433 1067193])
            ("vc-version-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067195 1067333])
            ("vc-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067335 1067724])
            ("vc-version-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067726 1067881])
            ("vc-ediff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1067883 1068285])
            ("vc-root-diff" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068287 1068715])
            ("vc-revision-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068717 1068974])
            ("vc-insert-headers" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1068976 1069186])
            ("vc-merge" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069188 1069867])
            ("defalias" code nil nil [1069869 1069915])
            ("vc-create-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1069917 1070250])
            ("vc-retrieve-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1070252 1070851])
            ("vc-print-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1070853 1071271])
            ("vc-print-root-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071273 1071607])
            ("vc-log-incoming" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071609 1071850])
            ("vc-log-outgoing" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1071852 1072087])
            ("vc-revert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1072089 1072332])
            ("vc-rollback" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1072334 1072570])
            ("define-obsolete-function-alias" code nil nil [1072572 1072640])
            ("vc-pull" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1072642 1073298])
            ("defalias" code nil nil [1073300 1073330])
            ("vc-switch-backend" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1073332 1073756])
            ("vc-transfer-file" function (:prototype-flag t) nil [1073758 1074369])
            ("vc-delete-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1074371 1074599])
            ("vc-rename-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1074601 1074837])
            ("vc-update-change-log" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1074839 1075452])
            ("vc-branch-part" function (:prototype-flag t) nil [1075454 1075557])
            ("vc-annotate" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1075709 1077167])
            ("vc-arch-registered" function (:arguments ("file")) nil [1077307 1077471])
            ("vc-bzr-admin-dirname" variable
               (:constant-flag t
                :default-value ".bzr")
                nil [1077608 1077712])
            ("vc-bzr-admin-checkout-format-file" variable
               (:constant-flag t
                :default-value (concat vc-bzr-admin-dirname "/checkout/format"))
                nil [1077714 1077856])
            ("vc-bzr-registered" function (:arguments ("file")) nil [1077858 1078028])
            ("vc-cvs-registered" function (:arguments ("f")) nil [1078164 1078392])
            ("vc-dir" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1078529 1079250])
            ("vc-do-command" function (:prototype-flag t) nil [1079408 1080377])
            ("vc-git-registered" function (:arguments ("file")) nil [1080514 1080727])
            ("vc-hg-registered" function (:arguments ("file")) nil [1080853 1081060])
            ("vc-mtn-admin-dir" variable
               (:constant-flag t
                :default-value "_MTN")
                nil [1081197 1081267])
            ("vc-mtn-admin-format" variable
               (:constant-flag t
                :default-value (concat vc-mtn-admin-dir "/format"))
                nil [1081269 1081385])
            ("vc-mtn-registered" function (:arguments ("file")) nil [1081387 1081543])
            ("vc-rcs-master-templates" variable (:default-value (purecopy (quote ("%sRCS/%s,v" "%s%s,v" "%sRCS/%s")))) nil [1081680 1081870])
            ("custom-autoload" code nil nil [1081872 1081925])
            ("vc-rcs-registered" function (:arguments ("f")) nil [1081927 1081987])
            ("vc-sccs-master-templates" variable (:default-value (purecopy (quote ("%sSCCS/s.%s" "%ss.%s" vc-sccs-search-project-dir)))) nil [1082127 1082336])
            ("custom-autoload" code nil nil [1082338 1082393])
            ("vc-sccs-registered" function (:arguments ("f")) nil [1082395 1082457])
            ("vc-sccs-search-project-dir" function (:arguments ("_dirname" "basename")) nil [1082459 1083156])
            ("vc-svn-registered" function (:arguments ("f")) nil [1083293 1083614])
            ("push" code nil nil [1083773 1083834])
            ("add-to-list" code nil nil [1083836 1083912])
            ("vera-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1083914 1085636])
            ("verilog-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1085805 1092418])
            ("vhdl-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1092578 1118171])
            ("viet-encode-viscii-char" function (:prototype-flag t) nil [1118329 1118453])
            ("viet-decode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118455 1118721])
            ("viet-decode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118723 1118860])
            ("viet-encode-viqr-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1118862 1119128])
            ("viet-encode-viqr-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1119130 1119267])
            ("viqr-post-read-conversion" function (:prototype-flag t) nil [1119269 1119342])
            ("viqr-pre-write-conversion" function (:prototype-flag t) nil [1119344 1119421])
            ("view-remove-frame-by-deleting" variable (:default-value t) nil [1119538 1119706])
            ("custom-autoload" code nil nil [1119708 1119765])
            ("view-mode" variable nil nil [1119767 1119940])
            ("make-variable-buffer-local" code nil nil [1119942 1119981])
            ("kill-buffer-if-not-modified" function (:prototype-flag t) nil [1119983 1120116])
            ("view-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120118 1120568])
            ("view-file-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1120570 1121147])
            ("view-file-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121149 1121742])
            ("view-buffer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121744 1122834])
            ("view-buffer-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1122836 1123724])
            ("view-buffer-other-frame" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1123726 1124612])
            ("view-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1124614 1129481])
            ("view-return-to-alist-update" function (:prototype-flag t) nil [1129483 1130027])
            ("make-obsolete" code nil nil [1130029 1130113])
            ("view-mode-enter" function (:prototype-flag t) nil [1130115 1130783])
            ("View-exit-and-edit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1130785 1130892])
            ("push" code nil nil [1131039 1131098])
            ("toggle-viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131100 1131233])
            ("viper-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1131235 1131350])
            ("warning-prefix-function" variable nil nil [1131509 1131906])
            ("warning-series" variable nil nil [1131908 1132346])
            ("warning-fill-prefix" variable nil nil [1132348 1132457])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [1132459 1132698])
            ("display-warning" function (:prototype-flag t) nil [1132700 1133946])
            ("lwarn" function (:prototype-flag t) nil [1133948 1134791])
            ("warn" function (:prototype-flag t) nil [1134793 1135065])
            ("push" code nil nil [1135187 1135244])
            ("wdired-change-to-wdired-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135246 1135636])
            ("webjump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1135778 1136056])
            ("put" code nil nil [1136219 1136267])
            ("put" code nil nil [1136269 1136318])
            ("define-obsolete-function-alias" code nil nil [1136320 1136397])
            ("which-function-mode" variable nil nil [1136399 1136712])
            ("custom-autoload" code nil nil [1136714 1136769])
            ("which-function-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1136771 1137233])
            ("push" code nil nil [1137375 1137439])
            ("whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1137441 1137810])
            ("whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1137812 1138388])
            ("global-whitespace-mode" variable nil nil [1138390 1138715])
            ("custom-autoload" code nil nil [1138717 1138775])
            ("global-whitespace-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1138777 1139170])
            ("global-whitespace-newline-mode" variable nil nil [1139172 1139529])
            ("custom-autoload" code nil nil [1139531 1139597])
            ("global-whitespace-newline-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1139599 1140210])
            ("whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1140212 1142932])
            ("global-whitespace-toggle-options" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1142934 1145668])
            ("whitespace-cleanup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1145670 1147776])
            ("whitespace-cleanup-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1147778 1149355])
            ("whitespace-report" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1149357 1150724])
            ("whitespace-report-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1150726 1152119])
            ("widget-browse-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152262 1152355])
            ("widget-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152357 1152455])
            ("widget-browse-other-window" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152457 1152590])
            ("widget-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1152592 1152854])
            ("widgetp" function (:prototype-flag t) nil [1152991 1153085])
            ("widget-prompt-value" function (:prototype-flag t) nil [1153087 1153305])
            ("widget-create" function (:prototype-flag t) nil [1153307 1153453])
            ("widget-delete" function (:prototype-flag t) nil [1153455 1153532])
            ("widget-insert" function (:prototype-flag t) nil [1153534 1153663])
            ("widget-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote widget-forward)) (define-key map "	" (quote widget-backward)) (define-key map [(shift tab)] (quote widget-backward)) (put (quote widget-backward) :advertised-binding [(shift tab)]) (define-key map [backtab] (quote widget-backward)) (define-key map [down-mouse-2] (quote widget-button-click)) (define-key map [down-mouse-1] (quote widget-button-click)) (define-key map [(control 109)] (quote widget-button-press)) map)) nil [1153665 1154288])
            ("widget-setup" function (:prototype-flag t) nil [1154290 1154398])
            ("windmove-left" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154535 1154962])
            ("windmove-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1154964 1155377])
            ("windmove-right" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155379 1155808])
            ("windmove-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1155810 1156228])
            ("windmove-default-keybindings" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156230 1156439])
            ("winner-mode" variable nil nil [1156562 1156843])
            ("custom-autoload" code nil nil [1156845 1156888])
            ("winner-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1156890 1157194])
            ("push" code nil nil [1157313 1157371])
            ("woman-locale" variable nil nil [1157373 1157648])
            ("custom-autoload" code nil nil [1157650 1157691])
            ("woman" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1157693 1158353])
            ("woman-dired-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158355 1158468])
            ("woman-find-file" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1158470 1158984])
            ("woman-bookmark-jump" function (:prototype-flag t) nil [1158986 1159097])
            ("xml-parse-file" function (:prototype-flag t) nil [1159211 1159945])
            ("xml-parse-region" function (:prototype-flag t) nil [1159947 1160912])
            ("xmltok-get-declared-encoding-position" function (:prototype-flag t) nil [1161053 1161710])
            ("xterm-mouse-mode" variable nil nil [1161847 1162148])
            ("custom-autoload" code nil nil [1162150 1162200])
            ("xterm-mouse-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162202 1162849])
            ("yenc-decode-region" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1162976 1163108])
            ("yenc-extract-filename" function (:prototype-flag t) nil [1163110 1163208])
            ("zone" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1163335 1163397])
            ("loaddefs" package nil nil [1180540 1180559]))          
      :file "loaddefs.el"
      :pointmax 1180705
      :fsize 1180715
      :lastmodtime '(21946 55192 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "help-at-pt.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("help-at-pt" customgroup (:user-visible-flag t) nil [1955 2053])
            ("help-at-pt-string" function (:arguments ("kbd")) nil [2070 2929])
            ("help-at-pt-kbd-string" function nil nil [2946 3306])
            ("display-local-help" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3323 3928])
            ("help-at-pt-timer" variable nil nil [3930 4223])
            ("help-at-pt-timer-delay" variable (:default-value 1) nil [4225 5064])
            ("help-at-pt-cancel-timer" function (:user-visible-flag t) nil [5081 5356])
            ("help-at-pt-set-timer" function (:user-visible-flag t) nil [5373 5662])
            ("help-at-pt-display-when-idle" variable (:default-value (quote never)) nil [5679 9343])
            ("help-at-pt-maybe-display" function nil nil [9392 10041])
            ("scan-buf-move-to-region" function (:arguments ("prop" "arg" "hook")) nil [10058 12672])
            ("scan-buf-move-hook" variable (:default-value (quote (display-local-help))) nil [12761 12940])
            ("scan-buf-next-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12957 14026])
            ("scan-buf-previous-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14043 14478])
            ("help-at-pt" package nil nil [14480 14501]))          
      :file "help-at-pt.el.gz"
      :pointmax 14531
      :fsize 4661
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "faces.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [874 1326])
            ("declare-function" code nil nil [1328 1400])
            ("help-xref-stack-item" variable nil nil [1402 1431])
            ("face-name-history" variable nil nil [1433 1614])
            ("font-selection" customgroup (:user-visible-flag t) nil [1785 1867])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [1870 2652])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [2826 3508])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [3554 4618])
            ("face-list" function nil nil [4793 4894])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face" "no-init-from-resources"))
                nil [4896 5820])
            ("set-advertised-calling-convention" code nil nil [6010 6071])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6073 6335])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [6337 7588])
            ("facep" function (:arguments ("face")) nil [7768 7917])
            ("check-face" function (:arguments ("face")) nil [7920 8074])
            ("face-id" function (:arguments ("face" "_frame")) nil [8255 8597])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [8599 9016])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [9019 9732])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [9735 10079])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [10277 12169])
            ("declare-function" code nil nil [12172 12267])
            ("declare-function" code nil nil [12269 12383])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [12385 13094])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [13097 13460])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [13463 14059])
            ("face-name" function (:arguments ("face")) nil [14243 14335])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [14338 14804])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [14806 16620])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [16622 17211])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [17214 17495])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [17497 18553])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [18555 19611])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [19613 20633])
            ("defalias" code nil nil [20636 20684])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [20687 21140])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [21143 21577])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [21580 22099])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [22102 22606])
            ("face-documentation" function (:arguments ("face")) nil [22782 23204])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [23207 23395])
            ("defalias" code nil nil [23398 23445])
            ("defalias" code nil nil [23446 23501])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [23682 31016])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31018 31469])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31472 31872])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31875 32332])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32335 32740])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32743 33240])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [33243 33669])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [33875 34344])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [34347 34816])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [34819 35424])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [35427 36196])
            ("define-obsolete-function-alias" code nil nil [36198 36311])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [36314 36887])
            ("define-obsolete-function-alias" code nil nil [36889 37010])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [37012 37428])
            ("define-obsolete-function-alias" code nil nil [37430 37501])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [37504 37940])
            ("define-obsolete-function-alias" code nil nil [37942 38017])
            ("defalias" code nil nil [38020 38076])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [38079 38879])
            ("crm-separator" variable nil nil [39065 39087])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [39103 41604])
            ("x-bitmap-file-path" variable nil nil [41663 41690])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [41692 44381])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [44384 45154])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [45157 45304])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [45307 46234])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [46237 46854])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [47015 49356])
            ("declare-function" code nil nil [49358 49404])
            ("declare-function" code nil nil [49405 49496])
            ("read-face-font" function (:arguments ("face" "frame")) nil [49498 49840])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [49843 50271])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [50273 51218])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [51220 52009])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [52180 52343])
            ("help-xref-stack" variable nil nil [52472 52496])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [52497 55532])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [55535 59245])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [59523 60113])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [60116 61918])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [61921 63342])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [63345 64483])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [64485 66439])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [66441 68106])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [68108 68435])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [68437 69511])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [69513 69708])
            ("face-default-spec" function (:arguments ("face")) nil [69710 69898])
            ("face-user-default-spec" function (:arguments ("face")) nil [69900 70183])
            ("defined-colors" function (:arguments ("frame")) nil [70441 70899])
            ("defalias" code nil nil [70900 70944])
            ("declare-function" code nil nil [70946 71016])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [71018 71685])
            ("defalias" code nil nil [71686 71732])
            ("declare-function" code nil nil [71734 71801])
            ("color-values" function (:arguments ("color" "frame")) nil [71803 72722])
            ("defalias" code nil nil [72724 72764])
            ("declare-function" code nil nil [72766 72833])
            ("display-color-p" function (:arguments ("display")) nil [72835 73237])
            ("defalias" code nil nil [73238 73284])
            ("declare-function" code nil nil [73286 73356])
            ("display-grayscale-p" function (:arguments ("display")) nil [73358 73791])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [73793 76497])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [76499 77740])
            ("foreground-color-at-point" function nil nil [77742 78471])
            ("background-color-at-point" function nil nil [78497 79226])
            ("declare-function" code nil nil [79421 79466])
            ("declare-function" code nil nil [79467 79560])
            ("declare-function" code nil nil [79561 79655])
            ("declare-function" code nil nil [79656 79710])
            ("x-display-name" variable nil nil [79711 79734])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [79736 80631])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [80634 81640])
            ("declare-function" code nil nil [81642 81692])
            ("declare-function" code nil nil [81693 81759])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [81761 82962])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [82964 84433])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [84435 85111])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [85114 85873])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [85875 86440])
            ("tty-setup-hook" variable nil nil [86442 86674])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [86676 88023])
            ("tty-set-up-initial-frame-faces" function nil nil [88129 88286])
            ("basic-faces" customgroup (:user-visible-flag t) nil [88457 88532])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [88534 88666])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [88668 88747])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [88749 89114])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [89116 89223])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [89225 89415])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [89417 89521])
            ("variable-pitch" variable
               (:default-value (quote ((t :family "Sans Serif")))
                :type "face")
                nil [89523 89634])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [89636 90074])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [90076 90543])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [90545 90795])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [90797 91339])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [91501 92427])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [92429 92977])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [92979 93256])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [93258 93688])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [93690 93950])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [93952 94069])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [94071 94367])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [94369 94907])
            ("define-obsolete-face-alias" code nil nil [94908 94982])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [94984 95258])
            ("define-obsolete-face-alias" code nil nil [95259 95335])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95337 95580])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95582 95765])
            ("define-obsolete-face-alias" code nil nil [95766 95842])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [95844 97180])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [97182 97347])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [97349 97809])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [97811 98220])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [98222 98627])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [98629 99124])
            ("setq" code nil nil [99126 99237])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [99239 99551])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99553 99691])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99693 99822])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [99824 100274])
            ("put" code nil nil [100276 100308])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [100310 100436])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [100438 100728])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [100730 100974])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [100976 101098])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [101100 101374])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [101376 101906])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [101908 102142])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [102144 102563])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [102589 102761])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [102763 103009])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [103011 103158])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [103160 103295])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark)) :background "grey50") (t :background "gray")))
                :type "face")
                nil [103297 103682])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [103684 103875])
            ("x-font-regexp" variable nil nil [104251 104277])
            ("x-font-regexp-head" variable nil nil [104278 104309])
            ("x-font-regexp-weight" variable nil nil [104310 104343])
            ("x-font-regexp-slant" variable nil nil [104344 104376])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [104378 104418])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [104419 104458])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [104459 104499])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [104500 104541])
            ("let" code nil nil [104624 105842])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [105845 106959])
            ("font-list-limit" variable (:default-value 100) nil [106961 107076])
            ("make-obsolete-variable" code nil nil [107077 107129])
            ("faces" package nil nil [107131 107147]))          
      :file "faces.el.gz"
      :pointmax 107172
      :fsize 26972
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sb-image.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ezimage" include nil nil [1343 1361])
            ("speedbar-use-images" variable (:default-value ezimage-use-images) nil [1373 1523])
            ("defalias" code nil nil [1525 1566])
            ("speedbar-expand-image-button-alist" variable (:default-value (quote (("<+>" . ezimage-directory-plus) ("<->" . ezimage-directory-minus) ("< >" . ezimage-directory) ("[+]" . ezimage-page-plus) ("[-]" . ezimage-page-minus) ("[?]" . ezimage-page) ("[ ]" . ezimage-page) ("{+}" . ezimage-box-plus) ("{-}" . ezimage-box-minus) ("<M>" . ezimage-mail) ("<d>" . ezimage-document-tag) ("<i>" . ezimage-info-tag) (" =>" . ezimage-tag) (" +>" . ezimage-tag-gt) (" ->" . ezimage-tag-v) (">" . ezimage-tag) ("@" . ezimage-tag-type) ("  @" . ezimage-tag-type) ("*" . ezimage-checkout) ("#" . ezimage-object) ("!" . ezimage-object-out-of-date) ("//" . ezimage-label) ("%" . ezimage-lock)))) nil [1568 2367])
            ("speedbar-insert-image-button-maybe" function (:arguments ("start" "length")) nil [2369 2779])
            ("speedbar-image-dump" function (:user-visible-flag t) nil [2781 3579])
            ("sb-image" package nil nil [3581 3600]))          
      :file "sb-image.el.gz"
      :pointmax 3628
      :fsize 1568
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "image.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("image" customgroup (:user-visible-flag t) nil [865 924])
            ("defalias" code nil nil [926 964])
            ("image-type-header-regexps" variable
               (:constant-flag t
                :default-value (\` (("\\`/[	
 ]*\\*.*XPM.\\*/" . xpm) ("\\`P[1-6]\\(?:\\(?:\\(?:#[^
]*[
]\\)?[[:space:]]\\)+\\(?:\\(?:#[^
]*[
]\\)?[0-9]\\)+\\)\\{2\\}" . pbm) ("\\`GIF8[79]a" . gif) ("\\`\211PNG

" . png) ("\\`[	
 ]*#define \\([a-z0-9_]+\\)_width [0-9]+
#define \\1_height [0-9]+
\\(#define \\1_x_hot [0-9]+
#define \\1_y_hot [0-9]+
\\)?static \\(unsigned \\)?char \\1_bits" . xbm) ("\\`\\(?:MM \\*\\|II\\* \\)" . tiff) ("\\`[	
 ]*%!PS" . postscript) ("\\`\377\330" . jpeg) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Ss][Vv][Gg]"))) . svg))))
                nil [966 2290])
            ("image-type-file-name-regexps" variable (:default-value (quote (("\\.png\\'" . png) ("\\.gif\\'" . gif) ("\\.jpe?g\\'" . jpeg) ("\\.bmp\\'" . bmp) ("\\.xpm\\'" . xpm) ("\\.pbm\\'" . pbm) ("\\.xbm\\'" . xbm) ("\\.ps\\'" . postscript) ("\\.tiff?\\'" . tiff) ("\\.svgz?\\'" . svg)))) nil [2292 2751])
            ("image-type-auto-detectable" variable (:default-value (quote ((pbm . t) (xbm) (bmp . maybe) (gif . maybe) (png . maybe) (xpm) (jpeg . maybe) (tiff . maybe) (svg . maybe) (postscript)))) nil [2928 3431])
            ("image-format-suffixes" variable (:default-value (quote ((image/x-icon "ico")))) nil [3433 3948])
            ("image-load-path" variable (:default-value (list (file-name-as-directory (expand-file-name "images" data-directory)) (quote data-directory) (quote load-path))) nil [3950 4569])
            ("image-load-path-for-library" function (:arguments ("library" "image" "path" "no-error")) nil [4572 8616])
            ("image-jpeg-p" function (:arguments ("data")) nil [8712 9500])
            ("image-type-from-data" function (:arguments ("data")) nil [9518 10091])
            ("image-type-from-buffer" function nil nil [10109 10955])
            ("image-type-from-file-header" function (:arguments ("file")) nil [10973 11460])
            ("image-type-from-file-name" function (:arguments ("file")) nil [11478 11986])
            ("image-type" function (:arguments ("source" "type" "data-p")) nil [12003 12876])
            ("if" code nil nil [12879 13029])
            ("define-obsolete-variable-alias" code nil nil [13031 13122])
            ("image-type-available-p" function (:arguments ("type")) nil [13139 13345])
            ("image-type-auto-detected-p" function nil nil [13363 14008])
            ("create-image" function (:arguments ("file-or-data" "type" "data-p" "props")) nil [14026 15124])
            ("put-image" function (:arguments ("image" "pos" "string" "area")) nil [15142 16425])
            ("insert-image" function (:arguments ("image" "string" "area" "slice")) nil [16443 18248])
            ("insert-sliced-image" function (:arguments ("image" "string" "area" "rows" "cols")) nil [18266 19920])
            ("remove-images" function (:arguments ("start" "end" "buffer")) nil [19939 20426])
            ("image-search-load-path" function (:arguments ("file" "path")) nil [20428 21134])
            ("find-image" function (:arguments ("specs")) nil [21151 22464])
            ("defimage" function (:arguments ("symbol" "specs" "doc")) nil [22482 23350])
            ("image-default-frame-delay" variable (:default-value 0.1) nil [23378 23536])
            ("image-multi-frame-p" function (:arguments ("image")) nil [23538 24234])
            ("image-animated-p" function (:arguments ("image")) nil [24236 24416])
            ("make-obsolete" code nil nil [24418 24479])
            ("image-animate" function (:arguments ("image" "index" "limit")) nil [24501 25221])
            ("image-animate-timer" function (:arguments ("image")) nil [25223 25606])
            ("image-minimum-frame-delay" variable
               (:constant-flag t
                :default-value 0.01)
                nil [25608 25718])
            ("image-current-frame" function (:arguments ("image")) nil [25720 25850])
            ("image-show-frame" function (:arguments ("image" "n" "nocheck")) nil [25852 26234])
            ("image-animate-get-speed" function (:arguments ("image")) nil [26236 26364])
            ("image-animate-set-speed" function (:arguments ("image" "value" "multiply")) nil [26366 26700])
            ("image-animate-timeout" function (:arguments ("image" "n" "count" "time-elapsed" "limit")) nil [26909 28462])
            ("imagemagick-types-inhibit" variable nil nil [28466 28500])
            ("imagemagick-enabled-types" variable nil nil [28501 28535])
            ("imagemagick-filter-types" function nil nil [28537 29354])
            ("imagemagick--file-regexp" variable nil nil [29356 29573])
            ("imagemagick-register-types" function nil nil [29590 31082])
            ("imagemagick-types-inhibit" variable (:default-value (quote (C HTML HTM INFO M TXT PDF))) nil [31084 31961])
            ("imagemagick-enabled-types" variable (:default-value (quote (3FR ART ARW AVS BMP BMP2 BMP3 CAL CALS CMYK CMYKA CR2 CRW CUR CUT DCM DCR DCX DDS DJVU DNG DPX EXR FAX FITS GBR GIF GIF87 GRB HRZ ICB ICO ICON J2C JNG JP2 JPC JPEG JPG JPX K25 KDC MIFF MNG MRW MSL MSVG MTV NEF ORF OTB PBM PCD PCDS PCL PCT PCX PDB PEF PGM PICT PIX PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PSD PTIF PWP RAF RAS RBG RGB RGBA RGBO RLA RLE SCR SCT SFW SGI SR2 SRF SUN SVG SVGZ TGA TIFF TIFF64 TILE TIM TTF UYVY VDA VICAR VID VIFF VST WBMP WPG X3F XBM XC XCF XPM XV XWD YCbCr YCbCrA YUV))) nil [31963 33521])
            ("imagemagick-register-types" code nil nil [33523 33551])
            ("image" package nil nil [33553 33569]))          
      :file "image.el.gz"
      :pointmax 33594
      :fsize 10247
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "uniquify.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3969 3986])
            ("uniquify" customgroup (:user-visible-flag t) nil [4017 4104])
            ("uniquify-buffer-name-style" variable (:default-value (quote post-forward-angle-brackets)) nil [4107 5211])
            ("uniquify-after-kill-buffer-p" variable (:default-value t) nil [5213 5366])
            ("uniquify-ask-about-buffer-names-p" variable nil nil [5368 5635])
            ("uniquify-ignore-buffers-re" variable nil nil [5688 6095])
            ("uniquify-min-dir-content" variable nil nil [6097 6244])
            ("uniquify-separator" variable nil nil [6246 6617])
            ("uniquify-trailing-separator-p" variable nil nil [6619 6934])
            ("uniquify-strip-common-suffix" variable (:default-value (eq 0 uniquify-min-dir-content)) nil [6936 7378])
            ("uniquify-list-buffers-directory-modes" variable (:default-value (quote (dired-mode cvs-mode vc-dir-mode))) nil [7380 7681])
            ("cl-defstruct" code nil nil [7734 7919])
            ("uniquify-possibly-resolvable" variable nil nil [7953 7994])
            ("defvar-local" code nil nil [7996 8172])
            ("put" code nil nil [8173 8215])
            ("uniquify-buffer-base-name" function nil nil [8278 8491])
            ("uniquify-rationalize-file-buffer-names" function
               (:user-visible-flag t
                :arguments ("base" "dirname" "newbuf"))
                nil [8516 11113])
            ("uniquify-buffer-file-name" function (:arguments ("buffer")) nil [11195 11754])
            ("uniquify-rerationalize-w/o-cb" function (:arguments ("fix-list")) nil [11756 12146])
            ("uniquify-rationalize" function (:arguments ("fix-list")) nil [12148 13671])
            ("uniquify-item-greaterp" function (:arguments ("item1" "item2")) nil [13673 13798])
            ("uniquify-rationalize-a-list" function (:arguments ("fix-list" "depth")) nil [13800 14610])
            ("uniquify-get-proposed-name" function (:arguments ("base" "dirname" "depth")) nil [14612 16862])
            ("uniquify-rationalize-conflicting-sublist" function (:arguments ("conf-list" "old-name" "depth")) nil [16958 17699])
            ("uniquify-rename-buffer" function (:arguments ("item" "newname")) nil [17702 18054])
            ("uniquify-maybe-rerationalize-w/o-cb" function nil nil [18090 18315])
            ("uniquify-kill-buffer-function" function nil nil [18637 18848])
            ("add-hook" code nil nil [19029 19088])
            ("advice-add" code nil nil [19909 19977])
            ("uniquify--rename-buffer-advice" function (:arguments ("rb-fun" "newname" "unique" "args")) nil [19978 20615])
            ("advice-add" code nil nil [20618 20696])
            ("uniquify--create-file-buffer-advice" function (:arguments ("cfb-fun" "filename" "args")) nil [20697 21124])
            ("uniquify-unload-function" function nil nil [21139 21679])
            ("uniquify" package nil nil [21681 21700]))          
      :file "uniquify.el.gz"
      :pointmax 21728
      :fsize 7014
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 3986 . 3987) (symbol 3951 . 3968) (open-paren 3950 . 3951)))
    (semanticdb-table "hilit-chg.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("wid-edit" include nil nil [6709 6728])
            ("highlight-changes" customgroup (:user-visible-flag t) nil [6794 6888])
            ("highlight-changes" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1")) (((class color)) (:foreground "red")) (t (:inverse-video t))))
                :type "face")
                nil [7283 7508])
            ("define-obsolete-face-alias" code nil nil [7509 7589])
            ("highlight-changes-delete" variable
               (:default-value (quote ((((min-colors 88) (class color)) (:foreground "red1" :underline t)) (((class color)) (:foreground "red" :underline t)) (t (:inverse-video t))))
                :type "face")
                nil [7668 7927])
            ("define-obsolete-face-alias" code nil nil [7928 8022])
            ("define-obsolete-variable-alias" code nil nil [8088 8212])
            ("highlight-changes-colors" variable (:default-value (if (eq (frame-parameter nil (quote background-mode)) (quote light)) (quote ("magenta" "blue" "darkgreen" "chocolate" "sienna4" "NavyBlue")) (quote ("yellow" "magenta" "blue" "maroon" "firebrick" "green4" "DarkOrchid")))) nil [8214 8997])
            ("define-obsolete-variable-alias" code nil nil [9098 9216])
            ("highlight-changes-visibility-initial-state" variable (:default-value t) nil [9218 9594])
            ("define-obsolete-variable-alias" code nil nil [9730 9838])
            ("highlight-changes-visible-string" variable (:default-value " +Chg") nil [9840 10141])
            ("define-obsolete-variable-alias" code nil nil [10143 10254])
            ("highlight-changes-invisible-string" variable (:default-value " -Chg") nil [10256 10558])
            ("highlight-changes-global-modes" variable (:default-value t) nil [10560 11677])
            ("highlight-changes-global-changes-existing-buffers" variable nil nil [11679 12189])
            ("hilit-chg-list" variable nil nil [12223 12250])
            ("hilit-chg-string" variable (:default-value " ??") nil [12251 12282])
            ("make-variable-buffer-local" code nil nil [12284 12330])
            ("define-minor-mode" code nil nil [12367 14145])
            ("define-minor-mode" code nil nil [14163 14847])
            ("hilit-chg-cust-fix-changes-face-list" function (:arguments ("w" "_wc" "event")) nil [14850 16461])
            ("highlight-changes-face-list" variable nil nil [16464 17123])
            ("hilit-chg-map-changes" function (:arguments ("func" "start-position" "end-position")) nil [17126 17764])
            ("hilit-chg-display-changes" function (:arguments ("beg" "end")) nil [17767 18106])
            ("hilit-chg-make-ov" function (:arguments ("prop" "start" "end")) nil [18109 18944])
            ("hilit-chg-hide-changes" function (:arguments ("beg" "end")) nil [18946 19444])
            ("hilit-chg-fixup" function (:arguments ("beg" "end")) nil [19447 19767])
            ("highlight-changes-remove-highlight" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [19784 20110])
            ("hilit-chg-set-face-on-change" function (:arguments ("beg" "end" "leng-before" "no-property-change")) nil [20112 22834])
            ("hilit-chg-update" function nil nil [22836 23267])
            ("hilit-chg-set" function nil nil [23269 23679])
            ("hilit-chg-clear" function nil nil [23681 24388])
            ("highlight-changes-next-change" function (:user-visible-flag t) nil [24406 24969])
            ("highlight-changes-previous-change" function (:user-visible-flag t) nil [24987 25816])
            ("hilit-chg-make-list" function (:arguments ("force")) nil [25895 27213])
            ("hilit-chg-bump-change" function (:arguments ("prop" "start" "end")) nil [27215 27616])
            ("highlight-changes-rotate-faces" function (:user-visible-flag t) nil [27633 29759])
            ("highlight-markup-buffers" function (:arguments ("buf-a" "file-a" "buf-b" "file-b" "markup-a-only")) nil [29909 32272])
            ("highlight-compare-buffers" function
               (:user-visible-flag t
                :arguments ("buf-a" "buf-b"))
                nil [32289 33157])
            ("highlight-compare-with-file" function
               (:user-visible-flag t
                :arguments ("file-b"))
                nil [33174 34559])
            ("hilit-chg-get-diff-info" function (:arguments ("buf-a" "file-a" "buf-b" "file-b")) nil [34562 34983])
            ("hilit-chg-get-diff-list-hk" function nil nil [34986 36449])
            ("define-globalized-minor-mode" code nil nil [36539 36655])
            ("define-obsolete-function-alias" code nil nil [36657 36756])
            ("highlight-changes-mode-turn-on" function nil nil [36758 37523])
            ("hilit-chg-desktop-restore" function (:arguments ("desktop-buffer-locals")) nil [37623 37776])
            ("add-to-list" code nil nil [37778 37887])
            ("add-to-list" code nil nil [37889 37950])
            ("hilit-chg-unload-function" function nil nil [38332 38476])
            ("hilit-chg" package nil nil [38478 38498]))          
      :file "hilit-chg.el.gz"
      :pointmax 38527
      :fsize 11061
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
