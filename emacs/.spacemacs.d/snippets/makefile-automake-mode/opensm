;; Object LicenseSignAndVerify/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "LicenseSignAndVerify/"
  :tables
  (list
    (semanticdb-table "SentinelKeys.h"
      :major-mode 'c-mode
      :tags 
        '( ("_SENTINELKEYS_HEAD_H" variable (:constant-flag t) nil [873 893])
            ("SentinelKeystypes.h" include nil nil [895 925])
            ("SP_TCP_PROTOCOL" variable (:constant-flag t) nil [960 975])
            ("SP_IPX_PROTOCOL" variable (:constant-flag t) nil [1015 1030])
            ("SP_NETBEUI_PROTOCOL" variable (:constant-flag t) nil [1070 1089])
            ("SP_TCP6_PROTOCOL" variable (:constant-flag t) nil [1125 1141])
            ("SP_STANDALONE_MODE" variable (:constant-flag t) nil [1180 1198])
            ("SP_SERVER_MODE" variable (:constant-flag t) nil [1235 1249])
            ("SP_SHARE_ON" variable (:constant-flag t) nil [1290 1301])
            ("SP_GET_NEXT_LICENSE" variable (:constant-flag t) nil [1345 1364])
            ("SP_ENABLE_TERMINAL_CLIENT" variable (:constant-flag t) nil [1400 1425])
            ("SP_TYPE_XM_KEY" variable (:constant-flag t) nil [1497 1511])
            ("SP_SIMPLE_QUERY" variable (:constant-flag t) nil [1573 1588])
            ("SP_CHECK_DEMO" variable (:constant-flag t) nil [1604 1617])
            ("SP_USB" variable (:constant-flag t) nil [1672 1678])
            ("SP_PARALLEL" variable (:constant-flag t) nil [1704 1715])
            ("SP_CAPS_AES_128" variable (:constant-flag t) nil [1762 1777])
            ("SP_CAPS_ECC_K163" variable (:constant-flag t) nil [1802 1818])
            ("SP_CAPS_ECC_KEYEXCH" variable (:constant-flag t) nil [1842 1861])
            ("SP_CAPS_ECC_SIGN" variable (:constant-flag t) nil [1884 1900])
            ("SP_CAPS_TIME_SUPP" variable (:constant-flag t) nil [1924 1941])
            ("SP_CAPS_TIME_RTC" variable (:constant-flag t) nil [1965 1981])
            ("SP_ATTR_WRITE_ONCE" variable (:constant-flag t) nil [2029 2047])
            ("SP_ATTR_ACTIVE" variable (:constant-flag t) nil [2089 2103])
            ("SP_ATTR_SIGN" variable (:constant-flag t) nil [2151 2163])
            ("SP_ATTR_DECRYPT" variable (:constant-flag t) nil [2214 2229])
            ("SP_ATTR_ENCRYPT" variable (:constant-flag t) nil [2279 2294])
            ("SP_ATTR_SECMSG_READ" variable (:constant-flag t) nil [2344 2363])
            ("SP_RET_ON_FIRST_AVAILABLE" variable (:constant-flag t) nil [2438 2463])
            ("SP_GET_ALL_SERVERS" variable (:constant-flag t) nil [2550 2568])
            ("SP_MAX_NUM_SERVERS" variable (:constant-flag t) nil [2646 2664])
            ("DATA_FEATURE_TYPE_BOOLEAN" variable (:constant-flag t) nil [2758 2783])
            ("DATA_FEATURE_TYPE_BYTE" variable (:constant-flag t) nil [2797 2819])
            ("DATA_FEATURE_TYPE_WORD" variable (:constant-flag t) nil [2834 2856])
            ("DATA_FEATURE_TYPE_DWORD" variable (:constant-flag t) nil [2871 2894])
            ("DATA_FEATURE_TYPE_RAW" variable (:constant-flag t) nil [2909 2930])
            ("DATA_FEATURE_TYPE_STRING" variable (:constant-flag t) nil [2945 2969])
            ("FEATURE_TYPE_COUNTER" variable (:constant-flag t) nil [2983 3003])
            ("FEATURE_TYPE_AES" variable (:constant-flag t) nil [3018 3034])
            ("FEATURE_TYPE_ECC" variable (:constant-flag t) nil [3049 3065])
            ("SP_PUBILC_KEY_LEN" variable (:constant-flag t) nil [3103 3120])
            ("SP_SOFTWARE_KEY_LEN" variable (:constant-flag t) nil [3136 3155])
            ("SP_MIN_ENCRYPT_DATA_LEN" variable (:constant-flag t) nil [3174 3197])
            ("SP_MAX_QUERY_LEN" variable (:constant-flag t) nil [3213 3229])
            ("SP_MAX_RAW_LEN" variable (:constant-flag t) nil [3288 3302])
            ("SP_MAX_STRING_LEN" variable (:constant-flag t) nil [3321 3338])
            ("SP_MAX_SIGN_BUFFER_LEN" variable (:constant-flag t) nil [3356 3378])
            ("SP_MAX_HEARTBEAT" variable (:constant-flag t) nil [3432 3448])
            ("SP_MIN_HEARTBEAT" variable (:constant-flag t) nil [3469 3485])
            ("SP_INFINITE_HEARTBEAT" variable (:constant-flag t) nil [3501 3522])
            ("SP_DateTime" type
               (:members 
                  ( ("year" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3589 3610])
                    ("month" variable (:type ("SP_BYTE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3615 3637])
                    ("dayOfMonth" variable (:type ("SP_BYTE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3642 3669])
                    ("hour" variable (:type ("SP_BYTE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3674 3695])
                    ("minute" variable (:type ("SP_BYTE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3700 3723])
                    ("second" variable (:type ("SP_BYTE" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3728 3751]))                  
                :type "struct")
                nil [3556 3783])
            ("SPP_DATE_TIME" type
               (:typedef ("SP_DateTime" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [3556 3783])
            ("SP_DATE_TIME" type
               (:typedef ("SP_DateTime" type (:type "struct") nil nil)
                :type "typedef")
                nil [3556 3783])
            ("SP_TimeCtrl" type
               (:members 
                  ( ("duration" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3818 3843])
                    ("stopTime" variable (:type ("SP_DATE_TIME" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3848 3873]))                  
                :type "struct")
                nil [3785 3911])
            ("SPP_TIME_CONTROL" type
               (:typedef ("SP_TimeCtrl" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [3785 3911])
            ("SP_TIME_CONTROL" type
               (:typedef ("SP_TimeCtrl" type (:type "struct") nil nil)
                :type "typedef")
                nil [3785 3911])
            ("SP_Feature_Info" type
               (:members 
                  ( ("featureType" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3950 3978])
                    ("featureSize" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [3983 4011])
                    ("featureAttributes" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4016 4050])
                    ("bEnableCounter" variable (:type ("SP_BOOLEAN" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4055 4086])
                    ("bEnableStopTime" variable (:type ("SP_BOOLEAN" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4091 4123])
                    ("bEnableDurationTime" variable (:type ("SP_BOOLEAN" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4128 4164])
                    ("timeControl" variable (:type ("SP_TIME_CONTROL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4169 4197])
                    ("leftExecutionNumber" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4202 4238]))                  
                :type "struct")
                nil [3913 4276])
            ("SPP_FEATURE_INFO" type
               (:typedef ("SP_Feature_Info" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [3913 4276])
            ("SP_FEATURE_INFO" type
               (:typedef ("SP_Feature_Info" type (:type "struct") nil nil)
                :type "typedef")
                nil [3913 4276])
            ("SP_License_Info" type
               (:members 
                  ( ("licenseID" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4315 4341])
                    ("userLimit" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4346 4372])
                    ("featureNums" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4377 4405])
                    ("licenseSize" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4410 4438]))                  
                :type "struct")
                nil [4278 4476])
            ("SPP_LICENSE_INFO" type
               (:typedef ("SP_License_Info" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [4278 4476])
            ("SP_LICENSE_INFO" type
               (:typedef ("SP_License_Info" type (:type "struct") nil nil)
                :type "typedef")
                nil [4278 4476])
            ("SP_Device_Info" type
               (:members 
                  ( ("formFactorType" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4514 4545])
                    ("productCode" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4550 4578])
                    ("hardlimit" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4583 4609])
                    ("capabilities" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4614 4643])
                    ("devID" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4648 4670])
                    ("devSN" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4675 4697])
                    ("timeValue" variable (:type ("SP_DATE_TIME" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4702 4728])
                    ("memorySize" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4733 4760])
                    ("freeSize" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4765 4790])
                    ("drvVersion" variable (:type ("SP_DWORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4795 4822]))                  
                :type "struct")
                nil [4478 4858])
            ("SPP_DEVICE_INFO" type
               (:typedef ("SP_Device_Info" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [4478 4858])
            ("SP_DEVICE_INFO" type
               (:typedef ("SP_Device_Info" type (:type "struct") nil nil)
                :type "typedef")
                nil [4478 4858])
            ("SP_Server_Info" type
               (:members 
                  ( ("serverName" variable
                       (:dereference 1
                        :type ("SP_CHAR" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [4896 4927])
                    ("protocols" variable (:type ("SP_WORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4932 4958])
                    ("majorVersion" variable (:type ("SP_WORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4963 4992])
                    ("minorVersion" variable (:type ("SP_WORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4997 5026]))                  
                :type "struct")
                nil [4860 5062])
            ("SPP_SERVER_INFO" type
               (:typedef ("SP_Server_Info" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [4860 5062])
            ("SP_SERVER_INFO" type
               (:typedef ("SP_Server_Info" type (:type "struct") nil nil)
                :type "typedef")
                nil [4860 5062])
            ("SP_Enum_Server_Info" type
               (:members 
                  ( ("serverAddress" variable
                       (:dereference 1
                        :type ("SP_CHAR" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [5104 5139])
                    ("numLicAvail" variable (:type ("SP_WORD" type (:type "class") nil nil)) (reparse-symbol classsubparts) [5143 5172]))                  
                :type "struct")
                nil [5064 5219])
            ("SPP_ENUM_SERVER_INFO" type
               (:typedef ("SP_Enum_Server_Info" type (:type "struct") nil nil)
                :pointer 1
                :type "typedef")
                nil [5064 5219])
            ("SP_ENUM_SERVER_INFO" type
               (:typedef ("SP_Enum_Server_Info" type (:type "struct") nil nil)
                :type "typedef")
                nil [5064 5219])
            ("SFNTGetLicense" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5315 5344])
                    ("" variable (:type ("devID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5339 5345])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5350 5385])
                    ("" variable (:type ("softwareKey" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5374 5386])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5391 5420])
                    ("" variable (:type ("licID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5415 5421])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5426 5455])
                    ("" variable (:type ("flags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5450 5456])
                    ("SPP_HANDLE" variable (:type ("SP_IO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5461 5494])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5485 5495]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [5288 5496])
            ("SFNTQueryFeature" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5547 5580])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5571 5581])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5586 5619])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5610 5620])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5625 5654])
                    ("" variable (:type ("flags" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5649 5655])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5660 5689])
                    ("" variable (:type ("query" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5684 5690])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5695 5730])
                    ("" variable (:type ("queryLength" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5719 5731])
                    ("SPP_BYTE" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5736 5768])
                    ("" variable (:type ("response" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5760 5769])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5774 5812])
                    ("" variable (:type ("responseLength" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5798 5814]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [5518 5815])
            ("SFNTReadString" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5864 5897])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5888 5898])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5903 5936])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5927 5937])
                    ("SPP_CHAR" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5942 5972])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5966 5973])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5978 6014])
                    ("" variable (:type ("stringLength" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6002 6016]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [5837 6017])
            ("SFNTWriteString" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6067 6100])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6091 6101])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6106 6139])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6130 6140])
                    ("SPP_CHAR" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6145 6175])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6169 6176])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6181 6218])
                    ("" variable (:type ("writePassword" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6205 6220]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [6039 6221])
            ("SFNTReadInteger" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6271 6304])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6295 6305])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6310 6343])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6334 6344])
                    ("SPP_DWORD" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6349 6378])
                    ("" variable (:type ("value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6373 6380]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [6243 6381])
            ("SFNTWriteInteger" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6432 6465])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6456 6466])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6471 6504])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6495 6505])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6510 6539])
                    ("" variable (:type ("value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6534 6540])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6545 6582])
                    ("" variable (:type ("writePassword" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6569 6584]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [6403 6585])
            ("SFNTReadRawData" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6635 6668])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6659 6669])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6674 6707])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6698 6708])
                    ("SPP_VOID" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6713 6743])
                    ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6737 6744])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6749 6779])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6773 6780])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6785 6815])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6809 6817]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [6607 6818])
            ("SFNTWriteRawData" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6869 6902])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6893 6903])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6908 6941])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6932 6942])
                    ("SPP_VOID" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6947 6977])
                    ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6971 6978])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6983 7013])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7007 7014])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7019 7049])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7043 7050])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7055 7092])
                    ("" variable (:type ("writePassword" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7079 7094]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [6840 7095])
            ("SFNTCounterDecrement" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7150 7183])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7174 7184])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7189 7222])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7213 7223])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7228 7266])
                    ("" variable (:type ("decrementValue" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7252 7268]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [7117 7269])
            ("SFNTEncrypt" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7315 7348])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7339 7349])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7354 7387])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7378 7388])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7393 7428])
                    ("" variable (:type ("plainBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7417 7429])
                    ("SPP_BYTE" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7434 7470])
                    ("" variable (:type ("cipherBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7458 7472]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [7291 7473])
            ("SFNTDecrypt" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7519 7552])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7543 7553])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7558 7591])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7582 7592])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7597 7633])
                    ("" variable (:type ("cipherBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7621 7634])
                    ("SPP_BYTE" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7639 7674])
                    ("" variable (:type ("plainBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7663 7676]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [7495 7677])
            ("SFNTVerify" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7723 7756])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7747 7757])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7762 7795])
                    ("" variable (:type ("publicKey" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7786 7796])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7801 7835])
                    ("" variable (:type ("signBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7825 7836])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7841 7871])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7865 7872])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7877 7911])
                    ("" variable (:type ("signResult" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7901 7913]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [7700 7914])
            ("SFNTSign" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7957 7990])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7981 7991])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7996 8029])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8020 8030])
                    ("SPP_BYTE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8035 8069])
                    ("" variable (:type ("signBuffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8059 8070])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8075 8105])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8099 8106])
                    ("SPP_BYTE" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8111 8145])
                    ("" variable (:type ("signResult" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8135 8147]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [7936 8148])
            ("SFNTSetHeartbeat" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8199 8232])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8223 8233])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8238 8276])
                    ("" variable (:type ("heartBeatValue" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8262 8278]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8170 8279])
            ("SFNTGetLicenseInfo" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8332 8365])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8356 8366])
                    ("SPP_LICENSE_INFO" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8371 8406])
                    ("" variable (:type ("licenseInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8395 8408]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8301 8409])
            ("SFNTGetFeatureInfo" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8462 8495])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8486 8496])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8501 8534])
                    ("" variable (:type ("featureID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8525 8535])
                    ("SPP_FEATURE_INFO" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8540 8575])
                    ("" variable (:type ("featureInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8564 8577]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8431 8578])
            ("SFNTGetDeviceInfo" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8630 8663])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8654 8664])
                    ("SPP_DEVICE_INFO" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8669 8703])
                    ("" variable (:type ("deviceInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8693 8705]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8600 8706])
            ("SFNTGetServerInfo" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8758 8791])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8782 8792])
                    ("SPP_SERVER_INFO" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8797 8831])
                    ("" variable (:type ("serverInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8821 8833]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8728 8834])
            ("SFNTReleaseLicense" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_HANDLE" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8887 8920])
                    ("" variable (:type ("licHandle" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8911 8922]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8856 8923])
            ("SFNTSetContactServer" function
               (:prototype-flag t
                :arguments 
                  ( ("SPP_CHAR" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8979 9013])
                    ("" variable (:type ("serverAddr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9003 9015]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [8946 9016])
            ("SFNTEnumServer" function
               (:prototype-flag t
                :arguments 
                  ( ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9065 9100])
                    ("" variable (:type ("developerID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9089 9101])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9103 9126])
                    ("" variable (:type ("licID" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9121 9127])
                    ("SP_DWORD" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9132 9164])
                    ("" variable (:type ("enumFlag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9156 9165])
                    ("SPP_ENUM_SERVER_INFO" variable (:type ("SP_OUT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9170 9205])
                    ("" variable (:type ("srvInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9198 9206])
                    ("SPP_DWORD" variable (:type ("SP_IO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9211 9245])
                    ("" variable (:type ("numSrvInfo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9235 9247]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [9038 9248])
            ("SFNTSetConfigFile" function
               (:prototype-flag t
                :arguments 
                  ( ("SPP_CHAR" variable (:type ("SP_IN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9295 9324])
                    ("" variable (:type ("configFilePath" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9310 9325]))                  
                :type ("SP_API" type (:type "class") nil nil))
                nil [9270 9326]))          
      :file "SentinelKeys.h"
      :pointmax 9334
      :fsize 9333
      :lastmodtime '(21956 21571 784987 619000)
      :unmatched-syntax '((symbol 9260 . 9269) (symbol 9250 . 9259) (symbol 9028 . 9037) (symbol 9018 . 9027) (symbol 8936 . 8945) (symbol 8926 . 8935) (symbol 8846 . 8855) (symbol 8836 . 8845) (symbol 8718 . 8727) (symbol 8708 . 8717) (symbol 8590 . 8599) (symbol 8580 . 8589) (symbol 8421 . 8430) (symbol 8411 . 8420) (symbol 8291 . 8300) (symbol 8281 . 8290) (symbol 8160 . 8169) (symbol 8150 . 8159) (symbol 7926 . 7935) (symbol 7916 . 7925) (symbol 7690 . 7699) (symbol 7680 . 7689) (symbol 7485 . 7494) (symbol 7475 . 7484) (symbol 7281 . 7290) (symbol 7271 . 7280) (symbol 7107 . 7116) (symbol 7097 . 7106) (symbol 6830 . 6839) (symbol 6820 . 6829) (symbol 6597 . 6606) (symbol 6587 . 6596) (symbol 6393 . 6402) (symbol 6383 . 6392) (symbol 6233 . 6242) (symbol 6223 . 6232) (symbol 6029 . 6038) (symbol 6019 . 6028) (symbol 5827 . 5836) (symbol 5817 . 5826) (symbol 5508 . 5517) (symbol 5498 . 5507) (symbol 5278 . 5287) (symbol 5268 . 5277) (semantic-list 5233 . 5235) (symbol 5229 . 5233) (symbol 5222 . 5228) (punctuation 5221 . 5222) (semantic-list 3551 . 3554) (symbol 3547 . 3551) (number 3552 . 3553) (symbol 3540 . 3546) (number 3552 . 3553) (punctuation 3539 . 3540))
      :lexical-table 
        '(("SP_TCP6_PROTOCOL" . ((number "0x00000008" 1161 . 1171)))
          ("SP_CAPS_ECC_KEYEXCH" . ((number "0x00000004" 1865 . 1875)))
          ("SP_MAX_SIGN_BUFFER_LEN" . ((number "0xFFFFFFFF" 3383 . 3393)))
          ("SP_SHARE_ON" . ((number "0x00000080" 1326 . 1336)))
          ("SP_ATTR_DECRYPT" . ((number "0x0002" 2235 . 2241)))
          ("DATA_FEATURE_TYPE_STRING" . ((number "6" 2973 . 2974)))
          ("FEATURE_TYPE_COUNTER" . ((number "7" 3008 . 3009)))
          ("SP_INFINITE_HEARTBEAT" . ((number "0xFFFFFFFF" 3527 . 3537)))
          ("_SENTINELKEYS_HEAD_H")
          ("SP_MIN_HEARTBEAT" . ((number "60" 3490 . 3492)))
          ("SP_MAX_QUERY_LEN" . ((number "112" 3234 . 3237)))
          ("SP_MAX_STRING_LEN" . ((number "2032" 3343 . 3347)))
          ("SP_SERVER_MODE" . ((number "0x00000040" 1271 . 1281)))
          ("SP_USB" . ((number "0x0001" 1689 . 1695)))
          ("SP_ATTR_WRITE_ONCE" . ((number "0x0200" 2052 . 2058)))
          ("SP_SOFTWARE_KEY_LEN" . ((number "280" 3160 . 3163)))
          ("SP_CHECK_DEMO" . ((number "0" 1640 . 1641)))
          ("SP_ATTR_ENCRYPT" . ((number "0x0001" 2300 . 2306)))
          ("DATA_FEATURE_TYPE_BOOLEAN" . ((number "1" 2787 . 2788)))
          ("FEATURE_TYPE_AES" . ((number "8" 3039 . 3040)))
          ("SP_NETBEUI_PROTOCOL" . ((number "0x00000004" 1106 . 1116)))
          ("SP_STANDALONE_MODE" . ((number "0x00000020" 1216 . 1226)))
          ("SP_CAPS_TIME_RTC" . ((number "0x00000020" 1986 . 1996)))
          ("SP_ATTR_SIGN" . ((number "0x0004" 2172 . 2178)))
          ("FEATURE_TYPE_ECC" . ((number "9" 3070 . 3071)))
          ("SP_MAX_HEARTBEAT" . ((number "2592000" 3453 . 3460)))
          ("SP_TYPE_XM_KEY" . ((number "0x00000100" 1528 . 1538)))
          ("SP_RET_ON_FIRST_AVAILABLE" . ((number "1" 2474 . 2475)))
          ("SP_PUBILC_KEY_LEN" . ((number "42" 3125 . 3127)))
          ("SP_TCP_PROTOCOL" . ((number "0x00000001" 996 . 1006)))
          ("SP_IPX_PROTOCOL" . ((number "0x00000002" 1051 . 1061)))
          ("SP_PARALLEL" . ((number "0x0010" 1722 . 1728)))
          ("SP_ATTR_SECMSG_READ" . ((number "0x0080" 2367 . 2373)))
          ("SP_MAX_NUM_SERVERS" . ((number "100" 2669 . 2672)))
          ("DATA_FEATURE_TYPE_BYTE" . ((number "2" 2824 . 2825)))
          ("DATA_FEATURE_TYPE_DWORD" . ((number "4" 2899 . 2900)))
          ("SP_CAPS_ECC_K163" . ((number "0x00000002" 1823 . 1833)))
          ("SP_CAPS_TIME_SUPP" . ((number "0x00000010" 1946 . 1956)))
          ("DATA_FEATURE_TYPE_RAW" . ((number "5" 2935 . 2936)))
          ("SP_ENABLE_TERMINAL_CLIENT" . ((number "0x00000800" 1436 . 1446)))
          ("DATA_FEATURE_TYPE_WORD" . ((number "3" 2861 . 2862)))
          ("SP_MIN_ENCRYPT_DATA_LEN" . ((number "16" 3202 . 3204)))
          ("SP_MAX_RAW_LEN" . ((number "2032" 3308 . 3312)))
          ("SP_SIMPLE_QUERY" . ((number "1" 1594 . 1595)))
          ("SP_ATTR_ACTIVE" . ((number "0x0020" 2109 . 2115)))
          ("SP_GET_ALL_SERVERS" . ((number "4" 2586 . 2587)))
          ("SP_GET_NEXT_LICENSE" . ((number "0x00000400" 1381 . 1391)))
          ("SP_CAPS_AES_128" . ((number "0x00000001" 1783 . 1793)))
          ("SP_CAPS_ECC_SIGN" . ((number "0x00000008" 1905 . 1915)))
          )
)
    (semanticdb-table "SentinelKeystypes.h"
      :major-mode 'c-mode
      :tags 
        '( ("_SENTINEL_KEYS_TYPES_H" variable (:constant-flag t) nil [856 878])
            ("_DOS_" variable (:constant-flag t) nil [1159 1164])
            ("_16BIT_" variable (:constant-flag t) nil [1177 1184])
            ("SP_API" variable (:constant-flag t) nil [2345 2351])
            ("SP_PTR" variable (:constant-flag t) nil [2362 2368])
            ("SP_IN" variable (:constant-flag t) nil [2469 2474])
            ("SP_OUT" variable (:constant-flag t) nil [2483 2489])
            ("SP_INOUT" variable (:constant-flag t) nil [2498 2506])
            ("SP_IO" variable (:constant-flag t) nil [2515 2520])
            ("SP_STRUCT" variable (:constant-flag t) nil [2529 2538])
            ("SP_UNION" variable (:constant-flag t) nil [2562 2570])
            ("SP_TRUE" variable (:constant-flag t) nil [2595 2602])
            ("SP_FALSE" variable (:constant-flag t) nil [2615 2623])
            ("SP_EXPORT" variable (:constant-flag t) nil [2655 2664])
            ("SP_LOCAL" variable (:constant-flag t) nil [2741 2749])
            ("SP_LONG" type
               (:typedef ("int")
                :type "typedef")
                nil [2868 2900])
            ("SP_ULONG" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2902 2935])
            ("SP_DWORD" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2944 2977])
            ("SP_VOID" type
               (:typedef ("void")
                :type "typedef")
                nil [3141 3179])
            ("SP_CHAR" type
               (:typedef ("char")
                :type "typedef")
                nil [3180 3218])
            ("SP_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [3219 3249])
            ("SP_SHORT" type
               (:typedef ("short int")
                :type "typedef")
                nil [3251 3290])
            ("SP_BOOLEAN" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [3292 3333])
            ("SP_BYTE" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [3334 3372])
            ("SP_UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [3373 3412])
            ("SP_USHORT" type
               (:typedef ("unsigned short int")
                :type "typedef")
                nil [3413 3453])
            ("SP_WORD" type
               (:typedef ("unsigned short int")
                :type "typedef")
                nil [3454 3492])
            ("SP_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [3493 3531])
            ("SP_HANDLE" type
               (:typedef ("void")
                :pointer 1
                :type "typedef")
                nil [3551 3591])
            ("SP_SYS_HANDLE" type
               (:typedef ("void")
                :pointer 1
                :type "typedef")
                nil [3599 3643])
            ("SPP_CHAR" type
               (:typedef ("SP_CHAR" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3646 3685])
            ("SPP_SHORT" type
               (:typedef ("SP_SHORT" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3686 3726])
            ("SPP_LONG" type
               (:typedef ("SP_LONG" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3727 3766])
            ("SPP_INT" type
               (:typedef ("SP_INT" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3767 3805])
            ("SPP_BOOLEAN" type
               (:typedef ("SP_BOOLEAN" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3806 3848])
            ("SPP_BYTE" type
               (:typedef ("SP_BYTE" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3849 3888])
            ("SPP_UCHAR" type
               (:typedef ("SP_UCHAR" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3889 3929])
            ("SPP_USHORT" type
               (:typedef ("SP_USHORT" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3930 3971])
            ("SPP_WORD" type
               (:typedef ("SP_WORD" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [3972 4011])
            ("SPP_ULONG" type
               (:typedef ("SP_ULONG" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [4012 4052])
            ("SPP_DWORD" type
               (:typedef ("SP_DWORD" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [4053 4093])
            ("SPP_VOID" type
               (:typedef ("SP_VOID" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [4094 4133])
            ("SPP_HANDLE" type
               (:typedef ("SP_HANDLE" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [4134 4175])
            ("SPP_SYS_HANDLE" type
               (:typedef ("SP_SYS_HANDLE" type (:type "class") nil nil)
                :pointer 1
                :type "typedef")
                nil [4176 4221])
            ("SP_STATUS" type
               (:typedef ("SP_DWORD" type (:type "class") nil nil)
                :type "typedef")
                nil [4222 4255])
            ("SP_SUCCESS" variable (:constant-flag t) nil [4340 4350])
            ("SP_FAIL" variable (:constant-flag t) nil [4379 4386])
            ("SP_DRIVER_LIBRARY_ERROR_BASE" variable (:constant-flag t) nil [4424 4452])
            ("SP_DUAL_LIBRARY_ERROR_BASE" variable (:constant-flag t) nil [4470 4496])
            ("SP_SERVER_ERROR_BASE" variable (:constant-flag t) nil [4516 4536])
            ("SP_SHELL_ERROR_BASE" variable (:constant-flag t) nil [4562 4581])
            ("SP_SECURE_UPDATE_ERROR_BASE" variable (:constant-flag t) nil [4608 4635])
            ("SP_SETUP_LIBRARY_ERROR_BASE" variable (:constant-flag t) nil [4654 4681])
            ("SP_ERR_INVALID_PARAMETER" variable (:constant-flag t) nil [4736 4760])
            ("SP_ERR_SOFTWARE_KEY" variable (:constant-flag t) nil [4806 4825])
            ("SP_ERR_INVALID_LICENSE" variable (:constant-flag t) nil [4872 4894])
            ("SP_ERR_INVALID_FEATURE" variable (:constant-flag t) nil [4938 4960])
            ("SP_ERR_INVALID_TOKEN" variable (:constant-flag t) nil [5004 5024])
            ("SP_ERR_NO_LICENSE" variable (:constant-flag t) nil [5071 5088])
            ("SP_ERR_INSUFFICIENT_BUFFER" variable (:constant-flag t) nil [5138 5164])
            ("SP_ERR_VERIFY_FAILED" variable (:constant-flag t) nil [5207 5227])
            ("SP_ERR_CANNOT_OPEN_DRIVER" variable (:constant-flag t) nil [5274 5299])
            ("SP_ERR_ACCESS_DENIED" variable (:constant-flag t) nil [5342 5362])
            ("SP_ERR_INVALID_DEVICE_RESPONSE" variable (:constant-flag t) nil [5410 5440])
            ("SP_ERR_COMMUNICATIONS_ERROR" variable (:constant-flag t) nil [5483 5510])
            ("SP_ERR_COUNTER_LIMIT" variable (:constant-flag t) nil [5554 5574])
            ("SP_ERR_MEM_CORRUPT" variable (:constant-flag t) nil [5622 5640])
            ("SP_ERR_INVALID_FEATURE_TYPE" variable (:constant-flag t) nil [5691 5718])
            ("SP_ERR_DEVICE_IN_USE" variable (:constant-flag t) nil [5762 5782])
            ("SP_ERR_INVALID_API_VERSION" variable (:constant-flag t) nil [5830 5856])
            ("SP_ERR_TIME_OUT_ERROR" variable (:constant-flag t) nil [5900 5921])
            ("SP_ERR_INVALID_PACKET" variable (:constant-flag t) nil [5969 5990])
            ("SP_ERR_KEY_NOT_ACTIVE" variable (:constant-flag t) nil [6038 6059])
            ("SP_ERR_FUNCTION_NOT_ENABLED" variable (:constant-flag t) nil [6107 6134])
            ("SP_ERR_DEVICE_RESET" variable (:constant-flag t) nil [6178 6197])
            ("SP_ERR_TIME_CHEAT" variable (:constant-flag t) nil [6245 6262])
            ("SP_ERR_INVALID_COMMAND" variable (:constant-flag t) nil [6313 6335])
            ("SP_ERR_RESOURCE" variable (:constant-flag t) nil [6380 6395])
            ("SP_ERR_UNIT_NOT_FOUND" variable (:constant-flag t) nil [6447 6468])
            ("SP_ERR_DEMO_EXPIRED" variable (:constant-flag t) nil [6516 6535])
            ("SP_ERR_QUERY_TOO_LONG" variable (:constant-flag t) nil [6583 6604])
            ("SP_ERR_USER_AUTH_REQUIRED" variable (:constant-flag t) nil [6652 6677])
            ("SP_ERR_DUPLICATE_LIC_ID" variable (:constant-flag t) nil [6725 6748])
            ("SP_ERR_DECRYPTION_FAILED" variable (:constant-flag t) nil [6803 6827])
            ("SP_ERR_BAD_CHKSUM" variable (:constant-flag t) nil [6881 6898])
            ("SP_ERR_BAD_LICENSE_IMAGE" variable (:constant-flag t) nil [6959 6983])
            ("SP_ERR_INSUFFICIENT_MEMORY" variable (:constant-flag t) nil [7037 7063])
            ("SP_ERR_CONFIG_FILE_NOT_FOUND" variable (:constant-flag t) nil [7116 7144])
            ("SP_ERR_SERVER_PROBABLY_NOT_UP" variable (:constant-flag t) nil [7219 7248])
            ("SP_ERR_UNKNOWN_HOST" variable (:constant-flag t) nil [7290 7309])
            ("SP_ERR_BAD_SERVER_MESSAGE" variable (:constant-flag t) nil [7361 7386])
            ("SP_ERR_NO_LICENSE_AVAILABLE" variable (:constant-flag t) nil [7432 7459])
            ("SP_ERR_INVALID_OPERATION" variable (:constant-flag t) nil [7503 7527])
            ("SP_ERR_INTERNAL_ERROR" variable (:constant-flag t) nil [7574 7595])
            ("SP_ERR_PROTOCOL_NOT_INSTALLED" variable (:constant-flag t) nil [7645 7674])
            ("SP_ERR_BAD_CLIENT_MESSAGE" variable (:constant-flag t) nil [7716 7741])
            ("SP_ERR_SOCKET_OPERATION" variable (:constant-flag t) nil [7787 7810])
            ("SP_ERR_NO_SERVER_RESPONSE" variable (:constant-flag t) nil [7858 7883])
            ("SP_ERR_SERVER_BUSY" variable (:constant-flag t) nil [7931 7949])
            ("SP_ERR_SERVER_TIME_OUT" variable (:constant-flag t) nil [8003 8025])
            ("SP_ERR_BAD_ALGO" variable (:constant-flag t) nil [8102 8117])
            ("SP_ERR_LONG_MSG" variable (:constant-flag t) nil [8173 8188])
            ("SP_ERR_READ_ERROR" variable (:constant-flag t) nil [8244 8261])
            ("SP_ERR_NOT_ENOUGH_MEMORY" variable (:constant-flag t) nil [8315 8339])
            ("SP_ERR_CANNOT_OPEN" variable (:constant-flag t) nil [8386 8404])
            ("SP_ERR_WRITE_ERROR" variable (:constant-flag t) nil [8457 8475])
            ("SP_ERR_CANNOT_OVERWRITE" variable (:constant-flag t) nil [8528 8551])
            ("SP_ERR_INVALID_HEADER" variable (:constant-flag t) nil [8599 8620])
            ("SP_ERR_TMP_CREATE_ERROR" variable (:constant-flag t) nil [8670 8693])
            ("SP_ERR_PATH_NOT_THERE" variable (:constant-flag t) nil [8741 8762])
            ("SP_ERR_BAD_FILE_INFO" variable (:constant-flag t) nil [8813 8833])
            ("SP_ERR_NOT_WIN32_FILE" variable (:constant-flag t) nil [8885 8906])
            ("SP_ERR_INVALID_MACHINE" variable (:constant-flag t) nil [8957 8979])
            ("SP_ERR_INVALID_SECTION" variable (:constant-flag t) nil [9029 9051])
            ("SP_ERR_INVALID_RELOC" variable (:constant-flag t) nil [9101 9121])
            ("SP_ERR_CRYPT_ERROR" variable (:constant-flag t) nil [9173 9191])
            ("SP_ERR_SMARTHEAP_ERROR" variable (:constant-flag t) nil [9245 9267])
            ("SP_ERR_IMPORT_OVERWRITE_ERROR" variable (:constant-flag t) nil [9317 9346])
            ("SP_ERR_FRAMEWORK_REQUIRED" variable (:constant-flag t) nil [9389 9414])
            ("SP_ERR_CANNOT_HANDLE_FILE" variable (:constant-flag t) nil [9461 9486])
            ("SP_ERR_STRONG_NAME" variable (:constant-flag t) nil [9534 9552])
            ("SP_ERR_FRAMEWORK_10" variable (:constant-flag t) nil [9605 9624])
            ("SP_ERR_FRAMEWORK_SDK_10" variable (:constant-flag t) nil [9676 9699])
            ("SP_ERR_FRAMEWORK_11" variable (:constant-flag t) nil [9748 9767])
            ("SP_ERR_FRAMEWORK_SDK_11" variable (:constant-flag t) nil [9819 9842])
            ("SP_ERR_FRAMEWORK_20" variable (:constant-flag t) nil [9890 9909])
            ("SP_ERR_FRAMEWORK_SDK_20" variable (:constant-flag t) nil [9961 9984])
            ("SP_ERR_APP_NOT_SUPPORTED" variable (:constant-flag t) nil [10032 10056])
            ("SP_ERR_FILE_COPY" variable (:constant-flag t) nil [10103 10119])
            ("SP_ERR_HEADER_SIZE_EXCEED" variable (:constant-flag t) nil [10168 10193])
            ("SP_ERR_SGEN" variable (:constant-flag t) nil [10239 10250])
            ("SP_ERR_CODE_MORPHING" variable (:constant-flag t) nil [10292 10312])
            ("SP_ERR_PARAMETER_MISSING" variable (:constant-flag t) nil [10397 10421])
            ("SP_ERR_PARAMETER_IDENTIFIER_MISSING" variable (:constant-flag t) nil [10466 10501])
            ("SP_ERR_PARAMETER_INVALID" variable (:constant-flag t) nil [10544 10568])
            ("SP_ERR_REGISTRY" variable (:constant-flag t) nil [10613 10628])
            ("SP_ERR_VERIFY_SIGN" variable (:constant-flag t) nil [10676 10694])
            ("SP_ERR_PARAMETER" variable (:constant-flag t) nil [10741 10757])
            ("SP_ERR_LICENSE_TEMPLATE_FILE" variable (:constant-flag t) nil [10804 10832])
            ("SP_ERR_NO_DEVELOPER_KEY" variable (:constant-flag t) nil [10873 10896])
            ("SP_ERR_NO_ENDUSER_KEY" variable (:constant-flag t) nil [10948 10969])
            ("SP_ERR_NO_POINT_KEYS" variable (:constant-flag t) nil [11018 11038])
            ("SP_ERR_NO_SHELL_FEATURE" variable (:constant-flag t) nil [11087 11110])
            ("SP_ERR_SHELL_OPTION_FILE_MISSING" variable (:constant-flag t) nil [11159 11191])
            ("SP_ERR_SHELL_OPTION_FILE_FORMAT" variable (:constant-flag t) nil [11234 11265])
            ("SP_ERR_SHELL_OPTION_FILE_INVALID" variable (:constant-flag t) nil [11310 11342])
            ("SP_ERR_DELETE_LICENSE" variable (:constant-flag t) nil [11389 11410])
            ("SP_ERR_FILE_CREATE_FAILED" variable (:constant-flag t) nil [11468 11493])
            ("SP_ERR_SHELLFILES_LIMIT" variable (:constant-flag t) nil [11547 11570])
            ("SP_ERR_SINGLE_INSTANCE_ERROR" variable (:constant-flag t) nil [11626 11654])
            ("SP_ERR_NO_EXE_FILE" variable (:constant-flag t) nil [11706 11724])
            ("SP_ERR_KEY_NOT_FOUND" variable (:constant-flag t) nil [11818 11838])
            ("SP_ERR_ILLEGAL_UPDATE" variable (:constant-flag t) nil [11896 11917])
            ("SP_ERR_DLL_LOAD_ERROR" variable (:constant-flag t) nil [11974 11995])
            ("SP_ERR_NO_CONFIG_FILE" variable (:constant-flag t) nil [12052 12073])
            ("SP_ERR_INVALID_CONFIG_FILE" variable (:constant-flag t) nil [12130 12156])
            ("SP_ERR_UPDATE_WIZARD_NOT_FOUND" variable (:constant-flag t) nil [12209 12239])
            ("SP_ERR_UPDATE_WIZARD_SPAWN_ERROR" variable (:constant-flag t) nil [12287 12319])
            ("SP_ERR_EXCEPTION_ERROR" variable (:constant-flag t) nil [12365 12387])
            ("SP_ERR_INVALID_CLIENT_LIB" variable (:constant-flag t) nil [12443 12468])
            ("SP_ERR_CABINET_DLL" variable (:constant-flag t) nil [12521 12539])
            ("SP_ERR_INSUFFICIENT_REQ_CODE_BUFFER" variable (:constant-flag t) nil [12600 12635])
            ("SP_ERR_UPDATE_WIZARD_USER_CANCELED" variable (:constant-flag t) nil [12679 12713])
            ("SP_ERR_INVALID_DLL_VERSION" variable (:constant-flag t) nil [12808 12834])
            ("SP_ERR_INVALID_FILE_TYPE" variable (:constant-flag t) nil [12887 12911])
            ("SP_ERR_NLF_DUPLICATE_FEATURE_ID" variable (:constant-flag t) nil [13006 13037])
            ("SP_ERR_NLF_DUPLICATE_LICENSE_ID" variable (:constant-flag t) nil [13085 13116])
            ("SP_ERR_NLF_SIZEOVERFLOW" variable (:constant-flag t) nil [13164 13187])
            ("SP_ERR_BAD_XML" variable (:constant-flag t) nil [13246 13260])
            ("SP_ERR_BAD_PACKET" variable (:constant-flag t) nil [13317 13334])
            ("SP_ERR_BAD_FEATURE" variable (:constant-flag t) nil [13388 13406])
            ("SP_ERR_BAD_HEADER" variable (:constant-flag t) nil [13459 13476])
            ("SP_ERR_ISV_MISSING" variable (:constant-flag t) nil [13531 13549])
            ("SP_ERR_DEVID_MISMATCH" variable (:constant-flag t) nil [13603 13624])
            ("SP_ERR_LM_TOKEN_ERROR" variable (:constant-flag t) nil [13674 13695])
            ("SP_ERR_LM_MISSING" variable (:constant-flag t) nil [13745 13762])
            ("SP_ERR_INVALID_SIZE" variable (:constant-flag t) nil [13816 13835])
            ("SP_ERR_FEATURE_NOT_FOUND" variable (:constant-flag t) nil [13887 13911])
            ("SP_ERR_LICENSE_NOT_FOUND" variable (:constant-flag t) nil [13960 13984])
            ("SP_ERR_BEYOND_RANGE" variable (:constant-flag t) nil [14033 14052]))          
      :file "SentinelKeystypes.h"
      :pointmax 14107
      :fsize 14106
      :lastmodtime '(21956 21571 784987 619000)
      :unmatched-syntax nil
      :lexical-table 
        '(("_16BIT_" . ((number "1" 1185 . 1186)))
          ("SP_OUT")
          ("SP_IO")
          ("SP_STRUCT" . ((TYPEDEF "typedef" 2539 . 2546) (STRUCT "struct" 2547 . 2553)))
          ("SP_SECURE_UPDATE_ERROR_BASE" . ((number "500" 4642 . 4645)))
          ("SP_ERR_INSUFFICIENT_BUFFER" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 7)" 5166 . 5198)))
          ("SP_ERR_DEMO_EXPIRED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 27)" 6541 . 6574)))
          ("SP_ERR_BAD_LICENSE_IMAGE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 33)" 6995 . 7028)))
          ("SP_ERR_PROTOCOL_NOT_INSTALLED" . ((semantic-list "(SP_SERVER_ERROR_BASE + 7)" 7681 . 7707)))
          ("SP_ERR_PARAMETER_MISSING" . ((semantic-list "(SP_SHELL_ERROR_BASE + 50)" 10431 . 10457)))
          ("SP_ERR_NO_ENDUSER_KEY" . ((semantic-list "(SP_SHELL_ERROR_BASE + 59)" 10983 . 11009)))
          ("SP_ERR_SHELL_OPTION_FILE_MISSING" . ((semantic-list "(SP_SHELL_ERROR_BASE + 62)" 11199 . 11225)))
          ("SP_ERR_CABINET_DLL" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 10)" 12557 . 12591)))
          ("SP_ERR_INSUFFICIENT_REQ_CODE_BUFFER" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 11)" 12636 . 12670)))
          ("SP_ERR_INVALID_PARAMETER" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 1)" 4765 . 4797)))
          ("SP_ERR_VERIFY_FAILED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 8)" 5233 . 5265)))
          ("SP_ERR_MEM_CORRUPT" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 14)" 5649 . 5682)))
          ("SP_ERR_CANNOT_OVERWRITE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 7)" 8565 . 8590)))
          ("SP_ERR_APP_NOT_SUPPORTED" . ((semantic-list "(SP_SHELL_ERROR_BASE + 33)" 10068 . 10094)))
          ("SP_ERR_HEADER_SIZE_EXCEED" . ((semantic-list "(SP_SHELL_ERROR_BASE + 35)" 10204 . 10230)))
          ("SP_ERR_NO_DEVELOPER_KEY" . ((semantic-list "(SP_SHELL_ERROR_BASE + 58)" 10913 . 10939)))
          ("SP_ERR_NO_EXE_FILE" . ((semantic-list "(SP_SHELL_ERROR_BASE +  69)" 11749 . 11776)))
          ("SP_ERR_INVALID_CONFIG_FILE" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 5)" 12166 . 12199)))
          ("SP_ERR_INVALID_DLL_VERSION" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 13)" 12844 . 12878)))
          ("SP_ERR_BAD_XML" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 1)" 13275 . 13308)))
          ("SP_ERR_BAD_HEADER" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 4)" 13488 . 13521)))
          ("SP_SERVER_ERROR_BASE" . ((number "300" 4550 . 4553)))
          ("SP_SHELL_ERROR_BASE" . ((number "400" 4596 . 4599)))
          ("SP_ERR_UNKNOWN_HOST" . ((semantic-list "(SP_SERVER_ERROR_BASE + 2)" 7326 . 7352)))
          ("SP_ERR_LONG_MSG" . ((semantic-list "(SP_SHELL_ERROR_BASE + 2)" 8210 . 8235)))
          ("SP_ERR_READ_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 3)" 8281 . 8306)))
          ("SP_ERR_INVALID_RELOC" . ((semantic-list "(SP_SHELL_ERROR_BASE + 15)" 9138 . 9164)))
          ("SP_ERR_CRYPT_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 16)" 9210 . 9236)))
          ("SP_ERR_IMPORT_OVERWRITE_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 18)" 9354 . 9380)))
          ("SP_ERR_SGEN" . ((semantic-list "(SP_SHELL_ERROR_BASE + 36)" 10257 . 10283)))
          ("SP_ERR_PARAMETER_INVALID" . ((semantic-list "(SP_SHELL_ERROR_BASE + 52)" 10578 . 10604)))
          ("SP_ERR_SHELL_OPTION_FILE_INVALID" . ((semantic-list "(SP_SHELL_ERROR_BASE +  64)" 11353 . 11380)))
          ("SP_ERR_FILE_CREATE_FAILED" . ((semantic-list "(SP_SHELL_ERROR_BASE +  66)" 11511 . 11538)))
          ("SP_ERR_NO_CONFIG_FILE" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 4)" 12088 . 12121)))
          ("SP_FALSE" . ((number "0" 2625 . 2626)))
          ("SP_ERR_INVALID_TOKEN" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 5)" 5030 . 5062)))
          ("SP_ERR_ACCESS_DENIED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 10)" 5368 . 5401)))
          ("SP_ERR_INSUFFICIENT_MEMORY" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 34)" 7073 . 7106)))
          ("SP_ERR_SERVER_BUSY" . ((semantic-list "(SP_SERVER_ERROR_BASE + 11)" 7967 . 7994)))
          ("SP_ERR_PARAMETER_IDENTIFIER_MISSING" . ((semantic-list "(SP_SHELL_ERROR_BASE + 51)" 10509 . 10535)))
          ("SP_ERR_INVALID_SIZE" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 9)" 13845 . 13878)))
          ("SP_ERR_LICENSE_NOT_FOUND" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 11)" 13989 . 14023)))
          ("_DOS_" . ((number "1" 1167 . 1168)))
          ("SP_API")
          ("SP_PTR" . ((punctuation "*" 2373 . 2374)))
          ("SP_ERR_STRONG_NAME" . ((semantic-list "(SP_SHELL_ERROR_BASE + 26)" 9570 . 9596)))
          ("SP_ERR_CODE_MORPHING" . ((semantic-list "(SP_SHELL_ERROR_BASE + 37)" 10316 . 10342)))
          ("SP_ERR_SHELL_OPTION_FILE_FORMAT" . ((semantic-list "(SP_SHELL_ERROR_BASE +  63)" 11274 . 11301)))
          ("SP_ERR_EXCEPTION_ERROR" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 8)" 12401 . 12434)))
          ("SP_ERR_NLF_DUPLICATE_FEATURE_ID" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 30)" 13042 . 13076)))
          ("SP_ERR_DEVID_MISMATCH" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 6)" 13632 . 13665)))
          ("SP_UNION" . ((TYPEDEF "typedef" 2572 . 2579) (UNION "union" 2580 . 2585)))
          ("SP_EXPORT" . ((EXTERN "extern" 2665 . 2671) (string "\"C\"" 2672 . 2675)))
          ("SP_ERR_CONFIG_FILE_NOT_FOUND" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 35)" 7151 . 7184)))
          ("SP_ERR_INVALID_OPERATION" . ((semantic-list "(SP_SERVER_ERROR_BASE + 5)" 7539 . 7565)))
          ("SP_ERR_SOCKET_OPERATION" . ((semantic-list "(SP_SERVER_ERROR_BASE + 9)" 7823 . 7849)))
          ("SP_ERR_SERVER_TIME_OUT" . ((semantic-list "(SP_SERVER_ERROR_BASE + 12)" 8039 . 8066)))
          ("SP_ERR_PATH_NOT_THERE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 10)" 8778 . 8804)))
          ("SP_ERR_CANNOT_HANDLE_FILE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 22)" 9498 . 9524)))
          ("SP_ERR_PARAMETER" . ((semantic-list "(SP_SHELL_ERROR_BASE + 56)" 10769 . 10795)))
          ("SP_ERR_DLL_LOAD_ERROR" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 3)" 12010 . 12043)))
          ("SP_ERR_ISV_MISSING" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 5)" 13560 . 13593)))
          ("_SENTINEL_KEYS_TYPES_H")
          ("SP_DRIVER_LIBRARY_ERROR_BASE" . ((number "100" 4458 . 4461)))
          ("SP_ERR_SOFTWARE_KEY" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 2)" 4831 . 4863)))
          ("SP_ERR_INVALID_LICENSE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 3)" 4897 . 4929)))
          ("SP_ERR_COUNTER_LIMIT" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 13)" 5580 . 5613)))
          ("SP_ERR_FUNCTION_NOT_ENABLED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 21)" 6136 . 6169)))
          ("SP_ERR_QUERY_TOO_LONG" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 28)" 6610 . 6643)))
          ("SP_ERR_NOT_ENOUGH_MEMORY" . ((semantic-list "(SP_SHELL_ERROR_BASE + 4)" 8352 . 8377)))
          ("SP_ERR_FRAMEWORK_10" . ((semantic-list "(SP_SHELL_ERROR_BASE + 27)" 9641 . 9667)))
          ("SP_ERR_FRAMEWORK_SDK_10" . ((semantic-list "(SP_SHELL_ERROR_BASE + 28)" 9712 . 9738)))
          ("SP_ERR_REGISTRY" . ((semantic-list "(SP_SHELL_ERROR_BASE + 54)" 10641 . 10667)))
          ("SP_ERR_LM_TOKEN_ERROR" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 7)" 13703 . 13736)))
          ("SP_ERR_INVALID_FEATURE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 4)" 4963 . 4995)))
          ("SP_ERR_INVALID_DEVICE_RESPONSE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 11)" 5441 . 5474)))
          ("SP_ERR_INVALID_PACKET" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 19)" 5996 . 6029)))
          ("SP_ERR_WRITE_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 6)" 8494 . 8519)))
          ("SP_ERR_SMARTHEAP_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 17)" 9282 . 9308)))
          ("SP_ERR_FRAMEWORK_11" . ((semantic-list "(SP_SHELL_ERROR_BASE + 29)" 9784 . 9810)))
          ("SP_ERR_FRAMEWORK_SDK_11" . ((semantic-list "(SP_SHELL_ERROR_BASE + 30)" 9855 . 9881)))
          ("SP_ERR_NO_SHELL_FEATURE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 61)" 11124 . 11150)))
          ("SP_ERR_ILLEGAL_UPDATE" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 2)" 11932 . 11965)))
          ("SP_ERR_INVALID_CLIENT_LIB" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 9)" 12479 . 12512)))
          ("SP_ERR_NLF_SIZEOVERFLOW" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 32)" 13200 . 13234)))
          ("SP_ERR_LM_MISSING" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 8)" 13774 . 13807)))
          ("SP_INOUT")
          ("SP_ERR_INVALID_FEATURE_TYPE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 15)" 5720 . 5753)))
          ("SP_ERR_KEY_NOT_ACTIVE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 20)" 6065 . 6098)))
          ("SP_ERR_INVALID_COMMAND" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 24)" 6338 . 6371)))
          ("SP_ERR_BAD_SERVER_MESSAGE" . ((semantic-list "(SP_SERVER_ERROR_BASE + 3)" 7397 . 7423)))
          ("SP_ERR_INVALID_MACHINE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 13)" 8994 . 9020)))
          ("SP_ERR_VERIFY_SIGN" . ((semantic-list "(SP_SHELL_ERROR_BASE + 55)" 10706 . 10732)))
          ("SP_ERR_NO_POINT_KEYS" . ((semantic-list "(SP_SHELL_ERROR_BASE + 60)" 11052 . 11078)))
          ("SP_ERR_DELETE_LICENSE" . ((semantic-list "(SP_SHELL_ERROR_BASE +  65)" 11432 . 11459)))
          ("SP_ERR_FEATURE_NOT_FOUND" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 10)" 13916 . 13950)))
          ("SP_SUCCESS" . ((number "0" 4369 . 4370)))
          ("SP_ERR_CANNOT_OPEN_DRIVER" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 9)" 5301 . 5333)))
          ("SP_ERR_INVALID_API_VERSION" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 17)" 5858 . 5891)))
          ("SP_ERR_DEVICE_RESET" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 22)" 6203 . 6236)))
          ("SP_ERR_UNIT_NOT_FOUND" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 26)" 6474 . 6507)))
          ("SP_ERR_NO_LICENSE_AVAILABLE" . ((semantic-list "(SP_SERVER_ERROR_BASE + 4)" 7468 . 7494)))
          ("SP_ERR_CANNOT_OPEN" . ((semantic-list "(SP_SHELL_ERROR_BASE + 5)" 8423 . 8448)))
          ("SP_ERR_TMP_CREATE_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE + 9)" 8707 . 8732)))
          ("SP_ERR_BAD_FILE_INFO" . ((semantic-list "(SP_SHELL_ERROR_BASE + 11)" 8850 . 8876)))
          ("SP_ERR_INVALID_SECTION" . ((semantic-list "(SP_SHELL_ERROR_BASE + 14)" 9066 . 9092)))
          ("SP_ERR_FRAMEWORK_20" . ((semantic-list "(SP_SHELL_ERROR_BASE + 31)" 9926 . 9952)))
          ("SP_ERR_FRAMEWORK_SDK_20" . ((semantic-list "(SP_SHELL_ERROR_BASE + 32)" 9997 . 10023)))
          ("SP_ERR_LICENSE_TEMPLATE_FILE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 57)" 10838 . 10864)))
          ("SP_ERR_SHELLFILES_LIMIT" . ((semantic-list "(SP_SHELL_ERROR_BASE +  67)" 11590 . 11617)))
          ("SP_ERR_UPDATE_WIZARD_SPAWN_ERROR" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 7)" 12323 . 12356)))
          ("SP_ERR_NLF_DUPLICATE_LICENSE_ID" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 31)" 13121 . 13155)))
          ("SP_ERR_BAD_FEATURE" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 3)" 13417 . 13450)))
          ("SP_ERR_BEYOND_RANGE" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 12)" 14062 . 14096)))
          ("SP_FAIL" . ((number "1" 4413 . 4414)))
          ("SP_DUAL_LIBRARY_ERROR_BASE" . ((number "200" 4504 . 4507)))
          ("SP_ERR_NO_LICENSE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 6)" 5097 . 5129)))
          ("SP_ERR_DEVICE_IN_USE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 16)" 5788 . 5821)))
          ("SP_ERR_USER_AUTH_REQUIRED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 29)" 6683 . 6716)))
          ("SP_ERR_DUPLICATE_LIC_ID" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 30)" 6761 . 6794)))
          ("SP_ERR_DECRYPTION_FAILED" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 31)" 6839 . 6872)))
          ("SP_ERR_BAD_CHKSUM" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 32)" 6917 . 6950)))
          ("SP_ERR_INVALID_HEADER" . ((semantic-list "(SP_SHELL_ERROR_BASE + 8)" 8636 . 8661)))
          ("SP_ERR_NOT_WIN32_FILE" . ((semantic-list "(SP_SHELL_ERROR_BASE + 12)" 8922 . 8948)))
          ("SP_ERR_FILE_COPY" . ((semantic-list "(SP_SHELL_ERROR_BASE + 34)" 10133 . 10159)))
          ("SP_ERR_SINGLE_INSTANCE_ERROR" . ((semantic-list "(SP_SHELL_ERROR_BASE +  68)" 11669 . 11696)))
          ("SP_ERR_KEY_NOT_FOUND" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 1)" 11854 . 11887)))
          ("SP_ERR_UPDATE_WIZARD_NOT_FOUND" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 6)" 12245 . 12278)))
          ("SP_ERR_INVALID_FILE_TYPE" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 14)" 12923 . 12957)))
          ("SP_TRUE" . ((number "1" 2605 . 2606)))
          ("SP_LOCAL" . ((STATIC "static" 2751 . 2757)))
          ("SP_SETUP_LIBRARY_ERROR_BASE" . ((number "700" 4688 . 4691)))
          ("SP_ERR_COMMUNICATIONS_ERROR" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 12)" 5512 . 5545)))
          ("SP_ERR_TIME_OUT_ERROR" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 18)" 5927 . 5960)))
          ("SP_ERR_TIME_CHEAT" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 23)" 6271 . 6304)))
          ("SP_ERR_SERVER_PROBABLY_NOT_UP" . ((semantic-list "(SP_SERVER_ERROR_BASE + 1)" 7255 . 7281)))
          ("SP_ERR_INTERNAL_ERROR" . ((semantic-list "(SP_SERVER_ERROR_BASE + 6)" 7610 . 7636)))
          ("SP_ERR_NO_SERVER_RESPONSE" . ((semantic-list "(SP_SERVER_ERROR_BASE + 10)" 7894 . 7921)))
          ("SP_ERR_BAD_ALGO" . ((semantic-list "(SP_SHELL_ERROR_BASE + 1)" 8139 . 8164)))
          ("SP_ERR_FRAMEWORK_REQUIRED" . ((semantic-list "(SP_SHELL_ERROR_BASE + 21)" 9426 . 9452)))
          ("SP_ERR_UPDATE_WIZARD_USER_CANCELED" . ((semantic-list "(SP_SECURE_UPDATE_ERROR_BASE + 12)" 12715 . 12749)))
          ("SP_ERR_BAD_PACKET" . ((semantic-list "(SP_SETUP_LIBRARY_ERROR_BASE + 2)" 13346 . 13379)))
          ("SP_IN")
          ("SP_ERR_RESOURCE" . ((semantic-list "(SP_DUAL_LIBRARY_ERROR_BASE + 25)" 6405 . 6438)))
          ("SP_ERR_BAD_CLIENT_MESSAGE" . ((semantic-list "(SP_SERVER_ERROR_BASE + 8)" 7752 . 7778)))
          )
))
  :file "!home!chz!Documents!加密狗Linux!Sentinel_Keys_SDK_Components!sentinel_keys_installer!language_packs!en_US!toolkit!Samples!gcc!LicenseSignAndVerify!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
