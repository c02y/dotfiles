;; Object flask/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "flask/"
  :tables (list 
   (semanticdb-table "__init__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask
    ~~~~~

    A microframework based on Werkzeug.  It's extensively documented
    and follows best practice patterns.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 256])
            ("__version__" variable nil nil [258 282])
            ("werkzeug.exceptions" include nil nil [401 438])
            ("werkzeug.utils" include nil nil [439 474])
            ("jinja2" include nil nil [475 508])
            ("Flask" include nil nil [520 551])
            ("Request" include nil nil [520 551])
            ("Response" include nil nil [520 551])
            ("Config" include nil nil [565 578])
            ("url_for" include nil nil [593 753])
            ("flash" include nil nil [593 753])
            ("send_file" include nil nil [593 753])
            ("send_from_directory" include nil nil [593 753])
            ("get_flashed_messages" include nil nil [593 753])
            ("get_template_attribute" include nil nil [593 753])
            ("make_response" include nil nil [593 753])
            ("safe_join" include nil nil [593 753])
            ("stream_with_context" include nil nil [593 753])
            ("current_app" include nil nil [768 850])
            ("g" include nil nil [768 850])
            ("request" include nil nil [768 850])
            ("session" include nil nil [768 850])
            ("_request_ctx_stack" include nil nil [768 850])
            ("_app_ctx_stack" include nil nil [768 850])
            ("has_request_context" include nil nil [861 961])
            ("has_app_context" include nil nil [861 961])
            ("after_this_request" include nil nil [861 961])
            ("copy_current_request_context" include nil nil [861 961])
            ("Module" include nil nil [975 988])
            ("Blueprint" include nil nil [1006 1022])
            ("render_template" include nil nil [1040 1086])
            ("render_template_string" include nil nil [1040 1086])
            ("signals_available" include nil nil [1116 1340])
            ("template_rendered" include nil nil [1116 1340])
            ("request_started" include nil nil [1116 1340])
            ("request_finished" include nil nil [1116 1340])
            ("got_request_exception" include nil nil [1116 1340])
            ("request_tearing_down" include nil nil [1116 1340])
            ("appcontext_tearing_down" include nil nil [1116 1340])
            ("appcontext_pushed" include nil nil [1116 1340])
            ("appcontext_popped" include nil nil [1116 1340])
            ("message_flashed" include nil nil [1116 1340])
            ("json" include nil nil [1431 1442])
            ("jsonify" variable nil nil [1543 1565])
            ("SecureCookieSession" include nil nil [1619 1656])
            ("json_available" variable nil nil [1657 1678]))          
    :file "__init__.py"
    :pointmax 1679
    :fsize 1678
    :lastmodtime '(21468 4219 419195 298000)
    :unmatched-syntax '((FROM 1604 . 1608) (PERIOD 1609 . 1610) (FROM 1424 . 1428) (PERIOD 1429 . 1430) (FROM 1102 . 1106) (PERIOD 1107 . 1108) (FROM 1023 . 1027) (PERIOD 1028 . 1029) (FROM 989 . 993) (PERIOD 994 . 995) (FROM 962 . 966) (PERIOD 967 . 968) (FROM 851 . 855) (PERIOD 856 . 857) (FROM 754 . 758) (PERIOD 759 . 760) (FROM 579 . 583) (PERIOD 584 . 585) (FROM 552 . 556) (PERIOD 557 . 558) (FROM 510 . 514) (PERIOD 515 . 516))
    )
   (semanticdb-table "__main__.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.__main__
    ~~~~~~~~~~~~~~

    Alias for flask.run for the command line.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 211])
            ("if" code nil nil [214 292]))          
    :file "__main__.py"
    :pointmax 292
    :fsize 291
    :lastmodtime '(21468 4219 430195 47000)
    :unmatched-syntax '((FROM 245 . 249) (PERIOD 250 . 251))
    )
   (semanticdb-table "_compat.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask._compat
    ~~~~~~~~~~~~~

    Some py2/py3 compatibility support based on a stripped down
    version of six so we don't have to depend on a specific version
    of it.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 306])
            ("sys" include nil nil [307 317])
            ("PY2" code nil nil [319 349])
            ("_identity" variable nil nil [350 373])
            ("if" code nil nil [376 1278])
            ("with_metaclass" function (:arguments 
              ( ("meta" variable nil (reparse-symbol function_parameters) [1299 1303])
                ("bases" variable nil (reparse-symbol function_parameters) [1305 1311]))              ) nil [1280 2165])
            ("BROKEN_PYPY_CTXMGR_EXIT" variable nil nil [2505 2536])
            ("if" code nil nil [2537 2936]))          
    :file "_compat.py"
    :pointmax 2936
    :fsize 2935
    :lastmodtime '(21468 4219 417195 343000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "app.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.app
    ~~~~~~~~~

    This module implements the central WSGI application object.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 219])
            ("os" include nil nil [221 230])
            ("sys" include nil nil [231 241])
            ("click" include nil nil [242 254])
            ("threading" include nil nil [255 281])
            ("datetime" include nil nil [282 312])
            ("itertools" include nil nil [313 340])
            ("functools" include nil nil [341 377])
            ("werkzeug.datastructures" include nil nil [379 428])
            ("werkzeug.routing" include nil nil [429 496])
            ("werkzeug.exceptions" include nil nil [497 600])
            ("_PackageBoundObject" include nil nil [616 744])
            ("url_for" include nil nil [616 744])
            ("get_flashed_messages" include nil nil [616 744])
            ("locked_cached_property" include nil nil [616 744])
            ("_endpoint_from_view_func" include nil nil [616 744])
            ("find_package" include nil nil [616 744])
            ("json" include nil nil [752 763])
            ("Request" include nil nil [779 803])
            ("Response" include nil nil [779 803])
            ("ConfigAttribute" include nil nil [817 847])
            ("Config" include nil nil [817 847])
            ("RequestContext" include nil nil [858 907])
            ("AppContext" include nil nil [858 907])
            ("_AppCtxGlobals" include nil nil [858 907])
            ("_request_ctx_stack" include nil nil [922 968])
            ("request" include nil nil [922 968])
            ("session" include nil nil [922 968])
            ("g" include nil nil [922 968])
            ("SecureCookieSessionInterface" include nil nil [984 1019])
            ("blueprint_is_module" include nil nil [1033 1059])
            ("DispatchingJinjaLoader" include nil nil [1077 1159])
            ("Environment" include nil nil [1077 1159])
            ("_default_template_ctx_processor" include nil nil [1077 1159])
            ("request_started" include nil nil [1174 1291])
            ("request_finished" include nil nil [1174 1291])
            ("got_request_exception" include nil nil [1174 1291])
            ("request_tearing_down" include nil nil [1174 1291])
            ("appcontext_tearing_down" include nil nil [1174 1291])
            ("reraise" include nil nil [1306 1360])
            ("string_types" include nil nil [1306 1360])
            ("text_type" include nil nil [1306 1360])
            ("integer_types" include nil nil [1306 1360])
            ("_logger_lock" variable nil nil [1402 1423])
            ("_make_timedelta" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [1446 1451]))              ) nil [1426 1552])
            ("setupmethod" function
               (:documentation "Wraps a method so that it performs a check in debug mode if the
    first request was already handled.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [1570 1571]))                  )
                nil [1554 2388])
            ("Flask" type
               (:documentation "The flask object implements a WSGI application and acts as the central
    object.  It is passed the name of the module or package of the
    application.  Once it is created it will act as a central registry for
    the view functions, the URL rules, template configuration and much more.

    The name of the package is used to resolve resources from inside the
    package or the folder the module is contained in depending on if the
    package parameter resolves to an actual python package (a folder with
    an `__init__.py` file inside) or a standard module (just a `.py` file).

    For more information about resource loading, see :func:`open_resource`.

    Usually you create a :class:`Flask` instance in your main module or
    in the `__init__.py` file of your package like this::

        from flask import Flask
        app = Flask(__name__)

    .. admonition:: About the First Parameter

        The idea of the first parameter is to give Flask an idea what
        belongs to your application.  This name is used to find resources
        on the file system, can be used by extensions to improve debugging
        information and a lot more.

        So it's important what you provide there.  If you are using a single
        module, `__name__` is always the correct value.  If you however are
        using a package, it's usually recommended to hardcode the name of
        your package there.

        For example if your application is defined in `yourapplication/app.py`
        you should create it with one of the two versions below::

            app = Flask('yourapplication')
            app = Flask(__name__.split('.')[0])

        Why is that?  The application will work even with `__name__`, thanks
        to how resources are looked up.  However it will make debugging more
        painful.  Certain extensions can make assumptions based on the
        import name of your application.  For example the Flask-SQLAlchemy
        extension will look for the code in your application that triggered
        an SQL query in debug mode.  If the import name is not properly set
        up, that debugging information is lost.  (For example it would only
        pick up SQL queries in `yourapplication.app` and not
        `yourapplication.views.frontend`)

    .. versionadded:: 0.7
       The `static_url_path`, `static_folder`, and `template_folder`
       parameters were added.

    .. versionadded:: 0.8
       The `instance_path` and `instance_relative_config` parameters were
       added.

    .. versionadded:: 1.0
       The `root_path` parameter was added.

    :param import_name: the name of the application package
    :param static_url_path: can be used to specify a different path for the
                            static files on the web.  Defaults to the name
                            of the `static_folder` folder.
    :param static_folder: the folder with static files that should be served
                          at `static_url_path`.  Defaults to the ``'static'``
                          folder in the root path of the application.
    :param template_folder: the folder that contains the templates that should
                            be used by the application.  Defaults to
                            ``'templates'`` folder in the root path of the
                            application.
    :param instance_path: An alternative instance path for the application.
                          By default the folder ``'instance'`` next to the
                          package or module is assumed to be the instance
                          path.
    :param instance_relative_config: if set to `True` relative filenames
                                     for loading the config are assumed to
                                     be relative to the instance path instead
                                     of the application root.
    :param root_path: Flask by default will automatically calculate the path
                      to the root of the application.  In certain situations
                      this cannot be achieved (for instance if the package
                      is a Python 3 namespace package) and needs to be
                      manually defined.
    "
                :superclasses ("_PackageBoundObject")
                :members 
                  ( ("request_class" variable nil (reparse-symbol indented_block_body) [6797 6820])
                    ("response_class" variable nil (reparse-symbol indented_block_body) [6937 6962])
                    ("app_ctx_globals_class" variable nil (reparse-symbol indented_block_body) [7609 7647])
                    ("_get_request_globals_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7722 7726]))                          )
                        (reparse-symbol indented_block_body) [7691 7771])
                    ("_set_request_globals_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7806 7810])
                            ("value" variable nil (reparse-symbol function_parameters) [7812 7817]))                          )
                        (reparse-symbol indented_block_body) [7775 8036])
                    ("request_globals_class" variable nil (reparse-symbol indented_block_body) [8040 8165])
                    ("del" code nil (reparse-symbol indented_block_body) [8170 8228])
                    ("config_class" variable nil (reparse-symbol indented_block_body) [8571 8592])
                    ("debug" variable nil (reparse-symbol indented_block_body) [9016 9048])
                    ("testing" variable nil (reparse-symbol indented_block_body) [9595 9631])
                    ("secret_key" variable nil (reparse-symbol indented_block_body) [9980 10022])
                    ("session_cookie_name" variable nil (reparse-symbol indented_block_body) [10251 10311])
                    ("permanent_session_lifetime" variable nil (reparse-symbol indented_block_body) [10696 10809])
                    ("use_x_sendfile" variable nil (reparse-symbol indented_block_body) [11185 11235])
                    ("logger_name" variable nil (reparse-symbol indented_block_body) [11397 11441])
                    ("enable_modules" variable nil (reparse-symbol indented_block_body) [11640 11661])
                    ("debug_log_format" variable nil (reparse-symbol indented_block_body) [11888 12052])
                    ("json_encoder" variable nil (reparse-symbol indented_block_body) [12180 12211])
                    ("json_decoder" variable nil (reparse-symbol indented_block_body) [12339 12370])
                    ("jinja_options" variable nil (reparse-symbol indented_block_body) [12443 12544])
                    ("default_config" variable nil (reparse-symbol indented_block_body) [12591 14026])
                    ("url_rule_class" variable nil (reparse-symbol indented_block_body) [14212 14233])
                    ("test_client_class" variable nil (reparse-symbol indented_block_body) [14344 14368])
                    ("session_interface" variable nil (reparse-symbol indented_block_body) [14549 14599])
                    ("__init__" function
                       (:suite 
                          ( ("_PackageBoundObject" code nil (reparse-symbol indented_block_body) [14858 15033])
                            ("if" code nil (reparse-symbol indented_block_body) [15151 15394])
                            ("if" code nil (reparse-symbol indented_block_body) [15403 15486])
                            ("if" code nil (reparse-symbol indented_block_body) [15494 15571])
                            ("if" code nil (reparse-symbol indented_block_body) [15579 15864])
                            ("self" variable nil (reparse-symbol indented_block_body) [15967 16001])
                            ("self" variable nil (reparse-symbol indented_block_body) [16202 16258])
                            ("self" variable nil (reparse-symbol indented_block_body) [16320 16339])
                            ("self" variable nil (reparse-symbol indented_block_body) [16348 16383])
                            ("self" variable nil (reparse-symbol indented_block_body) [16668 16692])
                            ("self" variable nil (reparse-symbol indented_block_body) [16832 16857])
                            ("self" variable nil (reparse-symbol indented_block_body) [17452 17506])
                            ("self" variable nil (reparse-symbol indented_block_body) [17881 17915])
                            ("self" variable nil (reparse-symbol indented_block_body) [18372 18402])
                            ("self" variable nil (reparse-symbol indented_block_body) [18666 18702])
                            ("self" variable nil (reparse-symbol indented_block_body) [19146 19175])
                            ("self" variable nil (reparse-symbol indented_block_body) [19804 19836])
                            ("self" variable nil (reparse-symbol indented_block_body) [20147 20182])
                            ("self" variable nil (reparse-symbol indented_block_body) [20660 20693])
                            ("self" variable nil (reparse-symbol indented_block_body) [21336 21367])
                            ("self" variable nil (reparse-symbol indented_block_body) [21801 21899])
                            ("self" variable nil (reparse-symbol indented_block_body) [22071 22105])
                            ("self" variable nil (reparse-symbol indented_block_body) [22354 22374])
                            ("self" variable nil (reparse-symbol indented_block_body) [23056 23076])
                            ("self" variable nil (reparse-symbol indented_block_body) [23798 23818])
                            ("self" variable nil (reparse-symbol indented_block_body) [23923 23954])
                            ("self" variable nil (reparse-symbol indented_block_body) [23963 23997])
                            ("if" code nil (reparse-symbol indented_block_body) [24349 24561])
                            ("self" variable nil (reparse-symbol indented_block_body) [24918 24946]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14618 14622])
                            ("import_name" variable nil (reparse-symbol function_parameters) [14624 14635])
                            ("static_path" variable nil (reparse-symbol function_parameters) [14637 14648])
                            ("static_url_path" variable nil (reparse-symbol function_parameters) [14655 14670])
                            ("static_folder" variable nil (reparse-symbol function_parameters) [14694 14707])
                            ("template_folder" variable nil (reparse-symbol function_parameters) [14718 14733])
                            ("instance_path" variable nil (reparse-symbol function_parameters) [14764 14777])
                            ("instance_relative_config" variable nil (reparse-symbol function_parameters) [14784 14808])
                            ("root_path" variable nil (reparse-symbol function_parameters) [14833 14842]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14605 24947])
                    ("_get_error_handlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24976 24980]))                          )
                        (reparse-symbol indented_block_body) [24952 25198])
                    ("_set_error_handlers" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25226 25230])
                            ("value" variable nil (reparse-symbol function_parameters) [25232 25237]))                          )
                        (reparse-symbol indented_block_body) [25202 25323])
                    ("error_handlers" variable nil (reparse-symbol indented_block_body) [25327 25394])
                    ("del" code nil (reparse-symbol indented_block_body) [25399 25443])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("locked_cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25486 25490]))                          
                        :documentation "The name of the application.  This is usually the import name
        with the difference that it's guessed from the run file if the
        import name is main.  This name is used as a display name when
        Flask needs the name of the application.  It can be set and overridden
        to change the value.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [25449 26124])
                    ("propagate_exceptions" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26168 26172]))                          
                        :documentation "Returns the value of the `PROPAGATE_EXCEPTIONS` configuration
        value in case it's set, otherwise a sensible default is returned.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [26129 26505])
                    ("preserve_context_on_exception" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26558 26562]))                          
                        :documentation "Returns the value of the `PRESERVE_CONTEXT_ON_EXCEPTION`
        configuration value in case it's set, otherwise a sensible default
        is returned.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [26510 26905])
                    ("logger" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26935 26939]))                          
                        :documentation "A :class:`logging.Logger` object for this application.  The
        default configuration is to log to stderr if the application is
        in debug mode.  This logger can be used to (surprise) log messages.
        Here some examples::

            app.logger.debug('A value for debugging')
            app.logger.warning('A warning occurred (%d apples)', 42)
            app.logger.error('An error occurred')

        .. versionadded:: 0.3
        ")
                        (reparse-symbol indented_block_body) [26910 27766])
                    ("jinja_env" function
                       (:parent "dummy"
                        :decorators 
                          ( ("locked_cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27813 27817]))                          
                        :documentation "The Jinja2 environment used to load templates.")
                        (reparse-symbol indented_block_body) [27771 27928])
                    ("got_first_request" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27969 27973]))                          
                        :documentation "This attribute is set to `True` if the application started
        handling the first request.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [27933 28164])
                    ("make_config" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28185 28189])
                            ("instance_relative" variable nil (reparse-symbol function_parameters) [28191 28208]))                          
                        :documentation "Used to create the config attribute by the Flask constructor.
        The `instance_relative` parameter is passed in from the constructor
        of Flask (there named `instance_relative_config`) and indicates if
        the config should be relative to the instance path or the root path
        of the application.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [28169 28761])
                    ("auto_find_instance_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28794 28798]))                          
                        :documentation "Tries to locate the instance path if it was not provided to the
        constructor of the application class.  It will basically calculate
        the path to a folder named ``instance`` next to your main file or
        the package.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [28766 29304])
                    ("open_instance_resource" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29336 29340])
                            ("resource" variable nil (reparse-symbol function_parameters) [29342 29350])
                            ("mode" variable nil (reparse-symbol function_parameters) [29352 29356]))                          
                        :documentation "Opens a resource from the application's instance folder
        (:attr:`instance_path`).  Otherwise works like
        :meth:`open_resource`.  Instance resources can also be opened for
        writing.

        :param resource: the name of the resource.  To access resources within
                         subfolders use forward slashes as separator.
        :param mode: resource file opening mode, default is 'rb'.
        ")
                        (reparse-symbol indented_block_body) [29309 29875])
                    ("create_jinja_environment" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29909 29913]))                          
                        :documentation "Creates the Jinja2 environment based on :attr:`jinja_options`
        and :meth:`select_jinja_autoescape`.  Since 0.7 this also adds
        the Jinja2 globals and filters after initialization.  Override
        this function to customize the behavior.

        .. versionadded:: 0.5
        .. versionchanged:: 1.0
           ``Environment.auto_reload`` set in accordance with
           ``TEMPLATES_AUTO_RELOAD`` configuration option.
        ")
                        (reparse-symbol indented_block_body) [29880 31204])
                    ("create_global_jinja_loader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31240 31244]))                          
                        :documentation "Creates the loader for the Jinja2 environment.  Can be used to
        override just the loader and keeping the rest unchanged.  It's
        discouraged to override this function.  Instead one should override
        the :meth:`jinja_loader` function instead.

        The global loader dispatches between the loaders of the application
        and the individual blueprints.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [31209 31722])
                    ("init_jinja_globals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31750 31754]))                          
                        :documentation "Deprecated.  Used to initialize the Jinja2 globals.

        .. versionadded:: 0.5
        .. versionchanged:: 0.7
           This method is deprecated with 0.7.  Override
           :meth:`create_jinja_environment` instead.
        ")
                        (reparse-symbol indented_block_body) [31727 32005])
                    ("select_jinja_autoescape" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32038 32042])
                            ("filename" variable nil (reparse-symbol function_parameters) [32044 32052]))                          
                        :documentation "Returns `True` if autoescaping should be active for the given
        template name.

        .. versionadded:: 0.5
        ")
                        (reparse-symbol indented_block_body) [32010 32318])
                    ("update_template_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32351 32355])
                            ("context" variable nil (reparse-symbol function_parameters) [32357 32364]))                          
                        :documentation "Update the template context with some commonly used variables.
        This injects request, session, config and g into the template
        context as well as everything template context processors want
        to inject.  Note that the as of Flask 0.6, the original values
        in the context will not be overridden if a context processor
        decides to return a value with the same key.

        :param context: the context as a dictionary that is updated in place
                        to add extra variables.
        ")
                        (reparse-symbol indented_block_body) [32323 33531])
                    ("make_shell_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33559 33563]))                          
                        :documentation "Returns the shell context for an interactive shell for this
        application.  This runs all the registered shell context
        processors.

        .. versionadded:: 1.0
        ")
                        (reparse-symbol indented_block_body) [33536 33909])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33922 33926])
                            ("host" variable nil (reparse-symbol function_parameters) [33928 33932])
                            ("port" variable nil (reparse-symbol function_parameters) [33939 33943])
                            ("debug" variable nil (reparse-symbol function_parameters) [33950 33955])
                            ("options" variable nil (reparse-symbol function_parameters) [33962 33971]))                          
                        :documentation "Runs the application on a local development server.  If the
        :attr:`debug` flag is set the server will automatically reload
        for code changes and show a debugger in case an exception happened.

        If you want to run the application in debug mode, but disable the
        code execution on the interactive debugger, you can pass
        ``use_evalex=False`` as parameter.  This will keep the debugger's
        traceback screen active, but disable code execution.

        It is not recommended to use this function for development with
        automatic reloading as this is badly supported.  Instead you should
        be using the ``flask`` command line script's ``runserver``
        support.

        .. admonition:: Keep in Mind

           Flask will suppress any server error with a generic error page
           unless it is in debug mode.  As such to enable just the
           interactive debugger without the code reloading, you have to
           invoke :meth:`run` with ``debug=True`` and ``use_reloader=False``.
           Setting ``use_debugger`` to `True` without being in debug mode
           won't catch any exceptions because there won't be any to
           catch.

        .. versionchanged:: 0.10
           The default port is now picked from the ``SERVER_NAME`` variable.

        :param host: the hostname to listen on. Set this to ``'0.0.0.0'`` to
                     have the server available externally as well. Defaults to
                     ``'127.0.0.1'``.
        :param port: the port of the webserver. Defaults to ``5000`` or the
                     port defined in the ``SERVER_NAME`` config variable if
                     present.
        :param debug: if given, enable or disable debug mode.
                      See :attr:`debug`.
        :param options: the options to be forwarded to the underlying
                        Werkzeug server.  See
                        :func:`werkzeug.serving.run_simple` for more
                        information.
        ")
                        (reparse-symbol indented_block_body) [33914 36883])
                    ("test_client" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36904 36908])
                            ("use_cookies" variable nil (reparse-symbol function_parameters) [36910 36921]))                          
                        :documentation "Creates a test client for this application.  For information
        about unit testing head over to :ref:`testing`.

        Note that if you are testing for assertions or exceptions in your
        application code, you must set ``app.testing = True`` in order for the
        exceptions to propagate to the test client.  Otherwise, the exception
        will be handled by the application (not visible to the test client) and
        the only indication of an AssertionError or other exception will be a
        500 status code response to the test client.  See the :attr:`testing`
        attribute.  For example::

            app.testing = True
            client = app.test_client()

        The test client can be used in a `with` block to defer the closing down
        of the context until the end of the `with` block.  This is useful if
        you want to access the context locals for testing::

            with app.test_client() as c:
                rv = c.get('/?vodka=42')
                assert request.args['vodka'] == '42'

        See :class:`~flask.testing.FlaskClient` for more information.

        .. versionchanged:: 0.4
           added support for `with` block usage for the client.

        .. versionadded:: 0.7
           The `use_cookies` parameter was added as well as the ability
           to override the client to be used by setting the
           :attr:`test_client_class` attribute.
        ")
                        (reparse-symbol indented_block_body) [36888 38564])
                    ("open_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38586 38590])
                            ("request" variable nil (reparse-symbol function_parameters) [38592 38599]))                          
                        :documentation "Creates or opens a new session.  Default implementation stores all
        session data in a signed cookie.  This requires that the
        :attr:`secret_key` is set.  Instead of overriding this method
        we recommend replacing the :class:`session_interface`.

        :param request: an instance of :attr:`request_class`.
        ")
                        (reparse-symbol indented_block_body) [38569 39019])
                    ("save_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39041 39045])
                            ("session" variable nil (reparse-symbol function_parameters) [39047 39054])
                            ("response" variable nil (reparse-symbol function_parameters) [39056 39064]))                          
                        :documentation "Saves the session if it needs updates.  For the default
        implementation, check :meth:`open_session`.  Instead of overriding this
        method we recommend replacing the :class:`session_interface`.

        :param session: the session to be saved (a
                        :class:`~werkzeug.contrib.securecookie.SecureCookie`
                        object)
        :param response: an instance of :attr:`response_class`
        ")
                        (reparse-symbol indented_block_body) [39024 39596])
                    ("make_null_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39623 39627]))                          
                        :documentation "Creates a new instance of a missing session.  Instead of overriding
        this method we recommend replacing the :class:`session_interface`.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [39601 39889])
                    ("register_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39914 39918])
                            ("module" variable nil (reparse-symbol function_parameters) [39920 39926])
                            ("options" variable nil (reparse-symbol function_parameters) [39928 39937]))                          
                        :documentation "Registers a module with this application.  The keyword arguments
        of this function are the same as the ones for the constructor of the
        :class:`Module` class and will override the values of the module if
        provided.

        .. versionchanged:: 0.7
           The module system was deprecated in favor for the blueprint
           system.
        ")
                        (reparse-symbol indented_block_body) [39894 41157])
                    ("register_blueprint" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41202 41206])
                            ("blueprint" variable nil (reparse-symbol function_parameters) [41208 41217])
                            ("options" variable nil (reparse-symbol function_parameters) [41219 41228]))                          
                        :documentation "Registers a blueprint on the application.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [41162 41935])
                    ("add_url_rule" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41974 41978])
                            ("rule" variable nil (reparse-symbol function_parameters) [41980 41984])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [41986 41994])
                            ("view_func" variable nil (reparse-symbol function_parameters) [42001 42010])
                            ("options" variable nil (reparse-symbol function_parameters) [42017 42026]))                          
                        :documentation "Connects a URL rule.  Works exactly like the :meth:`route`
        decorator.  If a view_func is provided it will be registered with the
        endpoint.

        Basically this example::

            @app.route('/')
            def index():
                pass

        Is equivalent to the following::

            def index():
                pass
            app.add_url_rule('/', 'index', index)

        If the view_func is not provided you will need to connect the endpoint
        to a view function like so::

            app.view_functions['index'] = index

        Internally :meth:`route` invokes :meth:`add_url_rule` so if you want
        to customize the behavior via subclassing you only need to change
        this method.

        For more information refer to :ref:`url-route-registrations`.

        .. versionchanged:: 0.2
           `view_func` parameter added.

        .. versionchanged:: 0.6
           `OPTIONS` is added automatically as method.

        :param rule: the URL rule as string
        :param endpoint: the endpoint for the registered URL rule.  Flask
                         itself assumes the name of the view function as
                         endpoint
        :param view_func: the function to call when serving a request to the
                          provided endpoint
        :param options: the options to be forwarded to the underlying
                        :class:`~werkzeug.routing.Rule` object.  A change
                        to Werkzeug is handling of method options.  methods
                        is a list of methods this rule should be limited
                        to (`GET`, `POST` etc.).  By default a rule
                        just listens for `GET` (and implicitly `HEAD`).
                        Starting with Flask 0.6, `OPTIONS` is implicitly
                        added and handled by the standard request handling.
        ")
                        (reparse-symbol indented_block_body) [41940 45875])
                    ("route" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45890 45894])
                            ("rule" variable nil (reparse-symbol function_parameters) [45896 45900])
                            ("options" variable nil (reparse-symbol function_parameters) [45902 45911]))                          
                        :documentation "A decorator that is used to register a view function for a
        given URL rule.  This does the same thing as :meth:`add_url_rule`
        but is intended for decorator usage::

            @app.route('/')
            def index():
                return 'Hello World'

        For more information refer to :ref:`url-route-registrations`.

        :param rule: the URL rule as string
        :param endpoint: the endpoint for the registered URL rule.  Flask
                         itself assumes the name of the view function as
                         endpoint
        :param options: the options to be forwarded to the underlying
                        :class:`~werkzeug.routing.Rule` object.  A change
                        to Werkzeug is handling of method options.  methods
                        is a list of methods this rule should be limited
                        to (`GET`, `POST` etc.).  By default a rule
                        just listens for `GET` (and implicitly `HEAD`).
                        Starting with Flask 0.6, `OPTIONS` is implicitly
                        added and handled by the standard request handling.
        ")
                        (reparse-symbol indented_block_body) [45880 47271])
                    ("endpoint" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47306 47310])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [47312 47320]))                          
                        :documentation "A decorator to register a function as an endpoint.
        Example::

            @app.endpoint('example.endpoint')
            def example():
                return \"example\"

        :param endpoint: the name of the endpoint
        ")
                        (reparse-symbol indented_block_body) [47276 47691])
                    ("errorhandler" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47730 47734])
                            ("code_or_exception" variable nil (reparse-symbol function_parameters) [47736 47753]))                          
                        :documentation "A decorator that is used to register a function give a given
        error code.  Example::

            @app.errorhandler(404)
            def page_not_found(error):
                return 'This page does not exist', 404

        You can also register handlers for arbitrary exceptions::

            @app.errorhandler(DatabaseError)
            def special_exception_handler(error):
                return 'Database connection failed', 500

        You can also register a function as error handler without using
        the :meth:`errorhandler` decorator.  The following example is
        equivalent to the one above::

            def page_not_found(error):
                return 'This page does not exist', 404
            app.error_handler_spec[None][404] = page_not_found

        Setting error handlers via assignments to :attr:`error_handler_spec`
        however is discouraged as it requires fiddling with nested dictionaries
        and the special case for arbitrary exception types.

        The first `None` refers to the active blueprint.  If the error
        handler should be application wide `None` shall be used.

        .. versionadded:: 0.7
            Use :meth:`register_error_handler` instead of modifying
            :attr:`error_handler_spec` directly, for application wide error
            handlers.

        .. versionadded:: 0.7
           One can now additionally also register custom exception types
           that do not necessarily have to be a subclass of the
           :class:`~werkzeug.exceptions.HTTPException` class.

        :param code: the code as integer for the handler
        ")
                        (reparse-symbol indented_block_body) [47696 49541])
                    ("register_error_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49573 49577])
                            ("code_or_exception" variable nil (reparse-symbol function_parameters) [49579 49596])
                            ("f" variable nil (reparse-symbol function_parameters) [49598 49599]))                          
                        :documentation "Alternative error attach function to the :meth:`errorhandler`
        decorator that is more straightforward to use for non decorator
        usage.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [49546 49870])
                    ("_register_error_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49920 49924])
                            ("key" variable nil (reparse-symbol function_parameters) [49926 49929])
                            ("code_or_exception" variable nil (reparse-symbol function_parameters) [49931 49948])
                            ("f" variable nil (reparse-symbol function_parameters) [49950 49951]))                          
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [49875 50539])
                    ("template_filter" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50581 50585])
                            ("name" variable nil (reparse-symbol function_parameters) [50587 50591]))                          
                        :documentation "A decorator that is used to register custom template filter.
        You can specify a name for the filter, otherwise the function
        name will be used. Example::

          @app.template_filter()
          def reverse(s):
              return s[::-1]

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [50544 51120])
                    ("add_template_filter" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51166 51170])
                            ("f" variable nil (reparse-symbol function_parameters) [51172 51173])
                            ("name" variable nil (reparse-symbol function_parameters) [51175 51179]))                          
                        :documentation "Register a custom template filter.  Works exactly like the
        :meth:`template_filter` decorator.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [51125 51485])
                    ("template_test" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51525 51529])
                            ("name" variable nil (reparse-symbol function_parameters) [51531 51535]))                          
                        :documentation "A decorator that is used to register custom template test.
        You can specify a name for the test, otherwise the function
        name will be used. Example::

          @app.template_test()
          def is_prime(n):
              if n == 2:
                  return True
              for i in range(2, int(math.ceil(math.sqrt(n))) + 1):
                  if n % i == 0:
                      return False
              return True

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [51490 52274])
                    ("add_template_test" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52318 52322])
                            ("f" variable nil (reparse-symbol function_parameters) [52324 52325])
                            ("name" variable nil (reparse-symbol function_parameters) [52327 52331]))                          
                        :documentation "Register a custom template test.  Works exactly like the
        :meth:`template_test` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [52279 52661])
                    ("template_global" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52703 52707])
                            ("name" variable nil (reparse-symbol function_parameters) [52709 52713]))                          
                        :documentation "A decorator that is used to register a custom template global function.
        You can specify a name for the global function, otherwise the function
        name will be used. Example::

            @app.template_global()
            def double(n):
                return 2 * n

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [52666 53306])
                    ("add_template_global" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53352 53356])
                            ("f" variable nil (reparse-symbol function_parameters) [53358 53359])
                            ("name" variable nil (reparse-symbol function_parameters) [53361 53365]))                          
                        :documentation "Register a custom template global function. Works exactly like the
        :meth:`template_global` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the global function, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [53311 53720])
                    ("before_request" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53761 53765])
                            ("f" variable nil (reparse-symbol function_parameters) [53767 53768]))                          
                        :documentation "Registers a function to run before each request.")
                        (reparse-symbol indented_block_body) [53725 53916])
                    ("before_first_request" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53963 53967])
                            ("f" variable nil (reparse-symbol function_parameters) [53969 53970]))                          
                        :documentation "Registers a function to be run before the first request to this
        instance of the application.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [53921 54195])
                    ("after_request" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54235 54239])
                            ("f" variable nil (reparse-symbol function_parameters) [54241 54242]))                          
                        :documentation "Register a function to be run after each request.

        Your function must take one parameter, an instance of
        :attr:`response_class` and return a new response object or the
        same (see :meth:`process_response`).

        As of Flask 0.7 this function might not be executed at the end of the
        request in case an unhandled exception occurred.
        ")
                        (reparse-symbol indented_block_body) [54200 54714])
                    ("teardown_request" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54757 54761])
                            ("f" variable nil (reparse-symbol function_parameters) [54763 54764]))                          
                        :documentation "Register a function to be run at the end of each request,
        regardless of whether there was an exception or not.  These functions
        are executed when the request context is popped, even if not an
        actual request was performed.

        Example::

            ctx = app.test_request_context()
            ctx.push()
            ...
            ctx.pop()

        When ``ctx.pop()`` is executed in the above example, the teardown
        functions are called just before the request context moves from the
        stack of active contexts.  This becomes relevant if you are using
        such constructs in tests.

        Generally teardown functions must take every necessary step to avoid
        that they will fail.  If they do execute code that might fail they
        will have to surround the execution of these code by try/except
        statements and log occurring errors.

        When a teardown function was called because of a exception it will
        be passed an error object.

        .. admonition:: Debug Note

           In debug mode Flask will not tear down a request on an exception
           immediately.  Instead if will keep it alive so that the interactive
           debugger can still access it.  This behavior can be controlled
           by the ``PRESERVE_CONTEXT_ON_EXCEPTION`` configuration variable.
        ")
                        (reparse-symbol indented_block_body) [54719 56228])
                    ("teardown_appcontext" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [56274 56278])
                            ("f" variable nil (reparse-symbol function_parameters) [56280 56281]))                          
                        :documentation "Registers a function to be called when the application context
        ends.  These functions are typically also called when the request
        context is popped.

        Example::

            ctx = app.app_context()
            ctx.push()
            ...
            ctx.pop()

        When ``ctx.pop()`` is executed in the above example, the teardown
        functions are called just before the app context moves from the
        stack of active contexts.  This becomes relevant if you are using
        such constructs in tests.

        Since a request context typically also manages an application
        context it would also be called when you pop a request context.

        When a teardown function was called because of an exception it will
        be passed an error object.

        .. versionadded:: 0.9
        ")
                        (reparse-symbol indented_block_body) [56233 57195])
                    ("context_processor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57239 57243])
                            ("f" variable nil (reparse-symbol function_parameters) [57245 57246]))                          
                        :documentation "Registers a template context processor function.")
                        (reparse-symbol indented_block_body) [57200 57386])
                    ("shell_context_processor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57436 57440])
                            ("f" variable nil (reparse-symbol function_parameters) [57442 57443]))                          
                        :documentation "Registers a shell context processor function.

        .. versionadded:: 1.0
        ")
                        (reparse-symbol indented_block_body) [57391 57611])
                    ("url_value_preprocessor" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57660 57664])
                            ("f" variable nil (reparse-symbol function_parameters) [57666 57667]))                          
                        :documentation "Registers a function as URL value preprocessor for all view
        functions of the application.  It's called before the view functions
        are called and can modify the url values provided.
        ")
                        (reparse-symbol indented_block_body) [57616 57974])
                    ("url_defaults" function
                       (:parent "dummy"
                        :decorators 
                          ( ("setupmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58013 58017])
                            ("f" variable nil (reparse-symbol function_parameters) [58019 58020]))                          
                        :documentation "Callback function for URL defaults for all view functions of the
        application.  It's called with the endpoint and values and should
        update the values passed in place.
        ")
                        (reparse-symbol indented_block_body) [57979 58311])
                    ("handle_http_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58342 58346])
                            ("e" variable nil (reparse-symbol function_parameters) [58348 58349]))                          
                        :documentation "Handles an HTTP exception.  By default this will invoke the
        registered error handlers and fall back to returning the
        exception as response.

        .. versionadded:: 0.3
        ")
                        (reparse-symbol indented_block_body) [58316 59025])
                    ("trap_http_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59054 59058])
                            ("e" variable nil (reparse-symbol function_parameters) [59060 59061]))                          
                        :documentation "Checks if an HTTP exception should be trapped or not.  By default
        this will return `False` for all exceptions except for a bad request
        key error if ``TRAP_BAD_REQUEST_ERRORS`` is set to `True`.  It
        also returns `True` if ``TRAP_HTTP_EXCEPTIONS`` is set to `True`.

        This is called for all HTTP exceptions raised by a view function.
        If it returns `True` for any exception the error handler for this
        exception is not called and it shows up as regular exception in the
        traceback.  This is helpful for debugging implicitly raised HTTP
        exceptions.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [59030 59913])
                    ("handle_user_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59944 59948])
                            ("e" variable nil (reparse-symbol function_parameters) [59950 59951]))                          
                        :documentation "This method is called whenever an exception occurs that should be
        handled.  A special case are
        :class:`~werkzeug.exception.HTTPException`\\s which are forwarded by
        this function to the :meth:`handle_http_exception` method.  This
        function will either return a response value or reraise the
        exception with the same traceback.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [59918 61316])
                    ("handle_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61342 61346])
                            ("e" variable nil (reparse-symbol function_parameters) [61348 61349]))                          
                        :documentation "Default exception handling that kicks in when an exception
        occurs that is not caught.  In debug mode the exception will
        be re-raised immediately, otherwise it is logged and the handler
        for a 500 internal server error is used.  If no such handler
        exists, a default 500 internal server error message is displayed.

        .. versionadded:: 0.3
        ")
                        (reparse-symbol indented_block_body) [61321 62491])
                    ("log_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62514 62518])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [62520 62528]))                          
                        :documentation "Logs an exception.  This is called by :meth:`handle_exception`
        if debugging is disabled and right before the handler is called.
        The default implementation logs the exception as error on the
        :attr:`logger`.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [62496 62951])
                    ("raise_routing_exception" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [62984 62988])
                            ("request" variable nil (reparse-symbol function_parameters) [62990 62997]))                          
                        :documentation "Exceptions that are recording during routing are reraised with
        this method.  During debug we are not reraising redirect requests
        for non ``GET``, ``HEAD``, or ``OPTIONS`` requests and we're raising
        a different error instead to help debug situations.

        :internal:
        ")
                        (reparse-symbol indented_block_body) [62956 63630])
                    ("dispatch_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [63656 63660]))                          
                        :documentation "Does the request dispatching.  Matches the URL and returns the
        return value of the view or error handler.  This does not have to
        be a response object.  In order to convert the return value to a
        proper response object, call :func:`make_response`.

        .. versionchanged:: 0.7
           This no longer does the exception handling, this code was
           moved to the new :meth:`full_dispatch_request`.
        ")
                        (reparse-symbol indented_block_body) [63635 64701])
                    ("full_dispatch_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [64732 64736]))                          
                        :documentation "Dispatches the request and on top of that performs request
        pre and postprocessing as well as HTTP exception catching and
        error handling.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [64706 65421])
                    ("try_trigger_before_first_request_functions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65473 65477]))                          
                        :documentation "Called before each request and will ensure that it triggers
        the :attr:`before_first_request_funcs` and only exactly once per
        application instance (which means process usually).

        :internal:
        ")
                        (reparse-symbol indented_block_body) [65426 65997])
                    ("make_default_options_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66036 66040]))                          
                        :documentation "This method is called to create the default `OPTIONS` response.
        This can be changed through subclassing to change the default
        behavior of `OPTIONS` responses.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [66002 66792])
                    ("should_ignore_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [66821 66825])
                            ("error" variable nil (reparse-symbol function_parameters) [66827 66832]))                          
                        :documentation "This is called to figure out if an error should be ignored
        or not as far as the teardown system is concerned.  If this
        function returns `True` then the teardown handlers will not be
        passed the error.

        .. versionadded:: 0.10
        ")
                        (reparse-symbol indented_block_body) [66797 67135])
                    ("make_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [67158 67162])
                            ("rv" variable nil (reparse-symbol function_parameters) [67164 67166]))                          
                        :documentation "Converts the return value from a view function to a real
        response object that is an instance of :attr:`response_class`.

        The following types are allowed for `rv`:

        .. tabularcolumns:: |p{3.5cm}|p{9.5cm}|

        ======================= ===========================================
        :attr:`response_class`  the object is returned unchanged
        :class:`str`            a response object is created with the
                                string as body
        :class:`unicode`        a response object is created with the
                                string encoded to utf-8 as body
        a WSGI function         the function is called as WSGI application
                                and buffered as response object
        :class:`tuple`          A tuple in the form ``(response, status,
                                headers)`` or ``(response, headers)``
                                where `response` is any of the
                                types defined here, `status` is a string
                                or an integer and `headers` is a list or
                                a dictionary with header values.
        ======================= ===========================================

        :param rv: the return value from the view function

        .. versionchanged:: 0.9
           Previously a tuple was interpreted as the arguments for the
           response object.
        ")
                        (reparse-symbol indented_block_body) [67140 69985])
                    ("create_url_adapter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70013 70017])
                            ("request" variable nil (reparse-symbol function_parameters) [70019 70026]))                          
                        :documentation "Creates a URL adapter for the given request.  The URL adapter
        is created at a point where the request context is not yet set up
        so the request is passed explicitly.

        .. versionadded:: 0.6

        .. versionchanged:: 0.9
           This can now also be called without a request object when the
           URL adapter is created for the application context.
        ")
                        (reparse-symbol indented_block_body) [69990 70941])
                    ("inject_url_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [70970 70974])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [70976 70984])
                            ("values" variable nil (reparse-symbol function_parameters) [70986 70992]))                          
                        :documentation "Injects the URL defaults for the given endpoint directly into
        the values dictionary passed.  This is used internally and
        automatically called on URL building.

        .. versionadded:: 0.7
        ")
                        (reparse-symbol indented_block_body) [70946 71488])
                    ("handle_url_build_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [71520 71524])
                            ("error" variable nil (reparse-symbol function_parameters) [71526 71531])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [71533 71541])
                            ("values" variable nil (reparse-symbol function_parameters) [71543 71549]))                          
                        :documentation "Handle :class:`~werkzeug.routing.BuildError` on :meth:`url_for`.
        ")
                        (reparse-symbol indented_block_body) [71493 72231])
                    ("preprocess_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [72259 72263]))                          
                        :documentation "Called before the actual request dispatching and will
        call every as :meth:`before_request` decorated function.
        If any of these function returns a value it's handled as
        if it was the return value from the view and further
        request handling is stopped.

        This also triggers the :meth:`url_value_processor` functions before
        the actual :meth:`before_request` functions are called.
        ")
                        (reparse-symbol indented_block_body) [72236 73332])
                    ("process_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73358 73362])
                            ("response" variable nil (reparse-symbol function_parameters) [73364 73372]))                          
                        :documentation "Can be overridden in order to modify the response object
        before it's sent to the WSGI server.  By default this will
        call all the :meth:`after_request` decorated functions.

        .. versionchanged:: 0.5
           As of Flask 0.5 the functions registered for after request
           execution are called in reverse order of registration.

        :param response: a :attr:`response_class` object.
        :return: a new response object or the same, has to be an
                 instance of :attr:`response_class`.
        ")
                        (reparse-symbol indented_block_body) [73337 74520])
                    ("do_teardown_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [74549 74553])
                            ("exc" variable nil (reparse-symbol function_parameters) [74555 74558]))                          
                        :documentation "Called after the actual request dispatching and will
        call every as :meth:`teardown_request` decorated function.  This is
        not actually called by the :class:`Flask` object itself but is always
        triggered when the request context is popped.  That way we have a
        tighter control over certain resources under testing environments.

        .. versionchanged:: 0.9
           Added the `exc` argument.  Previously this was always using the
           current exception information.
        ")
                        (reparse-symbol indented_block_body) [74525 75516])
                    ("do_teardown_appcontext" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75548 75552])
                            ("exc" variable nil (reparse-symbol function_parameters) [75554 75557]))                          
                        :documentation "Called when an application context is popped.  This works pretty
        much the same as :meth:`do_teardown_request` but for the application
        context.

        .. versionadded:: 0.9
        ")
                        (reparse-symbol indented_block_body) [75521 75974])
                    ("app_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [75995 75999]))                          
                        :documentation "Binds the application only.  For as long as the application is bound
        to the current context the :data:`flask.current_app` points to that
        application.  An application context is automatically created when a
        request context is pushed if necessary.

        Example usage::

            with app.app_context():
                ...

        .. versionadded:: 0.9
        ")
                        (reparse-symbol indented_block_body) [75979 76440])
                    ("request_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [76465 76469])
                            ("environ" variable nil (reparse-symbol function_parameters) [76471 76478]))                          
                        :documentation "Creates a :class:`~flask.ctx.RequestContext` from the given
        environment and binds it to the current context.  This must be used in
        combination with the `with` statement because the request is only bound
        to the current context for the duration of the `with` block.

        Example usage::

            with app.request_context(environ):
                do_something_with(request)

        The object returned can also be used without the `with` statement
        which is useful for working in the shell.  The example above is
        doing exactly the same as this code::

            ctx = app.request_context(environ)
            ctx.push()
            try:
                do_something_with(request)
            finally:
                ctx.pop()

        .. versionchanged:: 0.3
           Added support for non-with statement usage and `with` statement
           is now passed the ctx object.

        :param environ: a WSGI environment
        ")
                        (reparse-symbol indented_block_body) [76445 77517])
                    ("test_request_context" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [77547 77551])
                            ("args" variable nil (reparse-symbol function_parameters) [77553 77558])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [77560 77568]))                          
                        :documentation "Creates a WSGI environment from the given values (see
        :class:`werkzeug.test.EnvironBuilder` for more information, this
        function accepts the same arguments).
        ")
                        (reparse-symbol indented_block_body) [77522 78015])
                    ("wsgi_app" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [78033 78037])
                            ("environ" variable nil (reparse-symbol function_parameters) [78039 78046])
                            ("start_response" variable nil (reparse-symbol function_parameters) [78048 78062]))                          
                        :documentation "The actual WSGI application.  This is not implemented in
        `__call__` so that middlewares can be applied without losing a
        reference to the class.  So instead of doing this::

            app = MyMiddleware(app)

        It's a better idea to do this instead::

            app.wsgi_app = MyMiddleware(app.wsgi_app)

        Then you still have the original application object around and
        can continue to call methods on it.

        .. versionchanged:: 0.7
           The behavior of the before and after request callbacks was changed
           under error conditions and a new callback was added that will
           always execute at the end of the request, independent on if an
           error occurred or not.  See :ref:`callbacks-and-errors`.

        :param environ: a WSGI environment
        :param start_response: a callable accepting a status code,
                               a list of headers and an optional
                               exception context to start the response
        ")
                        (reparse-symbol indented_block_body) [78020 79588])
                    ("modules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79619 79623]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [79593 79834])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [79852 79856])
                            ("environ" variable nil (reparse-symbol function_parameters) [79858 79865])
                            ("start_response" variable nil (reparse-symbol function_parameters) [79867 79881]))                          
                        :documentation "Shortcut for :attr:`wsgi_app`.")
                        (reparse-symbol indented_block_body) [79839 79983])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [80001 80005]))                          )
                        (reparse-symbol indented_block_body) [79988 80107]))                  
                :type "class")
                nil [2390 80107]))          
    :file "app.py"
    :pointmax 80107
    :fsize 79997
    :lastmodtime '(21468 4219 421195 252000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "blueprints.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.blueprints
    ~~~~~~~~~~~~~~~~

    Blueprints are the recommended way to implement larger or more
    pluggable applications in Flask 0.7 and later.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 287])
            ("functools" include nil nil [288 324])
            ("_PackageBoundObject" include nil nil [340 392])
            ("_endpoint_from_view_func" include nil nil [340 392])
            ("BlueprintSetupState" type
               (:documentation "Temporary holder object for registering a blueprint with the
    application.  An instance of this class is created by the
    :meth:`~flask.Blueprint.make_setup_state` method and later passed
    to all register callback functions.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [806 820])
                            ("self" variable nil (reparse-symbol indented_block_body) [901 927])
                            ("self" variable nil (reparse-symbol indented_block_body) [1061 1083])
                            ("self" variable nil (reparse-symbol indented_block_body) [1363 1407])
                            ("subdomain" variable nil (reparse-symbol indented_block_body) [1417 1458])
                            ("if" code nil (reparse-symbol indented_block_body) [1467 1538])
                            ("self" variable nil (reparse-symbol indented_block_body) [1642 1668])
                            ("url_prefix" variable nil (reparse-symbol indented_block_body) [1678 1721])
                            ("if" code nil (reparse-symbol indented_block_body) [1730 1804])
                            ("self" variable nil (reparse-symbol indented_block_body) [1905 1933])
                            ("self" variable nil (reparse-symbol indented_block_body) [2069 2129])
                            ("self" code nil (reparse-symbol indented_block_body) [2138 2200]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [696 700])
                            ("blueprint" variable nil (reparse-symbol function_parameters) [702 711])
                            ("app" variable nil (reparse-symbol function_parameters) [713 716])
                            ("options" variable nil (reparse-symbol function_parameters) [718 725])
                            ("first_registration" variable nil (reparse-symbol function_parameters) [727 745]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [683 2201])
                    ("add_url_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2223 2227])
                            ("rule" variable nil (reparse-symbol function_parameters) [2229 2233])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [2235 2243])
                            ("view_func" variable nil (reparse-symbol function_parameters) [2250 2259])
                            ("options" variable nil (reparse-symbol function_parameters) [2266 2275]))                          
                        :documentation "A helper method to register a rule (and optionally a view function)
        to the application.  The endpoint is automatically prefixed with the
        blueprint's name.
        ")
                        (reparse-symbol indented_block_body) [2206 2972]))                  
                :type "class")
                nil [395 2972])
            ("Blueprint" type
               (:documentation "Represents a blueprint.  A blueprint is an object that records
    functions that will be called with the
    :class:`~flask.blueprints.BlueprintSetupState` later to register functions
    or other things on the main application.  See :ref:`blueprints` for more
    information.

    .. versionadded:: 0.7
    "
                :superclasses ("_PackageBoundObject")
                :members 
                  ( ("warn_on_modifications" variable nil (reparse-symbol indented_block_body) [3338 3367])
                    ("_got_registered_once" variable nil (reparse-symbol indented_block_body) [3372 3400])
                    ("__init__" function
                       (:suite 
                          ( ("_PackageBoundObject" code nil (reparse-symbol indented_block_body) [3636 3758])
                            ("self" variable nil (reparse-symbol indented_block_body) [3767 3783])
                            ("self" variable nil (reparse-symbol indented_block_body) [3792 3820])
                            ("self" variable nil (reparse-symbol indented_block_body) [3829 3855])
                            ("self" variable nil (reparse-symbol indented_block_body) [3864 3898])
                            ("self" variable nil (reparse-symbol indented_block_body) [3907 3945])
                            ("self" variable nil (reparse-symbol indented_block_body) [3954 3982])
                            ("self" variable nil (reparse-symbol indented_block_body) [3991 4015])
                            ("if" code nil (reparse-symbol indented_block_body) [4024 4079])
                            ("self" variable nil (reparse-symbol indented_block_body) [4087 4126]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3419 3423])
                            ("name" variable nil (reparse-symbol function_parameters) [3425 3429])
                            ("import_name" variable nil (reparse-symbol function_parameters) [3431 3442])
                            ("static_folder" variable nil (reparse-symbol function_parameters) [3444 3457])
                            ("static_url_path" variable nil (reparse-symbol function_parameters) [3481 3496])
                            ("template_folder" variable nil (reparse-symbol function_parameters) [3503 3518])
                            ("url_prefix" variable nil (reparse-symbol function_parameters) [3542 3552])
                            ("subdomain" variable nil (reparse-symbol function_parameters) [3559 3568])
                            ("url_defaults" variable nil (reparse-symbol function_parameters) [3575 3587])
                            ("root_path" variable nil (reparse-symbol function_parameters) [3611 3620]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3406 4127])
                    ("record" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4143 4147])
                            ("func" variable nil (reparse-symbol function_parameters) [4149 4153]))                          
                        :documentation "Registers a function that is called when the blueprint is
        registered on the application.  This function is called with the
        state as argument as returned by the :meth:`make_setup_state`
        method.
        ")
                        (reparse-symbol indented_block_body) [4132 4737])
                    ("record_once" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4758 4762])
                            ("func" variable nil (reparse-symbol function_parameters) [4764 4768]))                          
                        :documentation "Works like :meth:`record` but wraps the function in another
        function that will ensure the function is only called once.  If the
        blueprint is registered a second time on the application, the
        function passed is not called.
        ")
                        (reparse-symbol indented_block_body) [4742 5194])
                    ("make_setup_state" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5220 5224])
                            ("app" variable nil (reparse-symbol function_parameters) [5226 5229])
                            ("options" variable nil (reparse-symbol function_parameters) [5231 5238])
                            ("first_registration" variable nil (reparse-symbol function_parameters) [5240 5258]))                          
                        :documentation "Creates an instance of :meth:`~flask.blueprints.BlueprintSetupState`
        object that is later passed to the register callback functions.
        Subclasses can override this to return a subclass of the setup state.
        ")
                        (reparse-symbol indented_block_body) [5199 5584])
                    ("register" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5602 5606])
                            ("app" variable nil (reparse-symbol function_parameters) [5608 5611])
                            ("options" variable nil (reparse-symbol function_parameters) [5613 5620])
                            ("first_registration" variable nil (reparse-symbol function_parameters) [5622 5640]))                          
                        :documentation "Called by :meth:`Flask.register_blueprint` to register a blueprint
        on the application.  This can be overridden to customize the register
        behavior.  Keyword arguments from
        :func:`~flask.Flask.register_blueprint` are directly forwarded to this
        method in the `options` dictionary.
        ")
                        (reparse-symbol indented_block_body) [5589 6396])
                    ("route" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6411 6415])
                            ("rule" variable nil (reparse-symbol function_parameters) [6417 6421])
                            ("options" variable nil (reparse-symbol function_parameters) [6423 6432]))                          
                        :documentation "Like :meth:`Flask.route` but for a blueprint.  The endpoint for the
        :func:`url_for` function is prefixed with the name of the blueprint.
        ")
                        (reparse-symbol indented_block_body) [6401 6794])
                    ("add_url_rule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6816 6820])
                            ("rule" variable nil (reparse-symbol function_parameters) [6822 6826])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [6828 6836])
                            ("view_func" variable nil (reparse-symbol function_parameters) [6843 6852])
                            ("options" variable nil (reparse-symbol function_parameters) [6859 6868]))                          
                        :documentation "Like :meth:`Flask.add_url_rule` but for a blueprint.  The endpoint for
        the :func:`url_for` function is prefixed with the name of the blueprint.
        ")
                        (reparse-symbol indented_block_body) [6799 7249])
                    ("endpoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7267 7271])
                            ("endpoint" variable nil (reparse-symbol function_parameters) [7273 7281]))                          
                        :documentation "Like :meth:`Flask.endpoint` but for a blueprint.  This does not
        prefix the endpoint with the blueprint name, this has to be done
        explicitly by the user of this method.  If the endpoint is prefixed
        with a `.` it will be registered to the current blueprint, otherwise
        it's an application independent endpoint.
        ")
                        (reparse-symbol indented_block_body) [7254 7864])
                    ("app_template_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7893 7897])
                            ("name" variable nil (reparse-symbol function_parameters) [7899 7903]))                          
                        :documentation "Register a custom template filter, available application wide.  Like
        :meth:`Flask.template_filter` but for a blueprint.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [7869 8307])
                    ("add_app_template_filter" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8340 8344])
                            ("f" variable nil (reparse-symbol function_parameters) [8346 8347])
                            ("name" variable nil (reparse-symbol function_parameters) [8349 8353]))                          
                        :documentation "Register a custom template filter, available application wide.  Like
        :meth:`Flask.add_template_filter` but for a blueprint.  Works exactly
        like the :meth:`app_template_filter` decorator.

        :param name: the optional name of the filter, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [8312 8851])
                    ("app_template_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8878 8882])
                            ("name" variable nil (reparse-symbol function_parameters) [8884 8888]))                          
                        :documentation "Register a custom template test, available application wide.  Like
        :meth:`Flask.template_test` but for a blueprint.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [8856 9316])
                    ("add_app_template_test" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9347 9351])
                            ("f" variable nil (reparse-symbol function_parameters) [9353 9354])
                            ("name" variable nil (reparse-symbol function_parameters) [9356 9360]))                          
                        :documentation "Register a custom template test, available application wide.  Like
        :meth:`Flask.add_template_test` but for a blueprint.  Works exactly
        like the :meth:`app_template_test` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the test, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [9321 9880])
                    ("app_template_global" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9909 9913])
                            ("name" variable nil (reparse-symbol function_parameters) [9915 9919]))                          
                        :documentation "Register a custom template global, available application wide.  Like
        :meth:`Flask.template_global` but for a blueprint.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [9885 10355])
                    ("add_app_template_global" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10388 10392])
                            ("f" variable nil (reparse-symbol function_parameters) [10394 10395])
                            ("name" variable nil (reparse-symbol function_parameters) [10397 10401]))                          
                        :documentation "Register a custom template global, available application wide.  Like
        :meth:`Flask.add_template_global` but for a blueprint.  Works exactly
        like the :meth:`app_template_global` decorator.

        .. versionadded:: 0.10

        :param name: the optional name of the global, otherwise the
                     function name will be used.
        ")
                        (reparse-symbol indented_block_body) [10360 10931])
                    ("before_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10955 10959])
                            ("f" variable nil (reparse-symbol function_parameters) [10961 10962]))                          
                        :documentation "Like :meth:`Flask.before_request` but for a blueprint.  This function
        is only executed before each request that is handled by a function of
        that blueprint.
        ")
                        (reparse-symbol indented_block_body) [10936 11289])
                    ("before_app_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11317 11321])
                            ("f" variable nil (reparse-symbol function_parameters) [11323 11324]))                          
                        :documentation "Like :meth:`Flask.before_request`.  Such a function is executed
        before each request, even if outside of a blueprint.
        ")
                        (reparse-symbol indented_block_body) [11294 11599])
                    ("before_app_first_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11633 11637])
                            ("f" variable nil (reparse-symbol function_parameters) [11639 11640]))                          
                        :documentation "Like :meth:`Flask.before_first_request`.  Such a function is
        executed before the first request to the application.
        ")
                        (reparse-symbol indented_block_body) [11604 11885])
                    ("after_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11908 11912])
                            ("f" variable nil (reparse-symbol function_parameters) [11914 11915]))                          
                        :documentation "Like :meth:`Flask.after_request` but for a blueprint.  This function
        is only executed after each request that is handled by a function of
        that blueprint.
        ")
                        (reparse-symbol indented_block_body) [11890 12239])
                    ("after_app_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12266 12270])
                            ("f" variable nil (reparse-symbol function_parameters) [12272 12273]))                          
                        :documentation "Like :meth:`Flask.after_request` but for a blueprint.  Such a function
        is executed after each request, even if outside of the blueprint.
        ")
                        (reparse-symbol indented_block_body) [12244 12567])
                    ("teardown_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12593 12597])
                            ("f" variable nil (reparse-symbol function_parameters) [12599 12600]))                          
                        :documentation "Like :meth:`Flask.teardown_request` but for a blueprint.  This
        function is only executed when tearing down requests handled by a
        function of that blueprint.  Teardown request functions are executed
        when the request context is popped, even when no actual request was
        performed.
        ")
                        (reparse-symbol indented_block_body) [12572 13066])
                    ("teardown_app_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13096 13100])
                            ("f" variable nil (reparse-symbol function_parameters) [13102 13103]))                          
                        :documentation "Like :meth:`Flask.teardown_request` but for a blueprint.  Such a
        function is executed when tearing down each request, even if outside of
        the blueprint.
        ")
                        (reparse-symbol indented_block_body) [13071 13423])
                    ("context_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13450 13454])
                            ("f" variable nil (reparse-symbol function_parameters) [13456 13457]))                          
                        :documentation "Like :meth:`Flask.context_processor` but for a blueprint.  This
        function is only executed for requests handled by a blueprint.
        ")
                        (reparse-symbol indented_block_body) [13428 13754])
                    ("app_context_processor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13785 13789])
                            ("f" variable nil (reparse-symbol function_parameters) [13791 13792]))                          
                        :documentation "Like :meth:`Flask.context_processor` but for a blueprint.  Such a
        function is executed each request, even if outside of the blueprint.
        ")
                        (reparse-symbol indented_block_body) [13759 14092])
                    ("app_errorhandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14118 14122])
                            ("code" variable nil (reparse-symbol function_parameters) [14124 14128]))                          
                        :documentation "Like :meth:`Flask.errorhandler` but for a blueprint.  This
        handler is used for all requests, even if outside of the blueprint.
        ")
                        (reparse-symbol indented_block_body) [14097 14429])
                    ("url_value_preprocessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14461 14465])
                            ("f" variable nil (reparse-symbol function_parameters) [14467 14468]))                          
                        :documentation "Registers a function as URL value preprocessor for this
        blueprint.  It's called before the view functions are called and
        can modify the url values provided.
        ")
                        (reparse-symbol indented_block_body) [14434 14799])
                    ("url_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14821 14825])
                            ("f" variable nil (reparse-symbol function_parameters) [14827 14828]))                          
                        :documentation "Callback function for URL defaults for this blueprint.  It's called
        with the endpoint and values and should update the values passed
        in place.
        ")
                        (reparse-symbol indented_block_body) [14804 15143])
                    ("app_url_value_preprocessor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15179 15183])
                            ("f" variable nil (reparse-symbol function_parameters) [15185 15186]))                          
                        :documentation "Same as :meth:`url_value_preprocessor` but application wide.
        ")
                        (reparse-symbol indented_block_body) [15148 15400])
                    ("app_url_defaults" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15426 15430])
                            ("f" variable nil (reparse-symbol function_parameters) [15432 15433]))                          
                        :documentation "Same as :meth:`url_defaults` but application wide.
        ")
                        (reparse-symbol indented_block_body) [15405 15635])
                    ("errorhandler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15657 15661])
                            ("code_or_exception" variable nil (reparse-symbol function_parameters) [15663 15680]))                          
                        :documentation "Registers an error handler that becomes active for this blueprint
        only.  Please be aware that routing does not happen local to a
        blueprint so an error handler for 404 usually is not handled by
        a blueprint unless it is caused inside a view function.  Another
        special case is the 500 internal server error which is always looked
        up from the application.

        Otherwise works as the :meth:`~flask.Flask.errorhandler` decorator
        of the :class:`~flask.Flask` object.
        ")
                        (reparse-symbol indented_block_body) [15640 16411])
                    ("register_error_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16443 16447])
                            ("code_or_exception" variable nil (reparse-symbol function_parameters) [16449 16466])
                            ("f" variable nil (reparse-symbol function_parameters) [16468 16469]))                          
                        :documentation "Non-decorator version of the :meth:`errorhandler` error attach
        function, akin to the :meth:`~flask.Flask.register_error_handler`
        application-wide function of the :class:`~flask.Flask` object but
        for error handlers limited to this blueprint.

        .. versionadded:: 0.11
        ")
                        (reparse-symbol indented_block_body) [16416 16904]))                  
                :type "class")
                nil [2974 16904]))          
    :file "blueprints.py"
    :pointmax 16904
    :fsize 16903
    :lastmodtime '(21468 4219 685189 251000)
    :unmatched-syntax '((FROM 326 . 330) (PERIOD 331 . 332))
    )
   (semanticdb-table "cli.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.run
    ~~~~~~~~~

    A simple command line application to run flask apps.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 212])
            ("os" include nil nil [214 223])
            ("sys" include nil nil [224 234])
            ("threading" include nil nil [235 261])
            ("contextlib" include nil nil [262 299])
            ("click" include nil nil [301 313])
            ("iteritems" include nil nil [329 345])
            ("NoAppException" type
               (:documentation "Raised if an application cannot be found or loaded."
                :superclasses ("click.UsageError")
                :type "class")
                nil [348 450])
            ("find_best_app" function
               (:documentation "Given a module instance this tries to find the best possible
    application in the module or raises an exception.
    "
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [470 476]))                  )
                nil [452 1361])
            ("prepare_exec_for_file" function
               (:documentation "Given a filename this will try to calculate the python path, add it
    to the search path and return the actual module name that is expected.
    "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1389 1397]))                  )
                nil [1363 2402])
            ("locate_app" function
               (:documentation "Attempts to locate the application."
                :arguments 
                  ( ("app_id" variable nil (reparse-symbol function_parameters) [2419 2425]))                  )
                nil [2404 2919])
            ("DispatchingApp" type
               (:documentation "Special application that dispatches to a flask application which
    is imported by name on first request.  This is safer than importing
    the application upfront because it means that we can forward all
    errors for import problems into the browser as error.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3296 3316])
                            ("self" variable nil (reparse-symbol indented_block_body) [3325 3341])
                            ("self" variable nil (reparse-symbol indented_block_body) [3350 3369])
                            ("if" code nil (reparse-symbol indented_block_body) [3378 3434]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3248 3252])
                            ("loader" variable nil (reparse-symbol function_parameters) [3254 3260])
                            ("use_eager_loading" variable nil (reparse-symbol function_parameters) [3262 3279]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3235 3434])
                    ("_load_unlocked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3458 3462]))                          )
                        (reparse-symbol indented_block_body) [3439 3522])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3540 3544])
                            ("environ" variable nil (reparse-symbol function_parameters) [3546 3553])
                            ("start_response" variable nil (reparse-symbol function_parameters) [3555 3569]))                          )
                        (reparse-symbol indented_block_body) [3527 3862]))                  
                :type "class")
                nil [2921 3862])
            ("ScriptInfo" type
               (:documentation "Help object to deal with Flask applications.  This is usually not
    necessary to interface with as it's used internally in the dispatching
    to click.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4183 4221])
                            ("self" variable nil (reparse-symbol indented_block_body) [4374 4392])
                            ("self" variable nil (reparse-symbol indented_block_body) [4519 4547])
                            ("self" variable nil (reparse-symbol indented_block_body) [4657 4671])
                            ("self" variable nil (reparse-symbol indented_block_body) [4680 4703]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4078 4082])
                            ("app_import_path" variable nil (reparse-symbol function_parameters) [4084 4099])
                            ("debug" variable nil (reparse-symbol function_parameters) [4106 4111])
                            ("create_app" variable nil (reparse-symbol function_parameters) [4118 4128]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4065 4704])
                    ("load_app" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4722 4726]))                          
                        :documentation "Loads the Flask app (if not yet loaded) and returns it.  Calling
        this multiple times will just result in the already loaded app to
        be returned.
        ")
                        (reparse-symbol indented_block_body) [4709 5504])
                    ("conditional_context" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5553 5557])
                            ("with_context" variable nil (reparse-symbol function_parameters) [5559 5571]))                          
                        :documentation "Creates an application context or not, depending on the given
        parameter but always works as context manager.  This is just a
        shortcut for a common operation.
        ")
                        (reparse-symbol indented_block_body) [5509 5919]))                  
                :type "class")
                nil [3864 5919])
            ("pass_script_info" variable nil nil [5921 5977])
            ("without_appcontext" function
               (:documentation "Marks a click callback so that it does not get a app context
    created.  This only works for commands directly registered to
    the toplevel system.  This really is only useful for very
    special commands like the runserver one.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [6003 6004]))                  )
                nil [5980 6311])
            ("set_debug_value" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [6333 6336])
                ("value" variable nil (reparse-symbol function_parameters) [6338 6343]))              ) nil [6313 6394])
            ("set_app_value" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [6414 6417])
                ("value" variable nil (reparse-symbol function_parameters) [6419 6424]))              ) nil [6396 6664])
            ("debug_option" variable nil nil [6666 6803])
            ("app_option" variable nil nil [6806 6926])
            ("FlaskGroup" type
               (:documentation "Special subclass of the a regular click group that supports loading
    more commands from the configured Flask app.  Normally a developer
    does not have to interface with this class but there are some very
    advanced usecases for which it makes sense to create an instance of
    this.

    For information as of why this is useful see :ref:`custom-scripts`.

    :param add_default_commands: if this is True then the default run and
                                 shell commands wil be added.
    :param add_app_option: adds the default ``--app`` option.  This gets
                           automatically disabled if a `create_app`
                           callback is defined.
    :param add_debug_option: adds the default ``--debug`` option.
    :param create_app: an optional callback that is passed the script info
                       and returns the loaded app.
    "
                :superclasses ("click.Group")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("params" variable nil (reparse-symbol indented_block_body) [8005 8051])
                            ("if" code nil (reparse-symbol indented_block_body) [8060 8135])
                            ("if" code nil (reparse-symbol indented_block_body) [8143 8200])
                            ("if" code nil (reparse-symbol indented_block_body) [8208 8269])
                            ("click" code nil (reparse-symbol indented_block_body) [8278 8328])
                            ("self" variable nil (reparse-symbol indented_block_body) [8337 8365])
                            ("if" code nil (reparse-symbol indented_block_body) [8375 8486]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7876 7880])
                            ("add_default_commands" variable nil (reparse-symbol function_parameters) [7882 7902])
                            ("add_app_option" variable nil (reparse-symbol function_parameters) [7909 7923])
                            ("add_debug_option" variable nil (reparse-symbol function_parameters) [7947 7963])
                            ("create_app" variable nil (reparse-symbol function_parameters) [7970 7980])
                            ("extra" variable nil (reparse-symbol function_parameters) [7987 7994]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7863 8486])
                    ("get_command" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8507 8511])
                            ("ctx" variable nil (reparse-symbol function_parameters) [8513 8516])
                            ("name" variable nil (reparse-symbol function_parameters) [8518 8522]))                          )
                        (reparse-symbol indented_block_body) [8491 9234])
                    ("list_commands" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9257 9261])
                            ("ctx" variable nil (reparse-symbol function_parameters) [9263 9266]))                          )
                        (reparse-symbol indented_block_body) [9239 9905])
                    ("invoke_subcommand" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9932 9936])
                            ("ctx" variable nil (reparse-symbol function_parameters) [9938 9941])
                            ("cmd" variable nil (reparse-symbol function_parameters) [9943 9946])
                            ("cmd_name" variable nil (reparse-symbol function_parameters) [9948 9956])
                            ("args" variable nil (reparse-symbol function_parameters) [9958 9962]))                          )
                        (reparse-symbol indented_block_body) [9910 10265])
                    ("main" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10279 10283])
                            ("args" variable nil (reparse-symbol function_parameters) [10285 10290])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [10292 10300]))                          )
                        (reparse-symbol indented_block_body) [10270 10556]))                  
                :type "class")
                nil [6929 10556])
            ("script_info_option" function
               (:documentation "This decorator works exactly like :func:`click.option` but is eager
    by default and stores the value in the :attr:`ScriptInfo.data`.  This
    is useful to further customize an application factory in very complex
    situations.

    :param script_info_key: this is a mandatory keyword argument which
                            defines under which data key the value should
                            be stored.
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [10581 10586])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [10588 10596]))                  )
                nil [10558 11516])
            ("" code nil nil [11532 11580])
            ("" code nil nil [11594 11679])
            ("" code nil nil [11693 11766])
            ("" code nil nil [11780 11945])
            ("" code nil nil [11959 12128])
            ("" code nil nil [12142 12327])
            ("" code nil nil [12341 12448])
            ("run_command" function
               (:documentation "Runs a local development server for the Flask application.

    This local server is recommended for development purposes only but it
    can also be used for simple intranet deployments.  By default it will
    not support any sort of concurrency at all to simplify debugging.  This
    can be changed with the --with-threads option which will enable basic
    multithreading.

    The reloader and debugger are by default enabled if the debug flag of
    Flask is enabled and disabled otherwise.
    "
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [12503 12507])
                    ("host" variable nil (reparse-symbol function_parameters) [12509 12513])
                    ("port" variable nil (reparse-symbol function_parameters) [12515 12519])
                    ("reload" variable nil (reparse-symbol function_parameters) [12521 12527])
                    ("debugger" variable nil (reparse-symbol function_parameters) [12529 12537])
                    ("eager_loading" variable nil (reparse-symbol function_parameters) [12539 12552])
                    ("with_threads" variable nil (reparse-symbol function_parameters) [12570 12582]))                  
                :decorators 
                  ( ("without_appcontext" function (:type "decorator") nil nil)
                    ("pass_script_info" function (:type "decorator") nil nil))                  )
                nil [12449 14163])
            ("" code nil nil [14179 14235])
            ("shell_command" function (:documentation "Runs an interactive Python shell in the context of a given
    Flask application.  The application will populate the default
    namespace of this shell according to it's configuration.

    This is useful for executing small snippets of management code
    without having to manually configuring the application.
    ") nil [14236 14946])
            ("cli" variable nil nil [14948 15354])
            ("main" function (:arguments 
              ( ("as_module" variable nil (reparse-symbol function_parameters) [15366 15375]))              ) nil [15357 15954])
            ("if" code nil nil [15956 16008]))          
    :file "cli.py"
    :pointmax 16008
    :fsize 16007
    :lastmodtime '(21468 4219 664189 728000)
    :unmatched-syntax '((FROM 613 . 617) (PERIOD 618 . 619) (FROM 315 . 319) (PERIOD 320 . 321))
    )
   (semanticdb-table "config.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.config
    ~~~~~~~~~~~~

    Implements the configuration related objects.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 211])
            ("imp" include nil nil [213 223])
            ("os" include nil nil [224 233])
            ("errno" include nil nil [234 246])
            ("werkzeug.utils" include nil nil [248 288])
            ("string_types" include nil nil [303 333])
            ("iteritems" include nil nil [303 333])
            ("json" include nil nil [341 352])
            ("ConfigAttribute" type
               (:documentation "Makes an attribute forward to the config"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [496 516])
                            ("self" variable nil (reparse-symbol indented_block_body) [525 559]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [455 459])
                            ("name" variable nil (reparse-symbol function_parameters) [461 465])
                            ("get_converter" variable nil (reparse-symbol function_parameters) [467 480]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [442 560])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [577 581])
                            ("obj" variable nil (reparse-symbol function_parameters) [583 586])
                            ("type" variable nil (reparse-symbol function_parameters) [588 592]))                          )
                        (reparse-symbol indented_block_body) [565 788])
                    ("__set__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [805 809])
                            ("obj" variable nil (reparse-symbol function_parameters) [811 814])
                            ("value" variable nil (reparse-symbol function_parameters) [816 821]))                          )
                        (reparse-symbol indented_block_body) [793 866]))                  
                :type "class")
                nil [355 866])
            ("Config" type
               (:documentation "Works exactly like a dict but provides ways to fill it from files
    or special dictionaries.  There are two common patterns to populate the
    config.

    Either you can fill the config from a config file::

        app.config.from_pyfile('yourconfig.cfg')

    Or alternatively you can define the configuration options in the
    module that calls :meth:`from_object` or provide an import path to
    a module that should be loaded.  It is also possible to tell it to
    use the same module and with that provide the configuration values
    just before the call::

        DEBUG = True
        SECRET_KEY = 'development key'
        app.config.from_object(__name__)

    In both cases (loading from any Python file or loading from modules),
    only uppercase keys are added to the config.  This makes it possible to use
    lowercase values in the config file for temporary values that are not added
    to the config or to define the config keys in the same file that implements
    the application.

    Probably the most interesting way to load configurations is from an
    environment variable pointing to a file::

        app.config.from_envvar('YOURAPPLICATION_SETTINGS')

    In this case before launching the application you have to set this
    environment variable to the file you want to use.  On Linux and OS X
    use the export statement::

        export YOURAPPLICATION_SETTINGS='/path/to/config/file'

    On windows use `set` instead.

    :param root_path: path to which files are read relative from.  When the
                      config object is created by the application, this is
                      the application's :attr:`~flask.Flask.root_path`.
    :param defaults: an optional dictionary of default values
    "
                :superclasses ("dict")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("dict" code nil (reparse-symbol indented_block_body) [2711 2746])
                            ("self" variable nil (reparse-symbol indented_block_body) [2755 2781]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2670 2674])
                            ("root_path" variable nil (reparse-symbol function_parameters) [2676 2685])
                            ("defaults" variable nil (reparse-symbol function_parameters) [2687 2695]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2657 2782])
                    ("from_envvar" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2803 2807])
                            ("variable_name" variable nil (reparse-symbol function_parameters) [2809 2822])
                            ("silent" variable nil (reparse-symbol function_parameters) [2824 2830]))                          
                        :documentation "Loads a configuration from an environment variable pointing to
        a configuration file.  This is basically just a shortcut with nicer
        error messages for this line of code::

            app.config.from_pyfile(os.environ['YOURAPPLICATION_SETTINGS'])

        :param variable_name: name of the environment variable
        :param silent: set to `True` if you want silent failure for missing
                       files.
        :return: bool. `True` if able to load config, `False` otherwise.
        ")
                        (reparse-symbol indented_block_body) [2787 3862])
                    ("from_pyfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3883 3887])
                            ("filename" variable nil (reparse-symbol function_parameters) [3889 3897])
                            ("silent" variable nil (reparse-symbol function_parameters) [3899 3905]))                          
                        :documentation "Updates the values in the config from a Python file.  This function
        behaves as if the file was imported as module with the
        :meth:`from_object` function.

        :param filename: the filename of the config.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to `True` if you want silent failure for missing
                       files.

        .. versionadded:: 0.7
           `silent` parameter.
        ")
                        (reparse-symbol indented_block_body) [3867 4996])
                    ("from_object" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5017 5021])
                            ("obj" variable nil (reparse-symbol function_parameters) [5023 5026]))                          
                        :documentation "Updates the values from the given object.  An object can be of one
        of the following two types:

        -   a string: in this case the object with that name will be imported
        -   an actual object reference: that object is used directly

        Objects are usually either modules or classes.

        Just the uppercase variables in that object are stored in the config.
        Example usage::

            app.config.from_object('yourapplication.default_config')
            from yourapplication import default_config
            app.config.from_object(default_config)

        You should not use this function to load the actual configuration but
        rather configuration defaults.  The actual config should be loaded
        with :meth:`from_pyfile` and ideally from a location not within the
        package because the package might be installed system wide.

        :param obj: an import name or object
        ")
                        (reparse-symbol indented_block_body) [5001 6166])
                    ("from_json" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6185 6189])
                            ("filename" variable nil (reparse-symbol function_parameters) [6191 6199])
                            ("silent" variable nil (reparse-symbol function_parameters) [6201 6207]))                          
                        :documentation "Updates the values in the config from a JSON file. This function
        behaves as if the JSON object was a dictionary and passed ot the
        :meth:`from_object` function.

        :param filename: the filename of the JSON file.  This can either be an
                         absolute filename or a filename relative to the
                         root path.
        :param silent: set to `True` if you want silent failure for missing
                       files.

        .. versionadded:: 1.0
        ")
                        (reparse-symbol indented_block_body) [6171 7250])
                    ("get_namespace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7273 7277])
                            ("namespace" variable nil (reparse-symbol function_parameters) [7279 7288])
                            ("lowercase" variable nil (reparse-symbol function_parameters) [7290 7299]))                          
                        :documentation "Returns a dictionary containing a subset of configuration options
        that match the specified namespace/prefix. Example usage::

            app.config['IMAGE_STORE_TYPE'] = 'fs'
            app.config['IMAGE_STORE_PATH'] = '/var/app/images'
            app.config['IMAGE_STORE_BASE_URL'] = 'http://img.website.com'
            image_store_config = app.config.get_namespace('IMAGE_STORE_')

        The resulting dictionary `image_store` would look like::

            {
                'type': 'fs',
                'path': '/var/app/images',
                'base_url': 'http://img.website.com'
            }

        This is often useful when configuration options map directly to
        keyword arguments in functions or class constructors.

        :param namespace: a configuration namespace
        :param lowercase: a flag indicating if the keys of the resulting
                          dictionary should be lowercase

        .. versionadded:: 1.0
        ")
                        (reparse-symbol indented_block_body) [7255 8556])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8574 8578]))                          )
                        (reparse-symbol indented_block_body) [8561 8655]))                  
                :type "class")
                nil [868 8655]))          
    :file "config.py"
    :pointmax 8655
    :fsize 8654
    :lastmodtime '(21468 4219 687189 205000)
    :unmatched-syntax '((INDENT_BLOCK 6939 . 7132) (NEWLINE 6938 . 6939) (COLON 6937 . 6938) (TRY 6808 . 6811) (AS 6933 . 6935) (INDENT_BLOCK 4755 . 4948) (NEWLINE 4754 . 4755) (COLON 4753 . 4754) (TRY 4593 . 4596) (AS 4749 . 4751) (FROM 334 . 338) (PERIOD 339 . 340) (FROM 289 . 293) (PERIOD 294 . 295))
    )
   (semanticdb-table "ctx.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.ctx
    ~~~~~~~~~

    Implements the objects required to keep the context.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 212])
            ("__future__" include nil nil [214 251])
            ("sys" include nil nil [253 263])
            ("functools" include nil nil [264 300])
            ("werkzeug.exceptions" include nil nil [302 347])
            ("_request_ctx_stack" include nil nil [363 404])
            ("_app_ctx_stack" include nil nil [363 404])
            ("blueprint_is_module" include nil nil [418 444])
            ("appcontext_pushed" include nil nil [459 502])
            ("appcontext_popped" include nil nil [459 502])
            ("BROKEN_PYPY_CTXMGR_EXIT" include nil nil [517 556])
            ("reraise" include nil nil [517 556])
            ("_AppCtxGlobals" type
               (:documentation "A plain object."
                :superclasses ("object")
                :members 
                  ( ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [628 632])
                            ("name" variable nil (reparse-symbol function_parameters) [634 638])
                            ("default" variable nil (reparse-symbol function_parameters) [640 647]))                          )
                        (reparse-symbol indented_block_body) [620 703])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [725 729])
                            ("item" variable nil (reparse-symbol function_parameters) [731 735]))                          )
                        (reparse-symbol indented_block_body) [708 775])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [793 797]))                          )
                        (reparse-symbol indented_block_body) [780 835])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [853 857]))                          )
                        (reparse-symbol indented_block_body) [840 1010]))                  
                :type "class")
                nil [559 1010])
            ("after_this_request" function
               (:documentation "Executes a function after this request.  This is useful to modify
    response objects.  The function is passed the response object and has
    to return the same or a new one.

    Example::

        @app.route('/')
        def index():
            @after_this_request
            def add_header(response):
                response.headers['X-Foo'] = 'Parachute'
                return response
            return 'Hello World!'

    This is more useful if a function other than the view function wants to
    modify a response.  For instance think of a decorator that wants to add
    some headers without converting the return value into a response object.

    .. versionadded:: 0.9
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [1035 1036]))                  )
                nil [1012 1816])
            ("copy_current_request_context" function
               (:documentation "A helper function that decorates a function to retain the current
    request context.  This is useful when working with greenlets.  The moment
    the function is decorated a copy of the request context is created and
    then pushed when the function is called.

    Example::

        import gevent
        from flask import copy_current_request_context

        @app.route('/')
        def index():
            @copy_current_request_context
            def do_some_work():
                # do some work here, it can access flask.request like you
                # would otherwise in the view function.
                ...
            gevent.spawn(do_some_work)
            return 'Regular response'

    .. versionadded:: 0.10
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [1851 1852]))                  )
                nil [1818 2995])
            ("has_request_context" function (:documentation "If you have code that wants to test if a request context is there or
    not this function can be used.  For instance, you may want to take advantage
    of request information if the request object is available, but fail
    silently if it is unavailable.

    ::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and has_request_context():
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    Alternatively you can also just test any of the context bound objects
    (such as :class:`request` or :class:`g` for truthness)::

        class User(db.Model):

            def __init__(self, username, remote_addr=None):
                self.username = username
                if remote_addr is None and request:
                    remote_addr = request.remote_addr
                self.remote_addr = remote_addr

    .. versionadded:: 0.7
    ") nil [2997 4099])
            ("has_app_context" function (:documentation "Works like :func:`has_request_context` but for the application
    context.  You can also just do a boolean check on the
    :data:`current_app` object instead.

    .. versionadded:: 0.9
    ") nil [4101 4369])
            ("AppContext" type
               (:documentation "The application context binds an application object implicitly
    to the current thread or greenlet, similar to how the
    :class:`RequestContext` binds request information.  The application
    context is also implicitly created if a request context is created
    but the application is not on top of the individual application
    context.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4795 4809])
                            ("self" variable nil (reparse-symbol indented_block_body) [4818 4865])
                            ("self" variable nil (reparse-symbol indented_block_body) [4874 4910])
                            ("self" variable nil (reparse-symbol indented_block_body) [5058 5074]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4775 4779])
                            ("app" variable nil (reparse-symbol function_parameters) [4781 4784]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4762 5075])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5089 5093]))                          
                        :documentation "Binds the app context to the current context.")
                        (reparse-symbol indented_block_body) [5080 5323])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5336 5340])
                            ("exc" variable nil (reparse-symbol function_parameters) [5342 5345]))                          
                        :documentation "Pops the app context.")
                        (reparse-symbol indented_block_body) [5328 5739])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5758 5762]))                          )
                        (reparse-symbol indented_block_body) [5744 5805])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5823 5827])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [5829 5837])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [5839 5848])
                            ("tb" variable nil (reparse-symbol function_parameters) [5850 5852]))                          )
                        (reparse-symbol indented_block_body) [5810 5990]))                  
                :type "class")
                nil [4371 5990])
            ("RequestContext" type
               (:documentation "The request context contains all request relevant information.  It is
    created at the beginning of the request and pushed to the
    `_request_ctx_stack` and removed at the end of it.  It will create the
    URL adapter and request object for the WSGI environment provided.

    Do not attempt to use this class directly, instead use
    :meth:`~flask.Flask.test_request_context` and
    :meth:`~flask.Flask.request_context` to create this object.

    When the request context is popped, it will evaluate all the
    functions registered on the application for teardown execution
    (:meth:`~flask.Flask.teardown_request`).

    The request context is automatically popped at the end of the request
    for you.  In debug mode the request context is kept around if
    exceptions happen so that interactive debuggers have a chance to
    introspect the data.  With 0.4 this can also be forced for requests
    that did not fail and outside of `DEBUG` mode.  By setting
    ``'flask._preserve_context'`` to `True` on the WSGI environment the
    context will not pop itself at the end of the request.  This is used by
    the :meth:`~flask.Flask.test_client` for example to implement the
    deferred cleanup functionality.

    You might find this helpful for unittests where you need the
    information from the context local around for a little longer.  Make
    sure to properly :meth:`~werkzeug.LocalStack.pop` the stack yourself in
    that situation, otherwise your unittests will leak memory.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7604 7618])
                            ("if" code nil (reparse-symbol indented_block_body) [7627 7696])
                            ("self" variable nil (reparse-symbol indented_block_body) [7704 7726])
                            ("self" variable nil (reparse-symbol indented_block_body) [7735 7790])
                            ("self" variable nil (reparse-symbol indented_block_body) [7799 7818])
                            ("self" variable nil (reparse-symbol indented_block_body) [7827 7846])
                            ("self" variable nil (reparse-symbol indented_block_body) [8164 8197])
                            ("self" variable nil (reparse-symbol indented_block_body) [8337 8359])
                            ("self" variable nil (reparse-symbol indented_block_body) [8480 8506])
                            ("self" variable nil (reparse-symbol indented_block_body) [8690 8724])
                            ("self" code nil (reparse-symbol indented_block_body) [8734 8754])
                            ("blueprint" variable nil (reparse-symbol indented_block_body) [8862 8896])
                            ("if" code nil (reparse-symbol indented_block_body) [8905 9188]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7561 7565])
                            ("app" variable nil (reparse-symbol function_parameters) [7567 7570])
                            ("environ" variable nil (reparse-symbol function_parameters) [7572 7579])
                            ("request" variable nil (reparse-symbol function_parameters) [7581 7588]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7548 9188])
                    ("_get_g" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9204 9208]))                          )
                        (reparse-symbol indented_block_body) [9193 9247])
                    ("_set_g" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9262 9266])
                            ("value" variable nil (reparse-symbol function_parameters) [9268 9273]))                          )
                        (reparse-symbol indented_block_body) [9251 9313])
                    ("g" variable nil (reparse-symbol indented_block_body) [9317 9345])
                    ("del" code nil (reparse-symbol indented_block_body) [9350 9368])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9383 9387]))                          
                        :documentation "Creates a copy of this request context with the same request object.
        This can be used to move a request context to a different greenlet.
        Because the actual request object is the same this cannot be used to
        move a request context to a different thread unless access to the
        request object is locked.

        .. versionadded:: 0.10
        ")
                        (reparse-symbol indented_block_body) [9374 9900])
                    ("match_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9923 9927]))                          
                        :documentation "Can be overridden by a subclass to hook into the matching
        of the request.
        ")
                        (reparse-symbol indented_block_body) [9905 10281])
                    ("push" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10295 10299]))                          
                        :documentation "Binds the request context to the current context.")
                        (reparse-symbol indented_block_body) [10286 11997])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12010 12014])
                            ("exc" variable nil (reparse-symbol function_parameters) [12016 12019]))                          
                        :documentation "Pops the request context and unbinds it by doing that.  This will
        also trigger the execution of functions registered by the
        :meth:`~flask.Flask.teardown_request` decorator.

        .. versionchanged:: 0.9
           Added the `exc` argument.
        ")
                        (reparse-symbol indented_block_body) [12002 13594])
                    ("auto_pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13612 13616])
                            ("exc" variable nil (reparse-symbol function_parameters) [13618 13621]))                          )
                        (reparse-symbol indented_block_body) [13599 13877])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13896 13900]))                          )
                        (reparse-symbol indented_block_body) [13882 13943])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13961 13965])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [13967 13975])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [13977 13986])
                            ("tb" variable nil (reparse-symbol function_parameters) [13988 13990]))                          )
                        (reparse-symbol indented_block_body) [13948 14462])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14480 14484]))                          )
                        (reparse-symbol indented_block_body) [14467 14668]))                  
                :type "class")
                nil [5992 14668]))          
    :file "ctx.py"
    :pointmax 14668
    :fsize 14667
    :lastmodtime '(21468 4219 420195 275000)
    :unmatched-syntax '((INDENT_BLOCK 10234 . 10281) (NEWLINE 10233 . 10234) (COLON 10232 . 10233) (TRY 10043 . 10046) (AS 10228 . 10230) (FROM 503 . 507) (PERIOD 508 . 509) (FROM 445 . 449) (PERIOD 450 . 451) (FROM 405 . 409) (PERIOD 410 . 411) (FROM 349 . 353) (PERIOD 354 . 355))
    )
   (semanticdb-table "debughelpers.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.debughelpers
    ~~~~~~~~~~~~~~~~~~

    Various helpers to make the development experience better.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 236])
            ("implements_to_string" include nil nil [251 278])
            ("UnexpectedUnicodeError" type
               (:documentation "Raised in places where we want some better error reporting for
    unexpected unicode or binary data.
    "
                :superclasses ("AssertionError" "UnicodeError")
                :type "class")
                nil [281 458])
            ("DebugFilesKeyError" type
               (:documentation "Raised from request.files during debugging.  The idea is that it can
    provide a better error message than just a generic KeyError/BadRequest.
    "
                :superclasses ("KeyError" "AssertionError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("form_matches" variable nil (reparse-symbol indented_block_body) [741 781])
                            ("buf" variable nil (reparse-symbol indented_block_body) [790 1206])
                            ("if" code nil (reparse-symbol indented_block_body) [1215 1434])
                            ("self" variable nil (reparse-symbol indented_block_body) [1442 1465]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [712 716])
                            ("request" variable nil (reparse-symbol function_parameters) [718 725])
                            ("key" variable nil (reparse-symbol function_parameters) [727 730]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [699 1466])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1483 1487]))                          )
                        (reparse-symbol indented_block_body) [1471 1514]))                  
                :type "class")
                nil [482 1514])
            ("FormDataRoutingRedirect" type
               (:documentation "This exception is raised by Flask in debug mode if it detects a
    redirect caused by the routing system when the request method is not
    GET, HEAD or OPTIONS.  Reasoning: form data will be dropped.
    "
                :superclasses ("AssertionError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("exc" variable nil (reparse-symbol indented_block_body) [1822 1853])
                            ("buf" variable nil (reparse-symbol indented_block_body) [1862 2040])
                            ("if" code nil (reparse-symbol indented_block_body) [2118 2426])
                            ("buf" code nil (reparse-symbol indented_block_body) [2435 2693])
                            ("buf" code nil (reparse-symbol indented_block_body) [2702 2769])
                            ("AssertionError" code nil (reparse-symbol indented_block_body) [2778 2837]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1798 1802])
                            ("request" variable nil (reparse-symbol function_parameters) [1804 1811]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1785 2838]))                  
                :type "class")
                nil [1516 2838])
            ("attach_enctype_error_multidict" function
               (:documentation "Since Flask 0.8 we're monkeypatching the files object in case a
    request is detected that does not use multipart form data but the files
    object is accessed.
    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [2875 2882]))                  )
                nil [2840 3504]))          
    :file "debughelpers.py"
    :pointmax 3504
    :fsize 3503
    :lastmodtime '(21468 4219 674189 501000)
    :unmatched-syntax '((FROM 237 . 241) (PERIOD 242 . 243))
    )
   (semanticdb-table "exthook.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.exthook
    ~~~~~~~~~~~~~

    Redirect imports for extensions.  This module basically makes it possible
    for us to transition from flaskext.foo to flask_foo without having to
    force all extensions to upgrade at the same time.

    When a user does ``from flask.ext.foo import bar`` it will attempt to
    import ``from flask_foo import bar`` first and when that fails it will
    try to import ``from flaskext.foo import bar``.

    We're switching from namespace packages because it was just too painful for
    everybody involved.

    This is used by `flask.ext`.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 710])
            ("sys" include nil nil [711 721])
            ("os" include nil nil [722 731])
            ("reraise" include nil nil [746 760])
            ("ExtensionImporter" type
               (:documentation "This importer redirects imports from this submodule to other locations.
    This makes it possible to transition from the old flaskext.name to the
    newer flask_name without people having a hard time.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1079 1115])
                            ("self" variable nil (reparse-symbol indented_block_body) [1124 1160])
                            ("self" code nil (reparse-symbol indented_block_body) [1169 1203])
                            ("self" code nil (reparse-symbol indented_block_body) [1212 1262]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1032 1036])
                            ("module_choices" variable nil (reparse-symbol function_parameters) [1038 1052])
                            ("wrapper_module" variable nil (reparse-symbol function_parameters) [1054 1068]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1019 1263])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1279 1283])
                            ("other" variable nil (reparse-symbol function_parameters) [1285 1290]))                          )
                        (reparse-symbol indented_block_body) [1268 1567])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1583 1587])
                            ("other" variable nil (reparse-symbol function_parameters) [1589 1594]))                          )
                        (reparse-symbol indented_block_body) [1572 1635])
                    ("install" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1652 1656]))                          )
                        (reparse-symbol indented_block_body) [1640 1735])
                    ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1756 1760])
                            ("fullname" variable nil (reparse-symbol function_parameters) [1762 1770])
                            ("path" variable nil (reparse-symbol function_parameters) [1772 1776]))                          )
                        (reparse-symbol indented_block_body) [1740 1853])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1874 1878])
                            ("fullname" variable nil (reparse-symbol function_parameters) [1880 1888]))                          )
                        (reparse-symbol indented_block_body) [1858 3671])
                    ("is_important_traceback" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3703 3707])
                            ("important_module" variable nil (reparse-symbol function_parameters) [3709 3725])
                            ("tb" variable nil (reparse-symbol function_parameters) [3727 3729]))                          
                        :documentation "Walks a traceback's frames and checks if any of the frames
        originated in the given important module.  If that is the case then we
        were able to import the module itself but apparently something went
        wrong when the module was imported.  (Eg: import of an import failed).
        ")
                        (reparse-symbol indented_block_body) [3676 4217])
                    ("is_important_frame" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4245 4249])
                            ("important_module" variable nil (reparse-symbol function_parameters) [4251 4267])
                            ("tb" variable nil (reparse-symbol function_parameters) [4269 4271]))                          
                        :documentation "Checks a single frame if it's important.")
                        (reparse-symbol indented_block_body) [4222 5088]))                  
                :type "class")
                nil [763 5088]))          
    :file "exthook.py"
    :pointmax 5088
    :fsize 5087
    :lastmodtime '(21468 4219 431195 25000)
    :unmatched-syntax '((FROM 732 . 736) (PERIOD 737 . 738))
    )
   (semanticdb-table "globals.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.globals
    ~~~~~~~~~~~~~

    Defines all the global objects that are proxies to the current
    active context.


    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 251])
            ("functools" include nil nil [253 282])
            ("werkzeug.local" include nil nil [283 332])
            ("_request_ctx_err_msg" variable nil nil [335 588])
            ("_app_ctx_err_msg" variable nil nil [589 904])
            ("_lookup_req_object" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [930 934]))              ) nil [907 1069])
            ("_lookup_app_object" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [1094 1098]))              ) nil [1071 1225])
            ("_find_app" function nil nil [1227 1357])
            ("_request_ctx_stack" variable nil nil [1376 1409])
            ("_app_ctx_stack" variable nil nil [1410 1439])
            ("current_app" variable nil nil [1440 1475])
            ("request" variable nil nil [1476 1536])
            ("session" variable nil nil [1537 1597])
            ("g" variable nil nil [1598 1646]))          
    :file "globals.py"
    :pointmax 1647
    :fsize 1645
    :lastmodtime '(21468 4219 418195 320000)
    :unmatched-syntax '(($EOI 1647 . 1647) ($EOI 1646 . 1646) ($EOI 1649 . 1649))
    )
   (semanticdb-table "helpers.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.helpers
    ~~~~~~~~~~~~~

    Implements various helpers.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 195])
            ("os" include nil nil [197 206])
            ("sys" include nil nil [207 217])
            ("pkgutil" include nil nil [218 232])
            ("posixpath" include nil nil [233 249])
            ("mimetypes" include nil nil [250 266])
            ("time" include nil nil [267 288])
            ("zlib" include nil nil [289 313])
            ("threading" include nil nil [314 341])
            ("werkzeug.routing" include nil nil [342 381])
            ("functools" include nil nil [382 418])
            ("try" code nil nil [420 529])
            ("werkzeug.datastructures" include nil nil [530 573])
            ("werkzeug.exceptions" include nil nil [574 614])
            ("try" code nil nil [640 746])
            ("jinja2" include nil nil [747 782])
            ("message_flashed" include nil nil [798 820])
            ("session" include nil nil [835 914])
            ("_request_ctx_stack" include nil nil [835 914])
            ("_app_ctx_stack" include nil nil [835 914])
            ("current_app" include nil nil [835 914])
            ("request" include nil nil [835 914])
            ("string_types" include nil nil [929 959])
            ("text_type" include nil nil [929 959])
            ("_missing" variable nil nil [973 992])
            ("_os_alt_seps" variable nil nil [1198 1309])
            ("_endpoint_from_view_func" function
               (:documentation "Internal helper that returns the default endpoint for a given
    function.  This always is the function name.
    "
                :arguments 
                  ( ("view_func" variable nil (reparse-symbol function_parameters) [1341 1350]))                  )
                nil [1312 1632])
            ("stream_with_context" function
               (:documentation "Request contexts disappear when the response is started on the server.
    This is done for efficiency reasons and to make it less likely to encounter
    memory leaks with badly written WSGI middlewares.  The downside is that if
    you are using streamed responses, the generator cannot access request bound
    information any more.

    This function however can help you keep the context around for longer::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            @stream_with_context
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(generate())

    Alternatively it can also be used around a specific generator::

        from flask import stream_with_context, request, Response

        @app.route('/stream')
        def streamed_response():
            def generate():
                yield 'Hello '
                yield request.args['name']
                yield '!'
            return Response(stream_with_context(generate()))

    .. versionadded:: 0.9
    "
                :arguments 
                  ( ("generator_or_function" variable nil (reparse-symbol function_parameters) [1658 1679]))                  )
                nil [1634 4292])
            ("make_response" function
               (:documentation "Sometimes it is necessary to set additional headers in a view.  Because
    views do not have to return response objects but can return a value that
    is converted into a response object by Flask itself, it becomes tricky to
    add headers to it.  This function can be called instead of using a return
    and you will get a response object which you can use to attach headers.

    If view looked like this and you want to add a new header::

        def index():
            return render_template('index.html', foo=42)

    You can now do something like this::

        def index():
            response = make_response(render_template('index.html', foo=42))
            response.headers['X-Parachutes'] = 'parachutes are cool'
            return response

    This function accepts the very same arguments you can return from a
    view function.  This for example creates a response with a 404 error
    code::

        response = make_response(render_template('not_found.html'), 404)

    The other use case of this function is to force the return value of a
    view function into a response which is helpful with view
    decorators::

        response = make_response(view_function())
        response.headers['X-Parachutes'] = 'parachutes are cool'

    Internally this function does the following things:

    -   if no arguments are passed, it creates a new response argument
    -   if one argument is passed, :meth:`flask.Flask.make_response`
        is invoked with it.
    -   if more than one argument is passed, the arguments are passed
        to the :meth:`flask.Flask.make_response` function as tuple.

    .. versionadded:: 0.6
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4312 4317]))                  )
                nil [4294 6138])
            ("url_for" function
               (:documentation "Generates a URL to the given endpoint with the method provided.

    Variable arguments that are unknown to the target endpoint are appended
    to the generated URL as query arguments.  If the value of a query argument
    is `None`, the whole pair is skipped.  In case blueprints are active
    you can shortcut references to the same blueprint by prefixing the
    local endpoint with a dot (``.``).

    This will reference the index function local to the current blueprint::

        url_for('.index')

    For more information, head over to the :ref:`Quickstart <url-building>`.

    To integrate applications, :class:`Flask` has a hook to intercept URL build
    errors through :attr:`Flask.url_build_error_handlers`.  The `url_for`
    function results in a :exc:`~werkzeug.routing.BuildError` when the current
    app does not have a URL for the given endpoint and values.  When it does, the
    :data:`~flask.current_app` calls its :attr:`~Flask.url_build_error_handlers` if
    it is not `None`, which can return a string to use as the result of
    `url_for` (instead of `url_for`'s default to raise the
    :exc:`~werkzeug.routing.BuildError` exception) or re-raise the exception.
    An example::

        def external_url_handler(error, endpoint, values):
            \"Looks up an external URL when `url_for` cannot build a URL.\"
            # This is an example of hooking the build_error_handler.
            # Here, lookup_url is some utility function you've built
            # which looks up the endpoint in some external URL registry.
            url = lookup_url(endpoint, **values)
            if url is None:
                # External lookup did not have a URL.
                # Re-raise the BuildError, in context of original traceback.
                exc_type, exc_value, tb = sys.exc_info()
                if exc_value is error:
                    raise exc_type, exc_value, tb
                else:
                    raise error
            # url_for will use this result, instead of raising BuildError.
            return url

        app.url_build_error_handlers.append(external_url_handler)

    Here, `error` is the instance of :exc:`~werkzeug.routing.BuildError`, and
    `endpoint` and `values` are the arguments passed into `url_for`.  Note
    that this is for building URLs outside the current application, and not for
    handling 404 NotFound errors.

    .. versionadded:: 0.10
       The `_scheme` parameter was added.

    .. versionadded:: 0.9
       The `_anchor` and `_method` parameters were added.

    .. versionadded:: 0.9
       Calls :meth:`Flask.handle_build_error` on
       :exc:`~werkzeug.routing.BuildError`.

    :param endpoint: the endpoint of the URL (name of the function)
    :param values: the variable arguments of the URL rule
    :param _external: if set to `True`, an absolute URL is generated. Server
      address can be changed via `SERVER_NAME` configuration variable which
      defaults to `localhost`.
    :param _scheme: a string specifying the desired URL scheme. The `_external`
      parameter must be set to `True` or a `ValueError` is raised.
    :param _anchor: if provided this is added as anchor to the URL.
    :param _method: if provided this explicitly specifies an HTTP method.
    "
                :arguments 
                  ( ("endpoint" variable nil (reparse-symbol function_parameters) [6152 6160])
                    ("values" variable nil (reparse-symbol function_parameters) [6162 6170]))                  )
                nil [6140 12040])
            ("get_template_attribute" function
               (:documentation "Loads a macro (or variable) a template exports.  This can be used to
    invoke a macro from within Python code.  If you for example have a
    template named `_cider.html` with the following contents:

    .. sourcecode:: html+jinja

       {% macro hello(name) %}Hello {{ name }}!{% endmacro %}

    You can access this from Python code like this::

        hello = get_template_attribute('_cider.html', 'hello')
        return hello('World')

    .. versionadded:: 0.2

    :param template_name: the name of the template
    :param attribute: the name of the variable of macro to access
    "
                :arguments 
                  ( ("template_name" variable nil (reparse-symbol function_parameters) [12069 12082])
                    ("attribute" variable nil (reparse-symbol function_parameters) [12084 12093]))                  )
                nil [12042 12808])
            ("flash" function
               (:documentation "Flashes a message to the next request.  In order to remove the
    flashed message from the session and to display it to the user,
    the template has to call :func:`get_flashed_messages`.

    .. versionchanged:: 0.3
       `category` parameter added.

    :param message: the message to be flashed.
    :param category: the category for the message.  The following values
                     are recommended: ``'message'`` for any kind of message,
                     ``'error'`` for errors, ``'info'`` for information
                     messages and ``'warning'`` for warnings.  However any
                     kind of string can be used as category.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [12820 12827])
                    ("category" variable nil (reparse-symbol function_parameters) [12829 12837]))                  )
                nil [12810 14115])
            ("get_flashed_messages" function
               (:documentation "Pulls all flashed messages from the session and returns them.
    Further calls in the same request to the function will return
    the same messages.  By default just the messages are returned,
    but when `with_categories` is set to `True`, the return value will
    be a list of tuples in the form ``(category, message)`` instead.

    Filter the flashed messages to one or more categories by providing those
    categories in `category_filter`.  This allows rendering categories in
    separate html blocks.  The `with_categories` and `category_filter`
    arguments are distinct:

    * `with_categories` controls whether categories are returned with message
      text (`True` gives a tuple, where `False` gives just the message text).
    * `category_filter` filters the messages down to only those matching the
      provided categories.

    See :ref:`message-flashing-pattern` for examples.

    .. versionchanged:: 0.3
       `with_categories` parameter added.

    .. versionchanged:: 0.9
        `category_filter` parameter added.

    :param with_categories: set to `True` to also receive categories.
    :param category_filter: whitelist of categories to limit return values
    "
                :arguments 
                  ( ("with_categories" variable nil (reparse-symbol function_parameters) [14142 14157])
                    ("category_filter" variable nil (reparse-symbol function_parameters) [14165 14180]))                  )
                nil [14117 15768])
            ("send_file" function
               (:documentation "Sends the contents of a file to the client.  This will use the
    most efficient method available and configured.  By default it will
    try to use the WSGI server's file_wrapper support.  Alternatively
    you can set the application's :attr:`~Flask.use_x_sendfile` attribute
    to ``True`` to directly emit an `X-Sendfile` header.  This however
    requires support of the underlying webserver for `X-Sendfile`.

    By default it will try to guess the mimetype for you, but you can
    also explicitly provide one.  For extra security you probably want
    to send certain files as attachment (HTML for instance).  The mimetype
    guessing requires a `filename` or an `attachment_filename` to be
    provided.

    Please never pass filenames to this function from user sources without
    checking them first.  Something like this is usually sufficient to
    avoid security problems::

        if '..' in filename or filename.startswith('/'):
            abort(404)

    .. versionadded:: 0.2

    .. versionadded:: 0.5
       The `add_etags`, `cache_timeout` and `conditional` parameters were
       added.  The default behavior is now to attach etags.

    .. versionchanged:: 0.7
       mimetype guessing and etag support for file objects was
       deprecated because it was unreliable.  Pass a filename if you are
       able to, otherwise attach an etag yourself.  This functionality
       will be removed in Flask 1.0

    .. versionchanged:: 0.9
       cache_timeout pulls its default from application config, when None.

    :param filename_or_fp: the filename of the file to send.  This is
                           relative to the :attr:`~Flask.root_path` if a
                           relative path is specified.
                           Alternatively a file object might be provided
                           in which case `X-Sendfile` might not work and
                           fall back to the traditional method.  Make sure
                           that the file pointer is positioned at the start
                           of data to send before calling :func:`send_file`.
    :param mimetype: the mimetype of the file if provided, otherwise
                     auto detection happens.
    :param as_attachment: set to `True` if you want to send this file with
                          a ``Content-Disposition: attachment`` header.
    :param attachment_filename: the filename for the attachment if it
                                differs from the file's filename.
    :param add_etags: set to `False` to disable attaching of etags.
    :param conditional: set to `True` to enable conditional responses.

    :param cache_timeout: the timeout in seconds for the headers. When `None`
                          (default), this value is set by
                          :meth:`~Flask.get_send_file_max_age` of
                          :data:`~flask.current_app`.
    "
                :arguments 
                  ( ("filename_or_fp" variable nil (reparse-symbol function_parameters) [15784 15798])
                    ("mimetype" variable nil (reparse-symbol function_parameters) [15800 15808])
                    ("as_attachment" variable nil (reparse-symbol function_parameters) [15815 15828])
                    ("attachment_filename" variable nil (reparse-symbol function_parameters) [15850 15869])
                    ("add_etags" variable nil (reparse-symbol function_parameters) [15876 15885])
                    ("cache_timeout" variable nil (reparse-symbol function_parameters) [15906 15919])
                    ("conditional" variable nil (reparse-symbol function_parameters) [15926 15937]))                  )
                nil [15770 22594])
            ("safe_join" function
               (:documentation "Safely join `directory` and `filename`.

    Example usage::

        @app.route('/wiki/<path:filename>')
        def wiki_page(filename):
            filename = safe_join(app.config['WIKI_FOLDER'], filename)
            with open(filename, 'rb') as fd:
                content = fd.read() # Read and process the file content...

    :param directory: the base directory.
    :param filename: the untrusted filename relative to that directory.
    :raises: :class:`~werkzeug.exceptions.NotFound` if the resulting path
             would fall out of `directory`.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [22610 22619])
                    ("filename" variable nil (reparse-symbol function_parameters) [22621 22629]))                  )
                nil [22596 23509])
            ("send_from_directory" function
               (:documentation "Send a file from a given directory with :func:`send_file`.  This
    is a secure way to quickly expose static files from an upload folder
    or something similar.

    Example usage::

        @app.route('/uploads/<path:filename>')
        def download_file(filename):
            return send_from_directory(app.config['UPLOAD_FOLDER'],
                                       filename, as_attachment=True)

    .. admonition:: Sending files and Performance

       It is strongly recommended to activate either `X-Sendfile` support in
       your webserver or (if no authentication happens) to tell the webserver
       to serve files for the given path on its own without calling into the
       web application for improved performance.

    .. versionadded:: 0.5

    :param directory: the directory where all the files are stored.
    :param filename: the filename relative to that directory to
                     download.
    :param options: optional keyword arguments that are directly
                    forwarded to :func:`send_file`.
    "
                :arguments 
                  ( ("directory" variable nil (reparse-symbol function_parameters) [23535 23544])
                    ("filename" variable nil (reparse-symbol function_parameters) [23546 23554])
                    ("options" variable nil (reparse-symbol function_parameters) [23556 23565]))                  )
                nil [23511 24926])
            ("get_root_path" function
               (:documentation "Returns the path to a package or cwd if that cannot be found.  This
    returns the path of a package or the folder that contains a module.

    Not to be confused with the package path returned by :func:`find_package`.
    "
                :arguments 
                  ( ("import_name" variable nil (reparse-symbol function_parameters) [24946 24957]))                  )
                nil [24928 27024])
            ("_matching_loader_thinks_module_is_package" function
               (:documentation "Given the loader that loaded a module and the module this function
    attempts to figure out if the given module is actually a package.
    "
                :arguments 
                  ( ("loader" variable nil (reparse-symbol function_parameters) [27072 27078])
                    ("mod_name" variable nil (reparse-symbol function_parameters) [27080 27088]))                  )
                nil [27026 28093])
            ("find_package" function
               (:documentation "Finds a package and returns the prefix (or None if the package is
    not installed) as well as the folder that contains the package or
    module as a tuple.  The package path returned is the module that would
    have to be added to the pythonpath in order to make it possible to
    import the module.  The prefix is the path below which a UNIX like
    folder structure exists (lib, share etc.).
    "
                :arguments 
                  ( ("import_name" variable nil (reparse-symbol function_parameters) [28112 28123]))                  )
                nil [28095 30531])
            ("locked_cached_property" type
               (:documentation "A decorator that converts a function into a lazy property.  The
    function wrapped is called the first time to retrieve the result
    and then that calculated result is used the next time you access
    the value.  Works like the one in Werkzeug but has a lock for
    thread safety.
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" code nil (reparse-symbol indented_block_body) [30933 30970])
                            ("self" variable nil (reparse-symbol indented_block_body) [30979 31012])
                            ("self" code nil (reparse-symbol indented_block_body) [31021 31055])
                            ("self" variable nil (reparse-symbol indented_block_body) [31064 31080])
                            ("self" variable nil (reparse-symbol indented_block_body) [31089 31108]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30891 30895])
                            ("func" variable nil (reparse-symbol function_parameters) [30897 30901])
                            ("name" variable nil (reparse-symbol function_parameters) [30903 30907])
                            ("doc" variable nil (reparse-symbol function_parameters) [30914 30917]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [30878 31109])
                    ("__get__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31126 31130])
                            ("obj" variable nil (reparse-symbol function_parameters) [31132 31135])
                            ("type" variable nil (reparse-symbol function_parameters) [31137 31141]))                          )
                        (reparse-symbol indented_block_body) [31114 31433]))                  
                :type "class")
                nil [30533 31433])
            ("_PackageBoundObject" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [31667 31697])
                            ("self" variable nil (reparse-symbol indented_block_body) [31800 31838])
                            ("if" code nil (reparse-symbol indented_block_body) [31848 31926])
                            ("self" variable nil (reparse-symbol indented_block_body) [31977 32003])
                            ("self" variable nil (reparse-symbol indented_block_body) [32013 32039])
                            ("self" variable nil (reparse-symbol indented_block_body) [32048 32076]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31488 31492])
                            ("import_name" variable nil (reparse-symbol function_parameters) [31494 31505])
                            ("template_folder" variable nil (reparse-symbol function_parameters) [31507 31522])
                            ("root_path" variable nil (reparse-symbol function_parameters) [31529 31538]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [31475 32077])
                    ("_get_static_folder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32105 32109]))                          )
                        (reparse-symbol indented_block_body) [32082 32225])
                    ("_set_static_folder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32252 32256])
                            ("value" variable nil (reparse-symbol function_parameters) [32258 32263]))                          )
                        (reparse-symbol indented_block_body) [32229 32302])
                    ("static_folder" variable nil (reparse-symbol indented_block_body) [32306 32370])
                    ("del" code nil (reparse-symbol indented_block_body) [32375 32417])
                    ("_get_static_url_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32448 32452]))                          )
                        (reparse-symbol indented_block_body) [32423 32667])
                    ("_set_static_url_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32696 32700])
                            ("value" variable nil (reparse-symbol function_parameters) [32702 32707]))                          )
                        (reparse-symbol indented_block_body) [32671 32748])
                    ("static_url_path" variable nil (reparse-symbol indented_block_body) [32752 32822])
                    ("del" code nil (reparse-symbol indented_block_body) [32827 32873])
                    ("has_static_folder" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32915 32919]))                          
                        :documentation "This is `True` if the package bound object's container has a
        folder named ``'static'``.

        .. versionadded:: 0.5
        ")
                        (reparse-symbol indented_block_body) [32879 33118])
                    ("jinja_loader" function
                       (:parent "dummy"
                        :decorators 
                          ( ("locked_cached_property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33168 33172]))                          
                        :documentation "The Jinja loader for this package bound object.

        .. versionadded:: 0.5
        ")
                        (reparse-symbol indented_block_body) [33123 33459])
                    ("get_send_file_max_age" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33490 33494])
                            ("filename" variable nil (reparse-symbol function_parameters) [33496 33504]))                          
                        :documentation "Provides default cache_timeout for the :func:`send_file` functions.

        By default, this function returns ``SEND_FILE_MAX_AGE_DEFAULT`` from
        the configuration of :data:`~flask.current_app`.

        Static file functions such as :func:`send_from_directory` use this
        function, and :func:`send_file` calls this function on
        :data:`~flask.current_app` when the given cache_timeout is `None`. If a
        cache_timeout is given in :func:`send_file`, that timeout is used;
        otherwise, this method is called.

        This allows subclasses to change the behavior when sending files based
        on the filename.  For example, to set the cache timeout for .js files
        to 60 seconds::

            class MyFlask(flask.Flask):
                def get_send_file_max_age(self, name):
                    if name.lower().endswith('.js'):
                        return 60
                    return flask.Flask.get_send_file_max_age(self, name)

        .. versionadded:: 0.9
        ")
                        (reparse-symbol indented_block_body) [33464 34601])
                    ("send_static_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34627 34631])
                            ("filename" variable nil (reparse-symbol function_parameters) [34633 34641]))                          
                        :documentation "Function used internally to send static files from the static
        folder to the browser.

        .. versionadded:: 0.5
        ")
                        (reparse-symbol indented_block_body) [34606 35224])
                    ("open_resource" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35247 35251])
                            ("resource" variable nil (reparse-symbol function_parameters) [35253 35261])
                            ("mode" variable nil (reparse-symbol function_parameters) [35263 35267]))                          
                        :documentation "Opens a resource from the application's resource folder.  To see
        how this works, consider the following folder structure::

            /myapplication.py
            /schema.sql
            /static
                /style.css
            /templates
                /layout.html
                /index.html

        If you want to open the `schema.sql` file you would do the
        following::

            with app.open_resource('schema.sql') as f:
                contents = f.read()
                do_something_with(contents)

        :param resource: the name of the resource.  To access resources within
                         subfolders use forward slashes as separator.
        :param mode: resource file opening mode, default is 'rb'.
        ")
                        (reparse-symbol indented_block_body) [35229 36226]))                  
                :type "class")
                nil [31435 36226]))          
    :file "helpers.py"
    :pointmax 36226
    :fsize 36225
    :lastmodtime '(21468 4219 686189 228000)
    :unmatched-syntax '((NAME 15469 . 15487) (IF 15550 . 15552) (ELSE 15575 . 15579) (INDENT_BLOCK 11777 . 11960) (NEWLINE 11662 . 11663) (COLON 11661 . 11662) (TRY 11506 . 11509) (AS 11653 . 11655) (FROM 915 . 919) (PERIOD 920 . 921) (FROM 821 . 825) (PERIOD 826 . 827) (FROM 784 . 788) (PERIOD 789 . 790))
    )
   (semanticdb-table "json.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.jsonimpl
    ~~~~~~~~~~~~~~

    Implementation helpers for the JSON support in Flask.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 223])
            ("io" include nil nil [224 233])
            ("uuid" include nil nil [234 245])
            ("datetime" include nil nil [246 275])
            ("current_app" include nil nil [290 317])
            ("request" include nil nil [290 317])
            ("text_type" include nil nil [332 353])
            ("PY2" include nil nil [332 353])
            ("werkzeug.http" include nil nil [355 390])
            ("jinja2" include nil nil [391 416])
            ("try" code nil nil [499 616])
            ("_slash_escape" code nil nil [735 780])
            ("__all__" variable nil nil [783 925])
            ("_wrap_reader_for_text" function (:arguments 
              ( ("fp" variable nil (reparse-symbol function_parameters) [954 956])
                ("encoding" variable nil (reparse-symbol function_parameters) [958 966]))              ) nil [928 1084])
            ("_wrap_writer_for_text" function (:arguments 
              ( ("fp" variable nil (reparse-symbol function_parameters) [1112 1114])
                ("encoding" variable nil (reparse-symbol function_parameters) [1116 1124]))              ) nil [1086 1237])
            ("JSONEncoder" type
               (:documentation "The default Flask JSON encoder.  This one extends the default simplejson
    encoder by also supporting ``datetime`` objects, ``UUID`` as well as
    ``Markup`` objects which are serialized as RFC 822 datetime strings (same
    as the HTTP date format).  In order to support more data types override the
    :meth:`default` method.
    "
                :superclasses ("_json.JSONEncoder")
                :members 
                  ( ("default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1641 1645])
                            ("o" variable nil (reparse-symbol function_parameters) [1647 1648]))                          
                        :documentation "Implement this method in a subclass such that it returns a
        serializable object for ``o``, or calls the base implementation (to
        raise a ``TypeError``).

        For example, to support arbitrary iterators, you could implement
        default like this::

            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                return JSONEncoder.default(self, o)
        ")
                        (reparse-symbol indented_block_body) [1629 2472]))                  
                :type "class")
                nil [1239 2472])
            ("JSONDecoder" type
               (:documentation "The default JSON decoder.  This one does not change the behavior from
    the default simplejson encoder.  Consult the :mod:`json` documentation
    for more information.  This decoder is not only used for the load
    functions of this module but also :attr:`~flask.Request`.
    "
                :superclasses ("_json.JSONDecoder")
                :type "class")
                nil [2474 2804])
            ("_dump_arg_defaults" function
               (:documentation "Inject default arguments for dump functions."
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [2829 2835]))                  )
                nil [2806 3255])
            ("_load_arg_defaults" function
               (:documentation "Inject default arguments for load functions."
                :arguments 
                  ( ("kwargs" variable nil (reparse-symbol function_parameters) [3280 3286]))                  )
                nil [3257 3479])
            ("dumps" function
               (:documentation "Serialize ``obj`` to a JSON formatted ``str`` by using the application's
    configured encoder (:attr:`~flask.Flask.json_encoder`) if there is an
    application on the stack.

    This function can return ``unicode`` strings or ascii-only bytestrings by
    default which coerce into unicode strings automatically.  That behavior by
    default is controlled by the ``JSON_AS_ASCII`` configuration variable
    and can be overridden by the simplejson ``ensure_ascii`` parameter.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [3491 3494])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3496 3504]))                  )
                nil [3481 4220])
            ("dump" function
               (:documentation "Like :func:`dumps` but writes into a file object."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [4231 4234])
                    ("fp" variable nil (reparse-symbol function_parameters) [4236 4238])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4240 4248]))                  )
                nil [4222 4498])
            ("loads" function
               (:documentation "Unserialize a JSON object from a string ``s`` by using the application's
    configured decoder (:attr:`~flask.Flask.json_decoder`) if there is an
    application on the stack.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4510 4511])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4513 4521]))                  )
                nil [4500 4874])
            ("load" function
               (:documentation "Like :func:`loads` but reads from a file object.
    "
                :arguments 
                  ( ("fp" variable nil (reparse-symbol function_parameters) [4885 4887])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [4889 4897]))                  )
                nil [4876 5127])
            ("htmlsafe_dumps" function
               (:documentation "Works exactly like :func:`dumps` but is safe for use in ``<script>``
    tags.  It accepts the same arguments and returns a JSON string.  Note that
    this is available in templates through the ``|tojson`` filter which will
    also mark the result as safe.  Due to how this function escapes certain
    characters this is safe even if used outside of ``<script>`` tags.

    The following characters are escaped in strings:

    -   ``<``
    -   ``>``
    -   ``&``
    -   ``'``

    This makes it safe to embed such strings in any place in HTML with the
    notable exception of double quoted attributes.  In that case single
    quote your attributes or HTML escape it in addition.

    .. versionchanged:: 0.10
       This function's return value is now always safe for HTML usage, even
       if outside of script tags or if used in XHTML.  This rule does not
       hold true when using this function in HTML attributes that are double
       quoted.  Always single quote attributes if you use the ``|tojson``
       filter.  Alternatively use ``|tojson|forceescape``.
    "
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [5148 5151])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [5153 5161]))                  )
                nil [5129 6511])
            ("htmlsafe_dump" function
               (:documentation "Like :func:`htmlsafe_dumps` but writes into a file object."
                :arguments 
                  ( ("obj" variable nil (reparse-symbol function_parameters) [6531 6534])
                    ("fp" variable nil (reparse-symbol function_parameters) [6536 6538])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [6540 6548]))                  )
                nil [6513 6673])
            ("jsonify" function
               (:documentation "Creates a :class:`~flask.Response` with the JSON representation of
    the given arguments with an `application/json` mimetype.  The arguments
    to this function are the same as to the :class:`dict` constructor.

    Example usage::

        from flask import jsonify

        @app.route('/_get_current_user')
        def get_current_user():
            return jsonify(username=g.user.username,
                           email=g.user.email,
                           id=g.user.id)

    This will send a JSON response like this to the browser::

        {
            \"username\": \"admin\",
            \"email\": \"admin@localhost\",
            \"id\": 42
        }

    For security reasons only objects are supported toplevel.  For more
    information about this, have a look at :ref:`json-security`.

    This function's response will be pretty printed if it was not requested
    with ``X-Requested-With: XMLHttpRequest`` to simplify debugging unless
    the ``JSONIFY_PRETTYPRINT_REGULAR`` config parameter is set to false.

    .. versionadded:: 0.2
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [6687 6692])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [6694 6702]))                  )
                nil [6675 8029])
            ("tojson_filter" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [8049 8052])
                ("kwargs" variable nil (reparse-symbol function_parameters) [8054 8062]))              ) nil [8031 8114]))          
    :file "json.py"
    :pointmax 8114
    :fsize 8113
    :lastmodtime '(21468 4219 654189 956000)
    :unmatched-syntax '((FROM 318 . 322) (PERIOD 323 . 324) (FROM 276 . 280) (PERIOD 281 . 282))
    )
   (semanticdb-table "logging.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.logging
    ~~~~~~~~~~~~~

    Implements the logging support for Flask.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 209])
            ("__future__" include nil nil [211 249])
            ("logging" include nil nil [251 329])
            ("create_logger" function
               (:documentation "Creates a logger for the given application.  This logger works
    similar to a regular Python logger but changes the effective logging
    level based on the application's debug flag.  Furthermore this
    function also removes all attached handlers in case there was a
    logger with the log name before.
    "
                :arguments 
                  ( ("app" variable nil (reparse-symbol function_parameters) [350 353]))                  )
                nil [332 1399]))          
    :file "logging.py"
    :pointmax 1399
    :fsize 1398
    :lastmodtime '(21468 4219 685189 251000)
    :unmatched-syntax '((NAME 975 . 988) (IF 1005 . 1007) (ELSE 1018 . 1022))
    )
   (semanticdb-table "module.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.module
    ~~~~~~~~~~~~

    Implements a class that represents module blueprints.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 219])
            ("os" include nil nil [221 230])
            ("Blueprint" include nil nil [249 265])
            ("blueprint_is_module" function
               (:documentation "Used to figure out if something is actually a module"
                :arguments 
                  ( ("bp" variable nil (reparse-symbol function_parameters) [292 294]))                  )
                nil [268 394])
            ("Module" type
               (:documentation "Deprecated module support.  Until Flask 0.6 modules were a different
    name of the concept now available as blueprints in Flask.  They are
    essentially doing the same but have some bad semantics for templates and
    static files that were fixed with blueprints.

    .. versionchanged:: 0.7
       Modules were deprecated in favor for blueprints.
    "
                :superclasses ("Blueprint")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [914 1102])
                            ("Blueprint" code nil (reparse-symbol indented_block_body) [1110 1253])
                            ("if" code nil (reparse-symbol indented_block_body) [1263 1364]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [807 811])
                            ("import_name" variable nil (reparse-symbol function_parameters) [813 824])
                            ("name" variable nil (reparse-symbol function_parameters) [826 830])
                            ("url_prefix" variable nil (reparse-symbol function_parameters) [837 847])
                            ("static_path" variable nil (reparse-symbol function_parameters) [871 882])
                            ("subdomain" variable nil (reparse-symbol function_parameters) [889 898]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [794 1364]))                  
                :type "class")
                nil [396 1364]))          
    :file "module.py"
    :pointmax 1364
    :fsize 1363
    :lastmodtime '(21468 4219 419195 298000)
    :unmatched-syntax '((FROM 232 . 236) (PERIOD 237 . 238))
    )
   (semanticdb-table "sessions.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.sessions
    ~~~~~~~~~~~~~~

    Implements cookie based sessions based on itsdangerous.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 225])
            ("uuid" include nil nil [227 238])
            ("hashlib" include nil nil [239 253])
            ("base64" include nil nil [254 293])
            ("datetime" include nil nil [294 323])
            ("werkzeug.http" include nil nil [324 371])
            ("werkzeug.datastructures" include nil nil [372 420])
            ("Markup" include nil nil [428 447])
            ("json" include nil nil [428 447])
            ("iteritems" include nil nil [462 489])
            ("text_type" include nil nil [462 489])
            ("itsdangerous" include nil nil [491 552])
            ("total_seconds" function (:arguments 
              ( ("td" variable nil (reparse-symbol function_parameters) [573 575]))              ) nil [555 625])
            ("SessionMixin" type
               (:documentation "Expands a basic dictionary with an accessors that are expected
    by Flask extensions and users for the session.
    "
                :superclasses ("object")
                :members 
                  ( ("_get_permanent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [808 812]))                          )
                        (reparse-symbol indented_block_body) [789 860])
                    ("_set_permanent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [884 888])
                            ("value" variable nil (reparse-symbol function_parameters) [890 895]))                          )
                        (reparse-symbol indented_block_body) [865 939])
                    ("permanent" variable nil (reparse-symbol indented_block_body) [1003 1055])
                    ("del" code nil (reparse-symbol indented_block_body) [1060 1094])
                    ("new" variable nil (reparse-symbol indented_block_body) [1297 1308])
                    ("modified" variable nil (reparse-symbol indented_block_body) [1604 1619]))                  
                :type "class")
                nil [627 1620])
            ("TaggedJSONSerializer" type
               (:documentation "A customized JSON serializer that supports a few extra types that
    we take for granted when serializing (tuples, markup objects, datetime).
    "
                :superclasses ("object")
                :members 
                  ( ("dumps" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1831 1835])
                            ("value" variable nil (reparse-symbol function_parameters) [1837 1842]))                          )
                        (reparse-symbol indented_block_body) [1821 3113])
                    ("loads" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3128 3132])
                            ("value" variable nil (reparse-symbol function_parameters) [3134 3139]))                          )
                        (reparse-symbol indented_block_body) [3118 3746]))                  
                :type "class")
                nil [1622 3746])
            ("session_json_serializer" variable nil nil [3748 3796])
            ("SecureCookieSession" type
               (:documentation "Baseclass for sessions based on signed cookies."
                :superclasses ("CallbackDict" "SessionMixin")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("on_update" function
                               (:parent "dummy"
                                :arguments 
                                  ( ("self" variable nil (reparse-symbol function_parameters) [3973 3977]))                                  )
                                (reparse-symbol indented_block_body) [3959 4013])
                            ("CallbackDict" code nil (reparse-symbol indented_block_body) [4021 4068])
                            ("self" variable nil (reparse-symbol indented_block_body) [4077 4098]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3930 3934])
                            ("initial" variable nil (reparse-symbol function_parameters) [3936 3943]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3917 4099]))                  
                :type "class")
                nil [3799 4099])
            ("NullSession" type
               (:documentation "Class used to generate nicer error messages if sessions are not
    available.  Will still allow read-only access to the empty session
    but fail on setting.
    "
                :superclasses ("SecureCookieSession")
                :members 
                  ( ("_fail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4331 4335])
                            ("args" variable nil (reparse-symbol function_parameters) [4337 4342])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [4344 4352]))                          )
                        (reparse-symbol indented_block_body) [4321 4574])
                    ("__setitem__" variable nil (reparse-symbol indented_block_body) [4578 4667])
                    ("del" code nil (reparse-symbol indented_block_body) [4672 4681]))                  
                :type "class")
                nil [4101 4682])
            ("SessionInterface" type
               (:documentation "The basic interface you have to implement in order to replace the
    default session interface which uses werkzeug's securecookie
    implementation.  The only methods you have to implement are
    :meth:`open_session` and :meth:`save_session`, the others have
    useful defaults which you don't need to change.

    The session object returned by the :meth:`open_session` method has to
    provide a dictionary like interface plus the properties and methods
    from the :class:`SessionMixin`.  We recommend just subclassing a dict
    and adding that mixin::

        class Session(dict, SessionMixin):
            pass

    If :meth:`open_session` returns `None` Flask will call into
    :meth:`make_null_session` to create a session that acts as replacement
    if the session support cannot work because some requirement is not
    fulfilled.  The default :class:`NullSession` class that is created
    will complain that the secret key was not set.

    To replace the session interface on an application all you have to do
    is to assign :attr:`flask.Flask.session_interface`::

        app = Flask(__name__)
        app.session_interface = MySessionInterface()

    .. versionadded:: 0.8
    "
                :superclasses ("object")
                :members 
                  ( ("null_session_class" variable nil (reparse-symbol indented_block_body) [6165 6197])
                    ("pickle_based" variable nil (reparse-symbol indented_block_body) [6432 6452])
                    ("make_null_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6480 6484])
                            ("app" variable nil (reparse-symbol function_parameters) [6486 6489]))                          
                        :documentation "Creates a null session which acts as a replacement object if the
        real session support could not be loaded due to a configuration
        error.  This mainly aids the user experience because the job of the
        null session is to still support lookup without complaining but
        modifications are answered with a helpful error message of what
        failed.

        This creates an instance of :attr:`null_session_class` by default.
        ")
                        (reparse-symbol indented_block_body) [6458 7005])
                    ("is_null_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7030 7034])
                            ("obj" variable nil (reparse-symbol function_parameters) [7036 7039]))                          
                        :documentation "Checks if a given object is a null session.  Null sessions are
        not asked to be saved.

        This checks if the object is an instance of :attr:`null_session_class`
        by default.
        ")
                        (reparse-symbol indented_block_body) [7010 7315])
                    ("get_cookie_domain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7342 7346])
                            ("app" variable nil (reparse-symbol function_parameters) [7348 7351]))                          
                        :documentation "Helpful helper method that returns the cookie domain that should
        be used for the session cookie if session cookies are used.
        ")
                        (reparse-symbol indented_block_body) [7320 8456])
                    ("get_cookie_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8481 8485])
                            ("app" variable nil (reparse-symbol function_parameters) [8487 8490]))                          
                        :documentation "Returns the path for which the cookie should be valid.  The
        default implementation uses the value from the ``SESSION_COOKIE_PATH``
        config var if it's set, and falls back to ``APPLICATION_ROOT`` or
        uses ``/`` if it's `None`.
        ")
                        (reparse-symbol indented_block_body) [8461 8871])
                    ("get_cookie_httponly" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8900 8904])
                            ("app" variable nil (reparse-symbol function_parameters) [8906 8909]))                          
                        :documentation "Returns True if the session cookie should be httponly.  This
        currently just returns the value of the ``SESSION_COOKIE_HTTPONLY``
        config var.
        ")
                        (reparse-symbol indented_block_body) [8876 9145])
                    ("get_cookie_secure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9172 9176])
                            ("app" variable nil (reparse-symbol function_parameters) [9178 9181]))                          
                        :documentation "Returns True if the cookie should be secure.  This currently
        just returns the value of the ``SESSION_COOKIE_SECURE`` setting.
        ")
                        (reparse-symbol indented_block_body) [9150 9392])
                    ("get_expiration_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9421 9425])
                            ("app" variable nil (reparse-symbol function_parameters) [9427 9430])
                            ("session" variable nil (reparse-symbol function_parameters) [9432 9439]))                          
                        :documentation "A helper method that returns an expiration date for the session
        or `None` if the session is linked to the browser session.  The
        default implementation returns now + the permanent session
        lifetime configured on the application.
        ")
                        (reparse-symbol indented_block_body) [9397 9816])
                    ("should_set_cookie" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9843 9847])
                            ("app" variable nil (reparse-symbol function_parameters) [9849 9852])
                            ("session" variable nil (reparse-symbol function_parameters) [9854 9861]))                          
                        :documentation "Indicates weather a cookie should be set now or not.  This is
        used by session backends to figure out if they should emit a
        set-cookie header or not.  The default behavior is controlled by
        the ``SESSION_REFRESH_EACH_REQUEST`` config variable.  If
        it's set to `False` then a cookie is only set if the session is
        modified, if set to `True` it's always set if the session is
        permanent.

        This check is usually skipped if sessions get deleted.

        .. versionadded:: 1.0
        ")
                        (reparse-symbol indented_block_body) [9821 10575])
                    ("open_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10597 10601])
                            ("app" variable nil (reparse-symbol function_parameters) [10603 10606])
                            ("request" variable nil (reparse-symbol function_parameters) [10608 10615]))                          
                        :documentation "This method has to be implemented and must either return `None`
        in case the loading failed because of a configuration error or an
        instance of a session object which implements a dictionary like
        interface + the methods and attributes on :class:`SessionMixin`.
        ")
                        (reparse-symbol indented_block_body) [10580 10960])
                    ("save_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10982 10986])
                            ("app" variable nil (reparse-symbol function_parameters) [10988 10991])
                            ("session" variable nil (reparse-symbol function_parameters) [10993 11000])
                            ("response" variable nil (reparse-symbol function_parameters) [11002 11010]))                          
                        :documentation "This is called for actual sessions returned by :meth:`open_session`
        at the end of the request.  This is still called during a request
        context so if you absolutely need access to the request you can do
        that.
        ")
                        (reparse-symbol indented_block_body) [10965 11303]))                  
                :type "class")
                nil [4684 11303])
            ("SecureCookieSessionInterface" type
               (:documentation "The default session interface that stores sessions in signed cookies
    through the :mod:`itsdangerous` module.
    "
                :superclasses ("SessionInterface")
                :members 
                  ( ("salt" variable nil (reparse-symbol indented_block_body) [11604 11627])
                    ("digest_method" variable nil (reparse-symbol indented_block_body) [11704 11746])
                    ("key_derivation" variable nil (reparse-symbol indented_block_body) [11842 11865])
                    ("serializer" variable nil (reparse-symbol indented_block_body) [12055 12091])
                    ("session_class" variable nil (reparse-symbol indented_block_body) [12096 12131])
                    ("get_signing_serializer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12164 12168])
                            ("app" variable nil (reparse-symbol function_parameters) [12170 12173]))                          )
                        (reparse-symbol indented_block_body) [12137 12567])
                    ("open_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12589 12593])
                            ("app" variable nil (reparse-symbol function_parameters) [12595 12598])
                            ("request" variable nil (reparse-symbol function_parameters) [12600 12607]))                          )
                        (reparse-symbol indented_block_body) [12572 13059])
                    ("save_session" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13081 13085])
                            ("app" variable nil (reparse-symbol function_parameters) [13087 13090])
                            ("session" variable nil (reparse-symbol function_parameters) [13092 13099])
                            ("response" variable nil (reparse-symbol function_parameters) [13101 13109]))                          )
                        (reparse-symbol indented_block_body) [13064 14474]))                  
                :type "class")
                nil [11305 14474])
            ("flask.debughelpers" include nil nil [14476 14529]))          
    :file "sessions.py"
    :pointmax 14530
    :fsize 14529
    :lastmodtime '(21468 4219 410195 502000)
    :unmatched-syntax '((FROM 448 . 452) (PERIOD 453 . 454) (FROM 421 . 425) (PERIOD 426 . 427))
    )
   (semanticdb-table "signals.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.signals
    ~~~~~~~~~~~~~

    Implements signals based on blinker if available, otherwise
    falls silently back to a noop

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 261])
            ("signals_available" variable nil nil [262 287])
            ("try" code nil nil [288 1323])
            ("_signals" variable nil nil [1452 1474])
            ("template_rendered" variable nil nil [1612 1668])
            ("request_started" variable nil nil [1669 1721])
            ("request_finished" variable nil nil [1722 1776])
            ("request_tearing_down" variable nil nil [1777 1839])
            ("got_request_exception" variable nil nil [1840 1904])
            ("appcontext_tearing_down" variable nil nil [1905 1973])
            ("appcontext_pushed" variable nil nil [1974 2030])
            ("appcontext_popped" variable nil nil [2031 2087])
            ("message_flashed" variable nil nil [2088 2140]))          
    :file "signals.py"
    :pointmax 2141
    :fsize 2140
    :lastmodtime '(21468 4219 675189 478000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "templating.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.templating
    ~~~~~~~~~~~~~~~~

    Implements the bridge to Jinja2.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 206])
            ("posixpath" include nil nil [207 223])
            ("jinja2" include nil nil [224 310])
            ("_request_ctx_stack" include nil nil [326 367])
            ("_app_ctx_stack" include nil nil [326 367])
            ("template_rendered" include nil nil [382 406])
            ("blueprint_is_module" include nil nil [420 446])
            ("itervalues" include nil nil [461 489])
            ("iteritems" include nil nil [461 489])
            ("_default_template_ctx_processor" function (:documentation "Default template context processor.  Injects `request`,
    `session` and `g`.
    ") nil [492 878])
            ("Environment" type
               (:documentation "Works like a regular Jinja2 environment but has some additional
    knowledge of how Flask's blueprint works so that it can prepend the
    name of the blueprint to referenced templates if necessary.
    "
                :superclasses ("BaseEnvironment")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1180 1273])
                            ("BaseEnvironment" code nil (reparse-symbol indented_block_body) [1281 1322])
                            ("self" variable nil (reparse-symbol indented_block_body) [1331 1345]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1149 1153])
                            ("app" variable nil (reparse-symbol function_parameters) [1155 1158])
                            ("options" variable nil (reparse-symbol function_parameters) [1160 1169]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1136 1346]))                  
                :type "class")
                nil [880 1346])
            ("DispatchingJinjaLoader" type
               (:documentation "A loader that looks for templates in the application and all
    the blueprint folders.
    "
                :superclasses ("BaseLoader")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1531 1545]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1511 1515])
                            ("app" variable nil (reparse-symbol function_parameters) [1517 1520]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1498 1546])
                    ("get_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1566 1570])
                            ("environment" variable nil (reparse-symbol function_parameters) [1572 1583])
                            ("template" variable nil (reparse-symbol function_parameters) [1585 1593]))                          )
                        (reparse-symbol indented_block_body) [1551 1843])
                    ("_iter_loaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1866 1870])
                            ("template" variable nil (reparse-symbol function_parameters) [1872 1880]))                          )
                        (reparse-symbol indented_block_body) [1848 2733])
                    ("list_templates" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2757 2761]))                          )
                        (reparse-symbol indented_block_body) [2738 3318]))                  
                :type "class")
                nil [1348 3318])
            ("_render" function
               (:documentation "Renders the template and fires the signal"
                :arguments 
                  ( ("template" variable nil (reparse-symbol function_parameters) [3332 3340])
                    ("context" variable nil (reparse-symbol function_parameters) [3342 3349])
                    ("app" variable nil (reparse-symbol function_parameters) [3351 3354]))                  )
                nil [3320 3525])
            ("render_template" function
               (:documentation "Renders a template from the template folder with the given
    context.

    :param template_name_or_list: the name of the template to be
                                  rendered, or an iterable with template names
                                  the first one existing will be rendered
    :param context: the variables that should be available in the
                    context of the template.
    "
                :arguments 
                  ( ("template_name_or_list" variable nil (reparse-symbol function_parameters) [3547 3568])
                    ("context" variable nil (reparse-symbol function_parameters) [3570 3579]))                  )
                nil [3527 4194])
            ("render_template_string" function
               (:documentation "Renders a template from the given template source string
    with the given context.

    :param source: the sourcecode of the template to be
                   rendered
    :param context: the variables that should be available in the
                    context of the template.
    "
                :arguments 
                  ( ("source" variable nil (reparse-symbol function_parameters) [4223 4229])
                    ("context" variable nil (reparse-symbol function_parameters) [4231 4240]))                  )
                nil [4196 4708]))          
    :file "templating.py"
    :pointmax 4708
    :fsize 4707
    :lastmodtime '(21468 4219 417195 343000)
    :unmatched-syntax '((FROM 447 . 451) (PERIOD 452 . 453) (FROM 407 . 411) (PERIOD 412 . 413) (FROM 368 . 372) (PERIOD 373 . 374) (FROM 312 . 316) (PERIOD 317 . 318))
    )
   (semanticdb-table "testing.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.testing
    ~~~~~~~~~~~~~

    Implements test support helpers.  This module is lazily imported
    and usually not used in production environments.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 285])
            ("contextlib" include nil nil [287 324])
            ("werkzeug.test" include nil nil [325 373])
            ("flask" include nil nil [374 410])
            ("try" code nil nil [412 524])
            ("make_test_environ_builder" function
               (:documentation "Creates a new test builder with some application defaults thrown in."
                :arguments 
                  ( ("app" variable nil (reparse-symbol function_parameters) [556 559])
                    ("path" variable nil (reparse-symbol function_parameters) [561 565])
                    ("base_url" variable nil (reparse-symbol function_parameters) [571 579])
                    ("args" variable nil (reparse-symbol function_parameters) [586 591])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [593 601]))                  )
                nil [526 1151])
            ("FlaskClient" type
               (:documentation "Works like a regular Werkzeug test client but has some knowledge about
    how Flask works to defer the cleanup of the request context stack to the
    end of a with body when used in a with statement.  For general information
    about how to use this class refer to :class:`werkzeug.test.Client`.

    Basic usage is outlined in the :ref:`testing` chapter.
    "
                :superclasses ("Client")
                :members 
                  ( ("preserve_context" variable nil (reparse-symbol indented_block_body) [1559 1583])
                    ("session_transaction" function
                       (:parent "dummy"
                        :decorators 
                          ( ("contextmanager" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1633 1637])
                            ("args" variable nil (reparse-symbol function_parameters) [1639 1644])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1646 1654]))                          
                        :documentation "When used in combination with a with statement this opens a
        session transaction.  This can be used to modify the session that
        the test client uses.  Once the with block is left the session is
        stored back.

            with client.session_transaction() as session:
                session['value'] = 42

        Internally this is implemented by going through a temporary test
        request context and since session handling could depend on
        request variables this function accepts the same arguments as
        :meth:`~flask.Flask.test_request_context` which are directly
        passed through.
        ")
                        (reparse-symbol indented_block_body) [1589 3881])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3895 3899])
                            ("args" variable nil (reparse-symbol function_parameters) [3901 3906])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [3908 3916]))                          )
                        (reparse-symbol indented_block_body) [3886 4476])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4495 4499]))                          )
                        (reparse-symbol indented_block_body) [4481 4658])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4676 4680])
                            ("exc_type" variable nil (reparse-symbol function_parameters) [4682 4690])
                            ("exc_value" variable nil (reparse-symbol function_parameters) [4692 4701])
                            ("tb" variable nil (reparse-symbol function_parameters) [4703 4705]))                          )
                        (reparse-symbol indented_block_body) [4663 5070]))                  
                :type "class")
                nil [1153 5070]))          
    :file "testing.py"
    :pointmax 5070
    :fsize 5069
    :lastmodtime '(21468 4219 664189 728000)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "views.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.views
    ~~~~~~~~~~~

    This module provides class-based views inspired by the ones in Django.

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 234])
            ("request" include nil nil [249 263])
            ("with_metaclass" include nil nil [278 299])
            ("http_method_funcs" variable nil nil [302 433])
            ("View" type
               (:documentation "Alternative way to use view functions.  A subclass has to implement
    :meth:`dispatch_request` which is called with the view arguments from
    the URL routing system.  If :attr:`methods` is provided the methods
    do not have to be passed to the :meth:`~flask.Flask.add_url_rule`
    method explicitly::

        class MyView(View):
            methods = ['GET']

            def dispatch_request(self, name):
                return 'Hello %s!' % name

        app.add_url_rule('/hello/<name>', view_func=MyView.as_view('myview'))

    When you want to decorate a pluggable view you will have to either do that
    when the view function is created (by wrapping the return value of
    :meth:`as_view`) or you can use the :attr:`decorators` attribute::

        class SecretView(View):
            methods = ['GET']
            decorators = [superuser_required]

            def dispatch_request(self):
                ...

    The decorators stored in the decorators list are applied one after another
    when the view function is created.  Note that you can *not* use the class
    based decorators since those would decorate the view class and not the
    generated view function!
    "
                :superclasses ("object")
                :members 
                  ( ("methods" variable nil (reparse-symbol indented_block_body) [1724 1738])
                    ("decorators" variable nil (reparse-symbol indented_block_body) [2182 2197])
                    ("dispatch_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2224 2228]))                          
                        :documentation "Subclasses have to override this method to implement the
        actual view function code.  This method is called with all
        the arguments from the URL rule.
        ")
                        (reparse-symbol indented_block_body) [2203 2455])
                    ("as_view" function
                       (:documentation "Converts the class into an actual view function that can be used
        with the routing system.  Internally this generates a function on the
        fly which will instantiate the :class:`View` on each request and call
        the :meth:`dispatch_request` method on it.

        The arguments passed to :meth:`as_view` are forwarded to the
        constructor of the class.
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2489 2492])
                            ("name" variable nil (reparse-symbol function_parameters) [2494 2498])
                            ("class_args" variable nil (reparse-symbol function_parameters) [2500 2511])
                            ("class_kwargs" variable nil (reparse-symbol function_parameters) [2513 2527]))                          
                        :decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2460 3815]))                  
                :type "class")
                nil [436 3815])
            ("MethodViewType" type
               (:superclasses ("type")
                :members 
                  ( ("__new__" function (:arguments 
                      ( ("cls" variable nil (reparse-symbol function_parameters) [3862 3865])
                        ("name" variable nil (reparse-symbol function_parameters) [3867 3871])
                        ("bases" variable nil (reparse-symbol function_parameters) [3873 3878])
                        ("d" variable nil (reparse-symbol function_parameters) [3880 3881]))                      ) (reparse-symbol indented_block_body) [3850 4468]))                  
                :type "class")
                nil [3817 4468])
            ("MethodView" type
               (:documentation "Like a regular class-based view but that dispatches requests to
    particular methods.  For instance if you implement a method called
    :meth:`get` it means you will response to ``'GET'`` requests and
    the :meth:`dispatch_request` implementation will automatically
    forward your request to that.  Also :attr:`options` is set for you
    automatically::

        class CounterAPI(MethodView):

            def get(self):
                return session.get('counter', 0)

            def post(self):
                session['counter'] = session.get('counter', 0) + 1
                return 'OK'

        app.add_url_rule('/counter', view_func=CounterAPI.as_view('counter'))
    "
                :members 
                  ( ("dispatch_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5247 5251])
                            ("args" variable nil (reparse-symbol function_parameters) [5253 5258])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [5260 5268]))                          )
                        (reparse-symbol indented_block_body) [5226 5644]))                  
                :type "class")
                nil [4470 5644]))          
    :file "views.py"
    :pointmax 5644
    :fsize 5643
    :lastmodtime '(21468 4219 675189 478000)
    :unmatched-syntax '((NAME 4487 . 4501) (PAREN_BLOCK 4501 . 4523) (FROM 264 . 268) (PERIOD 269 . 270) (FROM 235 . 239) (PERIOD 240 . 241))
    )
   (semanticdb-table "wrappers.py"
    :major-mode 'python-mode
    :tags 
        '( ("\"\"\"
    flask.wrappers
    ~~~~~~~~~~~~~~

    Implements the WSGI wrappers (request and response).

    :copyright: (c) 2014 by Armin Ronacher.
    :license: BSD, see LICENSE for more details.
\"\"\"" code nil nil [25 222])
            ("werkzeug.wrappers" include nil nil [224 302])
            ("werkzeug.exceptions" include nil nil [303 345])
            ("attach_enctype_error_multidict" include nil nil [366 403])
            ("json" include nil nil [411 422])
            ("_request_ctx_stack" include nil nil [437 462])
            ("_missing" variable nil nil [465 484])
            ("_get_data" function (:arguments 
              ( ("req" variable nil (reparse-symbol function_parameters) [501 504])
                ("cache" variable nil (reparse-symbol function_parameters) [506 511]))              ) nil [487 640])
            ("Request" type
               (:documentation "The request object used by default in Flask.  Remembers the
    matched endpoint and view arguments.

    It is what ends up as :class:`~flask.request`.  If you want to replace
    the request object used you can subclass this and set
    :attr:`~flask.Flask.request_class` to your subclass.

    The request object is a :class:`~werkzeug.wrappers.Request` subclass and
    provides all of the attributes Werkzeug defines plus a few Flask
    specific ones.
    "
                :superclasses ("RequestBase")
                :members 
                  ( ("url_rule" variable nil (reparse-symbol indented_block_body) [1386 1401])
                    ("view_args" variable nil (reparse-symbol indented_block_body) [1534 1550])
                    ("routing_exception" variable nil (reparse-symbol indented_block_body) [1788 1812])
                    ("_is_old_module" variable nil (reparse-symbol indented_block_body) [1915 1937])
                    ("max_content_length" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1980 1984]))                          
                        :documentation "Read-only view of the `MAX_CONTENT_LENGTH` config key.")
                        (reparse-symbol indented_block_body) [1943 2177])
                    ("endpoint" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2209 2213]))                          
                        :documentation "The endpoint that matched the request.  This in combination with
        :attr:`view_args` can be used to reconstruct the same or a
        modified URL.  If an exception happened when matching, this will
        be `None`.
        ")
                        (reparse-symbol indented_block_body) [2182 2543])
                    ("module" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2573 2577]))                          
                        :documentation "The name of the current module if the request was dispatched
        to an actual module.  This is deprecated functionality, use blueprints
        instead.
        ")
                        (reparse-symbol indented_block_body) [2548 3060])
                    ("blueprint" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3093 3097]))                          
                        :documentation "The name of the current blueprint")
                        (reparse-symbol indented_block_body) [3065 3268])
                    ("json" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3296 3300]))                          
                        :documentation "If the mimetype is `application/json` this will contain the
        parsed JSON data.  Otherwise this will be `None`.

        The :meth:`get_json` method should be used instead.
        ")
                        (reparse-symbol indented_block_body) [3273 3570])
                    ("is_json" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3601 3605]))                          
                        :documentation "Indicates if this request is JSON or not.  By default a request
        is considered to include JSON data if the mimetype is
        ``application/json`` or ``application/*+json``.

        .. versionadded:: 0.11
        ")
                        (reparse-symbol indented_block_body) [3575 4045])
                    ("get_json" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4063 4067])
                            ("force" variable nil (reparse-symbol function_parameters) [4069 4074])
                            ("silent" variable nil (reparse-symbol function_parameters) [4082 4088])
                            ("cache" variable nil (reparse-symbol function_parameters) [4096 4101]))                          
                        :documentation "Parses the incoming JSON request data and returns it.  If
        parsing fails the :meth:`on_json_loading_failed` method on the
        request object will be invoked.  By default this function will
        only load the json data if the mimetype is ``application/json``
        but this can be overridden by the `force` parameter.

        :param force: if set to `True` the mimetype is ignored.
        :param silent: if set to `True` this method will fail silently
                       and return `None`.
        :param cache: if set to `True` the parsed JSON data is remembered
                      on the request.
        ")
                        (reparse-symbol indented_block_body) [4050 5673])
                    ("on_json_loading_failed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5705 5709])
                            ("e" variable nil (reparse-symbol function_parameters) [5711 5712]))                          
                        :documentation "Called if decoding of the JSON data failed.  The return value of
        this method is used by :meth:`get_json` when an error occurred.  The
        default implementation just raises a :class:`BadRequest` exception.

        .. versionchanged:: 0.10
           Removed buggy previous behavior of generating a random JSON
           response.  If you want that behavior back you can trivially
           add it by subclassing.

        .. versionadded:: 0.8
        ")
                        (reparse-symbol indented_block_body) [5678 6224])
                    ("_load_form_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6249 6253]))                          )
                        (reparse-symbol indented_block_body) [6229 6646]))                  
                :type "class")
                nil [642 6646])
            ("Response" type
               (:documentation "The response object that is used by default in Flask.  Works like the
    response object from Werkzeug but is set to have an HTML mimetype by
    default.  Quite often you don't have to create this object yourself because
    :meth:`~flask.Flask.make_response` will take care of that for you.

    If you want to replace the response object used you can subclass this and
    set :attr:`~flask.Flask.response_class` to your subclass.
    "
                :superclasses ("ResponseBase")
                :members 
                  ( ("default_mimetype" variable nil (reparse-symbol indented_block_body) [7132 7162]))                  
                :type "class")
                nil [6648 7163]))          
    :file "wrappers.py"
    :pointmax 7163
    :fsize 7162
    :lastmodtime '(21468 4219 675189 478000)
    :unmatched-syntax 'nil
    )
   )
  :file "!home!chz!flask!flask!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
