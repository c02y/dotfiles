;; Object 4.8.2/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "4.8.2/"
  :tables (list 
   (semanticdb-table "cassert"
    :major-mode 'c++-mode
    :tags 
        '( ("assert.h" include (:system-flag t) nil [1601 1620]))          
    :file "cassert"
    :pointmax 1621
    :fsize 1620
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 1586 . 1599) (symbol 1582 . 1585) (symbol 1575 . 1581) (punctuation 1574 . 1575))
    )
   (semanticdb-table "cstddef"
    :major-mode 'c++-mode
    :tags 
        '( ("bits/c++config.h" include (:system-flag t) nil [1556 1583])
            ("stddef.h" include (:system-flag t) nil [1584 1603]))          
    :file "cstddef"
    :pointmax 1604
    :fsize 1603
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 1541 . 1554) (symbol 1537 . 1540) (symbol 1530 . 1536) (punctuation 1529 . 1530))
    )
   (semanticdb-table "algorithm"
    :major-mode 'c++-mode
    :tags 
        '( ("_GLIBCXX_ALGORITHM" variable (:constant-flag t) nil [2285 2303])
            ("utility" include (:system-flag t) nil [2334 2352])
            ("bits/stl_algobase.h" include (:system-flag t) nil [2364 2394])
            ("bits/stl_algo.h" include (:system-flag t) nil [2395 2421]))          
    :file "algorithm"
    :pointmax 2519
    :fsize 2518
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 2319 . 2332) (symbol 2315 . 2318) (symbol 2308 . 2314) (punctuation 2307 . 2308))
    :lexical-table 
        '(("_GLIBCXX_ALGORITHM" . ((number "1" 2304 . 2305)))
          )

    )
   (semanticdb-table "utility"
    :file "utility"
    :fsize 5348
    :lastmodtime '(21162 3473 0 0)
    )
   (semanticdb-table "limits"
    :major-mode 'c++-mode
    :tags 
        '( ("_GLIBCXX_NUMERIC_LIMITS" variable (:constant-flag t) nil [1367 1390])
            ("bits/c++config.h" include (:system-flag t) nil [1421 1448])
            ("__glibcxx_integral_traps" variable (:constant-flag t) nil [2842 2866])
            ("__glibcxx_float_has_denorm_loss" variable (:constant-flag t) nil [3022 3053])
            ("__glibcxx_float_traps" variable (:constant-flag t) nil [3107 3128])
            ("__glibcxx_float_tinyness_before" variable (:constant-flag t) nil [3192 3223])
            ("__glibcxx_double_has_denorm_loss" variable (:constant-flag t) nil [3379 3411])
            ("__glibcxx_double_traps" variable (:constant-flag t) nil [3466 3488])
            ("__glibcxx_double_tinyness_before" variable (:constant-flag t) nil [3553 3585])
            ("__glibcxx_long_double_has_denorm_loss" variable (:constant-flag t) nil [3751 3788])
            ("__glibcxx_long_double_traps" variable (:constant-flag t) nil [3848 3875])
            ("__glibcxx_long_double_tinyness_before" variable (:constant-flag t) nil [3945 3982])
            ("__glibcxx_signed" variable (:constant-flag t) nil [4068 4084])
            ("__glibcxx_min" variable (:constant-flag t) nil [4111 4124])
            ("__glibcxx_max" variable (:constant-flag t) nil [4196 4209])
            ("__glibcxx_digits" variable (:constant-flag t) nil [4320 4336])
            ("__glibcxx_digits10" variable (:constant-flag t) nil [4475 4493])
            ("__glibcxx_max_digits10" variable (:constant-flag t) nil [4547 4569])
            ("std" type
               (:members 
                  ( ("float_round_style" type
                       (:members 
                          ( ("round_indeterminate" variable
                               (:constant-flag t
                                :default-value (4879 4881)
                                :type "int")
                                (reparse-symbol enumsubparts) [4851 4881])
                            ("round_toward_zero" variable
                               (:constant-flag t
                                :default-value (4936 4937)
                                :type "int")
                                (reparse-symbol enumsubparts) [4908 4937])
                            ("round_to_nearest" variable
                               (:constant-flag t
                                :default-value (4988 4989)
                                :type "int")
                                (reparse-symbol enumsubparts) [4960 4989])
                            ("round_toward_infinity" variable
                               (:constant-flag t
                                :default-value (5067 5068)
                                :type "int")
                                (reparse-symbol enumsubparts) [5039 5068])
                            ("round_toward_neg_infinity" variable
                               (:constant-flag t
                                :default-value (5123 5124)
                                :type "int")
                                (reparse-symbol enumsubparts) [5095 5124]))                          
                        :type "enum")
                        (reparse-symbol namespacesubparts) [4820 5160])
                    ("float_denorm_style" type
                       (:members 
                          ( ("denorm_indeterminate" variable
                               (:constant-flag t
                                :default-value (5534 5536)
                                :type "int")
                                (reparse-symbol enumsubparts) [5511 5536])
                            ("denorm_absent" variable
                               (:constant-flag t
                                :default-value (5618 5619)
                                :type "int")
                                (reparse-symbol enumsubparts) [5595 5619])
                            ("denorm_present" variable
                               (:constant-flag t
                                :default-value (5693 5694)
                                :type "int")
                                (reparse-symbol enumsubparts) [5670 5694]))                          
                        :type "enum")
                        (reparse-symbol namespacesubparts) [5400 5699])
                    ("__numeric_limits_base" type
                       (:members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [6227 6255])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [6503 6518])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [6634 6651])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [6814 6835])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [6918 6941])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [7018 7042])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [7289 7311])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [7493 7507])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [7695 7716])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [7882 7905])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [8104 8125])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [8301 8324])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [8433 8459])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [8588 8615])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [8732 8763])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [8861 8907])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [9053 9082])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [9263 9286])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [9489 9513])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [9975 9998])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [10093 10112])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [10221 10250])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [10439 10500]))                          
                        :type "struct")
                        (reparse-symbol namespacesubparts) [6042 10505])
                    ("numeric_limits" type
                       (:template 
                          ( ("_Tp" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("__numeric_limits_base" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          )
                        (reparse-symbol namespacesubparts) [10945 12743])
                    ("numeric_limits" type
                       (:template 
                          ( ("_Tp" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("numeric_limits" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :template-specifier 
                          ( ("_Tp" type (:constant-flag t) nil nil))                          )
                        (reparse-symbol namespacesubparts) [12774 12871])
                    ("numeric_limits" type
                       (:template 
                          ( ("_Tp" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("numeric_limits" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :template-specifier 
                          ( ("_Tp" type (:typemodifiers ("volatile")) nil nil))                          )
                        (reparse-symbol namespacesubparts) [12875 12975])
                    ("numeric_limits" type
                       (:template 
                          ( ("_Tp" type (:type "class") nil nil))                          
                        :type "struct"
                        :superclasses 
                          ( ("numeric_limits" type
                               (:protection "public"
                                :type "class")
                                nil nil))                          
                        :template-specifier 
                          ( ("_Tp" type
                               (:typemodifiers ("volatile")
                                :constant-flag t)
                                nil nil))                          )
                        (reparse-symbol namespacesubparts) [12979 13085])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [13346 13373])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [13696 13711])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [13748 13765])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [13816 13837])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [13881 13904])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [13941 13964])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [14001 14022])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [14059 14073])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [14305 14326])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [14363 14386])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [14423 14444])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [14481 14504])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [14542 14568])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [14605 14632])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [14669 14700])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [14737 14791])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [14828 14857])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [15287 15310])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [15347 15370])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [15407 15430])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [15631 15669])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [15706 15735])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15772 15830]))                          
                        :template-specifier 
                          ( ("bool" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [13261 15837])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [15969 15996])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [16350 16387])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [16424 16465])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [16516 16537])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [16581 16622])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [16659 16682])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [16719 16740])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [16777 16791])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [17015 17036])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [17073 17096])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [17133 17154])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [17191 17214])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [17252 17278])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [17315 17342])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [17379 17410])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17447 17501])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [17538 17567])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [18015 18038])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [18075 18098])
                            ("is_signed" variable (:type "int") (reparse-symbol classsubparts) [18153 18163])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [18201 18239])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [18276 18305])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18342 18400]))                          
                        :template-specifier 
                          ( ("char" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [15884 18407])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [18553 18580])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [18948 18992])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [19029 19085])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [19136 19157])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [19201 19223])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [19260 19283])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [19320 19341])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [19378 19392])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [19630 19651])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [19688 19711])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [19748 19769])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [19806 19829])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [19867 19893])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [19930 19957])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [19994 20025])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20062 20116])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [20153 20182])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [20740 20763])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [20800 20823])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [20860 20883])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [20921 20959])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [20996 21025])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21062 21120]))                          
                        :template-specifier 
                          ( ("signed char" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [18461 21127])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [21277 21304])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [21670 21724])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [21761 21819])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [21870 21891])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [21935 21958])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [21995 22018])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [22055 22076])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [22113 22127])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [22369 22390])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [22427 22450])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [22487 22508])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [22545 22568])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [22606 22632])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [22669 22696])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [22733 22764])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22801 22855])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [22892 22921])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [23507 23530])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [23567 23590])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [23627 23649])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [23687 23725])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [23762 23791])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23828 23886]))                          
                        :template-specifier 
                          ( ("unsigned char" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [21183 23893])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [24031 24058])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [24428 24468])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [24505 24557])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [24608 24629])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [24673 24717])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [24754 24777])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [24814 24835])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [24872 24886])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [25116 25137])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [25174 25197])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [25234 25255])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [25292 25315])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [25353 25379])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [25416 25443])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [25480 25511])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25548 25602])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [25639 25668])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [26126 26149])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [26186 26209])
                            ("is_signed" variable (:type "int") (reparse-symbol classsubparts) [26264 26274])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [26312 26350])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [26387 26416])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26453 26511]))                          
                        :template-specifier 
                          ( ("wchar_t" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [23943 26518])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [26672 26699])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [26984 27025])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [27049 27094])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [27118 27139])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [27163 27208])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [27232 27255])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [27279 27300])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [27324 27338])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [27513 27534])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [27558 27581])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [27605 27626])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [27650 27673])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [27698 27724])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [27748 27775])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [27799 27830])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27854 27900])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [27924 27953])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [28318 28341])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [28365 28388])
                            ("is_signed" variable (:type "int") (reparse-symbol classsubparts) [28430 28440])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [28465 28503])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [28527 28556])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [28580 28630]))                          
                        :template-specifier 
                          ( ("char16_t" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [26596 28637])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [28764 28791])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [29076 29117])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [29141 29186])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [29210 29231])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [29255 29300])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [29324 29347])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [29371 29392])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [29416 29430])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [29605 29626])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [29650 29673])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [29697 29718])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [29742 29765])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [29790 29816])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [29840 29867])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [29891 29922])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29946 29992])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [30016 30045])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [30410 30433])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [30457 30480])
                            ("is_signed" variable (:type "int") (reparse-symbol classsubparts) [30522 30532])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [30557 30595])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [30619 30648])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30672 30722]))                          
                        :template-specifier 
                          ( ("char32_t" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [28688 30729])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [30870 30897])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [31245 31283])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [31320 31362])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [31413 31434])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [31478 31500])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [31537 31560])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [31597 31618])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [31655 31669])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [31895 31916])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [31953 31976])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [32013 32034])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [32071 32094])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [32132 32158])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [32195 32222])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [32259 32290])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [32327 32381])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [32418 32447])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [32889 32912])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [32949 32972])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [33009 33032])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [33070 33108])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [33145 33174])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [33211 33269]))                          
                        :template-specifier 
                          ( ("short" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [30784 33276])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [33428 33455])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [33823 33878])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [33915 33974])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [34025 34046])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [34090 34113])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [34150 34173])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [34210 34231])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [34268 34282])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [34526 34547])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [34584 34607])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [34644 34665])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [34702 34725])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [34763 34789])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [34826 34853])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [34890 34921])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [34958 35012])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [35049 35078])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [35672 35695])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [35732 35755])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [35792 35814])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [35852 35890])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [35927 35956])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [35993 36051]))                          
                        :template-specifier 
                          ( ("unsigned short" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [33333 36058])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [36188 36215])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [36555 36591])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [36628 36668])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [36719 36740])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [36784 36806])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [36843 36866])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [36903 36924])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [36961 36975])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [37197 37218])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [37255 37278])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [37315 37336])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [37373 37396])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [37434 37460])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [37497 37524])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [37561 37592])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [37629 37683])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [37720 37749])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [38231 38254])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [38291 38314])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [38351 38374])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [38412 38450])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [38487 38516])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [38553 38611]))                          
                        :template-specifier 
                          ( ("int" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [36104 38618])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [38766 38793])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [39154 39207])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [39244 39301])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [39352 39373])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [39417 39440])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [39477 39500])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [39537 39558])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [39595 39609])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [39849 39870])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [39907 39930])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [39967 39988])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [40025 40048])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [40086 40112])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [40149 40176])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [40213 40244])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [40281 40335])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [40372 40401])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [40973 40996])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [41033 41056])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [41093 41115])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [41153 41191])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [41228 41257])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [41294 41352]))                          
                        :template-specifier 
                          ( ("unsigned int" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [38673 41359])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [41491 41518])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [41862 41899])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [41936 41977])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [42028 42049])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [42093 42115])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [42152 42175])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [42212 42233])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [42270 42284])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [42508 42529])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [42566 42589])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [42626 42647])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [42684 42707])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [42745 42771])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [42808 42835])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [42872 42903])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [42940 42994])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [43031 43060])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [43550 43573])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [43610 43633])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [43670 43693])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [43731 43769])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [43806 43835])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [43872 43930]))                          
                        :template-specifier 
                          ( ("long" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [41406 43937])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [44087 44114])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [44480 44534])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [44571 44629])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [44680 44701])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [44745 44768])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [44805 44828])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [44865 44886])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [44923 44937])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [45179 45200])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [45237 45260])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [45297 45318])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [45355 45378])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [45416 45442])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [45479 45506])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [45543 45574])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [45611 45665])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [45702 45731])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [46317 46340])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [46377 46400])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [46437 46459])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [46497 46535])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [46572 46601])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [46638 46696]))                          
                        :template-specifier 
                          ( ("unsigned long" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [43993 46703])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [46845 46872])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [47242 47292])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [47329 47383])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [47434 47455])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [47499 47521])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [47558 47581])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [47618 47639])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [47676 47690])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [47924 47945])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [47982 48005])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [48042 48063])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [48100 48123])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [48161 48187])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [48224 48251])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [48288 48319])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [48356 48410])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [48447 48476])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [49012 49035])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [49072 49095])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [49132 49155])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [49193 49231])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [49268 49297])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [49334 49392]))                          
                        :template-specifier 
                          ( ("long long" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [46755 49399])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [49559 49586])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [49973 50032])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [50069 50132])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [50183 50204])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [50248 50271])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [50308 50331])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [50368 50389])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [50426 50440])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [50692 50713])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [50750 50773])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [50810 50831])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [50868 50891])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [50929 50955])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [50992 51019])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [51056 51087])
                            ("has_denorm" variable (:type ("float_denorm_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [51124 51178])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [51215 51244])
                            ("is_iec559" variable (:type "bool") (reparse-symbol classsubparts) [51870 51893])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [51930 51953])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [51990 52012])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [52050 52088])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [52125 52154])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [52191 52249]))                          
                        :template-specifier 
                          ( ("unsigned long long" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [49460 52256])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [58003 58030])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [58378 58408])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [58445 58472])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [58523 58586])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [58630 58652])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [58689 58713])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [58750 58772])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [58809 58835])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [59078 59113])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [59150 59190])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [59227 59262])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [59299 59339])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [59377 59418])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [59455 59498])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [59535 59574])
                            ("denorm_absent" variable (:type "int") (reparse-symbol classsubparts) [59688 59702])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [59739 59802])
                            ("denorm_present" variable (:type "int") (reparse-symbol classsubparts) [60357 60372])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [60409 60432])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [60469 60492])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [60530 60565])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [60602 60665])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [60702 60759]))                          
                        :template-specifier 
                          ( ("float" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [57917 60766])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [61010 61037])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [61388 61418])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [61455 61482])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [61533 61596])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [61640 61662])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [61699 61723])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [61760 61782])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [61819 61845])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [62089 62124])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [62161 62201])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [62238 62273])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [62310 62350])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [62388 62429])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [62466 62509])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [62546 62585])
                            ("denorm_absent" variable (:type "int") (reparse-symbol classsubparts) [62699 62713])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [62750 62815])
                            ("denorm_present" variable (:type "int") (reparse-symbol classsubparts) [63371 63386])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [63423 63446])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [63483 63506])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [63544 63580])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [63617 63681])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [63718 63775]))                          
                        :template-specifier 
                          ( ("double" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [60923 63782])
                    ("numeric_limits" type
                       (:type "struct"
                        :members 
                          ( ("is_specialized" variable (:type "bool") (reparse-symbol classsubparts) [64039 64066])
                            ("digits" variable (:type "int") (reparse-symbol classsubparts) [64435 64466])
                            ("digits10" variable (:type "int") (reparse-symbol classsubparts) [64503 64531])
                            ("max_digits10" variable (:type "int") (reparse-symbol classsubparts) [64595 64659])
                            ("is_signed" variable (:type "bool") (reparse-symbol classsubparts) [64703 64725])
                            ("is_integer" variable (:type "bool") (reparse-symbol classsubparts) [64762 64786])
                            ("is_exact" variable (:type "bool") (reparse-symbol classsubparts) [64823 64845])
                            ("radix" variable (:type "int") (reparse-symbol classsubparts) [64882 64908])
                            ("min_exponent" variable (:type "int") (reparse-symbol classsubparts) [65164 65200])
                            ("min_exponent10" variable (:type "int") (reparse-symbol classsubparts) [65237 65278])
                            ("max_exponent" variable (:type "int") (reparse-symbol classsubparts) [65315 65351])
                            ("max_exponent10" variable (:type "int") (reparse-symbol classsubparts) [65388 65429])
                            ("has_infinity" variable (:type "bool") (reparse-symbol classsubparts) [65467 65509])
                            ("has_quiet_NaN" variable (:type "bool") (reparse-symbol classsubparts) [65546 65590])
                            ("has_signaling_NaN" variable (:type "bool") (reparse-symbol classsubparts) [65627 65666])
                            ("denorm_absent" variable (:type "int") (reparse-symbol classsubparts) [65781 65795])
                            ("has_denorm_loss" variable (:type "bool") (reparse-symbol classsubparts) [65832 65894])
                            ("denorm_present" variable (:type "int") (reparse-symbol classsubparts) [66474 66489])
                            ("is_bounded" variable (:type "bool") (reparse-symbol classsubparts) [66526 66549])
                            ("is_modulo" variable (:type "bool") (reparse-symbol classsubparts) [66586 66609])
                            ("traps" variable (:type "bool") (reparse-symbol classsubparts) [66647 66688])
                            ("tinyness_before" variable (:type "bool") (reparse-symbol classsubparts) [66725 66793])
                            ("round_style" variable (:type ("float_round_style" type (:type "class") nil nil)) (reparse-symbol classsubparts) [66830 66892]))                          
                        :template-specifier 
                          ( ("long double" type nil nil nil))                          )
                        (reparse-symbol namespacesubparts) [63947 66899]))                  
                :type "namespace")
                nil [4602 67059]))          
    :file "limits"
    :pointmax 67255
    :fsize 67254
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 67049 . 67057) (symbol "constexpr" 66807 . 66829) (STATIC 66800 . 66806) (symbol "constexpr" 66702 . 66724) (STATIC 66695 . 66701) (symbol "constexpr" 66624 . 66646) (STATIC 66617 . 66623) (symbol "constexpr" 66563 . 66585) (STATIC 66556 . 66562) (symbol "constexpr" 66503 . 66525) (STATIC 66496 . 66502) (punctuation 66472 . 66473) (punctuation 66471 . 66472) (symbol 66460 . 66470) (punctuation 66458 . 66459) (punctuation 66457 . 66458) (symbol 66443 . 66456) (punctuation 66441 . 66442) (punctuation 66440 . 66441) (symbol 66427 . 66439) (punctuation 66425 . 66426) (symbol 66414 . 66423) (BOOL 66409 . 66413) (symbol "constexpr" 66386 . 66408) (STATIC 66379 . 66385) (semantic-list 66340 . 66371) (symbol "noexcept" 66318 . 66339) (semantic-list 66315 . 66317) (symbol 66305 . 66315) (DOUBLE 66291 . 66297) (LONG 66286 . 66290) (symbol "constexpr" 66267 . 66285) (STATIC 66260 . 66266) (semantic-list 66221 . 66252) (symbol "noexcept" 66199 . 66220) (semantic-list 66196 . 66198) (symbol 66183 . 66196) (DOUBLE 66169 . 66175) (LONG 66164 . 66168) (symbol "constexpr" 66145 . 66163) (STATIC 66138 . 66144) (semantic-list 66100 . 66130) (symbol "noexcept" 66078 . 66099) (semantic-list 66075 . 66077) (symbol 66066 . 66075) (DOUBLE 66052 . 66058) (LONG 66047 . 66051) (symbol "constexpr" 66028 . 66046) (STATIC 66021 . 66027) (semantic-list 65980 . 66013) (symbol "noexcept" 65958 . 65979) (semantic-list 65955 . 65957) (symbol 65947 . 65955) (DOUBLE 65933 . 65939) (LONG 65928 . 65932) (symbol "constexpr" 65909 . 65927) (STATIC 65902 . 65908) (symbol "constexpr" 65809 . 65831) (STATIC 65802 . 65808) (punctuation 65779 . 65780) (symbol 65764 . 65778) (punctuation 65762 . 65763) (semantic-list 65740 . 65761) (BOOL 65736 . 65740) (punctuation 65734 . 65735) (symbol 65722 . 65732) (symbol 65703 . 65721) (symbol "constexpr" 65680 . 65702) (STATIC 65673 . 65679) (symbol "constexpr" 65604 . 65626) (STATIC 65597 . 65603) (symbol "constexpr" 65523 . 65545) (STATIC 65516 . 65522) (symbol "constexpr" 65444 . 65466) (STATIC 65437 . 65443) (symbol "constexpr" 65365 . 65387) (STATIC 65358 . 65364) (symbol "constexpr" 65292 . 65314) (STATIC 65285 . 65291) (symbol "constexpr" 65214 . 65236) (STATIC 65207 . 65213) (symbol "constexpr" 65141 . 65163) (STATIC 65134 . 65140) (semantic-list 65110 . 65126) (symbol "noexcept" 65088 . 65109) (semantic-list 65085 . 65087) (symbol 65074 . 65085) (DOUBLE 65060 . 65066) (LONG 65055 . 65059) (symbol "constexpr" 65036 . 65054) (STATIC 65029 . 65035) (semantic-list 64993 . 65021) (symbol "noexcept" 64971 . 64992) (semantic-list 64968 . 64970) (symbol 64961 . 64968) (DOUBLE 64947 . 64953) (LONG 64942 . 64946) (symbol "constexpr" 64923 . 64941) (STATIC 64916 . 64922) (symbol "constexpr" 64859 . 64881) (STATIC 64852 . 64858) (symbol "constexpr" 64800 . 64822) (STATIC 64793 . 64799) (symbol "constexpr" 64739 . 64761) (STATIC 64732 . 64738) (symbol "constexpr" 64680 . 64702) (STATIC 64673 . 64679) (symbol "constexpr" 64572 . 64594) (STATIC 64565 . 64571) (symbol "constexpr" 64480 . 64502) (STATIC 64473 . 64479) (symbol "constexpr" 64412 . 64434) (STATIC 64405 . 64411) (semantic-list 64365 . 64390) (symbol 64356 . 64364) (semantic-list 64353 . 64355) (symbol 64347 . 64353) (DOUBLE 64333 . 64339) (LONG 64328 . 64332) (symbol 64318 . 64327) (STATIC 64311 . 64317) (semantic-list 64252 . 64276) (symbol "noexcept" 64230 . 64251) (semantic-list 64227 . 64229) (symbol 64224 . 64227) (DOUBLE 64210 . 64216) (LONG 64205 . 64209) (symbol "constexpr" 64186 . 64204) (STATIC 64179 . 64185) (semantic-list 64147 . 64171) (symbol "noexcept" 64125 . 64146) (semantic-list 64122 . 64124) (symbol 64119 . 64122) (DOUBLE 64105 . 64111) (LONG 64100 . 64104) (symbol "constexpr" 64081 . 64099) (STATIC 64074 . 64080) (symbol "constexpr" 64016 . 64038) (STATIC 64009 . 64015) (symbol "constexpr" 63695 . 63717) (STATIC 63688 . 63694) (symbol "constexpr" 63594 . 63616) (STATIC 63587 . 63593) (symbol "constexpr" 63521 . 63543) (STATIC 63514 . 63520) (symbol "constexpr" 63460 . 63482) (STATIC 63453 . 63459) (symbol "constexpr" 63400 . 63422) (STATIC 63393 . 63399) (punctuation 63369 . 63370) (punctuation 63368 . 63369) (symbol 63357 . 63367) (punctuation 63355 . 63356) (punctuation 63354 . 63355) (symbol 63340 . 63353) (punctuation 63338 . 63339) (punctuation 63337 . 63338) (symbol 63324 . 63336) (punctuation 63322 . 63323) (symbol 63311 . 63320) (BOOL 63306 . 63310) (symbol "constexpr" 63283 . 63305) (STATIC 63276 . 63282) (semantic-list 63238 . 63268) (symbol "noexcept" 63216 . 63237) (semantic-list 63213 . 63215) (symbol 63203 . 63213) (DOUBLE 63189 . 63195) (symbol "constexpr" 63170 . 63188) (STATIC 63163 . 63169) (semantic-list 63125 . 63155) (symbol "noexcept" 63103 . 63124) (semantic-list 63100 . 63102) (symbol 63087 . 63100) (DOUBLE 63073 . 63079) (symbol "constexpr" 63054 . 63072) (STATIC 63047 . 63053) (semantic-list 63010 . 63039) (symbol "noexcept" 62988 . 63009) (semantic-list 62985 . 62987) (symbol 62976 . 62985) (DOUBLE 62962 . 62968) (symbol "constexpr" 62943 . 62961) (STATIC 62936 . 62942) (semantic-list 62896 . 62928) (symbol "noexcept" 62874 . 62895) (semantic-list 62871 . 62873) (symbol 62863 . 62871) (DOUBLE 62849 . 62855) (symbol "constexpr" 62830 . 62848) (STATIC 62823 . 62829) (symbol "constexpr" 62727 . 62749) (STATIC 62720 . 62726) (punctuation 62697 . 62698) (symbol 62682 . 62696) (punctuation 62680 . 62681) (semantic-list 62659 . 62679) (BOOL 62655 . 62659) (punctuation 62653 . 62654) (symbol 62641 . 62651) (symbol 62622 . 62640) (symbol "constexpr" 62599 . 62621) (STATIC 62592 . 62598) (symbol "constexpr" 62523 . 62545) (STATIC 62516 . 62522) (symbol "constexpr" 62443 . 62465) (STATIC 62436 . 62442) (symbol "constexpr" 62365 . 62387) (STATIC 62358 . 62364) (symbol "constexpr" 62287 . 62309) (STATIC 62280 . 62286) (symbol "constexpr" 62215 . 62237) (STATIC 62208 . 62214) (symbol "constexpr" 62138 . 62160) (STATIC 62131 . 62137) (symbol "constexpr" 62066 . 62088) (STATIC 62059 . 62065) (semantic-list 62036 . 62051) (symbol "noexcept" 62014 . 62035) (semantic-list 62011 . 62013) (symbol 62000 . 62011) (DOUBLE 61986 . 61992) (symbol "constexpr" 61967 . 61985) (STATIC 61960 . 61966) (semantic-list 61925 . 61952) (symbol "noexcept" 61903 . 61924) (semantic-list 61900 . 61902) (symbol 61893 . 61900) (DOUBLE 61879 . 61885) (symbol "constexpr" 61860 . 61878) (STATIC 61853 . 61859) (symbol "constexpr" 61796 . 61818) (STATIC 61789 . 61795) (symbol "constexpr" 61737 . 61759) (STATIC 61730 . 61736) (symbol "constexpr" 61676 . 61698) (STATIC 61669 . 61675) (symbol "constexpr" 61617 . 61639) (STATIC 61610 . 61616) (symbol 61523 . 61532) (STATIC 61516 . 61522) (symbol "constexpr" 61432 . 61454) (STATIC 61425 . 61431) (symbol "constexpr" 61365 . 61387) (STATIC 61358 . 61364) (semantic-list 61319 . 61343) (symbol 61310 . 61318) (semantic-list 61307 . 61309) (symbol 61301 . 61307) (DOUBLE 61287 . 61293) (symbol 61277 . 61286) (STATIC 61270 . 61276) (semantic-list 61212 . 61235) (symbol "noexcept" 61190 . 61211) (semantic-list 61187 . 61189) (symbol 61184 . 61187) (DOUBLE 61170 . 61176) (symbol "constexpr" 61151 . 61169) (STATIC 61144 . 61150) (semantic-list 61113 . 61136) (symbol "noexcept" 61091 . 61112) (semantic-list 61088 . 61090) (symbol 61085 . 61088) (DOUBLE 61071 . 61077) (symbol "constexpr" 61052 . 61070) (STATIC 61045 . 61051) (symbol "constexpr" 60987 . 61009) (STATIC 60980 . 60986) (symbol "constexpr" 60679 . 60701) (STATIC 60672 . 60678) (symbol "constexpr" 60579 . 60601) (STATIC 60572 . 60578) (symbol "constexpr" 60507 . 60529) (STATIC 60500 . 60506) (symbol "constexpr" 60446 . 60468) (STATIC 60439 . 60445) (symbol "constexpr" 60386 . 60408) (STATIC 60379 . 60385) (punctuation 60355 . 60356) (punctuation 60354 . 60355) (symbol 60343 . 60353) (punctuation 60341 . 60342) (punctuation 60340 . 60341) (symbol 60326 . 60339) (punctuation 60324 . 60325) (punctuation 60323 . 60324) (symbol 60310 . 60322) (punctuation 60308 . 60309) (symbol 60297 . 60306) (BOOL 60292 . 60296) (symbol "constexpr" 60269 . 60291) (STATIC 60262 . 60268) (semantic-list 60224 . 60254) (symbol "noexcept" 60202 . 60223) (semantic-list 60199 . 60201) (symbol 60189 . 60199) (FLOAT 60176 . 60181) (symbol "constexpr" 60157 . 60175) (STATIC 60150 . 60156) (semantic-list 60111 . 60142) (symbol "noexcept" 60089 . 60110) (semantic-list 60086 . 60088) (symbol 60073 . 60086) (FLOAT 60060 . 60065) (symbol "constexpr" 60041 . 60059) (STATIC 60034 . 60040) (semantic-list 59996 . 60026) (symbol "noexcept" 59974 . 59995) (semantic-list 59971 . 59973) (symbol 59962 . 59971) (FLOAT 59949 . 59954) (symbol "constexpr" 59930 . 59948) (STATIC 59923 . 59929) (semantic-list 59882 . 59915) (symbol "noexcept" 59860 . 59881) (semantic-list 59857 . 59859) (symbol 59849 . 59857) (FLOAT 59836 . 59841) (symbol "constexpr" 59817 . 59835) (STATIC 59810 . 59816) (symbol "constexpr" 59716 . 59738) (STATIC 59709 . 59715) (punctuation 59686 . 59687) (symbol 59671 . 59685) (punctuation 59669 . 59670) (semantic-list 59648 . 59668) (BOOL 59644 . 59648) (punctuation 59642 . 59643) (symbol 59630 . 59640) (symbol 59611 . 59629) (symbol "constexpr" 59588 . 59610) (STATIC 59581 . 59587) (symbol "constexpr" 59512 . 59534) (STATIC 59505 . 59511) (symbol "constexpr" 59432 . 59454) (STATIC 59425 . 59431) (symbol "constexpr" 59354 . 59376) (STATIC 59347 . 59353) (symbol "constexpr" 59276 . 59298) (STATIC 59269 . 59275) (symbol "constexpr" 59204 . 59226) (STATIC 59197 . 59203) (symbol "constexpr" 59127 . 59149) (STATIC 59120 . 59126) (symbol "constexpr" 59055 . 59077) (STATIC 59048 . 59054) (semantic-list 59024 . 59040) (symbol "noexcept" 59002 . 59023) (semantic-list 58999 . 59001) (symbol 58988 . 58999) (FLOAT 58975 . 58980) (symbol "constexpr" 58956 . 58974) (STATIC 58949 . 58955) (semantic-list 58914 . 58941) (symbol "noexcept" 58892 . 58913) (semantic-list 58889 . 58891) (symbol 58882 . 58889) (FLOAT 58869 . 58874) (symbol "constexpr" 58850 . 58868) (STATIC 58843 . 58849) (symbol "constexpr" 58786 . 58808) (STATIC 58779 . 58785) (symbol "constexpr" 58727 . 58749) (STATIC 58720 . 58726) (symbol "constexpr" 58666 . 58688) (STATIC 58659 . 58665) (symbol "constexpr" 58607 . 58629) (STATIC 58600 . 58606) (symbol 58513 . 58522) (STATIC 58506 . 58512) (symbol "constexpr" 58422 . 58444) (STATIC 58415 . 58421) (symbol "constexpr" 58355 . 58377) (STATIC 58348 . 58354) (semantic-list 58309 . 58333) (symbol 58300 . 58308) (semantic-list 58297 . 58299) (symbol 58291 . 58297) (FLOAT 58278 . 58283) (symbol 58268 . 58277) (STATIC 58261 . 58267) (semantic-list 58203 . 58226) (symbol "noexcept" 58181 . 58202) (semantic-list 58178 . 58180) (symbol 58175 . 58178) (FLOAT 58162 . 58167) (symbol "constexpr" 58143 . 58161) (STATIC 58136 . 58142) (semantic-list 58105 . 58128) (symbol "noexcept" 58083 . 58104) (semantic-list 58080 . 58082) (symbol 58077 . 58080) (FLOAT 58064 . 58069) (symbol "constexpr" 58045 . 58063) (STATIC 58038 . 58044) (symbol "constexpr" 57980 . 58002) (STATIC 57973 . 57979) (symbol "constexpr" 52168 . 52190) (STATIC 52161 . 52167) (symbol "constexpr" 52102 . 52124) (STATIC 52095 . 52101) (symbol "constexpr" 52027 . 52049) (STATIC 52020 . 52026) (symbol "constexpr" 51967 . 51989) (STATIC 51960 . 51966) (symbol "constexpr" 51907 . 51929) (STATIC 51900 . 51906) (symbol "constexpr" 51847 . 51869) (STATIC 51840 . 51846) (semantic-list 51786 . 51832) (symbol "noexcept" 51758 . 51779) (semantic-list 51755 . 51757) (symbol 51745 . 51755) (LONG 51733 . 51737) (LONG 51728 . 51732) (UNSIGNED 51719 . 51727) (symbol "constexpr" 51700 . 51718) (STATIC 51693 . 51699) (semantic-list 51639 . 51685) (symbol "noexcept" 51611 . 51632) (semantic-list 51608 . 51610) (symbol 51595 . 51608) (LONG 51583 . 51587) (LONG 51578 . 51582) (UNSIGNED 51569 . 51577) (symbol "constexpr" 51550 . 51568) (STATIC 51543 . 51549) (semantic-list 51489 . 51535) (symbol "noexcept" 51461 . 51482) (semantic-list 51458 . 51460) (symbol 51449 . 51458) (LONG 51437 . 51441) (LONG 51432 . 51436) (UNSIGNED 51423 . 51431) (symbol "constexpr" 51404 . 51422) (STATIC 51397 . 51403) (semantic-list 51343 . 51389) (symbol "noexcept" 51315 . 51336) (semantic-list 51312 . 51314) (symbol 51304 . 51312) (LONG 51292 . 51296) (LONG 51287 . 51291) (UNSIGNED 51278 . 51286) (symbol "constexpr" 51259 . 51277) (STATIC 51252 . 51258) (symbol "constexpr" 51192 . 51214) (STATIC 51185 . 51191) (symbol "constexpr" 51101 . 51123) (STATIC 51094 . 51100) (symbol "constexpr" 51033 . 51055) (STATIC 51026 . 51032) (symbol "constexpr" 50969 . 50991) (STATIC 50962 . 50968) (symbol "constexpr" 50906 . 50928) (STATIC 50899 . 50905) (symbol "constexpr" 50845 . 50867) (STATIC 50838 . 50844) (symbol "constexpr" 50787 . 50809) (STATIC 50780 . 50786) (symbol "constexpr" 50727 . 50749) (STATIC 50720 . 50726) (symbol "constexpr" 50669 . 50691) (STATIC 50662 . 50668) (semantic-list 50641 . 50654) (symbol "noexcept" 50619 . 50640) (semantic-list 50616 . 50618) (symbol 50605 . 50616) (LONG 50593 . 50597) (LONG 50588 . 50592) (UNSIGNED 50579 . 50587) (symbol "constexpr" 50560 . 50578) (STATIC 50553 . 50559) (semantic-list 50532 . 50545) (symbol "noexcept" 50510 . 50531) (semantic-list 50507 . 50509) (symbol 50500 . 50507) (LONG 50488 . 50492) (LONG 50483 . 50487) (UNSIGNED 50474 . 50482) (symbol "constexpr" 50455 . 50473) (STATIC 50448 . 50454) (symbol "constexpr" 50403 . 50425) (STATIC 50396 . 50402) (symbol "constexpr" 50345 . 50367) (STATIC 50338 . 50344) (symbol "constexpr" 50285 . 50307) (STATIC 50278 . 50284) (symbol "constexpr" 50225 . 50247) (STATIC 50218 . 50224) (symbol 50173 . 50182) (STATIC 50166 . 50172) (symbol "constexpr" 50046 . 50068) (STATIC 50039 . 50045) (symbol "constexpr" 49950 . 49972) (STATIC 49943 . 49949) (semantic-list 49911 . 49928) (symbol 49902 . 49910) (semantic-list 49899 . 49901) (symbol 49893 . 49899) (LONG 49881 . 49885) (LONG 49876 . 49880) (UNSIGNED 49867 . 49875) (symbol 49857 . 49866) (STATIC 49850 . 49856) (semantic-list 49775 . 49815) (symbol "noexcept" 49753 . 49774) (semantic-list 49750 . 49752) (symbol 49747 . 49750) (LONG 49735 . 49739) (LONG 49730 . 49734) (UNSIGNED 49721 . 49729) (symbol "constexpr" 49702 . 49720) (STATIC 49695 . 49701) (semantic-list 49674 . 49687) (symbol "noexcept" 49652 . 49673) (semantic-list 49649 . 49651) (symbol 49646 . 49649) (LONG 49634 . 49638) (LONG 49629 . 49633) (UNSIGNED 49620 . 49628) (symbol "constexpr" 49601 . 49619) (STATIC 49594 . 49600) (symbol "constexpr" 49536 . 49558) (STATIC 49529 . 49535) (symbol "constexpr" 49311 . 49333) (STATIC 49304 . 49310) (symbol "constexpr" 49245 . 49267) (STATIC 49238 . 49244) (symbol "constexpr" 49170 . 49192) (STATIC 49163 . 49169) (symbol "constexpr" 49109 . 49131) (STATIC 49102 . 49108) (symbol "constexpr" 49049 . 49071) (STATIC 49042 . 49048) (symbol "constexpr" 48989 . 49011) (STATIC 48982 . 48988) (semantic-list 48937 . 48974) (symbol "noexcept" 48915 . 48936) (semantic-list 48912 . 48914) (symbol 48902 . 48912) (LONG 48890 . 48894) (LONG 48885 . 48889) (symbol "constexpr" 48866 . 48884) (STATIC 48859 . 48865) (semantic-list 48814 . 48851) (symbol "noexcept" 48786 . 48807) (semantic-list 48783 . 48785) (symbol 48770 . 48783) (LONG 48758 . 48762) (LONG 48753 . 48757) (symbol "constexpr" 48734 . 48752) (STATIC 48727 . 48733) (semantic-list 48682 . 48719) (symbol "noexcept" 48660 . 48681) (semantic-list 48657 . 48659) (symbol 48648 . 48657) (LONG 48636 . 48640) (LONG 48631 . 48635) (symbol "constexpr" 48612 . 48630) (STATIC 48605 . 48611) (semantic-list 48560 . 48597) (symbol "noexcept" 48538 . 48559) (semantic-list 48535 . 48537) (symbol 48527 . 48535) (LONG 48515 . 48519) (LONG 48510 . 48514) (symbol "constexpr" 48491 . 48509) (STATIC 48484 . 48490) (symbol "constexpr" 48424 . 48446) (STATIC 48417 . 48423) (symbol "constexpr" 48333 . 48355) (STATIC 48326 . 48332) (symbol "constexpr" 48265 . 48287) (STATIC 48258 . 48264) (symbol "constexpr" 48201 . 48223) (STATIC 48194 . 48200) (symbol "constexpr" 48138 . 48160) (STATIC 48131 . 48137) (symbol "constexpr" 48077 . 48099) (STATIC 48070 . 48076) (symbol "constexpr" 48019 . 48041) (STATIC 48012 . 48018) (symbol "constexpr" 47959 . 47981) (STATIC 47952 . 47958) (symbol "constexpr" 47901 . 47923) (STATIC 47894 . 47900) (semantic-list 47873 . 47886) (symbol "noexcept" 47851 . 47872) (semantic-list 47848 . 47850) (symbol 47837 . 47848) (LONG 47825 . 47829) (LONG 47820 . 47824) (symbol "constexpr" 47801 . 47819) (STATIC 47794 . 47800) (semantic-list 47773 . 47786) (symbol "noexcept" 47751 . 47772) (semantic-list 47748 . 47750) (symbol 47741 . 47748) (LONG 47729 . 47733) (LONG 47724 . 47728) (symbol "constexpr" 47705 . 47723) (STATIC 47698 . 47704) (symbol "constexpr" 47653 . 47675) (STATIC 47646 . 47652) (symbol "constexpr" 47595 . 47617) (STATIC 47588 . 47594) (symbol "constexpr" 47535 . 47557) (STATIC 47528 . 47534) (symbol "constexpr" 47476 . 47498) (STATIC 47469 . 47475) (symbol 47424 . 47433) (STATIC 47417 . 47423) (symbol "constexpr" 47306 . 47328) (STATIC 47299 . 47305) (symbol "constexpr" 47219 . 47241) (STATIC 47212 . 47218) (semantic-list 47180 . 47197) (symbol 47171 . 47179) (semantic-list 47168 . 47170) (symbol 47162 . 47168) (LONG 47150 . 47154) (LONG 47145 . 47149) (symbol 47135 . 47144) (STATIC 47128 . 47134) (semantic-list 47064 . 47093) (symbol "noexcept" 47042 . 47063) (semantic-list 47039 . 47041) (symbol 47036 . 47039) (LONG 47024 . 47028) (LONG 47019 . 47023) (symbol "constexpr" 47000 . 47018) (STATIC 46993 . 46999) (semantic-list 46951 . 46985) (symbol "noexcept" 46929 . 46950) (semantic-list 46926 . 46928) (symbol 46923 . 46926) (LONG 46911 . 46915) (LONG 46906 . 46910) (symbol "constexpr" 46887 . 46905) (STATIC 46880 . 46886) (symbol "constexpr" 46822 . 46844) (STATIC 46815 . 46821) (symbol "constexpr" 46615 . 46637) (STATIC 46608 . 46614) (symbol "constexpr" 46549 . 46571) (STATIC 46542 . 46548) (symbol "constexpr" 46474 . 46496) (STATIC 46467 . 46473) (symbol "constexpr" 46414 . 46436) (STATIC 46407 . 46413) (symbol "constexpr" 46354 . 46376) (STATIC 46347 . 46353) (symbol "constexpr" 46294 . 46316) (STATIC 46287 . 46293) (semantic-list 46238 . 46279) (symbol "noexcept" 46210 . 46231) (semantic-list 46207 . 46209) (symbol 46197 . 46207) (LONG 46185 . 46189) (UNSIGNED 46176 . 46184) (symbol "constexpr" 46157 . 46175) (STATIC 46150 . 46156) (semantic-list 46101 . 46142) (symbol "noexcept" 46073 . 46094) (semantic-list 46070 . 46072) (symbol 46057 . 46070) (LONG 46045 . 46049) (UNSIGNED 46036 . 46044) (symbol "constexpr" 46017 . 46035) (STATIC 46010 . 46016) (semantic-list 45961 . 46002) (symbol "noexcept" 45933 . 45954) (semantic-list 45930 . 45932) (symbol 45921 . 45930) (LONG 45909 . 45913) (UNSIGNED 45900 . 45908) (symbol "constexpr" 45881 . 45899) (STATIC 45874 . 45880) (semantic-list 45825 . 45866) (symbol "noexcept" 45797 . 45818) (semantic-list 45794 . 45796) (symbol 45786 . 45794) (LONG 45774 . 45778) (UNSIGNED 45765 . 45773) (symbol "constexpr" 45746 . 45764) (STATIC 45739 . 45745) (symbol "constexpr" 45679 . 45701) (STATIC 45672 . 45678) (symbol "constexpr" 45588 . 45610) (STATIC 45581 . 45587) (symbol "constexpr" 45520 . 45542) (STATIC 45513 . 45519) (symbol "constexpr" 45456 . 45478) (STATIC 45449 . 45455) (symbol "constexpr" 45393 . 45415) (STATIC 45386 . 45392) (symbol "constexpr" 45332 . 45354) (STATIC 45325 . 45331) (symbol "constexpr" 45274 . 45296) (STATIC 45267 . 45273) (symbol "constexpr" 45214 . 45236) (STATIC 45207 . 45213) (symbol "constexpr" 45156 . 45178) (STATIC 45149 . 45155) (semantic-list 45128 . 45141) (symbol "noexcept" 45106 . 45127) (semantic-list 45103 . 45105) (symbol 45092 . 45103) (LONG 45080 . 45084) (UNSIGNED 45071 . 45079) (symbol "constexpr" 45052 . 45070) (STATIC 45045 . 45051) (semantic-list 45024 . 45037) (symbol "noexcept" 45002 . 45023) (semantic-list 44999 . 45001) (symbol 44992 . 44999) (LONG 44980 . 44984) (UNSIGNED 44971 . 44979) (symbol "constexpr" 44952 . 44970) (STATIC 44945 . 44951) (symbol "constexpr" 44900 . 44922) (STATIC 44893 . 44899) (symbol "constexpr" 44842 . 44864) (STATIC 44835 . 44841) (symbol "constexpr" 44782 . 44804) (STATIC 44775 . 44781) (symbol "constexpr" 44722 . 44744) (STATIC 44715 . 44721) (symbol 44670 . 44679) (STATIC 44663 . 44669) (symbol "constexpr" 44548 . 44570) (STATIC 44541 . 44547) (symbol "constexpr" 44457 . 44479) (STATIC 44450 . 44456) (semantic-list 44418 . 44435) (symbol 44409 . 44417) (semantic-list 44406 . 44408) (symbol 44400 . 44406) (LONG 44388 . 44392) (UNSIGNED 44379 . 44387) (symbol 44369 . 44378) (STATIC 44362 . 44368) (semantic-list 44293 . 44327) (symbol "noexcept" 44271 . 44292) (semantic-list 44268 . 44270) (symbol 44265 . 44268) (LONG 44253 . 44257) (UNSIGNED 44244 . 44252) (symbol "constexpr" 44225 . 44243) (STATIC 44218 . 44224) (semantic-list 44197 . 44210) (symbol "noexcept" 44175 . 44196) (semantic-list 44172 . 44174) (symbol 44169 . 44172) (LONG 44157 . 44161) (UNSIGNED 44148 . 44156) (symbol "constexpr" 44129 . 44147) (STATIC 44122 . 44128) (symbol "constexpr" 44064 . 44086) (STATIC 44057 . 44063) (symbol "constexpr" 43849 . 43871) (STATIC 43842 . 43848) (symbol "constexpr" 43783 . 43805) (STATIC 43776 . 43782) (symbol "constexpr" 43708 . 43730) (STATIC 43701 . 43707) (symbol "constexpr" 43647 . 43669) (STATIC 43640 . 43646) (symbol "constexpr" 43587 . 43609) (STATIC 43580 . 43586) (symbol "constexpr" 43527 . 43549) (STATIC 43520 . 43526) (semantic-list 43480 . 43512) (symbol "noexcept" 43458 . 43479) (semantic-list 43455 . 43457) (symbol 43445 . 43455) (LONG 43433 . 43437) (symbol "constexpr" 43414 . 43432) (STATIC 43407 . 43413) (semantic-list 43367 . 43399) (symbol "noexcept" 43345 . 43366) (semantic-list 43342 . 43344) (symbol 43329 . 43342) (LONG 43317 . 43321) (symbol "constexpr" 43298 . 43316) (STATIC 43291 . 43297) (semantic-list 43251 . 43283) (symbol "noexcept" 43229 . 43250) (semantic-list 43226 . 43228) (symbol 43217 . 43226) (LONG 43205 . 43209) (symbol "constexpr" 43186 . 43204) (STATIC 43179 . 43185) (semantic-list 43139 . 43171) (symbol "noexcept" 43117 . 43138) (semantic-list 43114 . 43116) (symbol 43106 . 43114) (LONG 43094 . 43098) (symbol "constexpr" 43075 . 43093) (STATIC 43068 . 43074) (symbol "constexpr" 43008 . 43030) (STATIC 43001 . 43007) (symbol "constexpr" 42917 . 42939) (STATIC 42910 . 42916) (symbol "constexpr" 42849 . 42871) (STATIC 42842 . 42848) (symbol "constexpr" 42785 . 42807) (STATIC 42778 . 42784) (symbol "constexpr" 42722 . 42744) (STATIC 42715 . 42721) (symbol "constexpr" 42661 . 42683) (STATIC 42654 . 42660) (symbol "constexpr" 42603 . 42625) (STATIC 42596 . 42602) (symbol "constexpr" 42543 . 42565) (STATIC 42536 . 42542) (symbol "constexpr" 42485 . 42507) (STATIC 42478 . 42484) (semantic-list 42457 . 42470) (symbol "noexcept" 42435 . 42456) (semantic-list 42432 . 42434) (symbol 42421 . 42432) (LONG 42409 . 42413) (symbol "constexpr" 42390 . 42408) (STATIC 42383 . 42389) (semantic-list 42362 . 42375) (symbol "noexcept" 42340 . 42361) (semantic-list 42337 . 42339) (symbol 42330 . 42337) (LONG 42318 . 42322) (symbol "constexpr" 42299 . 42317) (STATIC 42292 . 42298) (symbol "constexpr" 42247 . 42269) (STATIC 42240 . 42246) (symbol "constexpr" 42189 . 42211) (STATIC 42182 . 42188) (symbol "constexpr" 42129 . 42151) (STATIC 42122 . 42128) (symbol "constexpr" 42070 . 42092) (STATIC 42063 . 42069) (symbol 42018 . 42027) (STATIC 42011 . 42017) (symbol "constexpr" 41913 . 41935) (STATIC 41906 . 41912) (symbol "constexpr" 41839 . 41861) (STATIC 41832 . 41838) (semantic-list 41800 . 41817) (symbol 41791 . 41799) (semantic-list 41788 . 41790) (symbol 41782 . 41788) (LONG 41770 . 41774) (symbol 41760 . 41769) (STATIC 41753 . 41759) (semantic-list 41694 . 41718) (symbol "noexcept" 41672 . 41693) (semantic-list 41669 . 41671) (symbol 41666 . 41669) (LONG 41654 . 41658) (symbol "constexpr" 41635 . 41653) (STATIC 41628 . 41634) (semantic-list 41591 . 41620) (symbol "noexcept" 41569 . 41590) (semantic-list 41566 . 41568) (symbol 41563 . 41566) (LONG 41552 . 41556) (symbol "constexpr" 41533 . 41551) (STATIC 41526 . 41532) (symbol "constexpr" 41468 . 41490) (STATIC 41461 . 41467) (symbol "constexpr" 41271 . 41293) (STATIC 41264 . 41270) (symbol "constexpr" 41205 . 41227) (STATIC 41198 . 41204) (symbol "constexpr" 41130 . 41152) (STATIC 41123 . 41129) (symbol "constexpr" 41070 . 41092) (STATIC 41063 . 41069) (symbol "constexpr" 41010 . 41032) (STATIC 41003 . 41009) (symbol "constexpr" 40950 . 40972) (STATIC 40943 . 40949) (semantic-list 40895 . 40935) (symbol "noexcept" 40867 . 40888) (semantic-list 40864 . 40866) (symbol 40854 . 40864) (INT 40843 . 40846) (UNSIGNED 40834 . 40842) (symbol "constexpr" 40815 . 40833) (STATIC 40808 . 40814) (semantic-list 40760 . 40800) (symbol "noexcept" 40732 . 40753) (semantic-list 40729 . 40731) (symbol 40716 . 40729) (INT 40705 . 40708) (UNSIGNED 40696 . 40704) (symbol "constexpr" 40677 . 40695) (STATIC 40670 . 40676) (semantic-list 40622 . 40662) (symbol "noexcept" 40594 . 40615) (semantic-list 40591 . 40593) (symbol 40582 . 40591) (INT 40571 . 40574) (UNSIGNED 40562 . 40570) (symbol "constexpr" 40543 . 40561) (STATIC 40536 . 40542) (semantic-list 40488 . 40528) (symbol "noexcept" 40466 . 40487) (semantic-list 40463 . 40465) (symbol 40455 . 40463) (INT 40444 . 40447) (UNSIGNED 40435 . 40443) (symbol "constexpr" 40416 . 40434) (STATIC 40409 . 40415) (symbol "constexpr" 40349 . 40371) (STATIC 40342 . 40348) (symbol "constexpr" 40258 . 40280) (STATIC 40251 . 40257) (symbol "constexpr" 40190 . 40212) (STATIC 40183 . 40189) (symbol "constexpr" 40126 . 40148) (STATIC 40119 . 40125) (symbol "constexpr" 40063 . 40085) (STATIC 40056 . 40062) (symbol "constexpr" 40002 . 40024) (STATIC 39995 . 40001) (symbol "constexpr" 39944 . 39966) (STATIC 39937 . 39943) (symbol "constexpr" 39884 . 39906) (STATIC 39877 . 39883) (symbol "constexpr" 39826 . 39848) (STATIC 39819 . 39825) (semantic-list 39798 . 39811) (symbol "noexcept" 39776 . 39797) (semantic-list 39773 . 39775) (symbol 39762 . 39773) (INT 39751 . 39754) (UNSIGNED 39742 . 39750) (symbol "constexpr" 39723 . 39741) (STATIC 39716 . 39722) (semantic-list 39695 . 39708) (symbol "noexcept" 39673 . 39694) (semantic-list 39670 . 39672) (symbol 39663 . 39670) (INT 39652 . 39655) (UNSIGNED 39643 . 39651) (symbol "constexpr" 39624 . 39642) (STATIC 39617 . 39623) (symbol "constexpr" 39572 . 39594) (STATIC 39565 . 39571) (symbol "constexpr" 39514 . 39536) (STATIC 39507 . 39513) (symbol "constexpr" 39454 . 39476) (STATIC 39447 . 39453) (symbol "constexpr" 39394 . 39416) (STATIC 39387 . 39393) (symbol 39342 . 39351) (STATIC 39335 . 39341) (symbol "constexpr" 39221 . 39243) (STATIC 39214 . 39220) (symbol "constexpr" 39131 . 39153) (STATIC 39124 . 39130) (semantic-list 39092 . 39109) (symbol 39083 . 39091) (semantic-list 39080 . 39082) (symbol 39074 . 39080) (INT 39063 . 39066) (UNSIGNED 39054 . 39062) (symbol 39044 . 39053) (STATIC 39037 . 39043) (semantic-list 38970 . 39002) (symbol "noexcept" 38948 . 38969) (semantic-list 38945 . 38947) (symbol 38942 . 38945) (INT 38931 . 38934) (UNSIGNED 38922 . 38930) (symbol "constexpr" 38903 . 38921) (STATIC 38896 . 38902) (semantic-list 38875 . 38888) (symbol "noexcept" 38853 . 38874) (semantic-list 38850 . 38852) (symbol 38847 . 38850) (INT 38836 . 38839) (UNSIGNED 38827 . 38835) (symbol "constexpr" 38808 . 38826) (STATIC 38801 . 38807) (symbol "constexpr" 38743 . 38765) (STATIC 38736 . 38742) (symbol "constexpr" 38530 . 38552) (STATIC 38523 . 38529) (symbol "constexpr" 38464 . 38486) (STATIC 38457 . 38463) (symbol "constexpr" 38389 . 38411) (STATIC 38382 . 38388) (symbol "constexpr" 38328 . 38350) (STATIC 38321 . 38327) (symbol "constexpr" 38268 . 38290) (STATIC 38261 . 38267) (symbol "constexpr" 38208 . 38230) (STATIC 38201 . 38207) (semantic-list 38162 . 38193) (symbol "noexcept" 38140 . 38161) (semantic-list 38137 . 38139) (symbol 38127 . 38137) (INT 38116 . 38119) (symbol "constexpr" 38097 . 38115) (STATIC 38090 . 38096) (semantic-list 38051 . 38082) (symbol "noexcept" 38029 . 38050) (semantic-list 38026 . 38028) (symbol 38013 . 38026) (INT 38002 . 38005) (symbol "constexpr" 37983 . 38001) (STATIC 37976 . 37982) (semantic-list 37937 . 37968) (symbol "noexcept" 37915 . 37936) (semantic-list 37912 . 37914) (symbol 37903 . 37912) (INT 37892 . 37895) (symbol "constexpr" 37873 . 37891) (STATIC 37866 . 37872) (semantic-list 37827 . 37858) (symbol "noexcept" 37805 . 37826) (semantic-list 37802 . 37804) (symbol 37794 . 37802) (INT 37783 . 37786) (symbol "constexpr" 37764 . 37782) (STATIC 37757 . 37763) (symbol "constexpr" 37697 . 37719) (STATIC 37690 . 37696) (symbol "constexpr" 37606 . 37628) (STATIC 37599 . 37605) (symbol "constexpr" 37538 . 37560) (STATIC 37531 . 37537) (symbol "constexpr" 37474 . 37496) (STATIC 37467 . 37473) (symbol "constexpr" 37411 . 37433) (STATIC 37404 . 37410) (symbol "constexpr" 37350 . 37372) (STATIC 37343 . 37349) (symbol "constexpr" 37292 . 37314) (STATIC 37285 . 37291) (symbol "constexpr" 37232 . 37254) (STATIC 37225 . 37231) (symbol "constexpr" 37174 . 37196) (STATIC 37167 . 37173) (semantic-list 37146 . 37159) (symbol "noexcept" 37124 . 37145) (semantic-list 37121 . 37123) (symbol 37110 . 37121) (INT 37099 . 37102) (symbol "constexpr" 37080 . 37098) (STATIC 37073 . 37079) (semantic-list 37052 . 37065) (symbol "noexcept" 37030 . 37051) (semantic-list 37027 . 37029) (symbol 37020 . 37027) (INT 37009 . 37012) (symbol "constexpr" 36990 . 37008) (STATIC 36983 . 36989) (symbol "constexpr" 36938 . 36960) (STATIC 36931 . 36937) (symbol "constexpr" 36880 . 36902) (STATIC 36873 . 36879) (symbol "constexpr" 36820 . 36842) (STATIC 36813 . 36819) (symbol "constexpr" 36761 . 36783) (STATIC 36754 . 36760) (symbol 36709 . 36718) (STATIC 36702 . 36708) (symbol "constexpr" 36605 . 36627) (STATIC 36598 . 36604) (symbol "constexpr" 36532 . 36554) (STATIC 36525 . 36531) (semantic-list 36493 . 36510) (symbol 36484 . 36492) (semantic-list 36481 . 36483) (symbol 36475 . 36481) (INT 36464 . 36467) (symbol 36454 . 36463) (STATIC 36447 . 36453) (semantic-list 36389 . 36412) (symbol "noexcept" 36367 . 36388) (semantic-list 36364 . 36366) (symbol 36361 . 36364) (INT 36350 . 36353) (symbol "constexpr" 36331 . 36349) (STATIC 36324 . 36330) (semantic-list 36288 . 36316) (symbol "noexcept" 36266 . 36287) (semantic-list 36263 . 36265) (symbol 36260 . 36263) (INT 36249 . 36252) (symbol "constexpr" 36230 . 36248) (STATIC 36223 . 36229) (symbol "constexpr" 36165 . 36187) (STATIC 36158 . 36164) (symbol "constexpr" 35970 . 35992) (STATIC 35963 . 35969) (symbol "constexpr" 35904 . 35926) (STATIC 35897 . 35903) (symbol "constexpr" 35829 . 35851) (STATIC 35822 . 35828) (symbol "constexpr" 35769 . 35791) (STATIC 35762 . 35768) (symbol "constexpr" 35709 . 35731) (STATIC 35702 . 35708) (symbol "constexpr" 35649 . 35671) (STATIC 35642 . 35648) (semantic-list 35592 . 35634) (symbol "noexcept" 35564 . 35585) (semantic-list 35561 . 35563) (symbol 35551 . 35561) (SHORT 35538 . 35543) (UNSIGNED 35529 . 35537) (symbol "constexpr" 35510 . 35528) (STATIC 35503 . 35509) (semantic-list 35453 . 35495) (symbol "noexcept" 35425 . 35446) (semantic-list 35422 . 35424) (symbol 35409 . 35422) (SHORT 35396 . 35401) (UNSIGNED 35387 . 35395) (symbol "constexpr" 35368 . 35386) (STATIC 35361 . 35367) (semantic-list 35311 . 35353) (symbol "noexcept" 35283 . 35304) (semantic-list 35280 . 35282) (symbol 35271 . 35280) (SHORT 35258 . 35263) (UNSIGNED 35249 . 35257) (symbol "constexpr" 35230 . 35248) (STATIC 35223 . 35229) (semantic-list 35173 . 35215) (symbol "noexcept" 35145 . 35166) (semantic-list 35142 . 35144) (symbol 35134 . 35142) (SHORT 35121 . 35126) (UNSIGNED 35112 . 35120) (symbol "constexpr" 35093 . 35111) (STATIC 35086 . 35092) (symbol "constexpr" 35026 . 35048) (STATIC 35019 . 35025) (symbol "constexpr" 34935 . 34957) (STATIC 34928 . 34934) (symbol "constexpr" 34867 . 34889) (STATIC 34860 . 34866) (symbol "constexpr" 34803 . 34825) (STATIC 34796 . 34802) (symbol "constexpr" 34740 . 34762) (STATIC 34733 . 34739) (symbol "constexpr" 34679 . 34701) (STATIC 34672 . 34678) (symbol "constexpr" 34621 . 34643) (STATIC 34614 . 34620) (symbol "constexpr" 34561 . 34583) (STATIC 34554 . 34560) (symbol "constexpr" 34503 . 34525) (STATIC 34496 . 34502) (semantic-list 34475 . 34488) (symbol "noexcept" 34453 . 34474) (semantic-list 34450 . 34452) (symbol 34439 . 34450) (SHORT 34426 . 34431) (UNSIGNED 34417 . 34425) (symbol "constexpr" 34398 . 34416) (STATIC 34391 . 34397) (semantic-list 34370 . 34383) (symbol "noexcept" 34348 . 34369) (semantic-list 34345 . 34347) (symbol 34338 . 34345) (SHORT 34325 . 34330) (UNSIGNED 34316 . 34324) (symbol "constexpr" 34297 . 34315) (STATIC 34290 . 34296) (symbol "constexpr" 34245 . 34267) (STATIC 34238 . 34244) (symbol "constexpr" 34187 . 34209) (STATIC 34180 . 34186) (symbol "constexpr" 34127 . 34149) (STATIC 34120 . 34126) (symbol "constexpr" 34067 . 34089) (STATIC 34060 . 34066) (symbol 34015 . 34024) (STATIC 34008 . 34014) (symbol "constexpr" 33892 . 33914) (STATIC 33885 . 33891) (symbol "constexpr" 33800 . 33822) (STATIC 33793 . 33799) (semantic-list 33761 . 33778) (symbol 33752 . 33760) (semantic-list 33749 . 33751) (symbol 33743 . 33749) (SHORT 33730 . 33735) (UNSIGNED 33721 . 33729) (symbol 33711 . 33720) (STATIC 33704 . 33710) (semantic-list 33636 . 33669) (symbol "noexcept" 33614 . 33635) (semantic-list 33611 . 33613) (symbol 33608 . 33611) (SHORT 33595 . 33600) (UNSIGNED 33586 . 33594) (symbol "constexpr" 33567 . 33585) (STATIC 33560 . 33566) (semantic-list 33539 . 33552) (symbol "noexcept" 33517 . 33538) (semantic-list 33514 . 33516) (symbol 33511 . 33514) (SHORT 33498 . 33503) (UNSIGNED 33489 . 33497) (symbol "constexpr" 33470 . 33488) (STATIC 33463 . 33469) (symbol "constexpr" 33405 . 33427) (STATIC 33398 . 33404) (symbol "constexpr" 33188 . 33210) (STATIC 33181 . 33187) (symbol "constexpr" 33122 . 33144) (STATIC 33115 . 33121) (symbol "constexpr" 33047 . 33069) (STATIC 33040 . 33046) (symbol "constexpr" 32986 . 33008) (STATIC 32979 . 32985) (symbol "constexpr" 32926 . 32948) (STATIC 32919 . 32925) (symbol "constexpr" 32866 . 32888) (STATIC 32859 . 32865) (semantic-list 32832 . 32851) (symbol "noexcept" 32810 . 32831) (semantic-list 32807 . 32809) (symbol 32797 . 32807) (SHORT 32784 . 32789) (symbol "constexpr" 32765 . 32783) (STATIC 32758 . 32764) (semantic-list 32731 . 32750) (symbol "noexcept" 32709 . 32730) (semantic-list 32706 . 32708) (symbol 32693 . 32706) (SHORT 32680 . 32685) (symbol "constexpr" 32661 . 32679) (STATIC 32654 . 32660) (semantic-list 32627 . 32646) (symbol "noexcept" 32605 . 32626) (semantic-list 32602 . 32604) (symbol 32593 . 32602) (SHORT 32580 . 32585) (symbol "constexpr" 32561 . 32579) (STATIC 32554 . 32560) (semantic-list 32527 . 32546) (symbol "noexcept" 32505 . 32526) (semantic-list 32502 . 32504) (symbol 32494 . 32502) (SHORT 32481 . 32486) (symbol "constexpr" 32462 . 32480) (STATIC 32455 . 32461) (symbol "constexpr" 32395 . 32417) (STATIC 32388 . 32394) (symbol "constexpr" 32304 . 32326) (STATIC 32297 . 32303) (symbol "constexpr" 32236 . 32258) (STATIC 32229 . 32235) (symbol "constexpr" 32172 . 32194) (STATIC 32165 . 32171) (symbol "constexpr" 32109 . 32131) (STATIC 32102 . 32108) (symbol "constexpr" 32048 . 32070) (STATIC 32041 . 32047) (symbol "constexpr" 31990 . 32012) (STATIC 31983 . 31989) (symbol "constexpr" 31930 . 31952) (STATIC 31923 . 31929) (symbol "constexpr" 31872 . 31894) (STATIC 31865 . 31871) (semantic-list 31844 . 31857) (symbol "noexcept" 31822 . 31843) (semantic-list 31819 . 31821) (symbol 31808 . 31819) (SHORT 31795 . 31800) (symbol "constexpr" 31776 . 31794) (STATIC 31769 . 31775) (semantic-list 31748 . 31761) (symbol "noexcept" 31726 . 31747) (semantic-list 31723 . 31725) (symbol 31716 . 31723) (SHORT 31703 . 31708) (symbol "constexpr" 31684 . 31702) (STATIC 31677 . 31683) (symbol "constexpr" 31632 . 31654) (STATIC 31625 . 31631) (symbol "constexpr" 31574 . 31596) (STATIC 31567 . 31573) (symbol "constexpr" 31514 . 31536) (STATIC 31507 . 31513) (symbol "constexpr" 31455 . 31477) (STATIC 31448 . 31454) (symbol 31403 . 31412) (STATIC 31396 . 31402) (symbol "constexpr" 31297 . 31319) (STATIC 31290 . 31296) (symbol "constexpr" 31222 . 31244) (STATIC 31215 . 31221) (semantic-list 31183 . 31200) (symbol 31174 . 31182) (semantic-list 31171 . 31173) (symbol 31165 . 31171) (SHORT 31152 . 31157) (symbol 31142 . 31151) (STATIC 31135 . 31141) (semantic-list 31076 . 31100) (symbol "noexcept" 31054 . 31075) (semantic-list 31051 . 31053) (symbol 31048 . 31051) (SHORT 31035 . 31040) (symbol "constexpr" 31016 . 31034) (STATIC 31009 . 31015) (semantic-list 30972 . 31001) (symbol "noexcept" 30950 . 30971) (semantic-list 30947 . 30949) (symbol 30944 . 30947) (SHORT 30931 . 30936) (symbol "constexpr" 30912 . 30930) (STATIC 30905 . 30911) (symbol "constexpr" 30847 . 30869) (STATIC 30840 . 30846) (symbol 30662 . 30671) (STATIC 30655 . 30661) (symbol 30609 . 30618) (STATIC 30602 . 30608) (symbol 30547 . 30556) (STATIC 30540 . 30546) (punctuation 30521 . 30522) (punctuation 30519 . 30520) (symbol 30509 . 30518) (BOOL 30504 . 30508) (symbol 30494 . 30503) (STATIC 30487 . 30493) (symbol 30447 . 30456) (STATIC 30440 . 30446) (symbol 30400 . 30409) (STATIC 30393 . 30399) (semantic-list 30363 . 30385) (symbol 30354 . 30362) (semantic-list 30351 . 30353) (symbol 30341 . 30351) (symbol 30325 . 30333) (symbol 30315 . 30324) (STATIC 30308 . 30314) (semantic-list 30278 . 30300) (symbol 30269 . 30277) (semantic-list 30266 . 30268) (symbol 30253 . 30266) (symbol 30237 . 30245) (symbol 30227 . 30236) (STATIC 30220 . 30226) (semantic-list 30190 . 30212) (symbol 30181 . 30189) (semantic-list 30178 . 30180) (symbol 30169 . 30178) (symbol 30153 . 30161) (symbol 30143 . 30152) (STATIC 30136 . 30142) (semantic-list 30106 . 30128) (symbol 30097 . 30105) (semantic-list 30094 . 30096) (symbol 30086 . 30094) (symbol 30070 . 30078) (symbol 30060 . 30069) (STATIC 30053 . 30059) (symbol 30006 . 30015) (STATIC 29999 . 30005) (symbol 29936 . 29945) (STATIC 29929 . 29935) (symbol 29881 . 29890) (STATIC 29874 . 29880) (symbol 29830 . 29839) (STATIC 29823 . 29829) (symbol 29780 . 29789) (STATIC 29773 . 29779) (symbol 29732 . 29741) (STATIC 29725 . 29731) (symbol 29687 . 29696) (STATIC 29680 . 29686) (symbol 29640 . 29649) (STATIC 29633 . 29639) (symbol 29595 . 29604) (STATIC 29588 . 29594) (semantic-list 29567 . 29580) (symbol 29558 . 29566) (semantic-list 29555 . 29557) (symbol 29544 . 29555) (symbol 29528 . 29536) (symbol 29518 . 29527) (STATIC 29511 . 29517) (semantic-list 29490 . 29503) (symbol 29481 . 29489) (semantic-list 29478 . 29480) (symbol 29471 . 29478) (symbol 29455 . 29463) (symbol 29445 . 29454) (STATIC 29438 . 29444) (symbol 29406 . 29415) (STATIC 29399 . 29405) (symbol 29361 . 29370) (STATIC 29354 . 29360) (symbol 29314 . 29323) (STATIC 29307 . 29313) (symbol 29245 . 29254) (STATIC 29238 . 29244) (symbol 29200 . 29209) (STATIC 29193 . 29199) (symbol 29131 . 29140) (STATIC 29124 . 29130) (symbol 29066 . 29075) (STATIC 29059 . 29065) (semantic-list 29034 . 29051) (symbol 29025 . 29033) (semantic-list 29022 . 29024) (symbol 29016 . 29022) (symbol 29000 . 29008) (symbol 28990 . 28999) (STATIC 28983 . 28989) (semantic-list 28939 . 28975) (symbol 28930 . 28938) (semantic-list 28927 . 28929) (symbol 28924 . 28927) (symbol 28908 . 28916) (symbol 28898 . 28907) (STATIC 28891 . 28897) (semantic-list 28847 . 28883) (symbol 28838 . 28846) (semantic-list 28835 . 28837) (symbol 28832 . 28835) (symbol 28816 . 28824) (symbol 28806 . 28815) (STATIC 28799 . 28805) (symbol 28754 . 28763) (STATIC 28747 . 28753) (symbol 28570 . 28579) (STATIC 28563 . 28569) (symbol 28517 . 28526) (STATIC 28510 . 28516) (symbol 28455 . 28464) (STATIC 28448 . 28454) (punctuation 28429 . 28430) (punctuation 28427 . 28428) (symbol 28417 . 28426) (BOOL 28412 . 28416) (symbol 28402 . 28411) (STATIC 28395 . 28401) (symbol 28355 . 28364) (STATIC 28348 . 28354) (symbol 28308 . 28317) (STATIC 28301 . 28307) (semantic-list 28271 . 28293) (symbol 28262 . 28270) (semantic-list 28259 . 28261) (symbol 28249 . 28259) (symbol 28233 . 28241) (symbol 28223 . 28232) (STATIC 28216 . 28222) (semantic-list 28186 . 28208) (symbol 28177 . 28185) (semantic-list 28174 . 28176) (symbol 28161 . 28174) (symbol 28145 . 28153) (symbol 28135 . 28144) (STATIC 28128 . 28134) (semantic-list 28098 . 28120) (symbol 28089 . 28097) (semantic-list 28086 . 28088) (symbol 28077 . 28086) (symbol 28061 . 28069) (symbol 28051 . 28060) (STATIC 28044 . 28050) (semantic-list 28014 . 28036) (symbol 28005 . 28013) (semantic-list 28002 . 28004) (symbol 27994 . 28002) (symbol 27978 . 27986) (symbol 27968 . 27977) (STATIC 27961 . 27967) (symbol 27914 . 27923) (STATIC 27907 . 27913) (symbol 27844 . 27853) (STATIC 27837 . 27843) (symbol 27789 . 27798) (STATIC 27782 . 27788) (symbol 27738 . 27747) (STATIC 27731 . 27737) (symbol 27688 . 27697) (STATIC 27681 . 27687) (symbol 27640 . 27649) (STATIC 27633 . 27639) (symbol 27595 . 27604) (STATIC 27588 . 27594) (symbol 27548 . 27557) (STATIC 27541 . 27547) (symbol 27503 . 27512) (STATIC 27496 . 27502) (semantic-list 27475 . 27488) (symbol 27466 . 27474) (semantic-list 27463 . 27465) (symbol 27452 . 27463) (symbol 27436 . 27444) (symbol 27426 . 27435) (STATIC 27419 . 27425) (semantic-list 27398 . 27411) (symbol 27389 . 27397) (semantic-list 27386 . 27388) (symbol 27379 . 27386) (symbol 27363 . 27371) (symbol 27353 . 27362) (STATIC 27346 . 27352) (symbol 27314 . 27323) (STATIC 27307 . 27313) (symbol 27269 . 27278) (STATIC 27262 . 27268) (symbol 27222 . 27231) (STATIC 27215 . 27221) (symbol 27153 . 27162) (STATIC 27146 . 27152) (symbol 27108 . 27117) (STATIC 27101 . 27107) (symbol 27039 . 27048) (STATIC 27032 . 27038) (symbol 26974 . 26983) (STATIC 26967 . 26973) (semantic-list 26942 . 26959) (symbol 26933 . 26941) (semantic-list 26930 . 26932) (symbol 26924 . 26930) (symbol 26908 . 26916) (symbol 26898 . 26907) (STATIC 26891 . 26897) (semantic-list 26847 . 26883) (symbol 26838 . 26846) (semantic-list 26835 . 26837) (symbol 26832 . 26835) (symbol 26816 . 26824) (symbol 26806 . 26815) (STATIC 26799 . 26805) (semantic-list 26755 . 26791) (symbol 26746 . 26754) (semantic-list 26743 . 26745) (symbol 26740 . 26743) (symbol 26724 . 26732) (symbol 26714 . 26723) (STATIC 26707 . 26713) (symbol 26662 . 26671) (STATIC 26655 . 26661) (symbol "constexpr" 26430 . 26452) (STATIC 26423 . 26429) (symbol "constexpr" 26364 . 26386) (STATIC 26357 . 26363) (symbol "constexpr" 26289 . 26311) (STATIC 26282 . 26288) (punctuation 26263 . 26264) (punctuation 26261 . 26262) (symbol 26251 . 26260) (BOOL 26246 . 26250) (symbol "constexpr" 26223 . 26245) (STATIC 26216 . 26222) (symbol "constexpr" 26163 . 26185) (STATIC 26156 . 26162) (symbol "constexpr" 26103 . 26125) (STATIC 26096 . 26102) (semantic-list 26067 . 26088) (symbol "noexcept" 26045 . 26066) (semantic-list 26042 . 26044) (symbol 26032 . 26042) (WCHAR 26017 . 26024) (symbol "constexpr" 25998 . 26016) (STATIC 25991 . 25997) (semantic-list 25962 . 25983) (symbol "noexcept" 25940 . 25961) (semantic-list 25937 . 25939) (symbol 25924 . 25937) (WCHAR 25909 . 25916) (symbol "constexpr" 25890 . 25908) (STATIC 25883 . 25889) (semantic-list 25854 . 25875) (symbol "noexcept" 25832 . 25853) (semantic-list 25829 . 25831) (symbol 25820 . 25829) (WCHAR 25805 . 25812) (symbol "constexpr" 25786 . 25804) (STATIC 25779 . 25785) (semantic-list 25750 . 25771) (symbol "noexcept" 25728 . 25749) (semantic-list 25725 . 25727) (symbol 25717 . 25725) (WCHAR 25702 . 25709) (symbol "constexpr" 25683 . 25701) (STATIC 25676 . 25682) (symbol "constexpr" 25616 . 25638) (STATIC 25609 . 25615) (symbol "constexpr" 25525 . 25547) (STATIC 25518 . 25524) (symbol "constexpr" 25457 . 25479) (STATIC 25450 . 25456) (symbol "constexpr" 25393 . 25415) (STATIC 25386 . 25392) (symbol "constexpr" 25330 . 25352) (STATIC 25323 . 25329) (symbol "constexpr" 25269 . 25291) (STATIC 25262 . 25268) (symbol "constexpr" 25211 . 25233) (STATIC 25204 . 25210) (symbol "constexpr" 25151 . 25173) (STATIC 25144 . 25150) (symbol "constexpr" 25093 . 25115) (STATIC 25086 . 25092) (semantic-list 25065 . 25078) (symbol "noexcept" 25043 . 25064) (semantic-list 25040 . 25042) (symbol 25029 . 25040) (WCHAR 25014 . 25021) (symbol "constexpr" 24995 . 25013) (STATIC 24988 . 24994) (semantic-list 24967 . 24980) (symbol "noexcept" 24945 . 24966) (semantic-list 24942 . 24944) (symbol 24935 . 24942) (WCHAR 24920 . 24927) (symbol "constexpr" 24901 . 24919) (STATIC 24894 . 24900) (symbol "constexpr" 24849 . 24871) (STATIC 24842 . 24848) (symbol "constexpr" 24791 . 24813) (STATIC 24784 . 24790) (symbol "constexpr" 24731 . 24753) (STATIC 24724 . 24730) (symbol "constexpr" 24650 . 24672) (STATIC 24643 . 24649) (symbol 24598 . 24607) (STATIC 24591 . 24597) (symbol "constexpr" 24482 . 24504) (STATIC 24475 . 24481) (symbol "constexpr" 24405 . 24427) (STATIC 24398 . 24404) (semantic-list 24366 . 24383) (symbol 24357 . 24365) (semantic-list 24354 . 24356) (symbol 24348 . 24354) (WCHAR 24334 . 24341) (symbol 24324 . 24333) (STATIC 24317 . 24323) (semantic-list 24247 . 24282) (symbol "noexcept" 24225 . 24246) (semantic-list 24222 . 24224) (symbol 24219 . 24222) (WCHAR 24204 . 24211) (symbol "constexpr" 24185 . 24203) (STATIC 24178 . 24184) (semantic-list 24135 . 24170) (symbol "noexcept" 24113 . 24134) (semantic-list 24110 . 24112) (symbol 24107 . 24110) (WCHAR 24092 . 24099) (symbol "constexpr" 24073 . 24091) (STATIC 24066 . 24072) (symbol "constexpr" 24008 . 24030) (STATIC 24001 . 24007) (symbol "constexpr" 23805 . 23827) (STATIC 23798 . 23804) (symbol "constexpr" 23739 . 23761) (STATIC 23732 . 23738) (symbol "constexpr" 23664 . 23686) (STATIC 23657 . 23663) (symbol "constexpr" 23604 . 23626) (STATIC 23597 . 23603) (symbol "constexpr" 23544 . 23566) (STATIC 23537 . 23543) (symbol "constexpr" 23484 . 23506) (STATIC 23477 . 23483) (semantic-list 23428 . 23469) (symbol "noexcept" 23400 . 23421) (semantic-list 23397 . 23399) (symbol 23387 . 23397) (CHAR 23375 . 23379) (UNSIGNED 23366 . 23374) (symbol "constexpr" 23347 . 23365) (STATIC 23340 . 23346) (semantic-list 23291 . 23332) (symbol "noexcept" 23263 . 23284) (semantic-list 23260 . 23262) (symbol 23247 . 23260) (CHAR 23235 . 23239) (UNSIGNED 23226 . 23234) (symbol "constexpr" 23207 . 23225) (STATIC 23200 . 23206) (semantic-list 23151 . 23192) (symbol "noexcept" 23123 . 23144) (semantic-list 23120 . 23122) (symbol 23111 . 23120) (CHAR 23099 . 23103) (UNSIGNED 23090 . 23098) (symbol "constexpr" 23071 . 23089) (STATIC 23064 . 23070) (semantic-list 23015 . 23056) (symbol "noexcept" 22987 . 23008) (semantic-list 22984 . 22986) (symbol 22976 . 22984) (CHAR 22964 . 22968) (UNSIGNED 22955 . 22963) (symbol "constexpr" 22936 . 22954) (STATIC 22929 . 22935) (symbol "constexpr" 22869 . 22891) (STATIC 22862 . 22868) (symbol "constexpr" 22778 . 22800) (STATIC 22771 . 22777) (symbol "constexpr" 22710 . 22732) (STATIC 22703 . 22709) (symbol "constexpr" 22646 . 22668) (STATIC 22639 . 22645) (symbol "constexpr" 22583 . 22605) (STATIC 22576 . 22582) (symbol "constexpr" 22522 . 22544) (STATIC 22515 . 22521) (symbol "constexpr" 22464 . 22486) (STATIC 22457 . 22463) (symbol "constexpr" 22404 . 22426) (STATIC 22397 . 22403) (symbol "constexpr" 22346 . 22368) (STATIC 22339 . 22345) (semantic-list 22318 . 22331) (symbol "noexcept" 22296 . 22317) (semantic-list 22293 . 22295) (symbol 22282 . 22293) (CHAR 22270 . 22274) (UNSIGNED 22261 . 22269) (symbol "constexpr" 22242 . 22260) (STATIC 22235 . 22241) (semantic-list 22214 . 22227) (symbol "noexcept" 22192 . 22213) (semantic-list 22189 . 22191) (symbol 22182 . 22189) (CHAR 22170 . 22174) (UNSIGNED 22161 . 22169) (symbol "constexpr" 22142 . 22160) (STATIC 22135 . 22141) (symbol "constexpr" 22090 . 22112) (STATIC 22083 . 22089) (symbol "constexpr" 22032 . 22054) (STATIC 22025 . 22031) (symbol "constexpr" 21972 . 21994) (STATIC 21965 . 21971) (symbol "constexpr" 21912 . 21934) (STATIC 21905 . 21911) (symbol 21860 . 21869) (STATIC 21853 . 21859) (symbol "constexpr" 21738 . 21760) (STATIC 21731 . 21737) (symbol "constexpr" 21647 . 21669) (STATIC 21640 . 21646) (semantic-list 21608 . 21625) (symbol 21599 . 21607) (semantic-list 21596 . 21598) (symbol 21590 . 21596) (CHAR 21578 . 21582) (UNSIGNED 21569 . 21577) (symbol 21559 . 21568) (STATIC 21552 . 21558) (semantic-list 21483 . 21517) (symbol "noexcept" 21461 . 21482) (semantic-list 21458 . 21460) (symbol 21455 . 21458) (CHAR 21443 . 21447) (UNSIGNED 21434 . 21442) (symbol "constexpr" 21415 . 21433) (STATIC 21408 . 21414) (semantic-list 21387 . 21400) (symbol "noexcept" 21365 . 21386) (semantic-list 21362 . 21364) (symbol 21359 . 21362) (CHAR 21347 . 21351) (UNSIGNED 21338 . 21346) (symbol "constexpr" 21319 . 21337) (STATIC 21312 . 21318) (symbol "constexpr" 21254 . 21276) (STATIC 21247 . 21253) (symbol "constexpr" 21039 . 21061) (STATIC 21032 . 21038) (symbol "constexpr" 20973 . 20995) (STATIC 20966 . 20972) (symbol "constexpr" 20898 . 20920) (STATIC 20891 . 20897) (symbol "constexpr" 20837 . 20859) (STATIC 20830 . 20836) (symbol "constexpr" 20777 . 20799) (STATIC 20770 . 20776) (symbol "constexpr" 20717 . 20739) (STATIC 20710 . 20716) (semantic-list 20663 . 20702) (symbol "noexcept" 20635 . 20656) (semantic-list 20632 . 20634) (symbol 20622 . 20632) (CHAR 20610 . 20614) (SIGNED 20603 . 20609) (symbol "constexpr" 20584 . 20602) (STATIC 20577 . 20583) (semantic-list 20530 . 20569) (symbol "noexcept" 20502 . 20523) (semantic-list 20499 . 20501) (symbol 20486 . 20499) (CHAR 20474 . 20478) (SIGNED 20467 . 20473) (symbol "constexpr" 20448 . 20466) (STATIC 20441 . 20447) (semantic-list 20394 . 20433) (symbol "noexcept" 20372 . 20393) (semantic-list 20369 . 20371) (symbol 20360 . 20369) (CHAR 20348 . 20352) (SIGNED 20341 . 20347) (symbol "constexpr" 20322 . 20340) (STATIC 20315 . 20321) (semantic-list 20268 . 20307) (symbol "noexcept" 20246 . 20267) (semantic-list 20243 . 20245) (symbol 20235 . 20243) (CHAR 20223 . 20227) (SIGNED 20216 . 20222) (symbol "constexpr" 20197 . 20215) (STATIC 20190 . 20196) (symbol "constexpr" 20130 . 20152) (STATIC 20123 . 20129) (symbol "constexpr" 20039 . 20061) (STATIC 20032 . 20038) (symbol "constexpr" 19971 . 19993) (STATIC 19964 . 19970) (symbol "constexpr" 19907 . 19929) (STATIC 19900 . 19906) (symbol "constexpr" 19844 . 19866) (STATIC 19837 . 19843) (symbol "constexpr" 19783 . 19805) (STATIC 19776 . 19782) (symbol "constexpr" 19725 . 19747) (STATIC 19718 . 19724) (symbol "constexpr" 19665 . 19687) (STATIC 19658 . 19664) (symbol "constexpr" 19607 . 19629) (STATIC 19600 . 19606) (semantic-list 19579 . 19592) (symbol "noexcept" 19557 . 19578) (semantic-list 19554 . 19556) (symbol 19543 . 19554) (CHAR 19531 . 19535) (SIGNED 19524 . 19530) (symbol "constexpr" 19505 . 19523) (STATIC 19498 . 19504) (semantic-list 19477 . 19490) (symbol "noexcept" 19455 . 19476) (semantic-list 19452 . 19454) (symbol 19445 . 19452) (CHAR 19433 . 19437) (SIGNED 19426 . 19432) (symbol "constexpr" 19407 . 19425) (STATIC 19400 . 19406) (symbol "constexpr" 19355 . 19377) (STATIC 19348 . 19354) (symbol "constexpr" 19297 . 19319) (STATIC 19290 . 19296) (symbol "constexpr" 19237 . 19259) (STATIC 19230 . 19236) (symbol "constexpr" 19178 . 19200) (STATIC 19171 . 19177) (symbol 19126 . 19135) (STATIC 19119 . 19125) (symbol "constexpr" 19006 . 19028) (STATIC 18999 . 19005) (symbol "constexpr" 18925 . 18947) (STATIC 18918 . 18924) (semantic-list 18886 . 18903) (symbol 18877 . 18885) (semantic-list 18874 . 18876) (symbol 18868 . 18874) (CHAR 18856 . 18860) (SIGNED 18849 . 18855) (symbol 18839 . 18848) (STATIC 18832 . 18838) (semantic-list 18772 . 18797) (symbol "noexcept" 18750 . 18771) (semantic-list 18747 . 18749) (symbol 18744 . 18747) (CHAR 18732 . 18736) (SIGNED 18725 . 18731) (symbol "constexpr" 18706 . 18724) (STATIC 18699 . 18705) (semantic-list 18661 . 18691) (symbol "noexcept" 18639 . 18660) (semantic-list 18636 . 18638) (symbol 18633 . 18636) (CHAR 18621 . 18625) (SIGNED 18614 . 18620) (symbol "constexpr" 18595 . 18613) (STATIC 18588 . 18594) (symbol "constexpr" 18530 . 18552) (STATIC 18523 . 18529) (symbol "constexpr" 18319 . 18341) (STATIC 18312 . 18318) (symbol "constexpr" 18253 . 18275) (STATIC 18246 . 18252) (symbol "constexpr" 18178 . 18200) (STATIC 18171 . 18177) (punctuation 18152 . 18153) (punctuation 18150 . 18151) (symbol 18140 . 18149) (BOOL 18135 . 18139) (symbol "constexpr" 18112 . 18134) (STATIC 18105 . 18111) (symbol "constexpr" 18052 . 18074) (STATIC 18045 . 18051) (symbol "constexpr" 17992 . 18014) (STATIC 17985 . 17991) (semantic-list 17945 . 17977) (symbol "noexcept" 17923 . 17944) (semantic-list 17920 . 17922) (symbol 17910 . 17920) (CHAR 17898 . 17902) (symbol "constexpr" 17879 . 17897) (STATIC 17872 . 17878) (semantic-list 17846 . 17864) (symbol "noexcept" 17824 . 17845) (semantic-list 17821 . 17823) (symbol 17808 . 17821) (CHAR 17796 . 17800) (symbol "constexpr" 17777 . 17795) (STATIC 17770 . 17776) (semantic-list 17744 . 17762) (symbol "noexcept" 17722 . 17743) (semantic-list 17719 . 17721) (symbol 17710 . 17719) (CHAR 17698 . 17702) (symbol "constexpr" 17679 . 17697) (STATIC 17672 . 17678) (semantic-list 17646 . 17664) (symbol "noexcept" 17624 . 17645) (semantic-list 17621 . 17623) (symbol 17613 . 17621) (CHAR 17608 . 17612) (symbol "constexpr" 17582 . 17600) (STATIC 17575 . 17581) (symbol "constexpr" 17515 . 17537) (STATIC 17508 . 17514) (symbol "constexpr" 17424 . 17446) (STATIC 17417 . 17423) (symbol "constexpr" 17356 . 17378) (STATIC 17349 . 17355) (symbol "constexpr" 17292 . 17314) (STATIC 17285 . 17291) (symbol "constexpr" 17229 . 17251) (STATIC 17222 . 17228) (symbol "constexpr" 17168 . 17190) (STATIC 17161 . 17167) (symbol "constexpr" 17110 . 17132) (STATIC 17103 . 17109) (symbol "constexpr" 17050 . 17072) (STATIC 17043 . 17049) (symbol "constexpr" 16992 . 17014) (STATIC 16985 . 16991) (semantic-list 16964 . 16977) (symbol "noexcept" 16942 . 16963) (semantic-list 16939 . 16941) (symbol 16928 . 16939) (CHAR 16916 . 16920) (symbol "constexpr" 16897 . 16915) (STATIC 16890 . 16896) (semantic-list 16869 . 16882) (symbol "noexcept" 16847 . 16868) (semantic-list 16844 . 16846) (symbol 16837 . 16844) (CHAR 16825 . 16829) (symbol "constexpr" 16806 . 16824) (STATIC 16799 . 16805) (symbol "constexpr" 16754 . 16776) (STATIC 16747 . 16753) (symbol "constexpr" 16696 . 16718) (STATIC 16689 . 16695) (symbol "constexpr" 16636 . 16658) (STATIC 16629 . 16635) (symbol "constexpr" 16558 . 16580) (STATIC 16551 . 16557) (symbol 16506 . 16515) (STATIC 16499 . 16505) (symbol "constexpr" 16401 . 16423) (STATIC 16394 . 16400) (symbol "constexpr" 16327 . 16349) (STATIC 16320 . 16326) (semantic-list 16288 . 16305) (symbol 16279 . 16287) (semantic-list 16276 . 16278) (symbol 16270 . 16276) (CHAR 16258 . 16262) (symbol 16248 . 16257) (STATIC 16241 . 16247) (semantic-list 16175 . 16206) (symbol "noexcept" 16153 . 16174) (semantic-list 16150 . 16152) (symbol 16147 . 16150) (CHAR 16135 . 16139) (symbol "constexpr" 16116 . 16134) (STATIC 16109 . 16115) (semantic-list 16070 . 16101) (symbol "noexcept" 16048 . 16069) (semantic-list 16045 . 16047) (symbol 16042 . 16045) (CHAR 16030 . 16034) (symbol "constexpr" 16011 . 16029) (STATIC 16004 . 16010) (symbol "constexpr" 15946 . 15968) (STATIC 15939 . 15945) (symbol "constexpr" 15749 . 15771) (STATIC 15742 . 15748) (symbol "constexpr" 15683 . 15705) (STATIC 15676 . 15682) (symbol "constexpr" 15608 . 15630) (STATIC 15601 . 15607) (symbol "constexpr" 15384 . 15406) (STATIC 15377 . 15383) (symbol "constexpr" 15324 . 15346) (STATIC 15317 . 15323) (symbol "constexpr" 15264 . 15286) (STATIC 15257 . 15263) (semantic-list 15232 . 15249) (symbol "noexcept" 15210 . 15231) (semantic-list 15207 . 15209) (symbol 15197 . 15207) (BOOL 15185 . 15189) (symbol "constexpr" 15166 . 15184) (STATIC 15159 . 15165) (semantic-list 15134 . 15151) (symbol "noexcept" 15112 . 15133) (semantic-list 15109 . 15111) (symbol 15096 . 15109) (BOOL 15084 . 15088) (symbol "constexpr" 15065 . 15083) (STATIC 15058 . 15064) (semantic-list 15033 . 15050) (symbol "noexcept" 15011 . 15032) (semantic-list 15008 . 15010) (symbol 14999 . 15008) (BOOL 14987 . 14991) (symbol "constexpr" 14968 . 14986) (STATIC 14961 . 14967) (semantic-list 14936 . 14953) (symbol "noexcept" 14914 . 14935) (semantic-list 14911 . 14913) (symbol 14903 . 14911) (BOOL 14891 . 14895) (symbol "constexpr" 14872 . 14890) (STATIC 14865 . 14871) (symbol "constexpr" 14805 . 14827) (STATIC 14798 . 14804) (symbol "constexpr" 14714 . 14736) (STATIC 14707 . 14713) (symbol "constexpr" 14646 . 14668) (STATIC 14639 . 14645) (symbol "constexpr" 14582 . 14604) (STATIC 14575 . 14581) (symbol "constexpr" 14519 . 14541) (STATIC 14512 . 14518) (symbol "constexpr" 14458 . 14480) (STATIC 14451 . 14457) (symbol "constexpr" 14400 . 14422) (STATIC 14393 . 14399) (symbol "constexpr" 14340 . 14362) (STATIC 14333 . 14339) (symbol "constexpr" 14282 . 14304) (STATIC 14275 . 14281) (semantic-list 14250 . 14267) (symbol "noexcept" 14228 . 14249) (semantic-list 14225 . 14227) (symbol 14214 . 14225) (BOOL 14202 . 14206) (symbol "constexpr" 14183 . 14201) (STATIC 14176 . 14182) (semantic-list 14151 . 14168) (symbol "noexcept" 14129 . 14150) (semantic-list 14126 . 14128) (symbol 14119 . 14126) (BOOL 14107 . 14111) (symbol "constexpr" 14088 . 14106) (STATIC 14081 . 14087) (symbol "constexpr" 14036 . 14058) (STATIC 14029 . 14035) (symbol "constexpr" 13978 . 14000) (STATIC 13971 . 13977) (symbol "constexpr" 13918 . 13940) (STATIC 13911 . 13917) (symbol "constexpr" 13858 . 13880) (STATIC 13851 . 13857) (symbol 13806 . 13815) (STATIC 13799 . 13805) (symbol "constexpr" 13725 . 13747) (STATIC 13718 . 13724) (symbol "constexpr" 13673 . 13695) (STATIC 13666 . 13672) (semantic-list 13635 . 13652) (symbol 13626 . 13634) (semantic-list 13623 . 13625) (symbol 13617 . 13623) (BOOL 13606 . 13610) (symbol 13596 . 13605) (STATIC 13589 . 13595) (semantic-list 13538 . 13554) (symbol "noexcept" 13516 . 13537) (semantic-list 13513 . 13515) (symbol 13510 . 13513) (BOOL 13498 . 13502) (symbol "constexpr" 13479 . 13497) (STATIC 13472 . 13478) (semantic-list 13447 . 13464) (symbol "noexcept" 13425 . 13446) (semantic-list 13422 . 13424) (symbol 13419 . 13422) (BOOL 13407 . 13411) (symbol "constexpr" 13388 . 13406) (STATIC 13381 . 13387) (symbol "constexpr" 13323 . 13345) (STATIC 13316 . 13322) (semantic-list 12719 . 12736) (symbol "noexcept" 12697 . 12718) (semantic-list 12694 . 12696) (symbol 12684 . 12694) (symbol 12674 . 12677) (symbol "constexpr" 12655 . 12673) (STATIC 12648 . 12654) (semantic-list 12474 . 12491) (symbol "noexcept" 12452 . 12473) (semantic-list 12449 . 12451) (symbol 12436 . 12449) (symbol 12426 . 12429) (symbol "constexpr" 12407 . 12425) (STATIC 12400 . 12406) (semantic-list 12286 . 12303) (symbol "noexcept" 12264 . 12285) (semantic-list 12261 . 12263) (symbol 12252 . 12261) (symbol 12242 . 12245) (symbol "constexpr" 12223 . 12241) (STATIC 12216 . 12222) (semantic-list 12110 . 12127) (symbol "noexcept" 12088 . 12109) (semantic-list 12085 . 12087) (symbol 12077 . 12085) (symbol 12067 . 12070) (symbol "constexpr" 12048 . 12066) (STATIC 12041 . 12047) (semantic-list 11941 . 11958) (symbol "noexcept" 11919 . 11940) (semantic-list 11916 . 11918) (symbol 11905 . 11916) (symbol 11895 . 11898) (symbol "constexpr" 11876 . 11894) (STATIC 11869 . 11875) (semantic-list 11778 . 11795) (symbol "noexcept" 11756 . 11777) (semantic-list 11753 . 11755) (symbol 11746 . 11753) (symbol 11736 . 11739) (symbol "constexpr" 11717 . 11735) (STATIC 11710 . 11716) (semantic-list 11550 . 11567) (symbol 11541 . 11549) (semantic-list 11538 . 11540) (symbol 11532 . 11538) (symbol 11522 . 11525) (symbol 11512 . 11521) (STATIC 11505 . 11511) (semantic-list 11356 . 11373) (symbol "noexcept" 11334 . 11355) (semantic-list 11331 . 11333) (symbol 11328 . 11331) (symbol 11318 . 11321) (symbol "constexpr" 11299 . 11317) (STATIC 11292 . 11298) (semantic-list 11227 . 11244) (symbol "noexcept" 11205 . 11226) (semantic-list 11202 . 11204) (symbol 11199 . 11202) (symbol 11189 . 11192) (symbol "constexpr" 11170 . 11188) (STATIC 11163 . 11169) (symbol "constexpr" 10416 . 10438) (STATIC 10409 . 10415) (symbol "constexpr" 10198 . 10220) (STATIC 10191 . 10197) (symbol "constexpr" 10070 . 10092) (STATIC 10063 . 10069) (symbol "constexpr" 9952 . 9974) (STATIC 9945 . 9951) (symbol "constexpr" 9466 . 9488) (STATIC 9459 . 9465) (symbol "constexpr" 9240 . 9262) (STATIC 9233 . 9239) (symbol "constexpr" 9030 . 9052) (STATIC 9023 . 9029) (symbol "constexpr" 8838 . 8860) (STATIC 8831 . 8837) (symbol "constexpr" 8709 . 8731) (STATIC 8702 . 8708) (symbol "constexpr" 8565 . 8587) (STATIC 8558 . 8564) (symbol "constexpr" 8410 . 8432) (STATIC 8403 . 8409) (symbol "constexpr" 8278 . 8300) (STATIC 8271 . 8277) (symbol "constexpr" 8081 . 8103) (STATIC 8074 . 8080) (symbol "constexpr" 7859 . 7881) (STATIC 7852 . 7858) (symbol "constexpr" 7672 . 7694) (STATIC 7665 . 7671) (symbol "constexpr" 7470 . 7492) (STATIC 7463 . 7469) (symbol "constexpr" 7266 . 7288) (STATIC 7259 . 7265) (symbol "constexpr" 6995 . 7017) (STATIC 6988 . 6994) (symbol "constexpr" 6895 . 6917) (STATIC 6888 . 6894) (symbol 6804 . 6813) (STATIC 6797 . 6803) (symbol "constexpr" 6611 . 6633) (STATIC 6604 . 6610) (symbol "constexpr" 6480 . 6502) (STATIC 6473 . 6479) (symbol "constexpr" 6204 . 6226) (STATIC 6197 . 6203) (symbol 1406 . 1419) (symbol 1402 . 1405) (symbol 1395 . 1401) (punctuation 1394 . 1395))
    :lexical-table 
        '(("_GLIBCXX_NUMERIC_LIMITS" . ((number "1" 1391 . 1392)))
          ("__glibcxx_integral_traps" . ((symbol "true" 2867 . 2871)))
          )

    )
   (semanticdb-table "memory"
    :file "memory"
    :fsize 2874
    :lastmodtime '(21162 3473 0 0)
    )
   (semanticdb-table "cstdlib"
    :major-mode 'c++-mode
    :tags 
        '( ("bits/c++config.h" include (:system-flag t) nil [1570 1597])
            ("_GLIBCXX_CSTDLIB" variable (:constant-flag t) nil [1632 1648])
            ("stdlib.h" include (:system-flag t) nil [2379 2398])
            ("std" type
               (:members 
                  ( ("div_t" variable (:type "int") (reparse-symbol namespacesubparts) [3135 3141])
                    ("ldiv_t" variable (:type "int") (reparse-symbol namespacesubparts) [3152 3159])
                    ("abort" variable (:type "int") (reparse-symbol namespacesubparts) [3171 3177])
                    ("abs" variable (:type "int") (reparse-symbol namespacesubparts) [3188 3192])
                    ("atexit" variable (:type "int") (reparse-symbol namespacesubparts) [3203 3210])
                    ("at_quick_exit" variable (:type "int") (reparse-symbol namespacesubparts) [3284 3298])
                    ("atof" variable (:type "int") (reparse-symbol namespacesubparts) [3324 3329])
                    ("atoi" variable (:type "int") (reparse-symbol namespacesubparts) [3340 3345])
                    ("atol" variable (:type "int") (reparse-symbol namespacesubparts) [3356 3361])
                    ("bsearch" variable (:type "int") (reparse-symbol namespacesubparts) [3372 3380])
                    ("calloc" variable (:type "int") (reparse-symbol namespacesubparts) [3391 3398])
                    ("div" variable (:type "int") (reparse-symbol namespacesubparts) [3409 3413])
                    ("exit" variable (:type "int") (reparse-symbol namespacesubparts) [3424 3429])
                    ("free" variable (:type "int") (reparse-symbol namespacesubparts) [3440 3445])
                    ("getenv" variable (:type "int") (reparse-symbol namespacesubparts) [3456 3463])
                    ("labs" variable (:type "int") (reparse-symbol namespacesubparts) [3474 3479])
                    ("ldiv" variable (:type "int") (reparse-symbol namespacesubparts) [3490 3495])
                    ("malloc" variable (:type "int") (reparse-symbol namespacesubparts) [3506 3513])
                    ("mblen" variable (:type "int") (reparse-symbol namespacesubparts) [3555 3561])
                    ("mbstowcs" variable (:type "int") (reparse-symbol namespacesubparts) [3572 3581])
                    ("mbtowc" variable (:type "int") (reparse-symbol namespacesubparts) [3592 3599])
                    ("qsort" variable (:type "int") (reparse-symbol namespacesubparts) [3644 3650])
                    ("quick_exit" variable (:type "int") (reparse-symbol namespacesubparts) [3721 3732])
                    ("rand" variable (:type "int") (reparse-symbol namespacesubparts) [3758 3763])
                    ("realloc" variable (:type "int") (reparse-symbol namespacesubparts) [3774 3782])
                    ("srand" variable (:type "int") (reparse-symbol namespacesubparts) [3793 3799])
                    ("strtod" variable (:type "int") (reparse-symbol namespacesubparts) [3810 3817])
                    ("strtol" variable (:type "int") (reparse-symbol namespacesubparts) [3828 3835])
                    ("strtoul" variable (:type "int") (reparse-symbol namespacesubparts) [3846 3854])
                    ("system" variable (:type "int") (reparse-symbol namespacesubparts) [3865 3872])
                    ("wcstombs" variable (:type "int") (reparse-symbol namespacesubparts) [3911 3920])
                    ("wctomb" variable (:type "int") (reparse-symbol namespacesubparts) [3931 3938])
                    ("abs" function
                       (:typemodifiers ("inline")
                        :arguments 
                          ( ("__i" variable (:type "long") (reparse-symbol arg-sub-list) [4032 4041]))                          
                        :type "long")
                        (reparse-symbol namespacesubparts) [4014 4073])
                    ("div" function
                       (:typemodifiers ("inline")
                        :arguments 
                          ( ("__i" variable (:type "long") (reparse-symbol arg-sub-list) [4097 4106])
                            ("__j" variable (:type "long") (reparse-symbol arg-sub-list) [4107 4116]))                          
                        :type ("ldiv_t" type (:type "class") nil nil))
                        (reparse-symbol namespacesubparts) [4077 4143])
                    ("abs" function
                       (:typemodifiers ("inline")
                        :arguments 
                          ( ("__x" variable (:type "long long") (reparse-symbol arg-sub-list) [4207 4221]))                          
                        :type "long long")
                        (reparse-symbol namespacesubparts) [4184 4255]))                  
                :type "namespace")
                nil [3046 4438])
            ("__gnu_cxx" type
               (:members 
                  ( ("lldiv_t" variable (:type "int") (reparse-symbol namespacesubparts) [4723 4731])
                    ("_Exit" variable (:type "int") (reparse-symbol namespacesubparts) [4900 4906])
                    ("llabs" variable (:type "int") (reparse-symbol namespacesubparts) [4965 4971])
                    ("div" function
                       (:typemodifiers ("inline")
                        :arguments 
                          ( ("__n" variable (:type "long long") (reparse-symbol arg-sub-list) [4996 5010])
                            ("__d" variable (:type "long long") (reparse-symbol arg-sub-list) [5011 5025]))                          
                        :type ("lldiv_t" type (:type "class") nil nil))
                        (reparse-symbol namespacesubparts) [4975 5099])
                    ("lldiv" variable (:type "int") (reparse-symbol namespacesubparts) [5111 5117])
                    ("atoll" variable (:type "int") (reparse-symbol namespacesubparts) [5529 5535])
                    ("strtoll" variable (:type "int") (reparse-symbol namespacesubparts) [5546 5554])
                    ("strtoull" variable (:type "int") (reparse-symbol namespacesubparts) [5565 5574])
                    ("strtof" variable (:type "int") (reparse-symbol namespacesubparts) [5592 5599])
                    ("strtold" variable (:type "int") (reparse-symbol namespacesubparts) [5610 5618]))                  
                :type "namespace")
                nil [4588 5652])
            ("std" type
               (:members 
                  ( ("__gnu_cxx::lldiv_t" variable (:type "int") (reparse-symbol namespacesubparts) [5743 5762])
                    ("__gnu_cxx::_Exit" variable (:type "int") (reparse-symbol namespacesubparts) [5780 5797])
                    ("__gnu_cxx::llabs" variable (:type "int") (reparse-symbol namespacesubparts) [5848 5865])
                    ("__gnu_cxx::div" variable (:type "int") (reparse-symbol namespacesubparts) [5876 5891])
                    ("__gnu_cxx::lldiv" variable (:type "int") (reparse-symbol namespacesubparts) [5902 5919])
                    ("__gnu_cxx::atoll" variable (:type "int") (reparse-symbol namespacesubparts) [5937 5954])
                    ("__gnu_cxx::strtof" variable (:type "int") (reparse-symbol namespacesubparts) [5965 5983])
                    ("__gnu_cxx::strtoll" variable (:type "int") (reparse-symbol namespacesubparts) [5994 6013])
                    ("__gnu_cxx::strtoull" variable (:type "int") (reparse-symbol namespacesubparts) [6024 6044])
                    ("__gnu_cxx::strtold" variable (:type "int") (reparse-symbol namespacesubparts) [6055 6074]))                  
                :type "namespace")
                nil [5677 6076]))          
    :file "cstdlib"
    :pointmax 6158
    :fsize 6157
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((punctuation 6054 . 6055) (punctuation 6053 . 6054) (USING 6047 . 6052) (punctuation 6023 . 6024) (punctuation 6022 . 6023) (USING 6016 . 6021) (punctuation 5993 . 5994) (punctuation 5992 . 5993) (USING 5986 . 5991) (punctuation 5964 . 5965) (punctuation 5963 . 5964) (USING 5957 . 5962) (punctuation 5936 . 5937) (punctuation 5935 . 5936) (USING 5929 . 5934) (punctuation 5901 . 5902) (punctuation 5900 . 5901) (USING 5894 . 5899) (punctuation 5875 . 5876) (punctuation 5874 . 5875) (USING 5868 . 5873) (punctuation 5847 . 5848) (punctuation 5846 . 5847) (USING 5840 . 5845) (punctuation 5779 . 5780) (punctuation 5778 . 5779) (USING 5772 . 5777) (punctuation 5742 . 5743) (punctuation 5741 . 5742) (USING 5735 . 5740) (symbol 5642 . 5650) (punctuation 5609 . 5610) (punctuation 5608 . 5609) (USING 5602 . 5607) (punctuation 5591 . 5592) (punctuation 5590 . 5591) (USING 5584 . 5589) (punctuation 5564 . 5565) (punctuation 5563 . 5564) (USING 5557 . 5562) (punctuation 5545 . 5546) (punctuation 5544 . 5545) (USING 5538 . 5543) (punctuation 5528 . 5529) (punctuation 5527 . 5528) (USING 5521 . 5526) (punctuation 5110 . 5111) (punctuation 5109 . 5110) (USING 5103 . 5108) (punctuation 4964 . 4965) (punctuation 4963 . 4964) (USING 4957 . 4962) (punctuation 4899 . 4900) (punctuation 4898 . 4899) (USING 4892 . 4897) (punctuation 4722 . 4723) (punctuation 4721 . 4722) (USING 4715 . 4720) (symbol 4428 . 4436) (punctuation 3930 . 3931) (punctuation 3929 . 3930) (USING 3923 . 3928) (punctuation 3910 . 3911) (punctuation 3909 . 3910) (USING 3903 . 3908) (punctuation 3864 . 3865) (punctuation 3863 . 3864) (USING 3857 . 3862) (punctuation 3845 . 3846) (punctuation 3844 . 3845) (USING 3838 . 3843) (punctuation 3827 . 3828) (punctuation 3826 . 3827) (USING 3820 . 3825) (punctuation 3809 . 3810) (punctuation 3808 . 3809) (USING 3802 . 3807) (punctuation 3792 . 3793) (punctuation 3791 . 3792) (USING 3785 . 3790) (punctuation 3773 . 3774) (punctuation 3772 . 3773) (USING 3766 . 3771) (punctuation 3757 . 3758) (punctuation 3756 . 3757) (USING 3750 . 3755) (punctuation 3720 . 3721) (punctuation 3719 . 3720) (USING 3713 . 3718) (punctuation 3643 . 3644) (punctuation 3642 . 3643) (USING 3636 . 3641) (punctuation 3591 . 3592) (punctuation 3590 . 3591) (USING 3584 . 3589) (punctuation 3571 . 3572) (punctuation 3570 . 3571) (USING 3564 . 3569) (punctuation 3554 . 3555) (punctuation 3553 . 3554) (USING 3547 . 3552) (punctuation 3505 . 3506) (punctuation 3504 . 3505) (USING 3498 . 3503) (punctuation 3489 . 3490) (punctuation 3488 . 3489) (USING 3482 . 3487) (punctuation 3473 . 3474) (punctuation 3472 . 3473) (USING 3466 . 3471) (punctuation 3455 . 3456) (punctuation 3454 . 3455) (USING 3448 . 3453) (punctuation 3439 . 3440) (punctuation 3438 . 3439) (USING 3432 . 3437) (punctuation 3423 . 3424) (punctuation 3422 . 3423) (USING 3416 . 3421) (punctuation 3408 . 3409) (punctuation 3407 . 3408) (USING 3401 . 3406) (punctuation 3390 . 3391) (punctuation 3389 . 3390) (USING 3383 . 3388) (punctuation 3371 . 3372) (punctuation 3370 . 3371) (USING 3364 . 3369) (punctuation 3355 . 3356) (punctuation 3354 . 3355) (USING 3348 . 3353) (punctuation 3339 . 3340) (punctuation 3338 . 3339) (USING 3332 . 3337) (punctuation 3323 . 3324) (punctuation 3322 . 3323) (USING 3316 . 3321) (punctuation 3283 . 3284) (punctuation 3282 . 3283) (USING 3276 . 3281) (punctuation 3202 . 3203) (punctuation 3201 . 3202) (USING 3195 . 3200) (punctuation 3187 . 3188) (punctuation 3186 . 3187) (USING 3180 . 3185) (punctuation 3170 . 3171) (punctuation 3169 . 3170) (USING 3163 . 3168) (punctuation 3151 . 3152) (punctuation 3150 . 3151) (USING 3144 . 3149) (punctuation 3134 . 3135) (punctuation 3133 . 3134) (USING 3127 . 3132) (symbol 1555 . 1568) (symbol 1551 . 1554) (symbol 1544 . 1550) (punctuation 1543 . 1544))
    :lexical-table 
        '(("_GLIBCXX_CSTDLIB" . ((number "1" 1649 . 1650)))
          )

    )
   (semanticdb-table "iostream"
    :file "iostream"
    :fsize 2689
    :lastmodtime '(21162 3473 0 0)
    )
   (semanticdb-table "climits"
    :major-mode 'c++-mode
    :tags 
        '( ("limits.h" include (:system-flag t) nil [1597 1616])
            ("_GLIBCXX_CLIMITS" variable (:constant-flag t) nil [1651 1667])
            ("LLONG_MIN" variable (:constant-flag t) nil [1697 1706])
            ("LLONG_MAX" variable (:constant-flag t) nil [1766 1775])
            ("ULLONG_MAX" variable (:constant-flag t) nil [1829 1839]))          
    :file "climits"
    :pointmax 1886
    :fsize 1885
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 1582 . 1595) (symbol 1578 . 1581) (symbol 1571 . 1577) (punctuation 1570 . 1571))
    :lexical-table 
        '(("LLONG_MAX" . ((symbol "__LONG_LONG_MAX__" 1776 . 1793)))
          ("LLONG_MIN" . ((semantic-list "(-__LONG_LONG_MAX__ - 1)" 1707 . 1731)))
          ("_GLIBCXX_CLIMITS" . ((number "1" 1668 . 1669)))
          ("ULLONG_MAX" . ((semantic-list "(__LONG_LONG_MAX__ * 2ULL + 1)" 1840 . 1870)))
          )

    )
   (semanticdb-table "cmath"
    :file "cmath"
    :fsize 42445
    :lastmodtime '(21162 3473 0 0)
    )
   (semanticdb-table "cfloat"
    :major-mode 'c++-mode
    :tags 
        '( ("float.h" include (:system-flag t) nil [1595 1613])
            ("_GLIBCXX_CFLOAT" variable (:constant-flag t) nil [1647 1662])
            ("DECIMAL_DIG" variable (:constant-flag t) nil [1727 1738])
            ("FLT_EVAL_METHOD" variable (:constant-flag t) nil [1802 1817]))          
    :file "cfloat"
    :pointmax 1862
    :fsize 1861
    :lastmodtime '(21162 3473 0 0)
    :unmatched-syntax '((symbol 1580 . 1593) (symbol 1576 . 1579) (symbol 1569 . 1575) (punctuation 1568 . 1569))
    :lexical-table 
        '(("_GLIBCXX_CFLOAT" . ((number "1" 1663 . 1664)))
          ("FLT_EVAL_METHOD" . ((symbol "__FLT_EVAL_METHOD__" 1818 . 1837)))
          ("DECIMAL_DIG" . ((symbol "__DECIMAL_DIG__" 1739 . 1754)))
          )

    )
   )
  :file "!usr!include!c++!4.8.2!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
