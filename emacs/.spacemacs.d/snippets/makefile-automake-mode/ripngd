;; Object progmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "progmodes/"
  :tables
  (list
    (semanticdb-table "cc-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [3171 3246])
            ("let" code nil nil [3270 3485])
            ("cc-require" code nil nil [3488 3509])
            ("cc-require" code nil nil [3510 3531])
            ("cc-require-when-compile" code nil nil [3532 3567])
            ("cc-require" code nil nil [3568 3591])
            ("cc-require" code nil nil [3592 3615])
            ("cc-require" code nil nil [3616 3637])
            ("cc-require" code nil nil [3638 3660])
            ("cc-require" code nil nil [3661 3683])
            ("cc-require" code nil nil [3684 3706])
            ("cc-bytecomp-defvar" code nil nil [3733 3785])
            ("cc-bytecomp-defun" code nil nil [3794 3828])
            ("cc-bytecomp-defvar" code nil nil [3922 3961])
            ("cc-bytecomp-defvar" code nil nil [3962 4011])
            ("cc-external-require" code nil nil [4137 4168])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4263 4352])
            ("cc-fonts" include nil nil [4544 4563])
            ("c-leave-cc-mode-mode" function nil nil [5577 5641])
            ("c-init-language-vars-for" function (:arguments ("mode")) nil [5643 6432])
            ("c-initialize-cc-mode" function (:arguments ("new-style-init")) nil [6449 7937])
            ("c-mode-base-map" variable nil nil [7963 8038])
            ("c-make-inherited-keymap" function nil nil [8040 8623])
            ("c-define-abbrev-table" function (:arguments ("name" "defs" "doc")) nil [8625 9431])
            ("put" code nil nil [9432 9484])
            ("c-bind-special-erase-keys" function nil nil [9486 10050])
            ("if" code nil nil [10052 16617])
            ("cc-bytecomp-defvar" code nil nil [16694 16728])
            ("c-mode-menu" function (:arguments ("modestr")) nil [16730 17094])
            ("defalias" code nil nil [17353 17527])
            ("c-unfind-enclosing-token" function (:arguments ("pos")) nil [18037 18523])
            ("c-unfind-coalesced-tokens" function (:arguments ("beg" "end")) nil [18525 19330])
            ("c-maybe-stale-found-type" variable nil nil [20104 20141])
            ("make-variable-buffer-local" code nil nil [20142 20196])
            ("c-basic-common-init" function (:arguments ("mode" "default-style")) nil [20198 26297])
            ("c-setup-doc-comment-style" function nil nil [26390 26678])
            ("c-new-BEG" variable nil nil [26929 26949])
            ("make-variable-buffer-local" code nil nil [26950 26989])
            ("c-new-END" variable nil nil [26990 27010])
            ("make-variable-buffer-local" code nil nil [27011 27050])
            ("c-common-init" function (:arguments ("mode")) nil [27052 28739])
            ("c-count-cfss" function (:arguments ("lv-alist")) nil [28741 29106])
            ("c-before-hack-hook" function nil nil [29108 30508])
            ("c-remove-any-local-eval-or-mode-variables" function nil nil [30510 32202])
            ("c-postprocess-file-styles" function nil nil [32204 34096])
            ("if" code nil nil [34098 34281])
            ("c-run-mode-hooks" function (:arguments ("hooks")) nil [34283 34595])
            ("c-old-BOM" variable nil nil [34885 34905])
            ("make-variable-buffer-local" code nil nil [34906 34945])
            ("c-old-EOM" variable nil nil [34946 34966])
            ("make-variable-buffer-local" code nil nil [34967 35006])
            ("c-extend-region-for-CPP" function (:arguments ("beg" "end")) nil [35008 35820])
            ("c-extend-font-lock-region-for-macros" function (:arguments ("begg" "endd" "old-len")) nil [35822 36948])
            ("c-neutralize-CPP-line" function (:arguments ("beg" "end")) nil [36950 37832])
            ("c-neutralize-syntax-in-and-mark-CPP" function (:arguments ("begg" "endd" "old-len")) nil [37834 41026])
            ("c-before-change" function (:arguments ("beg" "end")) nil [41028 44534])
            ("c-in-after-change-fontification" variable nil nil [44536 44580])
            ("make-variable-buffer-local" code nil nil [44581 44642])
            ("c-after-change" function (:arguments ("beg" "end" "old-len")) nil [44740 47069])
            ("c-set-fl-decl-start" function (:arguments ("pos")) nil [47071 48666])
            ("c-change-set-fl-decl-start" function (:arguments ("_beg" "_end" "_old-len")) nil [48692 49087])
            ("c-context-set-fl-decl-start" function (:arguments ("beg" "end")) nil [49089 49365])
            ("c-font-lock-fontify-region" function (:arguments ("beg" "end" "verbose")) nil [49367 50493])
            ("c-after-font-lock-init" function nil nil [50495 50778])
            ("c-font-lock-init" function nil nil [50780 51791])
            ("c-extend-after-change-region" function (:arguments ("_beg" "_end" "_old-len")) nil [51793 52368])
            ("c-electric-indent-mode-hook" function nil nil [52434 52865])
            ("c-electric-indent-local-mode-hook" function nil nil [52867 53157])
            ("c-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c))) nil [53179 53302])
            ("c-define-abbrev-table" code nil nil [53304 53504])
            ("c-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [53506 53708])
            ("easy-menu-define" code nil nil [53711 53811])
            ("define-derived-mode" code nil nil [55399 56414])
            ("c++-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c++))) nil [56438 56567])
            ("c-define-abbrev-table" code nil nil [56569 56828])
            ("c++-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) (define-key map ":" (quote c-scope-operator)) (define-key map "<" (quote c-electric-lt-gt)) (define-key map ">" (quote c-electric-lt-gt)) map)) nil [56830 57187])
            ("easy-menu-define" code nil nil [57189 57299])
            ("define-derived-mode" code nil nil [57316 58346])
            ("objc-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table objc))) nil [58378 58510])
            ("c-define-abbrev-table" code nil nil [58512 58718])
            ("objc-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [58720 58937])
            ("easy-menu-define" code nil nil [58939 59054])
            ("define-derived-mode" code nil nil [59143 60190])
            ("java-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table java))) nil [60215 60347])
            ("c-define-abbrev-table" code nil nil [60349 60669])
            ("java-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [60671 60833])
            ("c-Java-defun-prompt-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(\\(\\(public\\|protected\\|private\\|const\\|abstract\\|synchronized\\|final\\|static\\|threadsafe\\|transient\\|native\\|volatile\\)\\s-+\\)*\\(\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*[][_$.a-zA-Z0-9]+\\|[[a-zA-Z]\\)\\s-*\\)\\s-+\\)\\)?\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*\\s-+\\)\\s-*\\)?\\([_a-zA-Z][^][ 	:;.,{}()=]*\\|\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)\\)\\s-*\\(([^);{}]*)\\)?\\([] 	]*\\)\\(\\s-*\\<throws\\>\\s-*\\(\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)[, 	
]*\\)+\\)?\\s-*")
                nil [61090 61610])
            ("easy-menu-define" code nil nil [61612 61727])
            ("define-derived-mode" code nil nil [61819 62783])
            ("idl-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table idl))) nil [62824 62953])
            ("c-define-abbrev-table" code nil nil [62955 63054])
            ("idl-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [63056 63215])
            ("easy-menu-define" code nil nil [63217 63327])
            ("define-derived-mode" code nil nil [63417 64384])
            ("pike-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table pike))) nil [64409 64541])
            ("c-define-abbrev-table" code nil nil [64543 64749])
            ("pike-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [64751 64937])
            ("easy-menu-define" code nil nil [64939 65054])
            ("define-derived-mode" code nil nil [65254 66226])
            ("c-define-abbrev-table" code nil nil [66618 66822])
            ("awk-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "#" (quote self-insert-command)) (define-key map "/" (quote self-insert-command)) (define-key map "*" (quote self-insert-command)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "\341" (quote c-beginning-of-statement)) (define-key map "\345" (quote c-end-of-statement)) (define-key map "\201" (quote c-awk-beginning-of-defun)) (define-key map "\205" (quote c-awk-end-of-defun)) map)) nil [66824 67518])
            ("easy-menu-define" code nil nil [67520 67630])
            ("awk-mode-syntax-table" variable nil nil [67670 67700])
            ("declare-function" code nil nil [67701 67753])
            ("define-derived-mode" code nil nil [67770 68910])
            ("c-mode-help-address" variable
               (:constant-flag t
                :default-value "bug-cc-mode@gnu.org")
                nil [68932 69027])
            ("c-version" function (:user-visible-flag t) nil [69029 69198])
            ("define-obsolete-variable-alias" code nil nil [69200 69296])
            ("c-prepare-bug-report-hook" variable nil nil [69297 69335])
            ("reporter-prompt-for-summary-p" variable nil nil [69376 69414])
            ("reporter-dont-compact-list" variable nil nil [69415 69450])
            ("c-submit-bug-report" function (:user-visible-flag t) nil [69452 71449])
            ("cc-provide" code nil nil [71453 71474]))          
      :file "cc-mode.el.gz"
      :pointmax 71501
      :fsize 20395
      :lastmodtime '(21793 5616 0 0)
      :unmatched-syntax '((close-paren 3485 . 3486) (symbol 3250 . 3267) (open-paren 3249 . 3250) (close-paren 3246 . 3247) (symbol 3152 . 3168) (open-paren 3151 . 3152)))
    (semanticdb-table "cc-styles.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1204 1419])
            ("cc-require" code nil nil [1422 1443])
            ("cc-require" code nil nil [1444 1465])
            ("cc-require" code nil nil [1466 1488])
            ("cc-bytecomp-defvar" code nil nil [1645 1697])
            ("c-style-alist" variable (:default-value (quote (("gnu" (c-basic-offset . 2) (c-comment-only-line-offset 0 . 0) (c-hanging-braces-alist (substatement-open before after) (arglist-cont-nonempty)) (c-offsets-alist (statement-block-intro . +) (knr-argdecl-intro . 5) (substatement-open . +) (substatement-label . 0) (label . 0) (statement-case-open . +) (statement-cont . +) (arglist-intro . c-lineup-arglist-intro-after-paren) (arglist-close . c-lineup-arglist) (inline-open . 0) (brace-list-open . +) (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont)) (c-special-indent-hook . c-gnu-impose-minimum) (c-block-comment-prefix . "")) ("k&r" (c-basic-offset . 5) (c-comment-only-line-offset . 0) (c-offsets-alist (statement-block-intro . +) (knr-argdecl-intro . 0) (substatement-open . 0) (substatement-label . 0) (label . 0) (statement-cont . +))) ("bsd" (c-basic-offset . 8) (c-comment-only-line-offset . 0) (c-offsets-alist (statement-block-intro . +) (knr-argdecl-intro . +) (substatement-open . 0) (substatement-label . 0) (label . 0) (statement-cont . +) (inline-open . 0) (inexpr-class . 0))) ("stroustrup" (c-basic-offset . 4) (c-comment-only-line-offset . 0) (c-offsets-alist (statement-block-intro . +) (substatement-open . 0) (substatement-label . 0) (label . 0) (statement-cont . +))) ("whitesmith" (c-basic-offset . 4) (c-comment-only-line-offset . 0) (c-offsets-alist (defun-open . +) (defun-close . c-lineup-whitesmith-in-block) (defun-block-intro add c-lineup-whitesmith-in-block c-indent-multi-line-block) (class-open . +) (class-close . +) (inline-open . +) (inline-close . c-lineup-whitesmith-in-block) (knr-argdecl-intro . +) (block-open . 0) (block-close . c-lineup-whitesmith-in-block) (brace-list-open . +) (brace-list-close . c-lineup-whitesmith-in-block) (brace-list-intro add c-lineup-whitesmith-in-block c-indent-multi-line-block) (brace-list-entry add c-lineup-after-whitesmith-blocks c-indent-multi-line-block) (brace-entry-open add c-lineup-after-whitesmith-blocks c-indent-multi-line-block) (statement add c-lineup-after-whitesmith-blocks c-indent-multi-line-block) (statement-block-intro add c-lineup-whitesmith-in-block c-indent-multi-line-block) (substatement-open . +) (substatement-label . +) (label . 0) (arglist-intro add c-lineup-whitesmith-in-block c-indent-multi-line-block) (arglist-cont add c-lineup-after-whitesmith-blocks c-indent-multi-line-block) (arglist-cont-nonempty add c-lineup-whitesmith-in-block c-indent-multi-line-block) (arglist-close . c-lineup-whitesmith-in-block) (inclass . c-lineup-whitesmith-in-block) (extern-lang-open . +) (namespace-open . +) (module-open . +) (composition-open . +) (extern-lang-close . +) (namespace-close . +) (module-close . +) (composition-close . +) (inextern-lang . c-lineup-whitesmith-in-block) (innamespace . c-lineup-whitesmith-in-block) (inmodule . c-lineup-whitesmith-in-block) (incomposition . c-lineup-whitesmith-in-block) (inexpr-class . 0))) ("ellemtel" (c-basic-offset . 3) (c-comment-only-line-offset . 0) (c-hanging-braces-alist (substatement-open before after) (arglist-cont-nonempty)) (c-offsets-alist (topmost-intro . 0) (substatement . +) (substatement-open . 0) (case-label . +) (access-label . -) (inclass . +) (inline-open . 0))) ("linux" (c-basic-offset . 8) (c-comment-only-line-offset . 0) (c-hanging-braces-alist (brace-list-open) (brace-entry-open) (substatement-open after) (block-close . c-snug-do-while) (arglist-cont-nonempty)) (c-cleanup-list brace-else-brace) (c-offsets-alist (statement-block-intro . +) (knr-argdecl-intro . 0) (substatement-open . 0) (substatement-label . 0) (label . 0) (statement-cont . +))) ("python" (indent-tabs-mode . t) (fill-column . 78) (c-basic-offset . 8) (c-offsets-alist (substatement-open . 0) (inextern-lang . 0) (arglist-intro . +) (knr-argdecl-intro . +)) (c-hanging-braces-alist (brace-list-open) (brace-list-intro) (brace-list-close) (brace-entry-open) (substatement-open after) (block-close . c-snug-do-while) (arglist-cont-nonempty)) (c-block-comment-prefix . "")) ("java" (c-basic-offset . 4) (c-comment-only-line-offset 0 . 0) (c-offsets-alist (inline-open . 0) (topmost-intro-cont . +) (statement-block-intro . +) (knr-argdecl-intro . 5) (substatement-open . +) (substatement-label . +) (label . +) (statement-case-open . +) (statement-cont . +) (arglist-intro . c-lineup-arglist-intro-after-paren) (arglist-close . c-lineup-arglist) (access-label . 0) (inher-cont . c-lineup-java-inher) (func-decl-cont . c-lineup-java-throws))) ("awk" (c-basic-offset . 4) (c-comment-only-line-offset . 0) (c-hanging-braces-alist (defun-open after) (defun-close . c-snug-1line-defun-close) (substatement-open after) (block-close . c-snug-do-while) (arglist-cont-nonempty)) (c-hanging-semi&comma-criteria) (c-cleanup-list) (c-offsets-alist (statement-block-intro . +) (substatement-open . 0) (statement-cont . +)))))) nil [1709 9414])
            ("c-set-style-1" function (:arguments ("conscell" "dont-override")) nil [9454 10844])
            ("c-get-style-variables" function (:arguments ("style" "basestyles")) nil [10846 11536])
            ("c-set-style-history" variable nil nil [11538 11570])
            ("c-set-style" function
               (:user-visible-flag t
                :arguments ("stylename" "dont-override"))
                nil [11587 13884])
            ("c-add-style" function
               (:user-visible-flag t
                :arguments ("style" "description" "set-p"))
                nil [13901 14917])
            ("c-read-offset-history" variable nil nil [14921 14955])
            ("c-read-offset" function (:arguments ("langelem")) nil [14957 16126])
            ("c-set-offset" function
               (:user-visible-flag t
                :arguments ("symbol" "offset" "ignored"))
                nil [16143 17693])
            ("c-setup-paragraph-variables" function (:user-visible-flag t) nil [17697 20372])
            ("cc-bytecomp-defvar" code nil nil [20452 20494])
            ("cc-bytecomp-defvar" code nil nil [20495 20543])
            ("cc-bytecomp-defvar" code nil nil [20544 20597])
            ("c-setup-filladapt" function nil nil [20599 21887])
            ("c-initialize-builtin-style" function nil nil [21891 22889])
            ("c-make-styles-buffer-local" function (:arguments ("this-buf-only-p")) nil [22891 23893])
            ("cc-choose-style-for-mode" function (:arguments ("mode" "default-style")) nil [23895 24193])
            ("cc-provide" code nil nil [24198 24221]))          
      :file "cc-styles.el.gz"
      :pointmax 24250
      :fsize 7354
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1419 . 1420) (symbol 1184 . 1201) (open-paren 1183 . 1184)))
    (semanticdb-table "subword.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("subword-forward-function" variable (:default-value (quote subword-forward-internal)) nil [3689 3799])
            ("subword-backward-function" variable (:default-value (quote subword-backward-internal)) nil [3801 3914])
            ("subword-forward-regexp" variable (:default-value "\\W*\\(\\([[:upper:]]*\\(\\W\\)?\\)[[:lower:][:digit:]]*\\)") nil [3916 4058])
            ("subword-backward-regexp" variable (:default-value "\\(\\(\\W\\|[[:lower:][:digit:]]\\)\\([[:upper:]]+\\W*\\)\\|\\W\\w+\\)") nil [4060 4215])
            ("subword-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (cmd (quote (forward-word backward-word mark-word kill-word backward-kill-word transpose-words capitalize-word upcase-word downcase-word left-word right-word))) (let ((othercmd (let ((name (symbol-name cmd))) (string-match "\\([[:alpha:]-]+\\)-word[s]?" name) (intern (concat "subword-" (match-string 1 name)))))) (define-key map (vector (quote remap) cmd) othercmd))) map)) nil [4217 4830])
            ("define-minor-mode" code nil nil [4847 6010])
            ("define-obsolete-function-alias" code nil nil [6012 6081])
            ("define-global-minor-mode" code nil nil [6098 6210])
            ("subword-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6212 6675])
            ("put" code nil nil [6677 6710])
            ("subword-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6712 6980])
            ("subword-right" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6982 7206])
            ("subword-left" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7208 7430])
            ("subword-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7432 7947])
            ("put" code nil nil [7949 7983])
            ("subword-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7985 8241])
            ("subword-backward-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8243 8505])
            ("subword-transpose" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8507 8775])
            ("subword-downcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8777 9122])
            ("subword-upcase" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9124 9461])
            ("subword-capitalize" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9463 10298])
            ("superword-mode-map" variable (:default-value subword-mode-map) nil [10303 10395])
            ("define-minor-mode" code nil nil [10412 11078])
            ("define-global-minor-mode" code nil nil [11095 11213])
            ("subword-forward-internal" function nil nil [11245 11965])
            ("subword-backward-internal" function nil nil [11967 12462])
            ("subword" package nil nil [12467 12485])
            ("superword" package nil nil [12486 12506]))          
      :file "subword.el.gz"
      :pointmax 12533
      :fsize 3511
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cc-vars.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1213 1428])
            ("cc-require" code nil nil [1431 1452])
            ("cc-eval-when-compile" code nil nil [1454 1516])
            ("when" code nil nil [1759 2003])
            ("c-constant-symbol" function (:arguments ("sym" "len")) nil [2074 2647])
            ("define-widget" code nil nil [2650 3268])
            ("define-widget" code nil nil [3270 3449])
            ("define-widget" code nil nil [3451 4353])
            ("c-style-variables" variable (:default-value (quote (c-basic-offset c-comment-only-line-offset c-indent-comment-alist c-indent-comments-syntactically-p c-block-comment-prefix c-comment-prefix-regexp c-doc-comment-style c-cleanup-list c-hanging-braces-alist c-hanging-colons-alist c-hanging-semi&comma-criteria c-backslash-column c-backslash-max-column c-special-indent-hook c-label-minimum-indentation c-offsets-alist))) nil [4355 4804])
            ("c-fallback-style" variable nil nil [4806 4835])
            ("c-set-stylevar-fallback" function (:arguments ("name" "val")) nil [4837 4986])
            ("defcustom-c-stylevar" function (:arguments ("name" "val" "doc" "args")) nil [4988 6808])
            ("c-valid-offset" function (:arguments ("offset")) nil [6810 7556])
            ("c-strict-syntax-p" variable (:user-visible-flag t) nil [7581 8170])
            ("c-echo-syntactic-information-p" variable (:user-visible-flag t) nil [8172 8316])
            ("c-report-syntactic-errors" variable (:user-visible-flag t) nil [8318 8813])
            ("defcustom-c-stylevar" code nil nil [8815 9030])
            ("c-tab-always-indent" variable
               (:user-visible-flag t
                :default-value t)
                nil [9099 9909])
            ("c-insert-tab-function" variable
               (:user-visible-flag t
                :default-value (quote insert-tab))
                nil [9911 10318])
            ("c-syntactic-indentation" variable
               (:user-visible-flag t
                :default-value t)
                nil [10320 10902])
            ("make-variable-buffer-local" code nil nil [10903 10956])
            ("put" code nil nil [10957 11018])
            ("c-syntactic-indentation-in-macros" variable
               (:user-visible-flag t
                :default-value t)
                nil [11020 11920])
            ("put" code nil nil [11921 11992])
            ("c-defun-tactic" variable
               (:user-visible-flag t
                :default-value (quote go-outward))
                nil [11994 12618])
            ("defcustom-c-stylevar" code nil nil [12620 13469])
            ("defcustom-c-stylevar" code nil nil [13471 16372])
            ("defcustom-c-stylevar" code nil nil [16374 16824])
            ("make-obsolete-variable" code nil nil [16826 16914])
            ("defcustom-c-stylevar" code nil nil [17248 18064])
            ("defcustom-c-stylevar" code nil nil [18066 20579])
            ("defcustom-c-stylevar" code nil nil [20581 23471])
            ("c-ignore-auto-fill" variable
               (:user-visible-flag t
                :default-value (quote (string cpp code)))
                nil [23473 24269])
            ("defcustom-c-stylevar" code nil nil [24271 29062])
            ("defcustom-c-stylevar" code nil nil [29064 31914])
            ("c-max-one-liner-length" variable (:default-value 80) nil [31916 32088])
            ("defcustom-c-stylevar" code nil nil [32090 32894])
            ("defcustom-c-stylevar" code nil nil [32896 33702])
            ("defcustom-c-stylevar" code nil nil [33704 34119])
            ("defcustom-c-stylevar" code nil nil [34192 34573])
            ("c-auto-align-backslashes" variable
               (:user-visible-flag t
                :default-value t)
                nil [34575 34991])
            ("c-backspace-function" variable
               (:user-visible-flag t
                :default-value (quote backward-delete-char-untabify))
                nil [34993 35158])
            ("c-delete-function" variable
               (:user-visible-flag t
                :default-value (quote delete-char))
                nil [35160 35308])
            ("c-require-final-newline" variable
               (:user-visible-flag t
                :default-value (quote ((c-mode . t) (c++-mode . t) (objc-mode . t))))
                nil [35310 36950])
            ("c-electric-pound-behavior" variable (:user-visible-flag t) nil [36952 37141])
            ("c-special-indent-hook" variable (:user-visible-flag t) nil [37143 37389])
            ("defcustom-c-stylevar" code nil nil [37391 37779])
            ("c-progress-interval" variable
               (:user-visible-flag t
                :default-value 5)
                nil [37781 38075])
            ("c-objc-method-arg-min-delta-to-bracket" variable
               (:user-visible-flag t
                :default-value 2)
                nil [38077 38664])
            ("c-objc-method-arg-unfinished-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [38666 38883])
            ("c-objc-method-parameter-offset" variable
               (:user-visible-flag t
                :default-value 4)
                nil [38885 39145])
            ("c-default-style" variable
               (:user-visible-flag t
                :default-value (quote ((java-mode . "java") (awk-mode . "awk") (other . "gnu"))))
                nil [39147 40854])
            ("c-set-stylevar-fallback" code nil nil [41285 49606])
            ("c-offsets-alist" variable nil nil [49607 59661])
            ("c-inside-block-syms" variable
               (:constant-flag t
                :default-value (quote (defun-block-intro block-open block-close statement statement-cont statement-block-intro statement-case-intro statement-case-open substatement substatement-open substatement-label case-label label do-while-closure else-clause catch-clause inlambda annotation-var-cont)))
                nil [59758 60072])
            ("c-style-variables-are-local-p" variable
               (:user-visible-flag t
                :default-value t)
                nil [60074 61044])
            ("c-mode-hook" variable (:user-visible-flag t) nil [61046 61129])
            ("c++-mode-hook" variable (:user-visible-flag t) nil [61131 61218])
            ("objc-mode-hook" variable (:user-visible-flag t) nil [61220 61309])
            ("java-mode-hook" variable (:user-visible-flag t) nil [61311 61400])
            ("idl-mode-hook" variable (:user-visible-flag t) nil [61402 61489])
            ("pike-mode-hook" variable (:user-visible-flag t) nil [61491 61580])
            ("awk-mode-hook" variable (:user-visible-flag t) nil [61582 61669])
            ("c-mode-common-hook" variable (:user-visible-flag t) nil [61671 61797])
            ("c-initialization-hook" variable (:user-visible-flag t) nil [61799 62040])
            ("c-enable-xemacs-performance-kludge-p" variable (:user-visible-flag t) nil [62042 62576])
            ("c-old-style-variable-behavior" variable (:user-visible-flag t) nil [62578 63366])
            ("define-widget" code nil nil [63368 63552])
            ("c-make-font-lock-extra-types-blurb" function (:arguments ("mode1" "mode2" "example")) nil [63554 64620])
            ("c-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "bool" "complex" "imaginary" "FILE" "lconv" "tm" "va_list" "jmp_buf" "Lisp_Object"))) nil [64939 65661])
            ("c++-font-lock-extra-types" variable (:default-value (quote ("\\sw+_t" "FILE" "lconv" "tm" "va_list" "jmp_buf" "istream" "istreambuf" "ostream" "ostreambuf" "ifstream" "ofstream" "fstream" "strstream" "strstreambuf" "istrstream" "ostrstream" "ios" "string" "rope" "list" "slist" "deque" "vector" "bit_vector" "set" "multiset" "map" "multimap" "hash" "hash_set" "hash_multiset" "hash_map" "hash_multimap" "stack" "queue" "priority_queue" "type_info" "iterator" "const_iterator" "reverse_iterator" "const_reverse_iterator" "reference" "const_reference"))) nil [65663 66776])
            ("objc-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [66778 67204])
            ("java-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw"))) nil [67206 67621])
            ("idl-font-lock-extra-types" variable nil nil [67623 67765])
            ("pike-font-lock-extra-types" variable (:default-value (list (concat "[" c-upper "]\\sw*[" c-lower "]\\sw*"))) nil [67767 68193])
            ("c-macro-with-semi-re" variable nil nil [68267 68501])
            ("make-variable-buffer-local" code nil nil [68502 68552])
            ("c-macro-names-with-semicolon" variable (:default-value (quote ("Q_OBJECT" "Q_PROPERTY" "Q_DECLARE" "Q_ENUMS"))) nil [68554 69227])
            ("make-variable-buffer-local" code nil nil [69228 69286])
            ("c-make-macro-with-semi-re" function nil nil [69288 70028])
            ("c-file-style" variable nil nil [70030 70438])
            ("make-variable-buffer-local" code nil nil [70439 70481])
            ("c-file-offsets" variable nil nil [70556 70991])
            ("make-variable-buffer-local" code nil nil [70992 71036])
            ("cc-bytecomp-defvar" code nil nil [71414 71454])
            ("c-syntactic-context" variable nil nil [71455 71483])
            ("put" code nil nil [71484 72092])
            ("cc-bytecomp-defvar" code nil nil [72095 72135])
            ("c-syntactic-element" variable nil nil [72136 72164])
            ("put" code nil nil [72165 73013])
            ("c-indentation-style" variable nil nil [73015 73216])
            ("c-current-comment-prefix" variable nil nil [73218 73353])
            ("make-variable-buffer-local" code nil nil [73354 73408])
            ("c-string-par-start" variable (:default-value "\\|[ 	]*\\\\?$") nil [73597 73814])
            ("c-string-par-separate" variable (:default-value "[ 	]*\\\\?$") nil [73816 74039])
            ("c-sentence-end-with-esc-eol" variable (:default-value (concat "\\(\\(" (c-default-value-sentence-end) "\\)" "\\|" "[.?!][]\"')}]* ?\\\\\\($\\)[ 	
]*" "\\)")) nil [74041 74354])
            ("cc-provide" code nil nil [74358 74379]))          
      :file "cc-vars.el.gz"
      :pointmax 74406
      :fsize 20777
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 2647 . 2648) (symbol 2055 . 2071) (open-paren 2054 . 2055) (close-paren 1428 . 1429) (symbol 1193 . 1210) (open-paren 1192 . 1193)))
    (semanticdb-table "sh-script.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [8792 8809])
            ("cl-lib" include nil nil [8772 8789])
            ("skeleton" include nil nil [8750 8769])
            ("executable" include nil nil [8811 8832])
            ("comint-completion-at-point" function (:prototype-flag t) nil [8834 8881])
            ("comint-filename-completion" function (:prototype-flag t) nil [8882 8929])
            ("shell-command-completion" function (:prototype-flag t) nil [8930 8974])
            ("shell-environment-variable-completion" function (:prototype-flag t) nil [8975 9032])
            ("font-lock-comment-face" variable nil nil [9034 9065])
            ("font-lock-set-defaults" variable nil nil [9066 9097])
            ("font-lock-string-face" variable nil nil [9098 9128])
            ("sh" customgroup (:user-visible-flag t) nil [9131 9201])
            ("sh-script" customgroup (:user-visible-flag t) nil [9203 9353])
            ("sh-ancestor-alist" variable (:default-value (quote ((ash . sh) (bash . jsh) (bash2 . jsh) (dash . ash) (dtksh . ksh) (es . rc) (itcsh . tcsh) (jcsh . csh) (jsh . sh) (ksh . ksh88) (ksh88 . jsh) (oash . sh) (pdksh . ksh88) (posix . sh) (tcsh . csh) (wksh . ksh88) (wsh . sh) (zsh . ksh88) (rpm . sh)))) nil [9356 10517])
            ("sh-alias-alist" variable (:default-value (append (if (eq system-type (quote gnu/linux)) (quote ((csh . tcsh) (ksh . pdksh)))) (quote ((ksh . ksh88) (bash2 . bash) (sh5 . sh))))) nil [10520 10937])
            ("sh-shell-file" variable (:default-value (or (and (memq system-type (quote (ms-dos windows-nt))) (let* ((shell (getenv "SHELL")) (shell-base (and shell (file-name-nondirectory shell)))) (if (or (null shell) (member (downcase shell-base) (quote ("command.com" "cmd.exe" "4dos.com" "ndos.com" "cmdproxy.exe")))) "/bin/sh" (file-name-sans-extension (downcase shell))))) (getenv "SHELL") "/bin/sh")) nil [10940 11707])
            ("sh-shell-arg" variable (:default-value (quote ((bash) (csh . "-f") (pdksh) (ksh88) (rc . "-p") (wksh) (zsh . "-f")))) nil [11710 12416])
            ("sh-imenu-generic-expression" variable (:default-value (\` ((sh (nil "^\\s-*function\\s-+\\([[:alpha:]_][[:alnum:]_]*\\)\\s-*\\(?:()\\)?" 1) (nil "^\\s-*\\([[:alpha:]_][[:alnum:]_]*\\)\\s-*()" 1))))) nil [12418 13066])
            ("sh-current-defun-name" function nil nil [13068 13695])
            ("sh-shell-variables" variable nil nil [13697 13977])
            ("sh-shell-variables-initialized" variable nil nil [13979 14074])
            ("sh-canonicalize-shell" function (:arguments ("shell")) nil [14076 14388])
            ("sh-shell" variable (:default-value (sh-canonicalize-shell (file-name-nondirectory sh-shell-file))) nil [14390 14536])
            ("define-abbrev-table" code nil nil [14598 14644])
            ("sh-mode-syntax-table" function (:arguments ("table" "list")) nil [15621 15861])
            ("sh-mode-syntax-table" variable (:default-value (sh-mode-syntax-table nil 35 "<" 10 ">#" 34 "\"\"" 39 "\"'" 96 "\"`" 36 "'" 33 "_" 37 "_" 58 "_" 46 "_" 94 "_" 126 "_" 44 "_" 61 "." 59 "." 124 "." 38 "." 60 "." 62 ".")) nil [15863 16319])
            ("sh-mode-syntax-table-input" variable (:default-value (quote ((sh)))) nil [16321 16435])
            ("sh-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap))) (define-key map "(" (quote sh-function)) (define-key map "" (quote sh-while)) (define-key map "" (quote sh-until)) (define-key map "" (quote sh-tmp-file)) (define-key map "" (quote sh-select)) (define-key map "" (quote sh-repeat)) (define-key map "" (quote sh-while-getopts)) (define-key map "" (quote sh-indexed-loop)) (define-key map "	" (quote sh-if)) (define-key map "" (quote sh-for)) (define-key map "" (quote sh-case)) (define-key map "?" (quote sh-show-indent)) (define-key map "=" (quote sh-set-indent)) (define-key map "<" (quote sh-learn-line-indent)) (define-key map ">" (quote sh-learn-buffer-indent)) (define-key map "" (quote sh-backslash-region)) (define-key map "=" (quote sh-assignment)) (define-key map "+" (quote sh-add)) (define-key map "\230" (quote sh-execute-region)) (define-key map "" (quote executable-interpret)) (define-key map "" (quote sh-send-line-or-region-and-step)) (define-key map "" (quote sh-cd-here)) (define-key map "" (quote sh-show-shell)) (define-key map [remap delete-backward-char] (quote backward-delete-char-untabify)) (define-key map ":" (quote sh-set-shell)) (define-key map [remap backward-sentence] (quote sh-beginning-of-command)) (define-key map [remap forward-sentence] (quote sh-end-of-command)) (define-key map [menu-bar sh-script] (cons "Sh-Script" menu-map)) (define-key menu-map [sh-learn-buffer-indent] (quote (menu-item "Learn buffer indentation" sh-learn-buffer-indent :help "Learn how to indent the buffer the way it currently is."))) (define-key menu-map [sh-learn-line-indent] (quote (menu-item "Learn line indentation" sh-learn-line-indent :help "Learn how to indent a line as it currently is indented"))) (define-key menu-map [sh-show-indent] (quote (menu-item "Show indentation" sh-show-indent :help "Show the how the current line would be indented"))) (define-key menu-map [sh-set-indent] (quote (menu-item "Set indentation" sh-set-indent :help "Set the indentation for the current line"))) (define-key menu-map [sh-pair] (quote (menu-item "Insert braces and quotes in pairs" electric-pair-mode :button (:toggle bound-and-true-p electric-pair-mode) :help "Inserting a brace or quote automatically inserts the matching pair"))) (define-key menu-map [sh-s0] (quote ("--"))) (define-key menu-map [sh-function] (quote (menu-item "Function..." sh-function :help "Insert a function definition"))) (define-key menu-map [sh-add] (quote (menu-item "Addition..." sh-add :help "Insert an addition of VAR and prefix DELTA for Bourne (type) shell"))) (define-key menu-map [sh-until] (quote (menu-item "Until Loop" sh-until :help "Insert an until loop"))) (define-key menu-map [sh-repeat] (quote (menu-item "Repeat Loop" sh-repeat :help "Insert a repeat loop definition"))) (define-key menu-map [sh-while] (quote (menu-item "While Loop" sh-while :help "Insert a while loop"))) (define-key menu-map [sh-getopts] (quote (menu-item "Options Loop" sh-while-getopts :help "Insert a while getopts loop."))) (define-key menu-map [sh-indexed-loop] (quote (menu-item "Indexed Loop" sh-indexed-loop :help "Insert an indexed loop from 1 to n."))) (define-key menu-map [sh-select] (quote (menu-item "Select Statement" sh-select :help "Insert a select statement "))) (define-key menu-map [sh-if] (quote (menu-item "If Statement" sh-if :help "Insert an if statement"))) (define-key menu-map [sh-for] (quote (menu-item "For Loop" sh-for :help "Insert a for loop"))) (define-key menu-map [sh-case] (quote (menu-item "Case Statement" sh-case :help "Insert a case/switch statement"))) (define-key menu-map [sh-s1] (quote ("--"))) (define-key menu-map [sh-exec] (quote (menu-item "Execute region" sh-execute-region :help "Pass optional header and region to a subshell for noninteractive execution"))) (define-key menu-map [sh-exec-interpret] (quote (menu-item "Execute script..." executable-interpret :help "Run script with user-specified args, and collect output in a buffer"))) (define-key menu-map [sh-set-shell] (quote (menu-item "Set shell type..." sh-set-shell :help "Set this buffer's shell to SHELL (a string)"))) (define-key menu-map [sh-backslash-region] (quote (menu-item "Backslash region" sh-backslash-region :help "Insert, align, or delete end-of-line backslashes on the lines in the region."))) map)) nil [16437 21099])
            ("sh-skeleton-pair-default-alist" variable (:default-value (quote ((40 _ 41) (41) (91 32 _ 32 93) (93) (123 _ 125) (125)))) nil [21101 21292])
            ("sh-dynamic-complete-functions" variable (:default-value (quote (shell-environment-variable-completion shell-command-completion comint-filename-completion))) nil [21294 21533])
            ("sh-assignment-regexp" variable (:default-value (\` ((csh . "\\<\\([[:alnum:]_]+\\)\\(\\[.+\\]\\)?[ 	]*[-+*/%^]?=") (ksh88 \, (concat "\\<\\([[:alnum:]_]+\\)\\(\\[.+\\]\\)?" "[ 	]*\\(?:[-+*/%&|~^]\\|<<\\|>>\\)?=")) (bash . "\\<\\([[:alnum:]_]+\\)\\(\\[.+\\]\\)?\\+?=") (rc . "\\<\\([[:alnum:]_*]+\\)[ 	]*=") (sh . "\\<\\([[:alnum:]_]+\\)=")))) nil [21535 22266])
            ("sh-indentation" variable (:default-value 4) nil [22269 22394])
            ("put" code nil nil [22395 22447])
            ("sh-remember-variable-min" variable (:default-value 3) nil [22449 22597])
            ("sh-header-marker" variable nil nil [22600 22761])
            ("make-variable-buffer-local" code nil nil [22762 22808])
            ("sh-beginning-of-command" variable (:default-value "\\([;({`|&]\\|\\`\\|[^\\]
\\)[ 	]*\\([/~[:alnum:]:]\\)") nil [22810 23073])
            ("sh-end-of-command" variable (:default-value "\\([/~[:alnum:]:]\\)[ 	]*\\([;#)}`|&]\\|$\\)") nil [23076 23307])
            ("sh-here-document-word" variable (:default-value "EOF") nil [23311 24102])
            ("sh-test" variable (:default-value (quote ((sh "[  ]" . 3) (ksh88 "[[  ]]" . 4)))) nil [24105 24245])
            ("sh-builtins" variable (:default-value (quote ((bash sh-append posix "." "alias" "bg" "bind" "builtin" "caller" "compgen" "complete" "declare" "dirs" "disown" "enable" "fc" "fg" "help" "history" "jobs" "kill" "let" "local" "popd" "printf" "pushd" "shopt" "source" "suspend" "typeset" "unalias" "mapfile" "readarray") (bourne sh-append shell "eval" "export" "getopts" "newgrp" "pwd" "read" "readonly" "times" "ulimit") (csh sh-append shell "alias" "chdir" "glob" "history" "limit" "nice" "nohup" "rehash" "setenv" "source" "time" "unalias" "unhash") (dtksh sh-append wksh) (es "access" "apids" "cd" "echo" "eval" "false" "let" "limit" "local" "newpgrp" "result" "time" "umask" "var" "vars" "wait" "whatis") (jsh sh-append sh "bg" "fg" "jobs" "kill" "stop" "suspend") (jcsh sh-append csh "bg" "fg" "jobs" "kill" "notify" "stop" "suspend") (ksh88 sh-append bourne "alias" "bg" "false" "fc" "fg" "jobs" "kill" "let" "print" "time" "typeset" "unalias" "whence") (oash sh-append sh "checkwin" "dateline" "error" "form" "menu" "newwin" "oadeinit" "oaed" "oahelp" "oainit" "pp" "ppfile" "scan" "scrollok" "wattr" "wclear" "werase" "win" "wmclose" "wmmessage" "wmopen" "wmove" "wmtitle" "wrefresh") (pdksh sh-append ksh88 "bind") (posix sh-append sh "command") (rc "builtin" "cd" "echo" "eval" "limit" "newpgrp" "shift" "umask" "wait" "whatis") (sh sh-append bourne "hash" "test" "type") (shell "cd" "echo" "eval" "set" "shift" "umask" "unset" "wait") (wksh sh-append ksh88 "Xt[A-Z][A-Za-z]*") (zsh sh-append ksh88 "autoload" "bindkey" "builtin" "chdir" "compctl" "declare" "dirs" "disable" "disown" "echotc" "enable" "functions" "getln" "hash" "history" "integer" "limit" "local" "log" "popd" "pushd" "r" "readonly" "rehash" "sched" "setopt" "source" "suspend" "true" "ttyctl" "type" "unfunction" "unhash" "unlimit" "unsetopt" "vared" "which")))) nil [24369 26950])
            ("sh-leading-keywords" variable (:default-value (quote ((bash sh-append sh "time") (csh "else") (es "true" "unwind-protect" "whatis") (rc "else") (sh "!" "do" "elif" "else" "if" "then" "trap" "type" "until" "while")))) nil [26954 27594])
            ("sh-other-keywords" variable (:default-value (quote ((bash sh-append bourne "bye" "logout" "select") (bourne sh-append sh "function") (csh sh-append shell "breaksw" "default" "end" "endif" "endsw" "foreach" "goto" "if" "logout" "onintr" "repeat" "switch" "then" "while") (es "break" "catch" "exec" "exit" "fn" "for" "forever" "fork" "if" "return" "throw" "while") (ksh88 sh-append bourne "select") (rc "break" "case" "exec" "exit" "fn" "for" "if" "in" "return" "switch" "while") (sh sh-append shell "done" "esac" "fi" "for" "in" "return") (shell "break" "case" "continue" "exec" "exit") (zsh sh-append bash "select" "foreach")))) nil [27597 28594])
            ("sh-variables" variable (:default-value (quote ((bash sh-append sh "allow_null_glob_expansion" "auto_resume" "BASH" "BASH_ENV" "BASH_VERSINFO" "BASH_VERSION" "cdable_vars" "COMP_CWORD" "COMP_LINE" "COMP_POINT" "COMP_WORDS" "COMPREPLY" "DIRSTACK" "ENV" "EUID" "FCEDIT" "FIGNORE" "FUNCNAME" "glob_dot_filenames" "GLOBIGNORE" "GROUPS" "histchars" "HISTCMD" "HISTCONTROL" "HISTFILE" "HISTFILESIZE" "HISTIGNORE" "history_control" "HISTSIZE" "hostname_completion_file" "HOSTFILE" "HOSTTYPE" "IGNOREEOF" "ignoreeof" "INPUTRC" "LINENO" "MACHTYPE" "MAIL_WARNING" "noclobber" "nolinks" "notify" "no_exit_on_failed_exec" "NO_PROMPT_VARS" "OLDPWD" "OPTERR" "OSTYPE" "PIPESTATUS" "PPID" "POSIXLY_CORRECT" "PROMPT_COMMAND" "PS3" "PS4" "pushd_silent" "PWD" "RANDOM" "REPLY" "SECONDS" "SHELLOPTS" "SHLVL" "TIMEFORMAT" "TMOUT" "UID") (csh sh-append shell "argv" "cdpath" "child" "echo" "histchars" "history" "home" "ignoreeof" "mail" "noclobber" "noglob" "nonomatch" "path" "prompt" "shell" "status" "time" "verbose") (es sh-append shell "apid" "cdpath" "CDPATH" "history" "home" "ifs" "noexport" "path" "pid" "prompt" "signals") (jcsh sh-append csh "notify") (ksh88 sh-append sh "ENV" "ERRNO" "FCEDIT" "FPATH" "HISTFILE" "HISTSIZE" "LINENO" "OLDPWD" "PPID" "PS3" "PS4" "PWD" "RANDOM" "REPLY" "SECONDS" "TMOUT") (oash sh-append sh "FIELD" "FIELD_MAX" "LAST_KEY" "OALIB" "PP_ITEM" "PP_NUM") (rc sh-append shell "apid" "apids" "cdpath" "CDPATH" "history" "home" "ifs" "path" "pid" "prompt" "status") (sh sh-append shell "CDPATH" "IFS" "OPTARG" "OPTIND" "PS1" "PS2") (shell "COLUMNS" "EDITOR" "HOME" "HUSHLOGIN" "LANG" "LC_COLLATE" "LC_CTYPE" "LC_MESSAGES" "LC_MONETARY" "LC_NUMERIC" "LC_TIME" "LINES" "LOGNAME" "MAIL" "MAILCHECK" "MAILPATH" "PAGER" "PATH" "SHELL" "TERM" "TERMCAP" "TERMINFO" "VISUAL") (tcsh sh-append csh "addsuffix" "ampm" "autocorrect" "autoexpand" "autolist" "autologout" "chase_symlinks" "correct" "dextract" "edit" "el" "fignore" "gid" "histlit" "HOST" "HOSTTYPE" "HPATH" "ignore_symlinks" "listjobs" "listlinks" "listmax" "matchbeep" "nobeep" "NOREBIND" "oid" "printexitvalue" "prompt2" "prompt3" "pushdsilent" "pushdtohome" "recexact" "recognize_only_executables" "rmstar" "savehist" "SHLVL" "showdots" "sl" "SYSTYPE" "tcsh" "term" "tperiod" "tty" "uid" "version" "visiblebell" "watch" "who" "wordchars") (zsh sh-append ksh88 "BAUD" "bindcmds" "cdpath" "DIRSTACKSIZE" "fignore" "FIGNORE" "fpath" "HISTCHARS" "hostcmds" "hosts" "HOSTS" "LISTMAX" "LITHISTSIZE" "LOGCHECK" "mailpath" "manpath" "NULLCMD" "optcmds" "path" "POSTEDIT" "prompt" "PROMPT" "PROMPT2" "PROMPT3" "PROMPT4" "psvar" "PSVAR" "READNULLCMD" "REPORTTIME" "RPROMPT" "RPS1" "SAVEHIST" "SPROMPT" "STTY" "TIMEFMT" "TMOUT" "TMPPREFIX" "varcmds" "watch" "WATCH" "WATCHFMT" "WORDCHARS" "ZDOTDIR")))) nil [28598 31650])
            ("sh-heredoc" variable
               (:default-value (quote ((((min-colors 88) (class color) (background dark)) (:foreground "yellow1" :weight bold)) (((class color) (background dark)) (:foreground "yellow" :weight bold)) (((class color) (background light)) (:foreground "tan1")) (t (:weight bold))))
                :type "face")
                nil [31676 32048])
            ("sh-quoted-exec" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "salmon")) (((class color) (background light)) (:foreground "magenta")) (t (:weight bold))))
                :type "face")
                nil [32118 32372])
            ("define-obsolete-face-alias" code nil nil [32373 32437])
            ("sh-heredoc-face" variable (:default-value (quote sh-heredoc)) nil [32438 32474])
            ("sh-escaped-newline" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [32476 32661])
            ("sh-font-lock-keywords-var" variable (:default-value (quote ((csh sh-append shell ("\\${?[#?]?\\([[:alpha:]_][[:alnum:]_]*\\|0\\)" 1 font-lock-variable-name-face)) (es sh-append executable-font-lock-keywords ("\\$#?\\([[:alpha:]_][[:alnum:]_]*\\|[0-9]+\\)" 1 font-lock-variable-name-face)) (rc sh-append es) (bash sh-append sh ("\\$(\\(\\sw+\\)" (1 (quote sh-quoted-exec) t))) (sh sh-append shell ("\\$\\({#?\\)?\\([[:alpha:]_][[:alnum:]_]*\\|[-#?@!]\\)" 2 font-lock-variable-name-face) ("^\\(\\sw+\\)[ 	]*(" 1 font-lock-function-name-face) ("\\<\\(function\\)\\>[ 	]*\\(\\sw+\\)?" (1 font-lock-keyword-face) (2 font-lock-function-name-face nil t)) ("\\(?:^\\s *\\|[[();&|]\\s *\\|\\(?:\\s +-[ao]\\|if\\|else\\|then\\|while\\|do\\)\\s +\\)\\(!\\)" 1 font-lock-negation-char-face)) (shell ("\\(^\\|[^\\]\\)\\(\\\\\\\\\\)*\\(\\\\\\)$" 3 (quote sh-escaped-newline)) ("\\\\[^[:alnum:]]" 0 font-lock-string-face) ("\\${?\\([[:alpha:]_][[:alnum:]_]*\\|[0-9]+\\|[$*_]\\)" 1 font-lock-variable-name-face)) (rpm sh-append rpm2 ("%{?\\(\\sw+\\)" 1 font-lock-keyword-face)) (rpm2 sh-append shell ("^Summary:\\(.*\\)$" (1 font-lock-doc-face t)) ("^\\(\\sw+\\):" 1 font-lock-variable-name-face))))) nil [32663 34167])
            ("sh-font-lock-keywords-var-1" variable (:default-value (quote ((sh "[ 	]in\\>")))) nil [34169 34283])
            ("sh-font-lock-keywords-var-2" variable nil nil [34285 34377])
            ("sh-st-punc" variable
               (:constant-flag t
                :default-value (string-to-syntax "."))
                nil [34522 34566])
            ("sh-here-doc-syntax" variable
               (:constant-flag t
                :default-value (string-to-syntax "|"))
                nil [34567 34619])
            ("sh-here-doc-open-re" variable
               (:constant-flag t
                :default-value (concat "<<-?\\s-*\\\\?\\(\\(?:['\"][^'\"]+['\"]\\|\\sw\\|[-/~._]\\)+\\)" sh-escaped-line-re "\\(
\\)"))
                nil [34944 35095])
            ("sh-escaped-line-re" variable
               (:constant-flag t
                :default-value "\\(?:\\(?:.*[^\\
]\\)?\\(?:\\\\\\\\\\)*\\\\
\\)*.*")
                nil [34659 34940])
            ("sh--inside-noncommand-expression" function (:arguments ("pos")) nil [35098 35627])
            ("sh-font-lock-open-heredoc" function (:arguments ("start" "string" "eol")) nil [35629 37367])
            ("sh-syntax-propertize-here-doc" function (:arguments ("end")) nil [37369 37865])
            ("sh-font-lock-quoted-subshell" function (:arguments ("limit")) nil [37867 39906])
            ("sh-is-quoted-p" function (:arguments ("pos")) nil [39909 40011])
            ("sh-font-lock-paren" function (:arguments ("start")) nil [40013 42577])
            ("sh-font-lock-backslash-quote" function nil nil [42579 42769])
            ("sh-syntax-propertize-function" function (:arguments ("start" "end")) nil [42771 44286])
            ("sh-font-lock-syntactic-face-function" function (:arguments ("state")) nil [44287 44527])
            ("sh-indentation" customgroup (:user-visible-flag t) nil [44529 44878])
            ("sh-set-shell-hook" variable nil nil [44881 44980])
            ("sh-mode-hook" variable nil nil [44982 45071])
            ("sh-learn-basic-offset" variable nil nil [45073 45499])
            ("sh-popup-occur-buffer" variable nil nil [45501 45811])
            ("sh-blink" variable (:default-value t) nil [45813 46095])
            ("sh-first-lines-indent" variable nil nil [46097 46455])
            ("sh-basic-offset" variable (:default-value 4) nil [46458 46643])
            ("put" code nil nil [46644 46697])
            ("sh-indent-comment" variable (:default-value t) nil [46699 47202])
            ("sh-debug" variable nil nil [47205 47297])
            ("sh-debug" function (:arguments ("_args")) nil [47524 47557])
            ("sh-symbol-list" variable
               (:constant-flag t
                :default-value (quote ((const :tag "+ " :value + :menu-tag "+   Indent right by sh-basic-offset") (const :tag "- " :value - :menu-tag "-   Indent left  by sh-basic-offset") (const :tag "++" :value ++ :menu-tag "++  Indent right twice sh-basic-offset") (const :tag "--" :value -- :menu-tag "--  Indent left  twice sh-basic-offset") (const :tag "* " :value * :menu-tag "*   Indent right half sh-basic-offset") (const :tag "/ " :value / :menu-tag "/   Indent left  half sh-basic-offset"))))
                nil [47559 48100])
            ("sh-indent-for-else" variable nil nil [48102 48384])
            ("sh-number-or-symbol-list" variable
               (:constant-flag t
                :default-value (append (quote ((integer :menu-tag "A number (positive=>indent right)" :tag "A number") (const :tag "--"))) sh-symbol-list))
                nil [48386 48568])
            ("sh-indent-for-fi" variable nil nil [48570 48736])
            ("sh-indent-for-done" variable nil nil [48738 48917])
            ("sh-indent-after-else" variable (:default-value (quote +)) nil [48919 49088])
            ("sh-indent-after-if" variable (:default-value (quote +)) nil [49090 49386])
            ("sh-indent-for-then" variable nil nil [49388 49546])
            ("sh-indent-for-do" variable nil nil [49548 49810])
            ("sh-indent-after-do" variable (:default-value (quote +)) nil [49812 50148])
            ("sh-indent-after-loop-construct" variable (:default-value (quote +)) nil [50150 50526])
            ("sh-indent-after-done" variable nil nil [50529 50887])
            ("sh-indent-for-case-label" variable (:default-value (quote +)) nil [50889 51108])
            ("sh-indent-for-case-alt" variable (:default-value (quote ++)) nil [51110 51337])
            ("sh-indent-for-continuation" variable (:default-value (quote +)) nil [51340 51505])
            ("sh-indent-after-open" variable (:default-value (quote +)) nil [51507 51759])
            ("sh-indent-after-function" variable (:default-value (quote +)) nil [51761 51917])
            ("sh-indent-after-switch" variable (:default-value (quote +)) nil [51953 52165])
            ("sh-indent-after-case" variable (:default-value (quote +)) nil [52167 52368])
            ("sh-backslash-column" variable (:default-value 48) nil [52370 52497])
            ("sh-backslash-align" variable (:default-value t) nil [52499 52623])
            ("sh-mkword-regexpr" function (:arguments ("word")) nil [52684 52901])
            ("sh-re-done" variable
               (:constant-flag t
                :default-value (sh-mkword-regexpr "done"))
                nil [52903 52951])
            ("sh-kws-for-done" variable
               (:constant-flag t
                :default-value (quote ((sh "while" "until" "for") (bash "while" "until" "for" "select") (ksh88 "while" "until" "for" "select") (zsh "while" "until" "for" "repeat" "select"))))
                nil [52954 53240])
            ("sh-indent-supported" variable
               (:constant-flag t
                :default-value (quote ((sh . sh) (csh) (rc . rc))))
                nil [53243 53371])
            ("sh-indent-supported-here" variable nil nil [53373 53485])
            ("sh-var-list" variable
               (:constant-flag t
                :default-value (quote (sh-basic-offset sh-first-lines-indent sh-indent-after-case sh-indent-after-do sh-indent-after-done sh-indent-after-else sh-indent-after-if sh-indent-after-loop-construct sh-indent-after-open sh-indent-comment sh-indent-for-case-alt sh-indent-for-case-label sh-indent-for-continuation sh-indent-for-do sh-indent-for-done sh-indent-for-else sh-indent-for-fi sh-indent-for-then)))
                nil [53487 54156])
            ("sh-make-vars-local" variable (:default-value t) nil [54158 54530])
            ("defvar-local" code nil nil [54609 54692])
            ("explicit-shell-file-name" variable nil nil [54694 54727])
            ("sh-shell-process" function (:arguments ("force")) nil [54729 55551])
            ("sh-show-shell" function (:user-visible-flag t) nil [55553 55687])
            ("sh-send-text" function (:arguments ("text")) nil [55689 55824])
            ("sh-cd-here" function (:user-visible-flag t) nil [55826 55987])
            ("sh-send-line-or-region-and-step" function (:user-visible-flag t) nil [55989 56493])
            ("define-derived-mode" code nil nil [56551 61677])
            ("defalias" code nil nil [61694 61732])
            ("sh-font-lock-keywords" function (:arguments ("keywords")) nil [61735 62173])
            ("sh-font-lock-keywords-1" function (:arguments ("builtins")) nil [62175 62907])
            ("sh-font-lock-keywords-2" function nil nil [62909 63047])
            ("sh--vars-before-point" function nil nil [63065 63257])
            ("sh--cmd-completion-table" function (:arguments ("string" "pred" "action")) nil [63388 63883])
            ("sh-completion-at-point-function" function nil nil [63885 64260])
            ("smie" include nil nil [64305 64320])
            ("sh-use-smie" variable (:default-value t) nil [64580 64667])
            ("sh-smie--keyword-p" function nil nil [64669 65021])
            ("sh-smie--newline-semi-p" function (:arguments ("tok")) nil [65023 65705])
            ("sh-smie-sh-grammar" variable
               (:constant-flag t
                :default-value (smie-prec2->grammar (smie-bnf->prec2 (quote ((exp) (cmd ("case" exp "in" branches "esac") ("if" cmd "then" cmd "fi") ("if" cmd "then" cmd "else" cmd "fi") ("if" cmd "then" cmd "elif" cmd "then" cmd "fi") ("if" cmd "then" cmd "elif" cmd "then" cmd "else" cmd "fi") ("if" cmd "then" cmd "elif" cmd "then" cmd "elif" cmd "then" cmd "else" cmd "fi") ("while" cmd "do" cmd "done") ("until" cmd "do" cmd "done") ("for" exp "in" cmd "do" cmd "done") ("for" exp "do" cmd "done") ("select" exp "in" cmd "do" cmd "done") ("repeat" exp "do" cmd "done") (exp "always" exp) (cmd "|" cmd) (cmd "|&" cmd) (cmd "&&" cmd) (cmd "||" cmd) (cmd ";" cmd) (cmd "&" cmd)) (rpattern (rpattern "|" rpattern)) (pattern (rpattern) ("case-(" rpattern)) (branches (branches ";;" branches) (branches ";&" branches) (branches ";;&" branches) (pattern "case-)" cmd)))) (quote ((assoc ";;" ";&" ";;&"))) (quote ((assoc ";" "&") (assoc "&&" "||") (assoc "|" "|&"))))))
                nil [65736 67089])
            ("sh-smie--sh-operators" variable
               (:constant-flag t
                :default-value (delq nil (mapcar (lambda (x) (setq x (car x)) (and (stringp x) (not (string-match "\\`[a-z]" x)) x)) sh-smie-sh-grammar)))
                nil [67091 67366])
            ("sh-smie--sh-operators-re" variable
               (:constant-flag t
                :default-value (regexp-opt sh-smie--sh-operators))
                nil [67368 67438])
            ("sh-smie--sh-operators-back-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^\\]\\)\\(?:\\\\\\\\\\)*" "\\(" sh-smie--sh-operators-re "\\)"))
                nil [67439 67574])
            ("sh-smie--sh-keyword-in-p" function nil nil [67576 68605])
            ("sh-smie--sh-keyword-p" function (:arguments ("tok")) nil [68607 68832])
            ("sh-smie--default-forward-token" function nil nil [68834 69160])
            ("sh-smie--default-backward-token" function nil nil [69162 70122])
            ("sh-smie-sh-forward-token" function nil nil [70124 71651])
            ("sh-smie--looking-back-at-continuation-p" function nil nil [71653 71909])
            ("sh-smie-sh-backward-token" function nil nil [71911 73209])
            ("sh-indent-after-continuation" variable (:default-value t) nil [73211 73390])
            ("sh-smie--continuation-start-indent" function nil nil [73392 73680])
            ("sh-smie-sh-rules" function (:arguments ("kind" "token")) nil [73682 76832])
            ("sh-smie-rc-grammar" variable
               (:constant-flag t
                :default-value (smie-prec2->grammar (smie-bnf->prec2 (quote ((exp) (cmd (cmd "case" cmd) ("if" exp) ("switch" exp) ("for" exp) ("while" exp) (cmd "|" cmd) (cmd "|&" cmd) (cmd "&&" cmd) (cmd "||" cmd) (cmd ";" cmd) (cmd "&" cmd)) (pattern (pattern "|" pattern)) (branches (branches ";;" branches) (branches ";&" branches) (branches ";;&" branches) (pattern "case-)" cmd)))) (quote ((assoc ";;" ";&" ";;&"))) (quote ((assoc "case") (assoc ";" "&") (assoc "&&" "||") (assoc "|" "|&"))))))
                nil [78463 79149])
            ("sh-smie--rc-after-special-arg-p" function nil nil [79151 79616])
            ("sh-smie--rc-newline-semi-p" function nil nil [79618 80046])
            ("sh-smie-rc-forward-token" function nil nil [80048 81619])
            ("sh-smie-rc-backward-token" function nil nil [81621 83122])
            ("sh-smie-rc-rules" function (:arguments ("kind" "token")) nil [83124 84244])
            ("sh-regexp-for-done" variable nil nil [84269 84361])
            ("sh-kw-alist" variable nil nil [84363 84459])
            ("sh-kw" variable
               (:constant-flag t
                :default-value (quote ((sh ("if" nil sh-handle-prev-if) ("elif" sh-handle-this-else sh-handle-prev-else) ("else" sh-handle-this-else sh-handle-prev-else) ("fi" sh-handle-this-fi sh-handle-prev-fi) ("then" sh-handle-this-then sh-handle-prev-then) ("(" nil sh-handle-prev-open) ("{" nil sh-handle-prev-open) ("[" nil sh-handle-prev-open) ("}" sh-handle-this-close nil) (")" sh-handle-this-close nil) ("]" sh-handle-this-close nil) ("case" nil sh-handle-prev-case) ("esac" sh-handle-this-esac sh-handle-prev-esac) (case-label nil sh-handle-after-case-label) (";;" nil sh-handle-prev-case-alt-end) (";;&" nil sh-handle-prev-case-alt-end) (";&" nil sh-handle-prev-case-alt-end) ("done" sh-handle-this-done sh-handle-prev-done) ("do" sh-handle-this-do sh-handle-prev-do)) (rc ("{" nil sh-handle-prev-open) ("}" sh-handle-this-close nil) ("case" sh-handle-this-rc-case sh-handle-prev-rc-case)))))
                nil [85521 86757])
            ("sh-set-shell" function
               (:user-visible-flag t
                :arguments ("shell" "no-query-flag" "insert-flag"))
                nil [86761 90739])
            ("sh-feature" function (:arguments ("alist" "function")) nil [90742 92600])
            ("sh-append" function (:arguments ("ancestor" "list")) nil [93751 93895])
            ("sh-modify" function (:arguments ("skeleton" "list")) nil [93898 94229])
            ("sh-basic-indent-line" function (:user-visible-flag t) nil [94232 95355])
            ("sh-execute-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "flag"))
                nil [95358 96333])
            ("sh-remember-variable" function (:arguments ("var")) nil [96336 96600])
            ("sh-quoted-p" function nil nil [96604 96743])
            ("sh-must-support-indent" function nil nil [96768 97033])
            ("sh-make-vars-local" function (:user-visible-flag t) nil [97035 97454])
            ("sh-reset-indent-vars-to-global-values" function (:user-visible-flag t) nil [97456 97764])
            ("sh-special-keywords" variable
               (:constant-flag t
                :default-value "then\\|do")
                nil [97906 97948])
            ("sh-help-string-for-variable" function (:arguments ("var")) nil [97950 98807])
            ("sh-read-variable" function (:arguments ("var")) nil [98809 99184])
            ("sh-in-comment-or-string" function (:arguments ("start")) nil [99188 99380])
            ("sh-goto-matching-if" function nil nil [99382 99582])
            ("sh-handle-prev-if" function nil nil [99792 99853])
            ("sh-handle-this-else" function nil nil [99855 100012])
            ("sh-handle-prev-else" function nil nil [100014 100116])
            ("sh-handle-this-fi" function nil nil [100118 100239])
            ("sh-handle-prev-fi" function nil nil [100241 100633])
            ("sh-handle-this-then" function nil nil [100635 100751])
            ("sh-handle-prev-then" function nil nil [100753 100869])
            ("sh-handle-prev-open" function nil nil [100871 101165])
            ("sh-handle-this-close" function nil nil [101167 101307])
            ("sh-goto-matching-case" function nil nil [101309 101444])
            ("sh-handle-prev-case" function nil nil [101446 101723])
            ("sh-handle-this-esac" function nil nil [101734 101835])
            ("sh-handle-prev-esac" function nil nil [101837 101927])
            ("sh-handle-after-case-label" function nil nil [101929 102038])
            ("sh-handle-prev-case-alt-end" function nil nil [102040 102152])
            ("sh-safe-forward-sexp" function (:arguments ("arg")) nil [102154 102469])
            ("sh-goto-match-for-done" function nil nil [102493 102634])
            ("sh-handle-this-done" function nil nil [102636 102758])
            ("sh-handle-prev-done" function nil nil [102760 102851])
            ("sh-handle-this-do" function nil nil [102853 102948])
            ("sh-handle-prev-do" function nil nil [102950 103371])
            ("sh-find-prev-switch" function nil nil [103384 103534])
            ("sh-handle-this-rc-case" function nil nil [103536 103693])
            ("sh-handle-prev-rc-case" function nil nil [103695 103763])
            ("sh-check-rule" function (:arguments ("n" "thing")) nil [103765 104010])
            ("sh-get-indent-info" function nil nil [104013 109813])
            ("sh-get-indent-var-for-line" function (:arguments ("info")) nil [109816 111131])
            ("sh-prev-line" function (:arguments ("end")) nil [111638 112557])
            ("sh-prev-stmt" function (:user-visible-flag t) nil [112560 114032])
            ("sh-get-word" function (:user-visible-flag t) nil [114035 114386])
            ("sh-prev-thing" function nil nil [114388 116716])
            ("sh-this-is-a-continuation" function nil nil [116719 116997])
            ("sh-get-kw" function (:arguments ("where" "and-move")) nil [116999 117330])
            ("sh-find-prev-matching" function (:arguments ("open" "close" "depth")) nil [117332 118357])
            ("sh-var-value" function (:arguments ("var" "ignore-error")) nil [118360 119146])
            ("sh-set-var-value" function (:arguments ("var" "value" "no-symbol")) nil [119148 119750])
            ("sh-calculate-indent" function (:arguments ("info")) nil [119753 121572])
            ("sh-indent-line" function (:user-visible-flag t) nil [121575 122034])
            ("sh-blink" function (:arguments ("blinkpos" "msg")) nil [122037 122388])
            ("sh-show-indent" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [122390 123891])
            ("sh-set-indent" function (:user-visible-flag t) nil [123893 125309])
            ("sh-learn-line-indent" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [125312 127797])
            ("sh-mark-init" function (:arguments ("buffer")) nil [127801 127971])
            ("sh-mark-line" function (:arguments ("message" "point" "buffer" "add-linenum" "occur-point")) nil [127974 129333])
            ("sh-learned-buffer-hook" variable nil nil [129367 129467])
            ("sh-learn-buffer-indent" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [130050 139934])
            ("sh-guess-basic-offset" function (:arguments ("vec")) nil [139936 142111])
            ("sh-styles-alist" variable nil nil [142262 142340])
            ("sh-name-style" function
               (:user-visible-flag t
                :arguments ("name" "confirm-overwrite"))
                nil [142342 143268])
            ("sh-load-style" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [143270 143663])
            ("sh-save-styles-to-buffer" function
               (:user-visible-flag t
                :arguments ("buff"))
                nil [143665 144061])
            ("sh-non-closing-paren" variable
               (:constant-flag t
                :default-value (propertize ")" (quote syntax-table) sh-st-punc (quote rear-nonsticky) t))
                nil [144230 144468])
            ("define-skeleton" code nil nil [144470 145282])
            ("define-skeleton" code nil nil [145284 145689])
            ("define-skeleton" code nil nil [145693 146841])
            ("sh-shell-initialize-variables" function nil nil [146844 147291])
            ("sh-add-buffer" variable nil nil [147293 147315])
            ("sh-add-completer" function (:arguments ("string" "predicate" "code")) nil [147317 148259])
            ("sh-add" function
               (:user-visible-flag t
                :arguments ("var" "delta"))
                nil [148261 148879])
            ("define-skeleton" code nil nil [148883 149156])
            ("define-skeleton" code nil nil [149160 150062])
            ("define-skeleton" code nil nil [150066 150297])
            ("define-skeleton" code nil nil [150359 150555])
            ("define-skeleton" code nil nil [150616 151604])
            ("define-skeleton" code nil nil [151608 151803])
            ("define-skeleton" code nil nil [151862 152286])
            ("define-skeleton" code nil nil [152290 154037])
            ("sh-assignment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [154041 154401])
            ("sh-maybe-here-document" function (:arguments ("arg")) nil [154404 154742])
            ("sh--maybe-here-document" function nil nil [154744 155546])
            ("define-minor-mode" code nil nil [155548 155836])
            ("sh-beginning-of-command" function (:user-visible-flag t) nil [155866 156098])
            ("sh-end-of-command" function (:user-visible-flag t) nil [156100 156307])
            ("sh-backslash-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "delete-flag"))
                nil [156360 158327])
            ("sh-append-backslash" function (:arguments ("column")) nil [158329 158671])
            ("sh-delete-backslash" function nil nil [158673 158880])
            ("sh-script" package nil nil [158882 158902]))          
      :file "sh-script.el.gz"
      :pointmax 158931
      :fsize 44285
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 35095 . 35096) (symbol 34640 . 34656) (open-paren 34639 . 34640) (close-paren 8809 . 8810) (symbol 8730 . 8747) (open-paren 8729 . 8730)))
    (semanticdb-table "cc-defs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1345 1560])
            ("cl" include nil nil [1582 1595])
            ("cc-external-require" code nil nil [1647 1680])
            ("cc-bytecomp-defvar" code nil nil [1707 1764])
            ("cc-bytecomp-defun" code nil nil [1781 1816])
            ("cc-bytecomp-defvar" code nil nil [1826 1858])
            ("cc-bytecomp-defvar" code nil nil [1867 1903])
            ("cc-bytecomp-defvar" code nil nil [1912 1959])
            ("cc-bytecomp-defvar" code nil nil [1968 2017])
            ("cc-bytecomp-defvar" code nil nil [2026 2078])
            ("cc-bytecomp-defun" code nil nil [2090 2126])
            ("if" code nil nil [2238 2338])
            ("if" code nil nil [2421 2760])
            ("if" code nil nil [2895 3126])
            ("c-version" variable
               (:constant-flag t
                :default-value "5.32.5")
                nil [3173 3230])
            ("c-version-sym" variable
               (:constant-flag t
                :default-value (intern c-version))
                nil [3232 3275])
            ("c-buffer-is-cc-mode" variable nil nil [3329 3765])
            ("make-variable-buffer-local" code nil nil [3766 3815])
            ("put" code nil nil [3936 3981])
            ("put" code nil nil [6336 6383])
            ("cc-eval-when-compile" function (:arguments ("body")) nil [4099 6332])
            ("c-inside-eval-when-compile" variable nil nil [4056 4095])
            ("defalias" code nil nil [6406 6517])
            ("c-point" function (:arguments ("position" "point")) nil [6534 11128])
            ("c-region-is-active-p" function nil nil [11130 11496])
            ("c-set-region-active" function (:arguments ("activate")) nil [11498 11849])
            ("c-delete-and-extract-region" function (:arguments ("start" "end")) nil [11851 12206])
            ("c-safe" function (:arguments ("body")) nil [12208 12359])
            ("put" code nil nil [12360 12397])
            ("c-int-to-char" function (:arguments ("integer")) nil [12399 12725])
            ("c-last-command-char" function nil nil [12727 12982])
            ("c-sentence-end" function nil nil [12984 13188])
            ("c-default-value-sentence-end" function nil nil [13190 13455])
            ("c-save-buffer-state" function (:arguments ("varlist" "body")) nil [13564 15240])
            ("put" code nil nil [15241 15291])
            ("c-tentative-buffer-changes" function (:arguments ("body")) nil [15293 16443])
            ("put" code nil nil [16444 16501])
            ("c-tnt-chng-record-state" function nil nil [16503 16845])
            ("c-tnt-chng-cleanup" function (:arguments ("keep" "saved-state")) nil [16852 17853])
            ("c-forward-syntactic-ws" function (:arguments ("limit")) nil [17855 18603])
            ("c-backward-syntactic-ws" function (:arguments ("limit")) nil [18605 19370])
            ("c-forward-sexp" function (:arguments ("count")) nil [19372 19853])
            ("c-backward-sexp" function (:arguments ("count")) nil [19855 20040])
            ("c-safe-scan-lists" function (:arguments ("from" "count" "depth" "limit")) nil [20042 20712])
            ("c-go-list-forward" function nil nil [20842 21116])
            ("c-go-list-backward" function nil nil [21118 21394])
            ("c-up-list-forward" function (:arguments ("pos" "limit")) nil [21396 21725])
            ("c-up-list-backward" function (:arguments ("pos" "limit")) nil [21727 22061])
            ("c-down-list-forward" function (:arguments ("pos" "limit")) nil [22063 22397])
            ("c-down-list-backward" function (:arguments ("pos" "limit")) nil [22399 22733])
            ("c-go-up-list-forward" function (:arguments ("pos" "limit")) nil [22735 23258])
            ("c-go-up-list-backward" function (:arguments ("pos" "limit")) nil [23260 23788])
            ("c-go-down-list-forward" function (:arguments ("pos" "limit")) nil [23790 24314])
            ("c-go-down-list-backward" function (:arguments ("pos" "limit")) nil [24316 24840])
            ("c-beginning-of-defun-1" function nil nil [24844 26778])
            ("c-at-vsemi-p" function (:arguments ("pos")) nil [29540 29870])
            ("c-vsemi-status-unknown-p" function nil nil [29872 30400])
            ("c-benign-error" function (:arguments ("format" "args")) nil [30404 30603])
            ("c-with-syntax-table" function (:arguments ("table" "code")) nil [30605 30939])
            ("put" code nil nil [30940 30990])
            ("c-skip-ws-forward" function (:arguments ("limit")) nil [30992 31644])
            ("c-skip-ws-backward" function (:arguments ("limit")) nil [31646 32232])
            ("c-langs-are-parametric" variable nil nil [32254 32289])
            ("c-major-mode-is" function (:arguments ("mode")) nil [32292 32835])
            ("c-use-extents" variable
               (:constant-flag t
                :default-value (and (cc-bytecomp-fboundp (quote extent-at)) (cc-bytecomp-fboundp (quote set-extent-property)) (cc-bytecomp-fboundp (quote set-extent-properties)) (cc-bytecomp-fboundp (quote make-extent)) (cc-bytecomp-fboundp (quote extent-property)) (cc-bytecomp-fboundp (quote delete-extent)) (cc-bytecomp-fboundp (quote map-extents))))
                nil [33238 33595])
            ("defalias" code nil nil [33692 34599])
            ("cc-bytecomp-defun" code nil nil [34600 34643])
            ("c-put-char-property" function (:arguments ("pos" "property" "value")) nil [34668 35690])
            ("c-get-char-property" function (:arguments ("pos" "property")) nil [35692 36122])
            ("defalias" code nil nil [36267 36711])
            ("cc-bytecomp-defun" code nil nil [36712 36757])
            ("c-clear-char-property" function (:arguments ("pos" "property")) nil [36782 37506])
            ("c-clear-char-properties" function (:arguments ("from" "to" "property")) nil [37508 38265])
            ("c-search-forward-char-property" function (:arguments ("property" "value" "limit")) nil [38267 39030])
            ("c-search-backward-char-property" function (:arguments ("property" "value" "limit")) nil [39032 39804])
            ("c-clear-char-property-with-value-function" function (:arguments ("from" "to" "property" "value")) nil [39806 40713])
            ("c-clear-char-property-with-value" function (:arguments ("from" "to" "property" "value")) nil [40715 41359])
            ("c-put-overlay" function (:arguments ("from" "to" "property" "value")) nil [41616 42118])
            ("c-delete-overlay" function (:arguments ("overlay")) nil [42120 42381])
            ("def-edebug-spec" code nil nil [42510 42565])
            ("def-edebug-spec" code nil nil [42566 42593])
            ("def-edebug-spec" code nil nil [42594 42633])
            ("def-edebug-spec" code nil nil [42634 42660])
            ("def-edebug-spec" code nil nil [42661 42703])
            ("def-edebug-spec" code nil nil [42704 42750])
            ("def-edebug-spec" code nil nil [42751 42793])
            ("def-edebug-spec" code nil nil [42794 42837])
            ("def-edebug-spec" code nil nil [42838 42872])
            ("def-edebug-spec" code nil nil [42873 42908])
            ("def-edebug-spec" code nil nil [42909 42946])
            ("def-edebug-spec" code nil nil [42947 42985])
            ("def-edebug-spec" code nil nil [42986 43025])
            ("def-edebug-spec" code nil nil [43026 43066])
            ("def-edebug-spec" code nil nil [43067 43099])
            ("def-edebug-spec" code nil nil [43100 43138])
            ("def-edebug-spec" code nil nil [43139 43173])
            ("def-edebug-spec" code nil nil [43174 43213])
            ("def-edebug-spec" code nil nil [43214 43251])
            ("def-edebug-spec" code nil nil [43252 43290])
            ("def-edebug-spec" code nil nil [43291 43326])
            ("def-edebug-spec" code nil nil [43327 43366])
            ("def-edebug-spec" code nil nil [43367 43406])
            ("def-edebug-spec" code nil nil [43407 43448])
            ("def-edebug-spec" code nil nil [43449 43492])
            ("def-edebug-spec" code nil nil [43493 43526])
            ("def-edebug-spec" code nil nil [43527 43563])
            ("c-end-of-defun-1" function nil nil [43805 44243])
            ("c-<-as-paren-syntax" variable
               (:constant-flag t
                :default-value (quote (4 . 62)))
                nil [44245 44285])
            ("put" code nil nil [44286 44346])
            ("c-mark-<-as-paren" function (:arguments ("pos")) nil [44348 44841])
            ("c->-as-paren-syntax" variable
               (:constant-flag t
                :default-value (quote (5 . 60)))
                nil [44843 44883])
            ("put" code nil nil [44884 44944])
            ("c-mark->-as-paren" function (:arguments ("pos")) nil [44946 45411])
            ("c-unmark-<->-as-paren" function (:arguments ("pos")) nil [45413 45925])
            ("c-suppress-<->-as-parens" function nil nil [45927 46291])
            ("c-restore-<->-as-parens" function nil nil [46293 46572])
            ("c-with-<->-as-parens-suppressed" function (:arguments ("forms")) nil [46574 46898])
            ("c-cpp-delimiter" variable
               (:constant-flag t
                :default-value (quote (14)))
                nil [46917 46949])
            ("c-set-cpp-delimiters" function (:arguments ("beg" "end")) nil [47306 47549])
            ("c-clear-cpp-delimiters" function (:arguments ("beg" "end")) nil [47550 47765])
            ("c-comment-out-cpps" function nil nil [47767 47923])
            ("c-uncomment-out-cpps" function nil nil [47924 48067])
            ("c-with-cpps-commented-out" function (:arguments ("forms")) nil [48069 48534])
            ("c-with-all-but-one-cpps-commented-out" function (:arguments ("beg" "end" "forms")) nil [48536 49023])
            ("c-intersect-lists" function (:arguments ("list" "alist")) nil [49026 49286])
            ("c-lookup-lists" function (:arguments ("list" "alist1" "alist2")) nil [49288 49509])
            ("c-langelem-sym" function (:arguments ("langelem")) nil [49511 49786])
            ("c-langelem-pos" function (:arguments ("langelem")) nil [49788 50151])
            ("c-langelem-col" function (:arguments ("langelem" "preserve-point")) nil [50153 50696])
            ("c-langelem-2nd-pos" function (:arguments ("langelem")) nil [50698 51080])
            ("c-keep-region-active" function nil nil [51082 51290])
            ("put" code nil nil [51292 51328])
            ("put" code nil nil [51329 51367])
            ("put" code nil nil [51368 51407])
            ("put" code nil nil [51408 51447])
            ("put" code nil nil [51448 51486])
            ("put" code nil nil [51487 51526])
            ("put" code nil nil [51527 51565])
            ("c-mode-symbol" function (:arguments ("suffix")) nil [51567 51984])
            ("c-mode-var" function (:arguments ("suffix")) nil [51986 52168])
            ("c-got-face-at" function (:arguments ("pos" "faces")) nil [52170 52541])
            ("c-face-name-p" function (:arguments ("facename")) nil [52543 52890])
            ("c-concat-separated" function (:arguments ("list" "separator")) nil [52892 53113])
            ("c-make-keywords-re" function (:arguments ("adorn" "list" "mode")) nil [53115 56549])
            ("put" code nil nil [56551 56600])
            ("c-make-bare-char-alt" function (:arguments ("chars" "inverted")) nil [56602 57555])
            ("defalias" code nil nil [57602 57638])
            ("defalias" code nil nil [57639 57687])
            ("cc-bytecomp-defvar" code nil nil [57735 57793])
            ("c-emacs-features" variable
               (:constant-flag t
                :default-value (let (list) (if (boundp (quote infodock-version)) (setq list (cons (quote infodock) list))) (let ((table (copy-syntax-table)) entry) (modify-syntax-entry 97 ". 12345678" table) (cond ((arrayp table) (setq entry (aref table 97)) (if (consp entry) (setq entry (car entry)))) ((fboundp (quote get-char-table)) (setq entry (get-char-table 97 table))) (t (error "CC Mode is incompatible with this version of Emacs"))) (setq list (cons (if (= (logand (lsh entry -16) 255) 255) (quote 8-bit) (quote 1-bit)) list))) (let* (mark-ring (bod-param (quote foo)) (eod-param (quote foo)) (beginning-of-defun-function (lambda (&optional arg) (or (eq bod-param (quote foo)) (setq bod-param (quote bar))) (and (eq bod-param (quote foo)) (setq bod-param arg) (eq arg 3)))) (end-of-defun-function (lambda (&optional arg) (and (eq eod-param (quote foo)) (setq eod-param arg) (eq arg 3))))) (if (save-excursion (and (beginning-of-defun 3) (eq bod-param 3) (not (beginning-of-defun)) (end-of-defun 3) (eq eod-param 3) (not (end-of-defun)))) (setq list (cons (quote argumentative-bod-function) list)))) (let ((buf (generate-new-buffer " test")) parse-sexp-lookup-properties parse-sexp-ignore-comments lookup-syntax-properties) (with-current-buffer buf (set-syntax-table (make-syntax-table)) (setq parse-sexp-lookup-properties t parse-sexp-ignore-comments t lookup-syntax-properties t) (modify-syntax-entry 60 ".") (modify-syntax-entry 62 ".") (insert "<()>") (c-mark-<-as-paren (point-min)) (c-mark->-as-paren (+ 3 (point-min))) (goto-char (point-min)) (c-forward-sexp) (if (= (point) (+ 4 (point-min))) (setq list (cons (quote syntax-properties) list)) (error (concat "CC Mode is incompatible with this version of Emacs - " "support for the `syntax-table' text property " "is required."))) (c-safe (modify-syntax-entry 120 "!") (if (string-match "\\s!" "x") (setq list (cons (quote gen-comment-delim) list)))) (c-safe (modify-syntax-entry 120 "|") (if (string-match "\\s|" "x") (setq list (cons (quote gen-string-delim) list)))) (when (and (string-match "[[:alpha:]]" "a") (progn (delete-region (point-min) (point-max)) (insert "foo123") (skip-chars-backward "[:alnum:]") (bobp)) (= (skip-chars-forward "[:alpha:]") 3)) (setq list (cons (quote posix-char-classes) list))) (when (boundp (quote open-paren-in-column-0-is-defun-start)) (let ((open-paren-in-column-0-is-defun-start nil) (parse-sexp-ignore-comments t)) (delete-region (point-min) (point-max)) (set-syntax-table (make-syntax-table)) (modify-syntax-entry 39 "\"") (cond ((memq (quote 8-bit) list) (modify-syntax-entry 47 ". 1456") (modify-syntax-entry 42 ". 23")) ((memq (quote 1-bit) list) (modify-syntax-entry 47 ". 124b") (modify-syntax-entry 42 ". 23"))) (modify-syntax-entry 10 "> b") (insert "/* '
   () */") (backward-sexp) (if (bobp) (setq list (cons (quote col-0-paren) list))))) (set-buffer-modified-p nil)) (kill-buffer buf)) (if (c-safe (>= (length (save-excursion (parse-partial-sexp (point) (point)))) 10)) (setq list (cons (quote pps-extended-state) list)) (error (concat "CC Mode is incompatible with this version of Emacs - " "`parse-partial-sexp' has to return at least 10 elements."))) list))
                nil [57795 64055])
            ("if" code nil nil [64202 64591])
            ("c-add-language" function (:arguments ("mode" "base-mode")) nil [66510 67485])
            ("c-lang-constants" variable (:default-value (make-vector 151 0)) nil [67487 67532])
            ("c-lang-const-expansion" variable nil nil [68178 68213])
            ("c-get-current-file" function nil nil [68215 68622])
            ("c-lang-defconst-eval-immediately" function (:arguments ("form")) nil [68624 68944])
            ("c-lang-defconst" function (:arguments ("name" "args")) nil [68946 73952])
            ("put" code nil nil [73954 74000])
            ("def-edebug-spec" code nil nil [74082 74174])
            ("c-define-lang-constant" function (:arguments ("name" "bindings" "pre-files")) nil [74176 75625])
            ("c-lang-const" function (:arguments ("name" "lang")) nil [75627 78284])
            ("c-lang-constants-under-evaluation" variable nil nil [78286 78332])
            ("c-get-lang-constant" function (:arguments ("name" "source-files" "mode")) nil [78334 81992])
            ("c-find-assignment-for-mode" function (:arguments ("source-pos" "mode" "match-any-lang" "name")) nil [81994 84403])
            ("c-lang-major-mode-is" function (:arguments ("mode")) nil [84405 84986])
            ("cc-provide" code nil nil [84990 85011]))          
      :file "cc-defs.el.gz"
      :pointmax 85038
      :fsize 24168
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 33595 . 33596) (symbol 33000 . 33016) (open-paren 32999 . 33000) (close-paren 32289 . 32290) (symbol 32235 . 32251) (open-paren 32234 . 32235) (close-paren 6517 . 6518) (symbol 6387 . 6403) (open-paren 6386 . 6387) (close-paren 6383 . 6384) (symbol 4037 . 4053) (open-paren 4036 . 4037) (close-paren 3126 . 3127) (symbol 2875 . 2892) (open-paren 2874 . 2875) (close-paren 2338 . 2339) (symbol 2219 . 2235) (open-paren 2218 . 2219) (close-paren 1595 . 1596) (symbol 1564 . 1581) (open-paren 1563 . 1564) (close-paren 1560 . 1561) (symbol 1325 . 1342) (open-paren 1324 . 1325)))
    (semanticdb-table "prog-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1158 1175])
            ("prog-mode" customgroup (:user-visible-flag t) nil [1178 1278])
            ("prog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] (quote prog-indent-sexp)) map)) nil [1280 1436])
            ("prog-indent-sexp" function
               (:user-visible-flag t
                :arguments ("defun"))
                nil [1438 1803])
            ("defvar-local" code nil nil [1805 2023])
            ("prettify-symbols--compose-symbol" function (:arguments ("alist")) nil [2025 3157])
            ("prettify-symbols--make-keywords" function nil nil [3159 3376])
            ("defvar-local" code nil nil [3378 3423])
            ("define-minor-mode" code nil nil [3440 5123])
            ("turn-on-prettify-symbols-mode" function nil nil [5125 5294])
            ("define-globalized-minor-mode" code nil nil [5311 5424])
            ("define-derived-mode" code nil nil [5441 5777])
            ("prog-mode" package nil nil [5779 5799]))          
      :file "prog-mode.el.gz"
      :pointmax 5828
      :fsize 2340
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1175 . 1176) (symbol 1140 . 1157) (open-paren 1139 . 1140)))
    (semanticdb-table "python.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [11029 11050])
            ("cl-lib" include nil nil [11051 11068])
            ("comint" include nil nil [11069 11086])
            ("json" include nil nil [11087 11102])
            ("view-return-to-alist" variable nil nil [11131 11160])
            ("compilation-error-regexp-alist" variable nil nil [11161 11200])
            ("outline-heading-end-regexp" variable nil nil [11201 11236])
            ("comint-mode" function (:prototype-flag t) nil [11238 11270])
            ("add-to-list" code nil nil [11287 11360])
            ("add-to-list" code nil nil [11376 11460])
            ("python" customgroup (:user-visible-flag t) nil [11462 11618])
            ("python-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap backward-sentence] (quote python-nav-backward-block)) (define-key map [remap forward-sentence] (quote python-nav-forward-block)) (define-key map [remap backward-up-list] (quote python-nav-backward-up-list)) (define-key map "
" (quote imenu)) (define-key map "" (quote python-indent-dedent-line-backspace)) (define-key map (kbd "<backtab>") (quote python-indent-dedent-line)) (define-key map "<" (quote python-indent-shift-left)) (define-key map ">" (quote python-indent-shift-right)) (define-key map "c" (quote python-skeleton-class)) (define-key map "d" (quote python-skeleton-def)) (define-key map "f" (quote python-skeleton-for)) (define-key map "i" (quote python-skeleton-if)) (define-key map "t" (quote python-skeleton-try)) (define-key map "w" (quote python-skeleton-while)) (define-key map "" (quote run-python)) (define-key map "" (quote python-shell-send-string)) (define-key map "" (quote python-shell-send-region)) (define-key map "\230" (quote python-shell-send-defun)) (define-key map "" (quote python-shell-send-buffer)) (define-key map "" (quote python-shell-send-file)) (define-key map "" (quote python-shell-switch-to-shell)) (define-key map "" (quote python-check)) (define-key map "" (quote python-eldoc-at-point)) (substitute-key-definition (quote complete-symbol) (quote completion-at-point) map global-map) (easy-menu-define python-menu map "Python Mode menu" (\` ("Python" :help "Python-specific Features" ["Shift region left" python-indent-shift-left :active mark-active :help "Shift region left by a single indentation step"] ["Shift region right" python-indent-shift-right :active mark-active :help "Shift region right by a single indentation step"] "-" ["Start of def/class" beginning-of-defun :help "Go to start of outermost definition around point"] ["End of def/class" end-of-defun :help "Go to end of definition around point"] ["Mark def/class" mark-defun :help "Mark outermost definition around point"] ["Jump to def/class" imenu :help "Jump to a class or function definition"] "--" ("Skeletons") "---" ["Start interpreter" run-python :help "Run inferior Python process in a separate buffer"] ["Switch to shell" python-shell-switch-to-shell :help "Switch to running inferior Python process"] ["Eval string" python-shell-send-string :help "Eval string in inferior Python session"] ["Eval buffer" python-shell-send-buffer :help "Eval buffer in inferior Python session"] ["Eval region" python-shell-send-region :help "Eval region in inferior Python session"] ["Eval defun" python-shell-send-defun :help "Eval defun in inferior Python session"] ["Eval file" python-shell-send-file :help "Eval file in inferior Python session"] ["Debugger" pdb :help "Run pdb under GUD"] "----" ["Check file" python-check :help "Check file for errors"] ["Help on symbol" python-eldoc-at-point :help "Get help on symbol at point"] ["Complete symbol" completion-at-point :help "Complete symbol before point"]))) map)) nil [11636 15222])
            ("python-rx" function (:arguments ("regexps")) nil [18685 19096])
            ("python-rx-constituents" variable
               (:constant-flag t
                :default-value (\` ((block-start \, (rx symbol-start (or "def" "class" "if" "elif" "else" "try" "except" "finally" "for" "while" "with") symbol-end)) (dedenter \, (rx symbol-start (or "elif" "else" "except" "finally") symbol-end)) (block-ender \, (rx symbol-start (or "break" "continue" "pass" "raise" "return") symbol-end)) (decorator \, (rx line-start (* space) 64 (any letter 95) (* (any word 95)))) (defun \, (rx symbol-start (or "def" "class") symbol-end)) (if-name-main \, (rx line-start "if" (+ space) "__name__" (+ space) "==" (+ space) (any 39 34) "__main__" (any 39 34) (* space) 58)) (symbol-name \, (rx (any letter 95) (* (any word 95)))) (open-paren \, (rx (or "{" "[" "("))) (close-paren \, (rx (or "}" "]" ")"))) (simple-operator \, (rx (any 43 45 47 38 94 126 124 42 60 62 61 37))) (not-simple-operator \, (rx (not (any 43 45 47 38 94 126 124 42 60 62 61 37)))) (operator \, (rx (or "+" "-" "/" "&" "^" "~" "|" "*" "<" ">" "=" "%" "**" "//" "<<" ">>" "<=" "!=" "==" ">=" "is" "not"))) (assignment-operator \, (rx (or "=" "+=" "-=" "*=" "/=" "//=" "%=" "**=" ">>=" "<<=" "&=" "^=" "|="))) (string-delimiter \, (rx (and (or (not (any 92 39 34)) point (and (or (not (any 92)) point) 92 (* 92 92) (any 39 34))) (* 92 92) (group (or "\"" "\"\"\"" "'" "'''"))))) (coding-cookie \, (rx line-start 35 (* space) (or (: "coding" (or 58 61) (* space) (group-n 1 (+ (or word 45)))) (: "-*-" (* space) "coding:" (* space) (group-n 1 (+ (or word 45))) (* space) "-*-") (: "vim:" (* space) "set" (+ space) "fileencoding" (* space) 61 (* space) (group-n 1 (+ (or word 45))) (* space) ":")))))))
                nil [15274 18681])
            ("python-syntax--context-compiler-macro" function (:arguments ("form" "type" "syntax-ppss")) nil [19148 19552])
            ("python-syntax-context" function (:arguments ("type" "syntax-ppss")) nil [19555 20049])
            ("python-syntax-context-type" function (:arguments ("syntax-ppss")) nil [20051 20354])
            ("python-syntax-comment-or-string-p" function (:arguments ("ppss")) nil [20356 20509])
            ("python-syntax-closing-paren-p" function nil nil [20511 20700])
            ("define-obsolete-function-alias" code nil nil [20702 20793])
            ("define-obsolete-function-alias" code nil nil [20795 20896])
            ("define-obsolete-function-alias" code nil nil [20898 21015])
            ("python-font-lock-keywords" variable (:default-value (\` ((\, (rx symbol-start (or "and" "del" "from" "not" "while" "as" "elif" "global" "or" "with" "assert" "else" "if" "pass" "yield" "break" "except" "import" "class" "in" "raise" "continue" "finally" "is" "return" "def" "for" "lambda" "try" "print" "exec" "nonlocal" "self") symbol-end)) ((\, (rx symbol-start "def" (1+ space) (group (1+ (or word 95))))) (1 font-lock-function-name-face)) ((\, (rx symbol-start "class" (1+ space) (group (1+ (or word 95))))) (1 font-lock-type-face)) ((\, (rx symbol-start (or "Ellipsis" "False" "None" "NotImplemented" "True" "__debug__" "copyright" "credits" "exit" "license" "quit") symbol-end)) . font-lock-constant-face) ((\, (rx line-start (* (any " 	")) (group "@" (1+ (or word 95)) (0+ "." (1+ (or word 95)))))) (1 font-lock-type-face)) ((\, (rx symbol-start (or "ArithmeticError" "AssertionError" "AttributeError" "BaseException" "DeprecationWarning" "EOFError" "EnvironmentError" "Exception" "FloatingPointError" "FutureWarning" "GeneratorExit" "IOError" "ImportError" "ImportWarning" "IndexError" "KeyError" "KeyboardInterrupt" "LookupError" "MemoryError" "NameError" "NotImplementedError" "OSError" "OverflowError" "PendingDeprecationWarning" "ReferenceError" "RuntimeError" "RuntimeWarning" "StopIteration" "SyntaxError" "SyntaxWarning" "SystemError" "SystemExit" "TypeError" "UnboundLocalError" "UnicodeDecodeError" "UnicodeEncodeError" "UnicodeError" "UnicodeTranslateError" "UnicodeWarning" "UserWarning" "VMSError" "ValueError" "Warning" "WindowsError" "ZeroDivisionError" "StandardError" "BufferError" "BytesWarning" "IndentationError" "ResourceWarning" "TabError") symbol-end)) . font-lock-type-face) ((\, (rx symbol-start (or "abs" "all" "any" "bin" "bool" "callable" "chr" "classmethod" "compile" "complex" "delattr" "dict" "dir" "divmod" "enumerate" "eval" "filter" "float" "format" "frozenset" "getattr" "globals" "hasattr" "hash" "help" "hex" "id" "input" "int" "isinstance" "issubclass" "iter" "len" "list" "locals" "map" "max" "memoryview" "min" "next" "object" "oct" "open" "ord" "pow" "print" "property" "range" "repr" "reversed" "round" "set" "setattr" "slice" "sorted" "staticmethod" "str" "sum" "super" "tuple" "type" "vars" "zip" "__import__" "basestring" "cmp" "execfile" "file" "long" "raw_input" "reduce" "reload" "unichr" "unicode" "xrange" "apply" "buffer" "coerce" "intern" "ascii" "bytearray" "bytes" "exec" "__all__" "__doc__" "__name__" "__package__") symbol-end)) . font-lock-builtin-face) ((\, (lambda (limit) (let ((re (python-rx (group (+ (any word 46 95))) (32 91 (+ (not (any 93))) 93) (* space) assignment-operator)) (res nil)) (while (and (setq res (re-search-forward re limit t)) (or (python-syntax-context (quote paren)) (equal (char-after (point-marker)) 61)))) res))) (1 font-lock-variable-name-face nil nil)) ((\, (lambda (limit) (let ((re (python-rx (group (+ (any word 46 95))) (* space) (* 44 (* space) (+ (any word 46 95)) (* space)) 44 (* space) (+ (any word 46 95)) (* space) assignment-operator)) (res nil)) (while (and (setq res (re-search-forward re limit t)) (goto-char (match-end 1)) (python-syntax-context (quote paren)))) res))) (1 font-lock-variable-name-face nil nil))))) nil [21017 25894])
            ("python-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ((python-rx string-delimiter) (0 (ignore (python-syntax-stringify))))))
                nil [25896 26045])
            ("python-syntax-count-quotes" function (:arguments ("quote-char" "point" "limit")) nil [26047 26514])
            ("python-syntax-stringify" function nil nil [26516 28146])
            ("python-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (let ((symbol (string-to-syntax "_")) (sst (standard-syntax-table))) (dotimes (i 128) (unless (= i 95) (if (equal symbol (aref sst i)) (modify-syntax-entry i "." table))))) (modify-syntax-entry 36 "." table) (modify-syntax-entry 37 "." table) (modify-syntax-entry 35 "<" table) (modify-syntax-entry 10 ">" table) (modify-syntax-entry 39 "\"" table) (modify-syntax-entry 96 "$" table) table)) nil [28148 28861])
            ("python-dotty-syntax-table" variable (:default-value (let ((table (make-syntax-table python-mode-syntax-table))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) table)) nil [28863 29143])
            ("python-indent-offset" variable (:default-value 4) nil [29164 29293])
            ("python-indent-guess-indent-offset" variable (:default-value t) nil [29295 29463])
            ("python-indent-trigger-commands" variable (:default-value (quote (indent-for-tab-command yas-expand yas/expand))) nil [29465 29660])
            ("define-obsolete-variable-alias" code nil nil [29662 29740])
            ("define-obsolete-variable-alias" code nil nil [29742 29839])
            ("python-indent-current-level" variable nil nil [29841 29927])
            ("python-indent-levels" variable (:default-value (quote (0))) nil [29929 30011])
            ("make-obsolete-variable" code nil nil [30013 30370])
            ("make-obsolete-variable" code nil nil [30372 30722])
            ("python-indent-guess-indent-offset" function (:user-visible-flag t) nil [30724 32268])
            ("python-indent-context" function nil nil [32270 40761])
            ("python-indent--calculate-indentation" function nil nil [40763 43075])
            ("python-indent--calculate-levels" function (:arguments ("indentation")) nil [43077 43817])
            ("python-indent--previous-level" function (:arguments ("levels" "indentation")) nil [43819 44169])
            ("python-indent-calculate-indentation" function (:arguments ("previous")) nil [44171 44636])
            ("python-indent-line" function (:arguments ("previous")) nil [44638 45409])
            ("python-indent-calculate-levels" function nil nil [45411 45570])
            ("python-indent-line-function" function nil nil [45572 45938])
            ("python-indent-dedent-line" function (:user-visible-flag t) nil [45940 46196])
            ("python-indent-dedent-line-backspace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46198 46479])
            ("put" code nil nil [46481 46552])
            ("python-indent-region" function (:arguments ("start" "end")) nil [46554 48386])
            ("python-indent-shift-left" function
               (:user-visible-flag t
                :arguments ("start" "end" "count"))
                nil [48388 49411])
            ("add-to-list" code nil nil [49413 49480])
            ("python-indent-shift-right" function
               (:user-visible-flag t
                :arguments ("start" "end" "count"))
                nil [49482 50126])
            ("python-indent-post-self-insert-function" function nil nil [50128 52259])
            ("python-nav-beginning-of-defun-regexp" variable (:default-value (python-rx line-start (* space) defun (+ space) (group symbol-name))) nil [52279 52528])
            ("python-nav--beginning-of-defun" function (:arguments ("arg")) nil [52530 54533])
            ("python-nav-beginning-of-defun" function (:arguments ("arg")) nil [54535 55265])
            ("python-nav-end-of-defun" function (:user-visible-flag t) nil [55267 56033])
            ("python-nav--syntactically" function (:arguments ("fn" "poscompfn" "contextfn")) nil [56035 57258])
            ("python-nav--forward-defun" function (:arguments ("arg")) nil [57260 58085])
            ("python-nav-backward-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58087 58336])
            ("python-nav-forward-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58338 58581])
            ("python-nav-beginning-of-statement" function (:user-visible-flag t) nil [58583 59210])
            ("python-nav-end-of-statement" function
               (:user-visible-flag t
                :arguments ("noend"))
                nil [59212 60873])
            ("python-nav-backward-statement" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60875 61110])
            ("python-nav-forward-statement" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [61112 61648])
            ("python-nav-beginning-of-block" function (:user-visible-flag t) nil [61650 62622])
            ("python-nav-end-of-block" function (:user-visible-flag t) nil [62624 63224])
            ("python-nav-backward-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63226 63453])
            ("python-nav-forward-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [63455 64407])
            ("python-nav--lisp-forward-sexp" function (:arguments ("arg")) nil [64409 64784])
            ("python-nav--lisp-forward-sexp-safe" function (:arguments ("arg")) nil [64786 65486])
            ("python-nav--forward-sexp" function (:arguments ("dir" "safe")) nil [65488 70132])
            ("python-nav-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70134 70497])
            ("python-nav-backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70499 70744])
            ("python-nav-forward-sexp-safe" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70746 71125])
            ("python-nav-backward-sexp-safe" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71127 71389])
            ("python-nav--up-list" function (:arguments ("dir")) nil [71391 72974])
            ("python-nav-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [72976 73434])
            ("python-nav-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73436 73789])
            ("python-nav-if-name-main" function (:user-visible-flag t) nil [73791 74697])
            ("python-shell-buffer-name" variable (:default-value "Python") nil [74724 74867])
            ("python-shell-interpreter" variable (:default-value "python") nil [74869 74989])
            ("python-shell-internal-buffer-name" variable (:default-value "Python Internal") nil [74991 75165])
            ("python-shell-interpreter-args" variable (:default-value "-i") nil [75167 75296])
            ("python-shell-interpreter-interactive-arg" variable (:default-value "-i") nil [75298 75448])
            ("python-shell-prompt-detect-enabled" variable (:default-value t) nil [75450 75609])
            ("python-shell-prompt-detect-failure-warning" variable (:default-value t) nil [75611 75781])
            ("python-shell-prompt-input-regexps" variable (:default-value (quote (">>> " "\\.\\.\\. " "In \\[[0-9]+\\]: " "In : " "\\.\\.\\.: "))) nil [75783 76193])
            ("python-shell-prompt-output-regexps" variable (:default-value (quote ("" "Out\\[[0-9]+\\]: " "Out :"))) nil [76195 76497])
            ("python-shell-prompt-regexp" variable (:default-value ">>> ") nil [76499 76684])
            ("python-shell-prompt-block-regexp" variable (:default-value "\\.\\.\\. ") nil [76686 76879])
            ("python-shell-prompt-output-regexp" variable nil nil [76881 77060])
            ("python-shell-prompt-pdb-regexp" variable (:default-value "[(<]*[Ii]?[Pp]db[>)]+ ") nil [77062 77263])
            ("python-shell-enable-font-lock" variable (:default-value t) nil [77265 77507])
            ("python-shell-unbuffered" variable (:default-value t) nil [77509 77746])
            ("python-shell-process-environment" variable nil nil [77748 78132])
            ("python-shell-extra-pythonpaths" variable nil nil [78134 78398])
            ("python-shell-exec-path" variable nil nil [78400 78742])
            ("python-shell-virtualenv-path" variable nil nil [78744 79093])
            ("python-shell-setup-codes" variable (:default-value (quote (python-shell-completion-setup-code python-ffap-setup-code python-eldoc-setup-code))) nil [79095 79406])
            ("python-shell-compilation-regexp-alist" variable (:default-value (\` (((\, (rx line-start (1+ (any " 	")) "File \"" (group (1+ (not (any "\"<")))) "\", line " (group (1+ digit)))) 1 2) ((\, (rx " in file " (group (1+ not-newline)) " on line " (group (1+ digit)))) 1 2) ((\, (rx line-start "> " (group (1+ (not (any "(\"<")))) "(" (group (1+ digit)) ")" (1+ (not (any "("))) "()")) 1 2)))) nil [79408 79950])
            ("python-shell--prompt-calculated-input-regexp" variable nil nil [79952 80164])
            ("python-shell--prompt-calculated-output-regexp" variable nil nil [80166 80368])
            ("python-shell-prompt-detect" function nil nil [80370 84027])
            ("python-shell-prompt-validate-regexps" function nil nil [84029 85070])
            ("python-shell-prompt-set-calculated-regexps" function nil nil [85072 87802])
            ("python-shell-get-process-name" function (:arguments ("dedicated")) nil [87804 88361])
            ("python-shell-internal-get-process-name" function nil nil [88363 89337])
            ("python-shell-parse-command" function nil nil [89339 89894])
            ("python-shell-calculate-process-environment" function nil nil [89896 91057])
            ("python-shell-calculate-exec-path" function nil nil [91059 91408])
            ("python-comint-output-filter-function" function (:arguments ("output")) nil [91410 91604])
            ("python-shell--parent-buffer" variable nil nil [91606 91646])
            ("python-shell-output-syntax-table" variable (:default-value (let ((table (make-syntax-table python-dotty-syntax-table))) (modify-syntax-entry 39 "." table) (modify-syntax-entry 34 "." table) (modify-syntax-entry 40 "." table) (modify-syntax-entry 91 "." table) (modify-syntax-entry 123 "." table) (modify-syntax-entry 41 "." table) (modify-syntax-entry 93 "." table) (modify-syntax-entry 125 "." table) table)) nil [91648 92178])
            ("define-derived-mode" code nil nil [92180 96107])
            ("python-shell-make-comint" function (:arguments ("cmd" "proc-name" "pop" "internal")) nil [96109 98160])
            ("run-python" function
               (:user-visible-flag t
                :arguments ("cmd" "dedicated" "show"))
                nil [98177 99153])
            ("run-python-internal" function nil nil [99155 100087])
            ("python-shell-get-buffer" function nil nil [100089 100741])
            ("python-shell-get-process" function nil nil [100743 100882])
            ("python-shell-get-or-create-process" function (:arguments ("cmd" "dedicated" "show")) nil [100884 102255])
            ("python-shell-internal-buffer" variable nil nil [102257 102458])
            ("python-shell-internal-last-output" variable nil nil [102460 102656])
            ("python-shell-internal-get-or-create-process" function nil nil [102658 103391])
            ("define-obsolete-function-alias" code nil nil [103393 103492])
            ("define-obsolete-variable-alias" code nil nil [103494 103580])
            ("define-obsolete-variable-alias" code nil nil [103582 103683])
            ("python-shell--save-temp-file" function (:arguments ("string")) nil [103685 104136])
            ("python-shell-send-string" function
               (:user-visible-flag t
                :arguments ("string" "process"))
                nil [104138 104802])
            ("python-shell-output-filter-in-progress" variable nil nil [104804 104855])
            ("python-shell-output-filter-buffer" variable nil nil [104856 104902])
            ("python-shell-output-filter" function (:arguments ("string")) nil [104904 106476])
            ("python-shell-send-string-no-output" function (:arguments ("string" "process")) nil [106478 107384])
            ("python-shell-internal-send-string" function (:arguments ("string")) nil [107386 107971])
            ("define-obsolete-function-alias" code nil nil [107973 108070])
            ("define-obsolete-function-alias" code nil nil [108072 108168])
            ("python-shell-buffer-substring" function (:arguments ("start" "end" "nomain")) nil [108170 111422])
            ("python-shell-send-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "send-main"))
                nil [111424 112179])
            ("python-shell-send-buffer" function
               (:user-visible-flag t
                :arguments ("send-main"))
                nil [112181 112629])
            ("python-shell-send-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [112631 113304])
            ("python-shell-send-file" function
               (:user-visible-flag t
                :arguments ("file-name" "process" "temp-file-name" "delete"))
                nil [113306 114807])
            ("python-shell-switch-to-shell" function (:user-visible-flag t) nil [114809 114984])
            ("python-shell-send-setup-code" function nil nil [114986 115379])
            ("add-hook" code nil nil [115381 115459])
            ("python-shell-completion-setup-code" variable (:default-value "try:
    import __builtin__
except ImportError:
    # Python 3
    import builtins as __builtin__
try:
    import readline, rlcompleter
except:
    def __PYTHON_EL_get_completions(text):
        return []
else:
    def __PYTHON_EL_get_completions(text):
        builtins = dir(__builtin__)
        completions = []
        try:
            splits = text.split()
            is_module = splits and splits[0] in ('from', 'import')
            is_ipython = ('__IPYTHON__' in builtins or
                          '__IPYTHON__active' in builtins)
            if is_module:
                from IPython.core.completerlib import module_completion
                completions = module_completion(text.strip())
            elif is_ipython and '__IP' in builtins:
                completions = __IP.complete(text)
            elif is_ipython and 'get_ipython' in builtins:
                completions = get_ipython().Completer.all_completions(text)
            else:
                i = 0
                while True:
                    res = readline.get_completer()(text, i)
                    if not res:
                        break
                    i += 1
                    completions.append(res)
        except:
            pass
        return completions") nil [115485 116893])
            ("python-shell-completion-string-code" variable (:default-value "';'.join(__PYTHON_EL_get_completions('''%s'''))
") nil [116895 117213])
            ("define-obsolete-variable-alias" code nil nil [117215 117400])
            ("python-shell-completion-pdb-string-code" variable (:default-value "';'.join(globals().keys() + locals().keys())") nil [117402 117611])
            ("python-shell-completion-get-completions" function (:arguments ("process" "line" "input")) nil [117613 119489])
            ("python-shell-completion-complete-at-point" function (:arguments ("process")) nil [119491 121069])
            ("python-shell-completion-complete-or-indent" function (:user-visible-flag t) nil [121071 121487])
            ("python-pdbtrack-activate" variable (:default-value t) nil [121518 121659])
            ("python-pdbtrack-stacktrace-info-regexp" variable (:default-value "> \\([^\"(<]+\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_<>]+\\)()") nil [121661 121937])
            ("python-pdbtrack-tracked-buffer" variable nil nil [121939 122131])
            ("python-pdbtrack-buffers-to-kill" variable nil nil [122133 122236])
            ("python-pdbtrack-set-tracked-buffer" function (:arguments ("file-name")) nil [122238 122879])
            ("python-pdbtrack-comint-output-filter-function" function (:arguments ("output")) nil [122881 125745])
            ("python-completion-complete-at-point" function nil nil [125772 126211])
            ("add-to-list" code nil nil [126213 126317])
            ("python-fill-comment-function" variable (:default-value (quote python-fill-comment)) nil [126341 126537])
            ("python-fill-string-function" variable (:default-value (quote python-fill-string)) nil [126539 126731])
            ("python-fill-decorator-function" variable (:default-value (quote python-fill-decorator)) nil [126733 126937])
            ("python-fill-paren-function" variable (:default-value (quote python-fill-paren)) nil [126939 127127])
            ("python-fill-docstring-style" variable (:default-value (quote pep-257)) nil [127129 128849])
            ("python-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [128851 130116])
            ("python-fill-comment" function (:arguments ("justify")) nil [130118 130318])
            ("python-fill-string" function (:arguments ("justify")) nil [130320 133557])
            ("python-fill-decorator" function (:arguments ("_justify")) nil [133559 133733])
            ("python-fill-paren" function (:arguments ("justify")) nil [133735 134931])
            ("python-skeleton-autoinsert" variable nil nil [134950 135200])
            ("define-obsolete-variable-alias" code nil nil [135202 135293])
            ("python-skeleton-available" variable (:default-value (quote nil)) nil [135295 135375])
            ("define-abbrev-table" code nil nil [135377 135776])
            ("python-skeleton-define" function (:arguments ("name" "doc" "skel")) nil [135778 136472])
            ("define-abbrev-table" code nil nil [136474 136610])
            ("python-define-auxiliary-skeleton" function (:arguments ("name" "doc" "skel")) nil [136612 137312])
            ("python-define-auxiliary-skeleton" code nil nil [137314 137357])
            ("python-define-auxiliary-skeleton" code nil nil [137359 137404])
            ("python-define-auxiliary-skeleton" code nil nil [137406 137452])
            ("python-skeleton-define" code nil nil [137454 137627])
            ("python-skeleton-define" code nil nil [137629 137741])
            ("python-skeleton-define" code nil nil [137743 137856])
            ("python-skeleton-define" code nil nil [137858 138082])
            ("python-skeleton-define" code nil nil [138084 138327])
            ("python-skeleton-define" code nil nil [138329 138561])
            ("python-skeleton-add-menu-items" function nil nil [138563 138924])
            ("python-ffap-setup-code" variable (:default-value "def __FFAP_get_module_path(module):
    try:
        import os
        path = __import__(module).__file__
        if path[-4:] == '.pyc' and os.path.exists(path[0:-1]):
            path = path[:-1]
        return path
    except:
        return ''") nil [138937 139294])
            ("python-ffap-string-code" variable (:default-value "__FFAP_get_module_path('''%s''')
") nil [139296 139467])
            ("python-ffap-module-path" function (:arguments ("module")) nil [139469 140015])
            ("ffap-alist" variable nil nil [140017 140036])
            ("eval-after-load" code nil nil [140038 140210])
            ("python-check-command" variable (:default-value "pyflakes") nil [140230 140349])
            ("python-check-buffer-name" variable (:default-value "*Python check: %s*") nil [140351 140484])
            ("python-check-custom-command" variable nil nil [140486 140544])
            ("python-check" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [140546 141612])
            ("python-eldoc-setup-code" variable (:default-value "def __PYDOC_get_help(obj):
    try:
        import inspect
        if hasattr(obj, 'startswith'):
            obj = eval(obj, globals())
        doc = inspect.getdoc(obj)
        if not doc and callable(obj):
            target = None
            if inspect.isclass(obj) and hasattr(obj, '__init__'):
                target = obj.__init__
                objtype = 'class'
            else:
                target = obj
                objtype = 'def'
            if target:
                args = inspect.formatargspec(
                    *inspect.getargspec(target)
                )
                name = obj.__name__
                doc = '{objtype} {name}{args}'.format(
                    objtype=objtype, name=name, args=args
                )
        else:
            doc = doc.splitlines()[0]
    except:
        doc = ''
    try:
        exec('print doc')
    except SyntaxError:
        print(doc)") nil [141627 142662])
            ("python-eldoc-string-code" variable (:default-value "__PYDOC_get_help('''%s''')
") nil [142664 142840])
            ("python-eldoc--get-doc-at-point" function (:arguments ("force-input" "force-process")) nil [142842 143684])
            ("python-eldoc-function" function nil nil [143686 143957])
            ("python-eldoc-at-point" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [143959 144429])
            ("add-to-list" code nil nil [144431 144530])
            ("python-imenu-format-item-label-function" variable (:default-value (quote python-imenu-format-item-label)) nil [144545 144733])
            ("python-imenu-format-parent-item-label-function" variable (:default-value (quote python-imenu-format-parent-item-label)) nil [144735 144943])
            ("python-imenu-format-parent-item-jump-label-function" variable (:default-value (quote python-imenu-format-parent-item-jump-label)) nil [144945 145168])
            ("python-imenu-format-item-label" function (:arguments ("type" "name")) nil [145170 145311])
            ("python-imenu-format-parent-item-label" function (:arguments ("type" "name")) nil [145313 145492])
            ("python-imenu-format-parent-item-jump-label" function (:arguments ("type" "_name")) nil [145494 145707])
            ("python-imenu--put-parent" function (:arguments ("type" "name" "pos" "tree")) nil [145709 146101])
            ("python-imenu--build-tree" function (:arguments ("min-indent" "prev-indent" "tree")) nil [146103 148084])
            ("python-imenu-create-index" function nil nil [148086 148531])
            ("python-imenu-create-flat-index" function (:arguments ("alist" "prefix")) nil [148533 150168])
            ("python-info-current-defun" function (:arguments ("include-type")) nil [150190 153223])
            ("python-info-current-symbol" function (:arguments ("replace-self")) nil [153225 154149])
            ("python-info-statement-starts-block-p" function nil nil [154151 154353])
            ("python-info-statement-ends-block-p" function nil nil [154355 154757])
            ("python-info-beginning-of-statement-p" function nil nil [154759 154969])
            ("python-info-end-of-statement-p" function nil nil [154971 155163])
            ("python-info-beginning-of-block-p" function nil nil [155165 155355])
            ("python-info-end-of-block-p" function nil nil [155357 155527])
            ("define-obsolete-function-alias" code nil nil [155529 155644])
            ("python-info-dedenter-opening-block-position" function nil nil [155646 156330])
            ("python-info-dedenter-opening-block-positions" function nil nil [156332 158123])
            ("define-obsolete-function-alias" code nil nil [158125 158247])
            ("python-info-dedenter-opening-block-message" function nil nil [158249 158701])
            ("python-info-dedenter-statement-p" function nil nil [158703 159042])
            ("python-info-line-ends-backslash-p" function (:arguments ("line-number")) nil [159044 159628])
            ("python-info-beginning-of-backslash" function (:arguments ("line-number")) nil [159630 160213])
            ("python-info-continuation-line-p" function nil nil [160215 161771])
            ("python-info-block-continuation-line-p" function nil nil [161773 162075])
            ("python-info-assignment-continuation-line-p" function nil nil [162077 162901])
            ("python-info-looking-at-beginning-of-defun" function (:arguments ("syntax-ppss")) nil [162903 163229])
            ("python-info-current-line-comment-p" function nil nil [163231 163427])
            ("python-info-current-line-empty-p" function nil nil [163429 163776])
            ("python-info-encoding-from-cookie" function nil nil [163778 164312])
            ("python-info-encoding" function nil nil [164314 164782])
            ("python-util-goto-line" function (:arguments ("line-number")) nil [164809 164943])
            ("python-util-clone-local-variables" function (:arguments ("from-buffer" "regexp")) nil [164969 165439])
            ("python-util-forward-comment" function (:arguments ("direction")) nil [165441 165856])
            ("python-util-popn" function (:arguments ("lst" "n")) nil [165858 166288])
            ("python-util-strip-string" function (:arguments ("string")) nil [166290 166555])
            ("python-util-valid-regexp-p" function (:arguments ("regexp")) nil [166557 166684])
            ("python-electric-pair-string-delimiter" function nil nil [166688 167105])
            ("electric-indent-inhibit" variable nil nil [167107 167139])
            ("define-derived-mode" code nil nil [167156 170291])
            ("python" package nil nil [170294 170311]))          
      :file "python.el.gz"
      :pointmax 170408
      :fsize 39226
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 19552 . 19553) (symbol 19128 . 19145) (open-paren 19127 . 19128) (close-paren 19096 . 19097) (symbol 15254 . 15271) (open-paren 15253 . 15254)))
    (semanticdb-table "scheme.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("lisp-mode" include nil nil [1969 1989])
            ("scheme-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table)) (i 0)) (while (< i 48) (modify-syntax-entry i "_   " st) (setq i (1+ i))) (setq i (1+ 57)) (while (< i 65) (modify-syntax-entry i "_   " st) (setq i (1+ i))) (setq i (1+ 90)) (while (< i 97) (modify-syntax-entry i "_   " st) (setq i (1+ i))) (setq i (1+ 122)) (while (< i 128) (modify-syntax-entry i "_   " st) (setq i (1+ i))) (modify-syntax-entry 9 "    " st) (modify-syntax-entry 10 ">   " st) (modify-syntax-entry 12 "    " st) (modify-syntax-entry 13 "    " st) (modify-syntax-entry 32 "    " st) (modify-syntax-entry 91 "(]  " st) (modify-syntax-entry 93 ")[  " st) (modify-syntax-entry 123 "(}  " st) (modify-syntax-entry 125 "){  " st) (modify-syntax-entry 124 "\" 23bn" st) (modify-syntax-entry 40 "()  " st) (modify-syntax-entry 41 ")(  " st) (modify-syntax-entry 59 "<" st) (modify-syntax-entry 34 "\"   " st) (modify-syntax-entry 39 "'   " st) (modify-syntax-entry 96 "'   " st) (modify-syntax-entry 44 "'   " st) (modify-syntax-entry 64 "'   " st) (modify-syntax-entry 35 "' 14" st) (modify-syntax-entry 92 "\\   " st) st)) nil [1991 4055])
            ("scheme-mode-abbrev-table" variable nil nil [4058 4095])
            ("define-abbrev-table" code nil nil [4096 4146])
            ("scheme-imenu-generic-expression" variable (:default-value (quote ((nil "^(define\\(\\|-\\(generic\\(\\|-procedure\\)\\|method\\)\\)*\\s-+(?\\(\\sw+\\)" 4) ("Types" "^(define-class\\s-+(?\\(\\sw+\\)" 1) ("Macros" "^(\\(defmacro\\|define-macro\\|define-syntax\\)\\s-+(?\\(\\sw+\\)" 2)))) nil [4148 4501])
            ("scheme-mode-variables" function nil nil [4503 6157])
            ("scheme-mode-line-process" variable nil nil [6159 6195])
            ("scheme-mode-map" variable (:default-value (let ((smap (make-sparse-keymap)) (map (make-sparse-keymap "Scheme"))) (set-keymap-parent smap lisp-mode-shared-map) (define-key smap [menu-bar scheme] (cons "Scheme" map)) (define-key map [run-scheme] (quote ("Run Inferior Scheme" . run-scheme))) (define-key map [uncomment-region] (quote ("Uncomment Out Region" lambda (beg end) (interactive "r") (comment-region beg end (quote (4)))))) (define-key map [comment-region] (quote ("Comment Out Region" . comment-region))) (define-key map [indent-region] (quote ("Indent Region" . indent-region))) (define-key map [indent-line] (quote ("Indent Line" . lisp-indent-line))) (put (quote comment-region) (quote menu-enable) (quote mark-active)) (put (quote uncomment-region) (quote menu-enable) (quote mark-active)) (put (quote indent-region) (quote menu-enable) (quote mark-active)) smap)) nil [6197 7171])
            ("scheme-mode-commands" function (:arguments ("map")) nil [7194 7386])
            ("define-derived-mode" code nil nil [7404 8268])
            ("scheme" customgroup (:user-visible-flag t) nil [8270 8405])
            ("scheme-mit-dialect" variable (:default-value t) nil [8407 8585])
            ("dsssl-sgml-declaration" variable (:default-value "<!DOCTYPE style-sheet PUBLIC \"-//James Clark//DTD DSSSL Style Sheet//EN\">
") nil [8587 9034])
            ("scheme-mode-hook" variable nil nil [9036 9165])
            ("dsssl-mode-hook" variable nil nil [9167 9294])
            ("scheme-program-name" variable (:default-value "scheme") nil [9340 9462])
            ("dsssl-imenu-generic-expression" variable (:default-value (quote (("Defines" "^(define\\s-+(?\\(\\sw+\\)" 1) ("Modes" "^\\s-*(mode\\s-+\\(\\(\\sw\\|\\s-\\)+\\)" 1) ("Elements" "^\\s-*(element\\s-+(?\\(\\(\\sw\\|\\s-\\)+\\))?" 1) ("Declarations" "^(declare\\(-\\sw+\\)+\\>\\s-+\\(\\sw+\\)" 2)))) nil [9464 10174])
            ("scheme-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (list (list (concat "(\\(define\\*?\\(" "\\(\\|-public\\|-method\\|-generic\\(-procedure\\)?\\)\\|" "\\(-syntax\\|-macro\\)\\|" "-class" "\\|-module" "\\)\\)\\>" "[ 	]*(?" "\\(\\sw+\\)?") (quote (1 font-lock-keyword-face)) (quote (6 (cond ((match-beginning 3) font-lock-function-name-face) ((match-beginning 5) font-lock-variable-name-face) (t font-lock-type-face)) nil t))))))
                nil [10176 11088])
            ("scheme-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append scheme-font-lock-keywords-1 (eval-when-compile (list (cons (concat "(" (regexp-opt (quote ("begin" "call-with-current-continuation" "call/cc" "call-with-input-file" "call-with-output-file" "case" "cond" "do" "else" "for-each" "if" "lambda" "λ" "let" "let*" "let-syntax" "letrec" "letrec-syntax" "export" "import" "let-values" "let*-values" "and" "or" "delay" "force" "map" "syntax" "syntax-rules")) t) "\\>") 1) (quote ("(let\\s-+\\(\\sw+\\)" (1 font-lock-function-name-face))) (quote ("\\<<\\sw+>\\>" . font-lock-type-face)) (quote ("\\<#?:\\sw+\\>" . font-lock-builtin-face)) (quote ("(\\(\\<library\\>\\)\\s-*(?\\(\\sw+\\)?" (1 font-lock-keyword-face) (2 font-lock-type-face)))))))
                nil [11090 12522])
            ("scheme-font-lock-keywords" variable (:default-value scheme-font-lock-keywords-1) nil [12524 12640])
            ("scheme-sexp-comment-syntax-table" variable
               (:constant-flag t
                :default-value (let ((st (make-syntax-table scheme-mode-syntax-table))) (modify-syntax-entry 59 "." st) (modify-syntax-entry 10 " " st) (modify-syntax-entry 35 "'" st) st))
                nil [12642 12863])
            ("put" code nil nil [12865 12903])
            ("put" code nil nil [12979 13173])
            ("scheme-syntax-propertize" function (:arguments ("beg" "end")) nil [13175 13454])
            ("scheme-syntax-propertize-sexp-comment" function (:arguments ("_" "end")) nil [13456 14033])
            ("define-derived-mode" code nil nil [14050 15246])
            ("put" code nil nil [15362 15402])
            ("put" code nil nil [15403 15440])
            ("put" code nil nil [15441 15483])
            ("put" code nil nil [15484 15521])
            ("put" code nil nil [15522 15560])
            ("put" code nil nil [15561 15598])
            ("put" code nil nil [15599 15633])
            ("dsssl-font-lock-keywords" variable (:default-value (eval-when-compile (list (list "(\\(define\\(-\\w+\\)?\\)\\>[ 	]*\\((?\\)\\(\\sw+\\)\\>" (quote (1 font-lock-keyword-face)) (quote (4 font-lock-function-name-face))) (cons (concat "(\\(" "and\\|c\\(ase\\|ond\\)\\|else\\|if\\|" "l\\(ambda\\|et\\(\\|*\\|rec\\)\\)\\|map\\|or\\|with-mode" "\\)\\>") 1) (quote ("(\\(element\\|mode\\|declare-\\w+\\)\\>[ 	]*\\(\\sw+\\)" (1 font-lock-keyword-face) (2 font-lock-type-face))) (quote ("(\\(element\\)\\>[ 	]*(\\(\\S)+\\))" (1 font-lock-keyword-face) (2 font-lock-type-face))) (quote ("\\<\\sw+:\\>" . font-lock-constant-face)) (quote ("<\\([!?][-a-z0-9]+\\)" 1 font-lock-keyword-face)) (quote ("<\\(/?[-a-z0-9]+\\)" 1 font-lock-function-name-face))))) nil [15635 16710])
            ("calculate-lisp-indent-last-sexp" variable nil nil [16714 16754])
            ("scheme-indent-function" function (:arguments ("indent-point" "state")) nil [16858 18871])
            ("would-be-symbol" function (:arguments ("string")) nil [18907 18989])
            ("next-sexp-as-string" function nil nil [18991 19183])
            ("scheme-let-indent" function (:arguments ("state" "indent-point" "normal-indent")) nil [19463 19726])
            ("put" code nil nil [19947 19985])
            ("put" code nil nil [19986 20023])
            ("put" code nil nil [20024 20062])
            ("put" code nil nil [20063 20098])
            ("put" code nil nil [20099 20138])
            ("put" code nil nil [20139 20192])
            ("put" code nil nil [20193 20230])
            ("put" code nil nil [20231 20270])
            ("put" code nil nil [20271 20314])
            ("put" code nil nil [20325 20369])
            ("put" code nil nil [20380 20421])
            ("put" code nil nil [20439 20482])
            ("put" code nil nil [20483 20529])
            ("put" code nil nil [20530 20575])
            ("put" code nil nil [20576 20620])
            ("put" code nil nil [20632 20672])
            ("put" code nil nil [20681 20734])
            ("put" code nil nil [20735 20788])
            ("put" code nil nil [20789 20842])
            ("put" code nil nil [20843 20897])
            ("put" code nil nil [20898 20950])
            ("put" code nil nil [20951 21003])
            ("put" code nil nil [21004 21053])
            ("put" code nil nil [21062 21107])
            ("if" code nil nil [21157 23228])
            ("scheme" package nil nil [23230 23247]))          
      :file "scheme.el.gz"
      :pointmax 23273
      :fsize 7198
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "etags.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [969 984])
            ("button" include nil nil [985 1002])
            ("tags-file-name" variable nil nil [1019 1255])
            ("etags" customgroup (:user-visible-flag t) nil [1483 1534])
            ("tags-case-fold-search" variable (:default-value (quote default)) nil [1551 1943])
            ("tags-table-list" variable nil nil [2036 2417])
            ("tags-compression-info-list" variable (:default-value (purecopy (quote ("" ".Z" ".bz2" ".gz" ".xz" ".tgz")))) nil [2434 2723])
            ("tags-add-tables" variable (:default-value (quote ask-user)) nil [3216 3610])
            ("tags-revert-without-query" variable nil nil [3612 3761])
            ("tags-table-computed-list" variable nil nil [3763 4245])
            ("tags-table-computed-list-for" variable nil nil [4247 4493])
            ("tags-table-list-pointer" variable nil nil [4495 4684])
            ("tags-table-list-started-at" variable nil nil [4686 4804])
            ("tags-table-set-list" variable nil nil [4806 4968])
            ("find-tag-hook" variable nil nil [4985 5231])
            ("find-tag-default-function" variable nil nil [5248 5585])
            ("find-tag-marker-ring-length" variable (:default-value 16) nil [5587 5756])
            ("tags-tag-face" variable (:default-value (quote default)) nil [5758 5891])
            ("tags-apropos-verbose" variable nil nil [5893 6055])
            ("tags-apropos-additional-actions" variable nil nil [6057 6974])
            ("find-tag-marker-ring" variable (:default-value (make-ring find-tag-marker-ring-length)) nil [6976 7122])
            ("default-tags-table-function" variable nil nil [7124 7348])
            ("tags-location-ring" variable (:default-value (make-ring find-tag-marker-ring-length)) nil [7350 7553])
            ("tags-table-files" variable nil nil [7630 7795])
            ("tags-completion-table" variable nil nil [7797 7887])
            ("tags-included-tables" variable nil nil [7889 7982])
            ("next-file-list" variable nil nil [7984 8059])
            ("tags-table-format-functions" variable (:default-value (quote (etags-recognize-tags-table tags-recognize-empty-tags-table))) nil [8090 8469])
            ("file-of-tag-function" variable nil nil [8471 8664])
            ("tags-table-files-function" variable nil nil [8665 8775])
            ("tags-completion-table-function" variable nil nil [8776 8870])
            ("snarf-tag-function" variable nil nil [8871 9079])
            ("goto-tag-location-function" variable nil nil [9080 9252])
            ("find-tag-regexp-search-function" variable nil nil [9253 9373])
            ("find-tag-regexp-tag-order" variable nil nil [9374 9482])
            ("find-tag-regexp-next-line-after-failure-p" variable nil nil [9483 9602])
            ("find-tag-search-function" variable nil nil [9603 9709])
            ("find-tag-tag-order" variable nil nil [9710 9804])
            ("find-tag-next-line-after-failure-p" variable nil nil [9805 9910])
            ("list-tags-function" variable nil nil [9911 9998])
            ("tags-apropos-function" variable nil nil [9999 10092])
            ("tags-included-tables-function" variable nil nil [10093 10211])
            ("verify-tags-table-function" variable nil nil [10212 10320])
            ("initialize-new-tags-table" function nil nil [10323 10994])
            ("tags-table-mode" function (:user-visible-flag t) nil [11011 11259])
            ("visit-tags-table" function
               (:user-visible-flag t
                :arguments ("file" "local"))
                nil [11276 12806])
            ("tags-table-check-computed-list" function nil nil [12808 14677])
            ("tags-table-extend-computed-list" function nil nil [14679 16390])
            ("tags-expand-table-name" function (:arguments ("file")) nil [16392 16603])
            ("tags-table-list-member" function (:arguments ("file" "list")) nil [16735 17205])
            ("tags-verify-table" function (:arguments ("file")) nil [17207 18916])
            ("tags-table-including" function (:arguments ("this-file" "core-only")) nil [19327 21369])
            ("tags-next-table" function nil nil [21371 22211])
            ("visit-tags-table-buffer" function (:arguments ("cont")) nil [22228 28536])
            ("tags-reset-tags-tables" function (:user-visible-flag t) nil [28538 29339])
            ("file-of-tag" function (:arguments ("relative")) nil [29342 29674])
            ("tags-table-files" function nil nil [29691 30039])
            ("tags-included-tables" function nil nil [30041 30284])
            ("tags-completion-table" function nil nil [30287 31464])
            ("tags-lazy-completion-table" function nil nil [31466 31854])
            ("tags-completion-at-point-function" function nil nil [32101 32848])
            ("find-tag-tag" function (:arguments ("string")) nil [32851 33522])
            ("last-tag" variable nil nil [33524 33581])
            ("find-tag-interactive" function (:arguments ("prompt" "no-default")) nil [33583 33996])
            ("find-tag-history" variable nil nil [33998 34027])
            ("etags-case-fold-search" variable nil nil [34063 34094])
            ("etags-syntax-table" variable nil nil [34095 34122])
            ("local-find-tag-hook" variable nil nil [34123 34151])
            ("find-tag-noselect" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [34168 37290])
            ("find-tag" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [37307 38506])
            ("find-tag-other-window" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p" "regexp-p"))
                nil [38573 40419])
            ("find-tag-other-frame" function
               (:user-visible-flag t
                :arguments ("tagname" "next-p"))
                nil [40503 41596])
            ("find-tag-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "next-p" "other-window"))
                nil [41679 42776])
            ("pop-tag-mark" function (:user-visible-flag t) nil [42909 43520])
            ("tag-lines-already-matched" variable nil nil [43523 43599])
            ("find-tag-in-order" function (:arguments ("pattern" "search-forward-func" "order" "next-line-after-failure-p" "matching" "first-search")) nil [43630 47974])
            ("tag-find-file-of-tag-noselect" function (:arguments ("file")) nil [47976 49820])
            ("tag-find-file-of-tag" function (:arguments ("file")) nil [49822 50007])
            ("etags-recognize-tags-table" function nil nil [50048 51677])
            ("etags-verify-tags-table" function nil nil [51679 51875])
            ("etags-file-of-tag" function (:arguments ("relative")) nil [51877 52209])
            ("etags-tags-completion-table" function nil nil [52212 53416])
            ("etags-snarf-tag" function (:arguments ("use-explicit")) nil [53418 54985])
            ("etags-goto-tag-location" function (:arguments ("tag-info")) nil [54987 57428])
            ("etags-list-tags" function (:arguments ("file")) nil [57430 58703])
            ("tags-with-face" function (:arguments ("face" "body")) nil [58705 59036])
            ("etags-tags-apropos-additional" function (:arguments ("regexp")) nil [59038 60273])
            ("etags-tags-apropos" function (:arguments ("string")) nil [60275 62482])
            ("etags-tags-table-files" function nil nil [62484 62879])
            ("etags-tags-included-tables" function nil nil [62920 63428])
            ("tags-recognize-empty-tags-table" function nil nil [63460 64059])
            ("tag-exact-file-name-match-p" function (:arguments ("tag")) nil [64606 64874])
            ("tag-file-name-match-p" function (:arguments ("tag")) nil [64999 65221])
            ("tag-exact-match-p" function (:arguments ("tag")) nil [65555 66006])
            ("tag-implicit-name-match-p" function (:arguments ("tag")) nil [66123 66594])
            ("tag-symbol-match-p" function (:arguments ("tag")) nil [66723 67041])
            ("tag-word-match-p" function (:arguments ("tag")) nil [67159 67419])
            ("tag-partial-file-name-match-p" function (:arguments ("_tag")) nil [67557 67926])
            ("tag-any-match-p" function (:arguments ("_tag")) nil [68001 68123])
            ("tag-re-match-p" function (:arguments ("re")) nil [68185 68431])
            ("tags-loop-revert-buffers" variable nil nil [68434 68826])
            ("next-file" function
               (:user-visible-flag t
                :arguments ("initialize" "novisit"))
                nil [68843 71755])
            ("tags-loop-operate" variable nil nil [71757 71849])
            ("tags-loop-scan" variable (:default-value (quote (user-error "%s" (substitute-command-keys "No \\[tags-search] or \\[tags-query-replace] in progress")))) nil [71851 72179])
            ("tags-loop-eval" function (:arguments ("form")) nil [72181 72492])
            ("tags-loop-continue" function
               (:user-visible-flag t
                :arguments ("first-time"))
                nil [72510 74720])
            ("tags-search" function
               (:user-visible-flag t
                :arguments ("regexp" "file-list-form"))
                nil [74797 75606])
            ("tags-query-replace" function
               (:user-visible-flag t
                :arguments ("from" "to" "delimited" "file-list-form"))
                nil [75623 76844])
            ("tags-complete-tags-table-file" function (:arguments ("string" "predicate" "what")) nil [76847 77209])
            ("list-tags" function
               (:user-visible-flag t
                :arguments ("file" "_next-match"))
                nil [77226 78162])
            ("tags-apropos" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [78179 78928])
            ("define-button-type" code nil nil [78957 79106])
            ("select-tags-table" function (:user-visible-flag t) nil [79196 81321])
            ("select-tags-table-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map button-buffer-map) (define-key map "t" (quote push-button)) (define-key map " " (quote next-line)) (define-key map "" (quote previous-line)) (define-key map "n" (quote next-line)) (define-key map "p" (quote previous-line)) (define-key map "q" (quote select-tags-table-quit)) map)) nil [81323 81704])
            ("define-derived-mode" code nil nil [81706 81888])
            ("select-tags-table-select" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [81890 82254])
            ("select-tags-table-quit" function (:user-visible-flag t) nil [82256 82393])
            ("complete-tag" function (:user-visible-flag t) nil [82411 83100])
            ("etags" package nil nil [83103 83119]))          
      :file "etags.el.gz"
      :pointmax 83144
      :fsize 21922
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cc-align.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("let" code nil nil [1214 1429])
            ("cc-require" code nil nil [1432 1453])
            ("cc-require" code nil nil [1454 1475])
            ("cc-require" code nil nil [1476 1499])
            ("c-lineup-topmost-intro-cont" function (:arguments ("langelem")) nil [1643 2798])
            ("c-lineup-gnu-DEFUN-intro-cont" function (:arguments ("langelem")) nil [2800 3698])
            ("c-block-in-arglist-dwim" function (:arguments ("arglist-start")) nil [3700 5461])
            ("c-lineup-arglist" function (:arguments ("langelem")) nil [5463 6849])
            ("c-lineup-argcont" function (:arguments ("elem")) nil [6901 8776])
            ("c-lineup-argcont-scan" function (:arguments ("other-match")) nil [8778 9105])
            ("c-lineup-arglist-intro-after-paren" function (:arguments ("langelem")) nil [9107 9508])
            ("c-lineup-arglist-close-under-paren" function (:arguments ("langelem")) nil [9510 10847])
            ("c-lineup-arglist-operators" function (:arguments ("langelem")) nil [10849 11997])
            ("c-lineup-close-paren" function (:arguments ("langelem")) nil [11999 13536])
            ("c-lineup-streamop" function (:arguments ("langelem")) nil [13538 13831])
            ("c-lineup-multi-inher" function (:arguments ("langelem")) nil [13833 15262])
            ("c-lineup-java-inher" function (:arguments ("langelem")) nil [15264 15940])
            ("c-lineup-java-throws" function (:arguments ("langelem")) nil [15942 17025])
            ("c-indent-one-line-block" function (:arguments ("langelem")) nil [17027 17774])
            ("c-indent-multi-line-block" function (:arguments ("langelem")) nil [17776 18622])
            ("c-lineup-C-comments" function (:arguments ("langelem")) nil [18624 23028])
            ("c-lineup-comment" function (:arguments ("langelem")) nil [23030 23850])
            ("c-lineup-knr-region-comment" function (:arguments ("langelem")) nil [23852 24585])
            ("c-lineup-runin-statements" function (:arguments ("langelem")) nil [24587 25258])
            ("c-lineup-assignments" function (:arguments ("langelem")) nil [25260 27473])
            ("c-lineup-math" function (:arguments ("langelem")) nil [27475 27910])
            ("c-lineup-cascaded-calls" function (:arguments ("langelem")) nil [27912 29532])
            ("c-lineup-string-cont" function (:arguments ("langelem")) nil [29534 30349])
            ("c-lineup-template-args" function (:arguments ("langelem")) nil [30351 30858])
            ("c-lineup-ObjC-method-call" function (:arguments ("langelem")) nil [30860 31892])
            ("c-lineup-ObjC-method-call-colons" function (:arguments ("langelem")) nil [31894 33321])
            ("c-lineup-ObjC-method-args" function (:arguments ("langelem")) nil [33323 34078])
            ("c-lineup-ObjC-method-args-2" function (:arguments ("langelem")) nil [34080 34816])
            ("c-lineup-inexpr-block" function (:arguments ("langelem")) nil [34818 35837])
            ("c-lineup-whitesmith-in-block" function (:arguments ("langelem")) nil [35839 36683])
            ("c-lineup-after-whitesmith-blocks" function (:arguments ("langelem")) nil [36685 38185])
            ("c-lineup-cpp-define" function (:arguments ("langelem")) nil [38187 41446])
            ("c-lineup-gcc-asm-reg" function (:arguments ("elem")) nil [41498 43231])
            ("c-lineup-dont-change" function (:arguments ("langelem")) nil [43233 43437])
            ("c-snug-do-while" function (:arguments ("syntax" "pos")) nil [43441 44123])
            ("c-snug-1line-defun-close" function (:arguments ("syntax" "pos")) nil [44125 44474])
            ("c-gnu-impose-minimum" function nil nil [44476 45092])
            ("c-semi&comma-inside-parenlist" function nil nil [45141 45845])
            ("c-semi&comma-no-newlines-before-nonblanks" function nil nil [45893 46465])
            ("c-semi&comma-no-newlines-for-oneline-inliners" function nil nil [46530 47177])
            ("cc-provide" code nil nil [47181 47203]))          
      :file "cc-align.el.gz"
      :pointmax 47231
      :fsize 12937
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1429 . 1430) (symbol 1194 . 1211) (open-paren 1193 . 1194)))
    (semanticdb-table "grep.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("compile" include nil nil [1032 1050])
            ("grep" customgroup (:user-visible-flag t) nil [1053 1148])
            ("grep-host-defaults-alist" variable nil nil [1150 1456])
            ("grep-apply-setting" function (:arguments ("symbol" "value")) nil [1458 2106])
            ("grep-window-height" variable nil nil [2123 2326])
            ("grep-highlight-matches" variable (:default-value (quote auto-detect)) nil [2328 3884])
            ("grep-scroll-output" variable nil nil [3886 4195])
            ("grep-command" variable nil nil [4212 4750])
            ("grep-template" variable nil nil [4752 5400])
            ("grep-use-null-device" variable (:default-value (quote auto-detect)) nil [5402 6078])
            ("grep-find-command" variable nil nil [6095 6453])
            ("grep-find-template" variable nil nil [6455 7122])
            ("grep-files-aliases" variable (:default-value (quote (("all" . "* .*") ("el" . "*.el") ("ch" . "*.[ch]") ("c" . "*.c") ("cc" . "*.cc *.cxx *.cpp *.C *.CC *.c++") ("cchh" . "*.cc *.[ch]xx *.[ch]pp *.[CHh] *.CC *.HH *.[ch]++") ("hh" . "*.hxx *.hpp *.[Hh] *.HH *.h++") ("h" . "*.h") ("l" . "[Cc]hange[Ll]og*") ("m" . "[Mm]akefile*") ("tex" . "*.tex") ("texi" . "*.texi") ("asm" . "*.[sS]")))) nil [7124 7674])
            ("grep-find-ignored-directories" variable (:default-value vc-directory-exclusion-list) nil [7676 8069])
            ("grep-find-ignored-files" variable (:default-value (cons ".#*" (delq nil (mapcar (lambda (s) (unless (string-match-p "/\\'" s) (concat "*" s))) completion-ignored-extensions)))) nil [8071 8545])
            ("grep-error-screen-columns" variable nil nil [8547 8780])
            ("grep-setup-hook" variable nil nil [8797 8931])
            ("grep-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map compilation-minor-mode-map) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "" (quote next-error-follow-minor-mode)) (define-key map "" (quote compile-goto-error)) (define-key map "n" (quote next-error-no-select)) (define-key map "p" (quote previous-error-no-select)) (define-key map "{" (quote compilation-previous-file)) (define-key map "}" (quote compilation-next-file)) (define-key map "	" (quote compilation-next-error)) (define-key map [backtab] (quote compilation-previous-error)) (define-key map [menu-bar grep] (cons "Grep" (make-sparse-keymap "Grep"))) (define-key map [menu-bar grep compilation-kill-compilation] (quote (menu-item "Kill Grep" kill-compilation :help "Kill the currently running grep process"))) (define-key map [menu-bar grep compilation-separator2] (quote ("----"))) (define-key map [menu-bar grep compilation-compile] (quote (menu-item "Compile..." compile :help "Compile the program including the current buffer.  Default: run `make'"))) (define-key map [menu-bar grep compilation-rgrep] (quote (menu-item "Recursive grep..." rgrep :help "User-friendly recursive grep in directory tree"))) (define-key map [menu-bar grep compilation-lgrep] (quote (menu-item "Local grep..." lgrep :help "User-friendly grep in a directory"))) (define-key map [menu-bar grep compilation-grep-find] (quote (menu-item "Grep via Find..." grep-find :help "Run grep via find, with user-specified args"))) (define-key map [menu-bar grep compilation-grep] (quote (menu-item "Another grep..." grep :help "Run grep, with user-specified args, and collect output in a buffer."))) (define-key map [menu-bar grep compilation-recompile] (quote (menu-item "Repeat grep" recompile :help "Run grep again"))) (define-key map [menu-bar grep compilation-separator2] (quote ("----"))) (define-key map [menu-bar grep compilation-first-error] (quote (menu-item "First Match" first-error :help "Restart at the first match, visit corresponding location"))) (define-key map [menu-bar grep compilation-previous-error] (quote (menu-item "Previous Match" previous-error :help "Visit the previous match and corresponding location"))) (define-key map [menu-bar grep compilation-next-error] (quote (menu-item "Next Match" next-error :help "Visit the next match and corresponding location"))) map)) nil [8933 11582])
            ("grep-mode-tool-bar-map" variable (:default-value (when (keymapp (butlast tool-bar-map)) (let ((map (butlast (copy-keymap tool-bar-map))) (help (last tool-bar-map))) (tool-bar-local-item "left-arrow" (quote previous-error-no-select) (quote previous-error-no-select) map :rtl "right-arrow" :help "Goto previous match") (tool-bar-local-item "right-arrow" (quote next-error-no-select) (quote next-error-no-select) map :rtl "left-arrow" :help "Goto next match") (tool-bar-local-item "cancel" (quote kill-compilation) (quote kill-compilation) map :enable (quote (let ((buffer (compilation-find-buffer))) (get-buffer-process buffer))) :help "Stop grep") (tool-bar-local-item "refresh" (quote recompile) (quote recompile) map :help "Restart grep") (append map help)))) nil [11584 12511])
            ("defalias" code nil nil [12513 12552])
            ("grep-last-buffer" variable nil nil [13052 13307])
            ("grep-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^\\(.+?\\)\\(:[ 	]*\\)\\([1-9][0-9]*\\)\\2" 1 3 ((lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face))) (when mbeg (- mbeg beg))))) lambda nil (when grep-highlight-matches (let* ((beg (match-end 0)) (end (save-excursion (goto-char beg) (line-end-position))) (mbeg (text-property-any beg end (quote font-lock-face) grep-match-face)) (mend (and mbeg (next-single-property-change mbeg (quote font-lock-face) nil end)))) (when mend (- mend beg)))))) ("^Binary file \\(.+\\) matches$" 1 nil nil 0 1))))
                nil [13324 14683])
            ("grep-first-column" variable nil nil [14685 14791])
            ("grep-error" variable (:default-value "grep hit") nil [14793 14871])
            ("grep-hit-face" variable (:default-value compilation-info-face) nil [15012 15092])
            ("grep-error-face" variable (:default-value (quote compilation-error)) nil [15094 15183])
            ("grep-match-face" variable (:default-value (quote match)) nil [15185 15255])
            ("grep-context-face" variable (:default-value (quote shadow)) nil [15257 15336])
            ("grep-mode-font-lock-keywords" variable (:default-value (quote ((": \\(.+\\): \\(?:Permission denied\\|No such \\(?:file or directory\\|device or address\\)\\)$" 1 grep-error-face) ("^Grep[/a-zA-z]* started.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t)) ("^Grep[/a-zA-z]* finished \\(?:(\\(matches found\\))\\|with \\(no matches found\\)\\).*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-info-face nil t) (2 compilation-warning-face nil t)) ("^Grep[/a-zA-z]* \\(exited abnormally\\|interrupt\\|killed\\|terminated\\)\\(?:.*with code \\([0-9]+\\)\\)?.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 grep-error-face) (2 grep-error-face nil t)) ("^.+?[-=][0-9]+[-=].*
" (0 grep-context-face))))) nil [15338 16533])
            ("grep-program" variable (:default-value (purecopy "grep")) nil [16550 16737])
            ("find-program" variable (:default-value (purecopy "find")) nil [16754 16899])
            ("xargs-program" variable (:default-value (purecopy "xargs")) nil [16916 17114])
            ("grep-find-use-xargs" variable nil nil [17131 17445])
            ("grep-history" variable nil nil [17491 17541])
            ("grep-find-history" variable nil nil [17557 17617])
            ("grep-regexp-history" variable nil nil [17672 17704])
            ("grep-files-history" variable nil nil [17705 17736])
            ("grep-process-setup" function nil nil [17753 19384])
            ("grep-filter" function nil nil [19386 20386])
            ("grep-probe" function (:arguments ("command" "args" "func" "result")) nil [20388 20601])
            ("grep-compute-defaults" function nil nil [20618 25734])
            ("grep-tag-default" function nil nil [25736 26012])
            ("grep-default-command" function nil nil [26014 27509])
            ("define-compilation-mode" code nil nil [27527 28383])
            ("grep" function
               (:user-visible-flag t
                :arguments ("command-args"))
                nil [28401 29822])
            ("grep-find" function
               (:user-visible-flag t
                :arguments ("command-args"))
                nil [29840 30621])
            ("defalias" code nil nil [30638 30670])
            ("grep-expand-keywords" variable
               (:constant-flag t
                :default-value (quote (("<C>" and cf (isearch-no-upper-case-p regexp t) "-i") ("<D>" . dir) ("<F>" . files) ("<N>" . null-device) ("<X>" . excl) ("<R>" shell-quote-argument (or regexp "")))))
                nil [30708 31121])
            ("grep-expand-template" function (:arguments ("template" "regexp" "files" "dir" "excl")) nil [31123 31593])
            ("grep-read-regexp" function nil nil [31595 31752])
            ("grep-read-files" function (:arguments ("regexp")) nil [31754 33064])
            ("lgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm"))
                nil [33081 35772])
            ("find-name-arg" variable nil nil [35775 35797])
            ("rgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm"))
                nil [35861 39794])
            ("zrgrep" function
               (:user-visible-flag t
                :arguments ("regexp" "files" "dir" "confirm" "grep-find-template"))
                nil [39811 41607])
            ("defalias" code nil nil [41624 41650])
            ("grep" package nil nil [41652 41667]))          
      :file "grep.el.gz"
      :pointmax 41691
      :fsize 11241
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "opascal.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("opascal" customgroup (:user-visible-flag t) nil [1755 1867])
            ("opascal-debug" variable (:constant-flag t) nil [1869 1924])
            ("define-obsolete-variable-alias" code nil nil [1926 2008])
            ("opascal-search-path" variable (:default-value ".") nil [2009 2301])
            ("define-obsolete-variable-alias" code nil nil [2303 2387])
            ("opascal-indent-level" variable (:default-value 3) nil [2388 2558])
            ("define-obsolete-variable-alias" code nil nil [2560 2662])
            ("opascal-compound-block-indent" variable nil nil [2663 3075])
            ("define-obsolete-variable-alias" code nil nil [3077 3171])
            ("opascal-case-label-indent" variable (:default-value opascal-indent-level) nil [3172 3625])
            ("define-obsolete-variable-alias" code nil nil [3627 3699])
            ("opascal-verbose" variable (:default-value t) nil [3700 3828])
            ("define-obsolete-variable-alias" code nil nil [3830 3926])
            ("opascal-tab-always-indents" variable (:default-value tab-always-indent) nil [3927 4136])
            ("make-obsolete-variable" code nil nil [4138 4301])
            ("opascal-directives" variable
               (:constant-flag t
                :default-value (quote (absolute abstract assembler automated cdecl default dispid dynamic export external far forward index inline message name near nodefault overload override pascal private protected public published read readonly register reintroduce resident resourcestring safecall stdcall stored virtual write writeonly)))
                nil [4303 4681])
            ("opascal-keywords" variable
               (:constant-flag t
                :default-value (append (quote (and array as asm at begin case class const constructor contains destructor dispinterface div do downto else end except exports file finalization finally for function goto if implementation implements in inherited initialization interface is label library mod nil not of object on or out package packed procedure program property raise record repeat requires result self set shl shr then threadvar to try type unit uses until var while with xor break exit)) opascal-directives))
                nil [4683 5399])
            ("opascal-previous-terminators" variable
               (:constant-flag t
                :default-value (\` (semicolon comma)))
                nil [5401 5531])
            ("opascal-comments" variable
               (:constant-flag t
                :default-value (quote (comment-single-line comment-multi-line-1 comment-multi-line-2)))
                nil [5533 5663])
            ("opascal-strings" variable
               (:constant-flag t
                :default-value (quote (string double-quoted-string)))
                nil [5665 5767])
            ("opascal-whitespace" variable
               (:constant-flag t
                :default-value (\` (space newline (\,@ opascal-comments))))
                nil [5769 5877])
            ("opascal-routine-statements" variable
               (:constant-flag t
                :default-value (quote (procedure function constructor destructor property)))
                nil [5879 6041])
            ("opascal-body-expr-statements" variable
               (:constant-flag t
                :default-value (quote (if while for on)))
                nil [6043 6213])
            ("opascal-expr-statements" variable
               (:constant-flag t
                :default-value (\` (case (\,@ opascal-body-expr-statements))))
                nil [6215 6355])
            ("opascal-body-statements" variable
               (:constant-flag t
                :default-value (\` (else (\,@ opascal-body-expr-statements))))
                nil [6357 6503])
            ("opascal-expr-delimiters" variable
               (:constant-flag t
                :default-value (quote (then do of)))
                nil [6505 6586])
            ("opascal-binary-ops" variable
               (:constant-flag t
                :default-value (quote (plus minus equals not-equals times divides div mod and or xor)))
                nil [6588 6715])
            ("opascal-visibilities" variable
               (:constant-flag t
                :default-value (quote (public private protected published automated)))
                nil [6717 6820])
            ("opascal-block-statements" variable
               (:constant-flag t
                :default-value (quote (begin try case repeat initialization finalization asm)))
                nil [6822 6968])
            ("opascal-mid-block-statements" variable
               (:constant-flag t
                :default-value (\` (except finally (\,@ opascal-visibilities))))
                nil [6970 7114])
            ("opascal-end-block-statements" variable
               (:constant-flag t
                :default-value (\` (end until)))
                nil [7116 7208])
            ("opascal-match-block-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-end-block-statements) (\,@ opascal-mid-block-statements))))
                nil [7210 7381])
            ("opascal-decl-sections" variable
               (:constant-flag t
                :default-value (quote (type const var label resourcestring)))
                nil [7383 7502])
            ("opascal-interface-types" variable
               (:constant-flag t
                :default-value (quote (dispinterface interface)))
                nil [7504 7586])
            ("opascal-class-types" variable
               (:constant-flag t
                :default-value (quote (class object)))
                nil [7588 7651])
            ("opascal-composite-types" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-class-types) (\,@ opascal-interface-types) record)))
                nil [7653 7796])
            ("opascal-unit-sections" variable
               (:constant-flag t
                :default-value (quote (interface implementation program library package)))
                nil [7798 7932])
            ("opascal-use-clauses" variable
               (:constant-flag t
                :default-value (\` (uses requires exports contains)))
                nil [7934 8044])
            ("opascal-unit-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-use-clauses) (\,@ opascal-unit-sections) initialization finalization)))
                nil [8046 8195])
            ("opascal-decl-delimiters" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-decl-sections) (\,@ opascal-unit-statements) (\,@ opascal-routine-statements))))
                nil [8197 8382])
            ("opascal-decl-matchers" variable
               (:constant-flag t
                :default-value (\` (begin (\,@ opascal-decl-sections))))
                nil [8384 8522])
            ("opascal-enclosing-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements) (\,@ opascal-decl-sections) (\,@ opascal-use-clauses) (\,@ opascal-routine-statements))))
                nil [8524 8742])
            ("opascal-previous-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-unit-statements) (\,@ opascal-routine-statements))))
                nil [8744 8877])
            ("opascal-previous-enclosing-statements" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements) (\,@ opascal-decl-sections))))
                nil [8879 9063])
            ("opascal-begin-enclosing-tokens" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-block-statements) (\,@ opascal-mid-block-statements))))
                nil [9065 9213])
            ("opascal-begin-previous-tokens" variable
               (:constant-flag t
                :default-value (\` ((\,@ opascal-decl-sections) (\,@ opascal-routine-statements))))
                nil [9215 9398])
            ("opascal-space-chars" variable
               (:constant-flag t
                :default-value " -	- ")
                nil [9400 9448])
            ("opascal-non-space-chars" variable
               (:constant-flag t
                :default-value (concat "^" opascal-space-chars))
                nil [9465 9532])
            ("opascal-spaces-re" variable
               (:constant-flag t
                :default-value (concat "[" opascal-space-chars "]*"))
                nil [9533 9599])
            ("opascal-leading-spaces-re" variable
               (:constant-flag t
                :default-value (concat "^" opascal-spaces-re))
                nil [9600 9667])
            ("opascal-word-chars" variable
               (:constant-flag t
                :default-value "a-zA-Z0-9_")
                nil [9668 9710])
            ("opascal-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 "\"" st) (modify-syntax-entry 39 "\"" st) (modify-syntax-entry 123 "<" st) (modify-syntax-entry 125 ">" st) (modify-syntax-entry 40 "()1" st) (modify-syntax-entry 41 ")(4" st) (modify-syntax-entry 42 ". 23b" st) (modify-syntax-entry 47 ". 12c" st) (modify-syntax-entry 10 "> c" st) st)) nil [9712 10170])
            ("opascal-save-excursion" function (:arguments ("forms")) nil [10172 10454])
            ("opascal-is" function (:arguments ("element" "in-set")) nil [10456 10597])
            ("opascal-string-of" function (:arguments ("start" "end")) nil [10599 10731])
            ("opascal-looking-at-string" function (:arguments ("p" "s")) nil [10733 10975])
            ("opascal-token-of" function (:arguments ("kind" "start" "end")) nil [10977 11110])
            ("opascal-token-kind" function (:arguments ("token")) nil [11112 11224])
            ("opascal-set-token-kind" function (:arguments ("token" "to-kind")) nil [11226 11348])
            ("opascal-token-start" function (:arguments ("token")) nil [11350 11471])
            ("opascal-token-end" function (:arguments ("token")) nil [11473 11590])
            ("opascal-set-token-start" function (:arguments ("token" "start")) nil [11592 11711])
            ("opascal-set-token-end" function (:arguments ("token" "end")) nil [11713 11824])
            ("opascal-token-string" function (:arguments ("token")) nil [11826 12006])
            ("opascal-in-token" function (:arguments ("p" "token")) nil [12008 12190])
            ("opascal-column-of" function (:arguments ("p")) nil [12192 12311])
            ("opascal-progress-last-reported-point" variable nil nil [12313 12413])
            ("opascal-parsing-progress-step" variable
               (:constant-flag t
                :default-value 16384)
                nil [12415 12533])
            ("opascal-scanning-progress-step" variable
               (:constant-flag t
                :default-value 2048)
                nil [12534 12653])
            ("opascal-progress-start" function nil nil [12655 12775])
            ("opascal-progress-done" function (:arguments ("msgs")) nil [12777 13003])
            ("opascal-step-progress" function (:arguments ("p" "desc" "step-size")) nil [13005 13635])
            ("opascal-next-line-start" function (:arguments ("from-point")) nil [13637 13932])
            ("opascal--literal-start-re" variable
               (:constant-flag t
                :default-value (regexp-opt (quote ("//" "{" "(*" "'" "\""))))
                nil [13934 14009])
            ("opascal-literal-kind" function (:arguments ("p")) nil [14011 14940])
            ("opascal-literal-start-pattern" function (:arguments ("literal-kind")) nil [14942 15289])
            ("opascal-literal-end-pattern" function (:arguments ("literal-kind")) nil [15291 15634])
            ("opascal-literal-stop-pattern" function (:arguments ("literal-kind")) nil [15636 16101])
            ("opascal-is-literal-end" function (:arguments ("p")) nil [16103 16306])
            ("opascal-literal-token-at" function (:arguments ("p")) nil [16308 17055])
            ("opascal-point-token-at" function (:arguments ("p" "kind")) nil [17057 17187])
            ("opascal-char-token-at" function (:arguments ("p" "char" "kind")) nil [17189 17445])
            ("opascal-charset-token-at" function (:arguments ("p" "charset" "kind")) nil [17447 17898])
            ("opascal-space-token-at" function (:arguments ("p")) nil [17900 18096])
            ("opascal-word-token-at" function (:arguments ("p")) nil [18098 18670])
            ("opascal-explicit-token-at" function (:arguments ("p" "token-string" "kind")) nil [18672 18967])
            ("opascal-token-at" function (:arguments ("p")) nil [18969 20064])
            ("opascal-current-token" function nil nil [20066 20190])
            ("opascal-next-token" function (:arguments ("token")) nil [20192 20522])
            ("opascal-previous-token" function (:arguments ("token")) nil [20524 20882])
            ("opascal-next-visible-token" function (:arguments ("token")) nil [20884 21181])
            ("opascal-group-start" function (:arguments ("from-token")) nil [21183 21739])
            ("opascal-group-end" function (:arguments ("from-token")) nil [21741 22281])
            ("opascal-indent-of" function (:arguments ("token" "offset")) nil [22283 22790])
            ("opascal-line-indent-of" function (:arguments ("from-token" "offset" "terminators")) nil [22792 23780])
            ("opascal-stmt-line-indent-of" function (:arguments ("from-token" "offset")) nil [23782 24960])
            ("opascal-open-group-indent" function (:arguments ("token" "last-token" "offset")) nil [24962 25340])
            ("opascal-composite-type-start" function (:arguments ("token" "last-token")) nil [25342 25711])
            ("opascal-is-simple-class-type" function (:arguments ("at-token" "limit-token")) nil [25713 26817])
            ("opascal-block-start" function (:arguments ("from-token" "stop-on-class")) nil [26819 28608])
            ("opascal-else-start" function (:arguments ("from-else")) nil [28610 29857])
            ("opascal-comment-content-start" function (:arguments ("comment")) nil [29859 30284])
            ("opascal-comment-block-start" function (:arguments ("comment")) nil [30286 31027])
            ("opascal-comment-block-end" function (:arguments ("comment")) nil [31029 31753])
            ("opascal-on-first-comment-line" function (:arguments ("comment")) nil [31755 32113])
            ("opascal-comment-indent-of" function (:arguments ("comment")) nil [32115 33139])
            ("opascal-is-use-clause-end" function (:arguments ("at-token" "last-token" "last-colon" "from-kind")) nil [33141 34213])
            ("opascal-is-block-after-expr-statement" function (:arguments ("token")) nil [34215 34832])
            ("opascal-previous-indent-of" function (:arguments ("from-token")) nil [34834 40127])
            ("opascal-section-indent-of" function (:arguments ("section-token")) nil [40129 43611])
            ("opascal-enclosing-indent-of" function (:arguments ("from-token")) nil [43613 52987])
            ("opascal-corrected-indentation" function nil nil [52989 55030])
            ("opascal-indent-line" function (:user-visible-flag t) nil [55032 56013])
            ("opascal-mode-abbrev-table" variable nil nil [56015 56102])
            ("define-abbrev-table" code nil nil [56103 56154])
            ("opascal-ensure-buffer" function (:arguments ("buffer-var" "buffer-name")) nil [56156 56403])
            ("opascal-log-msg" function (:arguments ("to-buffer" "the-msg")) nil [56405 56731])
            ("opascal-debug-buffer" variable nil nil [56756 56861])
            ("opascal-debug-log" function (:arguments ("format-string" "args")) nil [56863 57274])
            ("opascal-debug-token-string" function (:arguments ("token")) nil [57276 57581])
            ("opascal-debug-show-current-token" function nil nil [57583 57764])
            ("opascal-debug-goto-point" function (:arguments ("p")) nil [57766 57849])
            ("opascal-debug-goto-next-token" function nil nil [57851 57988])
            ("opascal-debug-goto-previous-token" function nil nil [57990 58138])
            ("opascal-debug-show-current-string" function (:arguments ("from" "to")) nil [58140 58273])
            ("opascal-debug-tokenize-region" function (:arguments ("from" "to")) nil [58275 58626])
            ("opascal-debug-tokenize-buffer" function nil nil [58628 58742])
            ("opascal-debug-tokenize-window" function nil nil [58744 58862])
            ("opascal-tab" function (:user-visible-flag t) nil [58865 59757])
            ("make-obsolete" code nil nil [59759 59818])
            ("opascal-is-directory" function (:arguments ("path")) nil [59820 59997])
            ("opascal-is-file" function (:arguments ("path")) nil [59999 60170])
            ("opascal-search-directory" function (:arguments ("unit" "dir" "recurse")) nil [60172 61156])
            ("opascal-find-unit-in-directory" function (:arguments ("unit" "dir")) nil [61159 61773])
            ("opascal-find-unit-file" function (:arguments ("unit")) nil [61775 62353])
            ("opascal-find-unit" function
               (:user-visible-flag t
                :arguments ("unit"))
                nil [62355 62950])
            ("opascal-find-current-def" function (:user-visible-flag t) nil [62952 63128])
            ("opascal-find-current-xdef" function (:user-visible-flag t) nil [63130 63498])
            ("opascal-find-current-body" function (:user-visible-flag t) nil [63500 63698])
            ("opascal-fill-comment" function (:user-visible-flag t) nil [63700 67131])
            ("opascal-new-comment-line" function (:user-visible-flag t) nil [67133 67969])
            ("opascal-match-token" function (:arguments ("token" "limit")) nil [67971 68360])
            ("opascal-font-lock-keywords" variable
               (:constant-flag t
                :default-value (\` (("\\_<\\(function\\|pro\\(cedure\\|gram\\)\\)[ 	]+\\([[:alpha:]][[:alnum:]_]*\\)" (1 font-lock-keyword-face) (3 font-lock-function-name-face)) (\, (concat "\\_<" (regexp-opt (mapcar (function symbol-name) opascal-keywords)) "\\_>")))))
                nil [68362 68648])
            ("opascal-font-lock-defaults" variable
               (:constant-flag t
                :default-value (quote (opascal-font-lock-keywords nil nil nil nil)))
                nil [68650 69003])
            ("opascal--syntax-propertize" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("/\\(\\*\\)" (1 ". 3b")) ("(\\(\\/\\)" (1 (prog1 ". 1c" (forward-char -1) nil))) ("''\\|\"\"" (0 (if (save-excursion (nth 3 (syntax-ppss (match-beginning 0)))) (string-to-syntax ".") (forward-char -1) nil)))))
                nil [69005 69763])
            ("opascal-debug-mode-map" variable (:default-value (let ((kmap (make-sparse-keymap))) (dolist (binding (quote (("n" opascal-debug-goto-next-token) ("p" opascal-debug-goto-previous-token) ("t" opascal-debug-show-current-token) ("T" opascal-debug-tokenize-buffer) ("W" opascal-debug-tokenize-window) ("g" opascal-debug-goto-point) ("s" opascal-debug-show-current-string)))) (define-key kmap (car binding) (cadr binding))) kmap)) nil [69765 70366])
            ("opascal-mode-map" variable (:default-value (let ((kmap (make-sparse-keymap))) (dolist (binding (list (quote ("u" opascal-find-unit)) (quote ("\361" opascal-fill-comment)) (quote ("\352" opascal-new-comment-line)) (list "" opascal-debug-mode-map))) (define-key kmap (car binding) (cadr binding))) kmap)) nil [70368 70976])
            ("define-obsolete-variable-alias" code nil nil [70978 71054])
            ("define-obsolete-function-alias" code nil nil [71070 71136])
            ("define-derived-mode" code nil nil [71152 72807])
            ("opascal" package nil nil [72809 72827]))          
      :file "opascal.el.gz"
      :pointmax 72853
      :fsize 15924
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dcl-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("tempo" include nil nil [2974 2990])
            ("dcl-font-lock-keywords" variable (:default-value (quote (("\\<\\(if\\|then\\|else\\|endif\\)\\>" 1 font-lock-keyword-face) ("\\<f[$][a-z_]+\\>" 0 font-lock-builtin-face) ("[.]\\(eq\\|not\\|or\\|and\\|lt\\|gt\\|le\\|ge\\|eqs\\|nes\\)[.]" 0 font-lock-builtin-face)))) nil [3137 3523])
            ("dcl-font-lock-defaults" variable (:default-value (quote (dcl-font-lock-keywords nil))) nil [3525 3630])
            ("dcl" customgroup (:user-visible-flag t) nil [3651 3809])
            ("dcl-basic-offset" variable (:default-value 4) nil [3811 4145])
            ("dcl-continuation-offset" variable (:default-value 6) nil [4148 4443])
            ("dcl-margin-offset" variable (:default-value 8) nil [4446 4786])
            ("dcl-margin-label-offset" variable (:default-value 2) nil [4789 5043])
            ("dcl-comment-line-regexp" variable (:default-value "^\\$!") nil [5046 5209])
            ("dcl-block-begin-regexp" variable (:default-value "loop[0-9]*:") nil [5212 5406])
            ("dcl-block-end-regexp" variable (:default-value "endloop[0-9]*:") nil [5409 5602])
            ("dcl-calc-command-indent-function" variable nil nil [5605 6920])
            ("dcl-calc-cont-indent-function" variable (:default-value (quote dcl-calc-cont-indent-relative)) nil [6923 7466])
            ("dcl-tab-always-indent" variable (:default-value t) nil [7469 7812])
            ("dcl-electric-characters" variable (:default-value t) nil [7815 7963])
            ("dcl-tempo-comma" variable (:default-value ", ") nil [7966 8098])
            ("dcl-tempo-left-paren" variable (:default-value "(") nil [8100 8241])
            ("dcl-tempo-right-paren" variable (:default-value ")") nil [8244 8387])
            ("dcl-imenu-label-labels" variable (:default-value "Labels") nil [8525 8653])
            ("dcl-imenu-label-goto" variable (:default-value "GOTO") nil [8654 8782])
            ("dcl-imenu-label-gosub" variable (:default-value "GOSUB") nil [8783 8914])
            ("dcl-imenu-label-call" variable (:default-value "CALL") nil [8915 9043])
            ("dcl-imenu-generic-expression" variable (:default-value (\` ((nil "^\\$[ 	]*\\([A-Za-z0-9_$]+\\):[ 	]+SUBROUTINE\\b" 1) ((\, dcl-imenu-label-labels) "^\\$[ 	]*\\([A-Za-z0-9_$]+\\):\\([ 	]\\|$\\)" 1) ((\, dcl-imenu-label-goto) "\\s-GOTO[ 	]+\\([A-Za-z0-9_$]+\\)" 1) ((\, dcl-imenu-label-gosub) "\\s-GOSUB[ 	]+\\([A-Za-z0-9_$]+\\)" 1) ((\, dcl-imenu-label-call) "\\s-CALL[ 	]+\\([A-Za-z0-9_$]+\\)" 1)))) nil [9045 9726])
            ("dcl-mode-hook" variable nil nil [9729 9817])
            ("dcl-mode-syntax-table" variable nil nil [9900 9972])
            ("unless" code nil nil [9973 10406])
            ("dcl-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "
" (quote dcl-split-line)) (define-key map "	" (quote tempo-complete-tag)) (define-key map "^" (quote dcl-delete-indentation)) (define-key map "m" (quote dcl-back-to-indentation)) (define-key map "e" (quote dcl-forward-command)) (define-key map "a" (quote dcl-backward-command)) (define-key map "" (quote dcl-indent-command)) (define-key map "	" (quote dcl-tab)) (define-key map ":" (quote dcl-electric-character)) (define-key map "F" (quote dcl-electric-character)) (define-key map "f" (quote dcl-electric-character)) (define-key map "E" (quote dcl-electric-character)) (define-key map "e" (quote dcl-electric-character)) (define-key map "" (quote dcl-set-option)) (define-key map "" (quote tempo-forward-mark)) (define-key map "" (quote tempo-backward-mark)) (define-key map [menu-bar] (make-sparse-keymap)) (define-key map [menu-bar dcl] (cons "DCL" (make-sparse-keymap "DCL"))) (define-key map [menu-bar dcl tempo-backward-mark] (quote ("Previous template mark" . tempo-backward-mark))) (define-key map [menu-bar dcl tempo-forward-mark] (quote ("Next template mark" . tempo-forward-mark))) (define-key map [menu-bar dcl tempo-complete-tag] (quote ("Complete template tag" . tempo-complete-tag))) (define-key map [menu-bar dcl dcl-separator-tempo] (quote ("--"))) (define-key map [menu-bar dcl dcl-save-all-options] (quote ("Save all options" . dcl-save-all-options))) (define-key map [menu-bar dcl dcl-save-nondefault-options] (quote ("Save changed options" . dcl-save-nondefault-options))) (define-key map [menu-bar dcl dcl-set-option] (quote ("Set option" . dcl-set-option))) (define-key map [menu-bar dcl dcl-separator-option] (quote ("--"))) (define-key map [menu-bar dcl dcl-delete-indentation] (quote ("Delete indentation" . dcl-delete-indentation))) (define-key map [menu-bar dcl dcl-split-line] (quote ("Split line" . dcl-split-line))) (define-key map [menu-bar dcl dcl-indent-command] (quote ("Indent command" . dcl-indent-command))) (define-key map [menu-bar dcl dcl-tab] (quote ("Indent line/insert tab" . dcl-tab))) (define-key map [menu-bar dcl dcl-back-to-indentation] (quote ("Back to indentation" . dcl-back-to-indentation))) (define-key map [menu-bar dcl dcl-forward-command] (quote ("End of statement" . dcl-forward-command))) (define-key map [menu-bar dcl dcl-backward-command] (quote ("Beginning of statement" . dcl-backward-command))) (if (boundp (quote imenu-generic-expression)) (progn (define-key map [menu-bar dcl dcl-separator-movement] (quote ("--"))) (define-key map [menu-bar dcl imenu] (quote ("Buffer index menu" . imenu))))) map)) nil [10409 13369])
            ("dcl-ws-r" variable (:default-value "\\([ 	]*-[ 	]*\\(!.*\\)*
\\)*[ 	]*") nil [13371 13635])
            ("dcl-label-r" variable (:default-value "[a-zA-Z0-9_$]*:\\([ 	!]\\|$\\)") nil [13638 13849])
            ("dcl-cmd-r" variable (:default-value "^\\$\\(.*-[ 	]*\\(!.*\\)*
\\)*[^!\"
]*\\(\".*\\(\"\".*\\)*\"\\)*[^!\"
]*") nil [13852 14283])
            ("dcl-command-regexp" variable (:default-value "^\\$\\(.*-[ 	]*\\(!.*\\)*
\\)*.*\\(\".*\\(\"\".*\\)*\"\\)*") nil [14286 14685])
            ("dcl-electric-reindent-regexps" variable (:default-value (list "endif" "else" dcl-label-r)) nil [14688 15119])
            ("dcl-option-alist" variable (:default-value (quote ((dcl-basic-offset dcl-option-value-basic) (dcl-continuation-offset curval) (dcl-margin-offset dcl-option-value-margin-offset) (dcl-margin-label-offset dcl-option-value-offset) (dcl-comment-line-regexp dcl-option-value-comment-line) (dcl-block-begin-regexp curval) (dcl-block-end-regexp curval) (dcl-tab-always-indent toggle) (dcl-electric-characters toggle) (dcl-electric-reindent-regexps curval) (dcl-tempo-comma curval) (dcl-tempo-left-paren curval) (dcl-tempo-right-paren curval) (dcl-calc-command-indent-function curval) (dcl-calc-cont-indent-function curval) (comment-start curval) (comment-start-skip curval)))) nil [15122 16093])
            ("dcl-option-history" variable (:default-value (mapcar (lambda (option-assoc) (format "%s" (car option-assoc))) dcl-option-alist)) nil [16096 16317])
            ("define-derived-mode" code nil nil [17254 22872])
            ("dcl-beginning-of-statement" function (:user-visible-flag t) nil [23032 23199])
            ("dcl-end-of-statement" function (:user-visible-flag t) nil [23279 23562])
            ("dcl-beginning-of-command" function (:user-visible-flag t) nil [23642 23892])
            ("dcl-end-of-command" function (:user-visible-flag t) nil [23972 24271])
            ("dcl-backward-command" function
               (:user-visible-flag t
                :arguments ("incl-comment-commands"))
                nil [24351 25797])
            ("dcl-forward-command" function
               (:user-visible-flag t
                :arguments ("incl-comment-commands"))
                nil [25877 27443])
            ("dcl-back-to-indentation" function (:user-visible-flag t) nil [27523 28228])
            ("dcl-back-to-indentation-1" function (:arguments ("limit")) nil [28229 30183])
            ("dcl-get-line-type" function nil nil [30266 31814])
            ("dcl-indentation-point" function nil nil [31894 32044])
            ("dcl-show-line-type" function (:user-visible-flag t) nil [32126 32662])
            ("dcl-calc-command-indent-multiple" function (:arguments ("indent-type" "cur-indent" "extra-indent" "_last-point" "_this-point")) nil [32824 33697])
            ("dcl-calc-command-indent-hang" function (:arguments ("indent-type" "cur-indent" "extra-indent" "last-point" "this-point")) nil [33842 35283])
            ("dcl-calc-command-indent" function nil nil [35365 41863])
            ("dcl-calc-cont-indent-relative" function (:arguments ("_cur-indent" "_extra-indent")) nil [41945 44341])
            ("dcl-calc-continuation-indent" function nil nil [44423 46744])
            ("dcl-indent-command-line" function nil nil [46826 47711])
            ("dcl-indent-continuation-line" function nil nil [47791 48213])
            ("dcl-delete-chars" function (:arguments ("chars")) nil [48295 48484])
            ("dcl-indent-line" function nil nil [48566 49160])
            ("dcl-indent-command" function (:user-visible-flag t) nil [49240 49664])
            ("dcl-tab" function (:user-visible-flag t) nil [49744 50729])
            ("dcl-electric-character" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50809 51643])
            ("dcl-indent-to" function
               (:user-visible-flag t
                :arguments ("col" "minimum"))
                nil [51723 52209])
            ("dcl-split-line" function (:user-visible-flag t) nil [52289 53674])
            ("dcl-delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [53754 54136])
            ("dcl-option-value-basic" function (:arguments ("_option-assoc")) nil [54296 55178])
            ("dcl-option-value-offset" function (:arguments ("_option-assoc")) nil [55258 55532])
            ("dcl-option-value-margin-offset" function (:arguments ("_option-assoc")) nil [55612 55910])
            ("dcl-option-value-comment-line" function (:arguments ("_option-assoc")) nil [55990 56764])
            ("dcl-guess-option-value" function (:arguments ("option")) nil [56844 57514])
            ("dcl-guess-option" function nil nil [57594 59843])
            ("dcl-set-option" function
               (:user-visible-flag t
                :arguments ("option-sym" "option-value"))
                nil [59923 60974])
            ("dcl-save-local-variable" function (:arguments ("var" "def-prefix" "def-suffix")) nil [61134 64842])
            ("dcl-save-all-options" function (:user-visible-flag t) nil [64922 65275])
            ("dcl-save-nondefault-options" function (:user-visible-flag t) nil [65355 66213])
            ("dcl-save-option" function
               (:user-visible-flag t
                :arguments ("option"))
                nil [66293 66598])
            ("with-no-warnings" code nil nil [66678 66755])
            ("dcl-save-mode" function (:user-visible-flag t) nil [66757 67143])
            ("dcl-tempo-tags" variable nil nil [67396 67452])
            ("tempo-define-template" code nil nil [67454 67799])
            ("tempo-define-template" code nil nil [67801 67965])
            ("tempo-define-template" code nil nil [67967 68204])
            ("tempo-define-template" code nil nil [68206 68466])
            ("tempo-define-template" code nil nil [68468 68703])
            ("tempo-define-template" code nil nil [68705 68993])
            ("tempo-define-template" code nil nil [68995 69151])
            ("tempo-define-template" code nil nil [69153 69347])
            ("tempo-define-template" code nil nil [69349 69595])
            ("tempo-define-template" code nil nil [69597 69772])
            ("tempo-define-template" code nil nil [69774 70008])
            ("tempo-define-template" code nil nil [70010 70212])
            ("tempo-define-template" code nil nil [70214 70438])
            ("tempo-define-template" code nil nil [70440 70640])
            ("tempo-define-template" code nil nil [70642 70835])
            ("tempo-define-template" code nil nil [70837 71112])
            ("tempo-define-template" code nil nil [71114 71355])
            ("tempo-define-template" code nil nil [71357 71579])
            ("tempo-define-template" code nil nil [71581 71750])
            ("tempo-define-template" code nil nil [71752 71915])
            ("tempo-define-template" code nil nil [71917 72117])
            ("tempo-define-template" code nil nil [72119 72290])
            ("tempo-define-template" code nil nil [72292 72429])
            ("tempo-define-template" code nil nil [72431 72755])
            ("tempo-define-template" code nil nil [72757 72918])
            ("tempo-define-template" code nil nil [72920 73096])
            ("tempo-define-template" code nil nil [73098 73203])
            ("tempo-define-template" code nil nil [73205 73409])
            ("tempo-define-template" code nil nil [73411 73578])
            ("tempo-define-template" code nil nil [73580 73746])
            ("tempo-define-template" code nil nil [73748 73885])
            ("tempo-define-template" code nil nil [73887 74232])
            ("tempo-define-template" code nil nil [74234 74395])
            ("tempo-define-template" code nil nil [74397 74534])
            ("tempo-define-template" code nil nil [74536 74751])
            ("dcl-beginning-of-command-p" function nil nil [74913 75078])
            ("dcl-end-of-command-p" function nil nil [75158 75667])
            ("dcl-command-p" function nil nil [75747 75970])
            ("dcl-was-looking-at" function (:arguments ("regexp")) nil [76050 76254])
            ("declare-function" code nil nil [76256 76321])
            ("dcl-imenu-create-index-function" function nil nil [76400 76577])
            ("dcl-mode" package nil nil [76661 76680])
            ("run-hooks" code nil nil [76682 76713]))          
      :file "dcl-mode.el.gz"
      :pointmax 76768
      :fsize 17223
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "gud.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [1729 1746])
            ("gdb-active-process" variable nil nil [1748 1775])
            ("gdb-define-alist" variable nil nil [1776 1801])
            ("gdb-macro-info" variable nil nil [1802 1825])
            ("gdb-show-changed-values" variable nil nil [1826 1858])
            ("gdb-source-window" variable nil nil [1859 1885])
            ("gdb-var-list" variable nil nil [1886 1907])
            ("hl-line-mode" variable nil nil [1908 1929])
            ("hl-line-sticky-flag" variable nil nil [1930 1958])
            ("gud" customgroup (:user-visible-flag t) nil [2096 2275])
            ("gud-key-prefix" variable (:default-value "") nil [2278 2402])
            ("global-set-key" code nil nil [2404 2465])
            ("gud-marker-filter" variable nil nil [2537 2567])
            ("put" code nil nil [2568 2611])
            ("gud-find-file" variable nil nil [2612 2638])
            ("put" code nil nil [2639 2678])
            ("gud-marker-filter" function (:arguments ("args")) nil [2680 2751])
            ("gud-minor-mode" variable nil nil [2753 2780])
            ("put" code nil nil [2781 2821])
            ("gud-comint-buffer" variable nil nil [2823 2853])
            ("gud-keep-buffer" variable nil nil [2855 2883])
            ("gud-symbol" function (:arguments ("sym" "soft" "minor-mode")) nil [2885 3318])
            ("gud-val" function (:arguments ("sym" "minor-mode")) nil [3320 3508])
            ("gud-running" variable nil nil [3510 3619])
            ("gud-target-name" variable (:default-value "--unknown--") nil [3621 3728])
            ("gud-goto-info" function (:user-visible-flag t) nil [3772 3984])
            ("gud-tool-bar-item-visible-no-fringe" function nil nil [3986 4257])
            ("declare-function" code nil nil [4259 4313])
            ("gud-stop-subjob" function nil nil [4315 4708])
            ("easy-mmode-defmap" code nil nil [4710 8063])
            ("easy-mmode-defmap" code nil nil [8065 9866])
            ("let" code nil nil [9868 10036])
            ("gud-mode-map" variable (:default-value (make-sparse-keymap)) nil [10038 10165])
            ("gud-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (x (quote ((gud-break . "gud/break") (gud-remove . "gud/remove") (gud-print . "gud/print") (gud-pstar . "gud/pstar") (gud-pp . "gud/pp") (gud-watch . "gud/watch") (gud-run . "gud/run") (gud-go . "gud/go") (gud-stop-subjob . "gud/stop") (gud-cont . "gud/cont") (gud-until . "gud/until") (gud-next . "gud/next") (gud-step . "gud/step") (gud-finish . "gud/finish") (gud-nexti . "gud/nexti") (gud-stepi . "gud/stepi") (gud-up . "gud/up") (gud-down . "gud/down") (gud-goto-info . "info"))) map) (tool-bar-local-item-from-menu (car x) (cdr x) map gud-minor-mode-map)))) nil [10167 10871])
            ("gud-file-name" function (:arguments ("f")) nil [10873 11626])
            ("declare-function" code nil nil [11628 11682])
            ("gud-find-file" function (:arguments ("file")) nil [11684 12598])
            ("gud-def" function (:arguments ("func" "cmd" "key" "doc")) nil [13168 14558])
            ("gud-last-frame" variable nil nil [14778 14805])
            ("gud-last-last-frame" variable nil nil [14975 15007])
            ("dframe" include nil nil [16119 16136])
            ("gud-last-speedbar-stackframe" variable nil nil [16173 16343])
            ("gud-speedbar-key-map" variable nil nil [16345 16428])
            ("declare-function" code nil nil [16489 16548])
            ("gud-speedbar-item-info" function nil nil [16550 16824])
            ("declare-function" code nil nil [16826 16891])
            ("declare-function" code nil nil [16892 16960])
            ("speedbar-mode-functions-list" variable nil nil [16961 16998])
            ("gud-install-speedbar-variables" function nil nil [17000 17852])
            ("gud-speedbar-menu-items" variable (:default-value (quote (["Jump to stack frame" speedbar-edit-line :visible (not (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)))] ["Edit value" speedbar-edit-line :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Delete expression" gdb-var-delete :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Auto raise frame" gdb-speedbar-auto-raise :style toggle :selected gdb-speedbar-auto-raise :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ("Output Format" :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)) ["Binary" (gdb-var-set-format "binary") t] ["Natural" (gdb-var-set-format "natural") t] ["Hexadecimal" (gdb-var-set-format "hexadecimal") t])))) nil [17854 18791])
            ("if" code nil nil [18842 18969])
            ("gud-expansion-speedbar-buttons" function (:arguments ("_directory" "_zero")) nil [18971 19191])
            ("declare-function" code nil nil [19193 19313])
            ("declare-function" code nil nil [19314 19413])
            ("declare-function" code nil nil [19414 19522])
            ("gud-speedbar-buttons" function (:arguments ("buffer")) nil [19524 23249])
            ("gud-gdb-history" variable nil nil [23389 23417])
            ("gud-gud-gdb-command-name" variable (:default-value "gdb --fullname") nil [23419 23635])
            ("gud-gdb-marker-regexp" variable (:default-value (concat "\\(.:?[^" ":" "
]*\\)" ":" "\\([0-9]*\\)" ":" ".*
")) nil [23637 23884])
            ("gud-marker-acc" variable nil nil [24230 24256])
            ("make-variable-buffer-local" code nil nil [24257 24301])
            ("gud-gdb-marker-filter" function (:arguments ("string")) nil [24303 26226])
            ("easy-mmode-defmap" code nil nil [26228 26413])
            ("gud-query-cmdline" function (:arguments ("minor-mode" "init")) nil [26415 27108])
            ("gdb-first-prompt" variable (:default-value t) nil [27110 27137])
            ("gud-filter-pending-text" variable nil nil [27139 27253])
            ("gud-gdb-completion-function" variable nil nil [27457 27713])
            ("declare-function" code nil nil [27752 27802])
            ("gud-gdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [27893 30395])
            ("gud-gdb-fetch-lines-in-progress" variable nil nil [30461 30501])
            ("gud-gdb-fetch-lines-string" variable nil nil [30580 30615])
            ("gud-gdb-fetch-lines-break" variable nil nil [30676 30710])
            ("gud-gdb-fetched-lines" variable nil nil [30773 30803])
            ("gud-gdb-completions" function (:arguments ("context" "command")) nil [30805 31476])
            ("gud-gdb-completions-1" function (:arguments ("complete-list")) nil [31536 32370])
            ("gud-gdb-completion-at-point" function nil nil [32372 33382])
            ("gud-gdb-fetch-lines-filter" function (:arguments ("string")) nil [33821 34505])
            ("declare-function" code nil nil [34656 34730])
            ("declare-function" code nil nil [34731 34798])
            ("gud-gdb-goto-stackframe" function (:arguments ("_text" "token" "_indent")) nil [34800 35021])
            ("gud-gdb-fetched-stack-frame" variable nil nil [35023 35106])
            ("gud-gdb-get-stackframe" function (:arguments ("buffer")) nil [35108 36221])
            ("gud-gdb-run-command-fetch-lines" function (:arguments ("command" "buffer" "skip")) nil [36351 37268])
            ("gud-sdb-history" variable nil nil [37408 37436])
            ("gud-sdb-needs-tags" variable (:default-value (not (file-exists-p "/var"))) nil [37438 37566])
            ("gud-sdb-lastfile" variable nil nil [37568 37597])
            ("gud-sdb-marker-filter" function (:arguments ("string")) nil [37599 39214])
            ("gud-sdb-find-file" function (:arguments ("f")) nil [39216 39316])
            ("sdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [39333 40678])
            ("gud-dbx-history" variable nil nil [40817 40845])
            ("gud-dbx-directories" variable nil nil [40847 41235])
            ("gud-dbx-massage-args" function (:arguments ("_file" "args")) nil [41237 41511])
            ("gud-dbx-marker-filter" function (:arguments ("string")) nil [41513 42593])
            ("gud-mips-p" variable (:default-value (or (string-match "^mips-[^-]*-ultrix" system-configuration) (string-match "^mips-[^-]*-riscos" system-configuration) (string-match "^mips-[^-]*-osf1" system-configuration) (string-match "^alpha[^-]*-[^-]*-osf" system-configuration))) nil [42744 43172])
            ("gud-dbx-command-name" variable (:default-value (concat "dbx" (if gud-mips-p " -emacs"))) nil [43174 43246])
            ("gud-mipsdbx-marker-filter" function (:arguments ("string")) nil [43386 45043])
            ("gud-irix-p" variable (:default-value (and (string-match "^mips-[^-]*-irix" system-configuration) (not (string-match "irix[6-9]\\.[1-9]" system-configuration)))) nil [46035 46353])
            ("gud-dbx-use-stopformat-p" variable (:default-value (string-match "irix[6-9]\\.[1-9]" system-configuration)) nil [46354 46600])
            ("gud-irixdbx-marker-filter" function (:arguments ("string")) nil [47846 49562])
            ("gud-dguxdbx-marker-filter" function (:arguments ("string")) nil [50189 51223])
            ("dbx" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [51240 53860])
            ("gud-xdb-history" variable nil nil [54021 54049])
            ("gud-xdb-directories" variable nil nil [54051 54439])
            ("gud-xdb-massage-args" function (:arguments ("_file" "args")) nil [54441 54715])
            ("gud-xdb-marker-filter" function (:arguments ("string")) nil [54792 55526])
            ("xdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [55543 56955])
            ("gud-perldb-history" variable nil nil [57100 57131])
            ("gud-perldb-massage-args" function (:arguments ("_file" "args")) nil [57133 58444])
            ("gud-perldb-marker-filter" function (:arguments ("string")) nil [58790 61284])
            ("gud-perldb-command-name" variable (:default-value "perl -d") nil [61286 61422])
            ("perldb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [61439 62802])
            ("gud-pdb-history" variable nil nil [62959 62987])
            ("gud-pdb-marker-regexp" variable (:default-value "^> \\([-a-zA-Z0-9_/.:\\]*\\|<string>\\)(\\([0-9]+\\))\\([a-zA-Z0-9_]*\\|\\?\\|<module>\\)()\\(->[^
]*\\)?[
]") nil [63122 63271])
            ("gud-pdb-marker-regexp-file-group" variable (:default-value 1) nil [63273 63316])
            ("gud-pdb-marker-regexp-line-group" variable (:default-value 2) nil [63317 63360])
            ("gud-pdb-marker-regexp-fnname-group" variable (:default-value 3) nil [63361 63406])
            ("gud-pdb-marker-regexp-start" variable (:default-value "^> ") nil [63408 63450])
            ("gud-pdb-marker-filter" function (:arguments ("string")) nil [63796 65606])
            ("gud-pdb-command-name" variable (:default-value "pdb") nil [65608 65794])
            ("pdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [65811 67126])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [70484 70597])
            ("gud-jdb-use-classpath" variable (:default-value t) nil [70599 71313])
            ("gud-jdb-classpath" variable nil nil [71315 72254])
            ("gud-jdb-sourcepath" variable nil nil [72256 72477])
            ("gud-marker-acc-max-length" variable (:default-value 4000) nil [72479 72723])
            ("gud-jdb-history" variable nil nil [72725 72798])
            ("gud-jdb-directories" variable (:default-value (list ".")) nil [72842 73424])
            ("gud-jdb-source-files" variable nil nil [73426 73521])
            ("gud-jdb-class-source-alist" variable nil nil [73624 73733])
            ("gud-jdb-analysis-buffer" variable nil nil [73790 73826])
            ("gud-jdb-classpath-string" variable nil nil [73828 73903])
            ("gud-jdb-build-source-files-list" function (:arguments ("path" "extn")) nil [73905 74274])
            ("gud-jdb-skip-whitespace" function nil nil [74307 74378])
            ("gud-jdb-skip-single-line-comment" function nil nil [74429 74488])
            ("gud-jdb-skip-traditional-or-documentation-comment" function nil nil [74548 74871])
            ("gud-jdb-skip-whitespace-and-comments" function nil nil [74952 75298])
            ("gud-jdb-skip-id-ish-thing" function nil nil [75460 75538])
            ("gud-jdb-skip-string-literal" function nil nil [75577 75782])
            ("gud-jdb-skip-character-literal" function nil nil [75824 76029])
            ("gud-jdb-skip-block" function nil nil [76209 77470])
            ("gud-jdb-analyze-source" function (:arguments ("buf" "file")) nil [77662 79862])
            ("gud-jdb-build-class-source-alist-for-file" function (:arguments ("file")) nil [79864 80023])
            ("gud-jdb-build-class-source-alist" function (:arguments ("sources")) nil [80183 80495])
            ("gud-jdb-massage-args" function (:arguments ("_file" "args")) nil [80597 82260])
            ("gud-jdb-find-source-file" function (:arguments ("p")) nil [82464 82545])
            ("gud-jdb-lowest-stack-level" variable (:default-value 999) nil [82604 82643])
            ("gud-jdb-find-source-using-classpath" function (:arguments ("p")) nil [82645 83572])
            ("gud-jdb-find-source" function (:arguments ("_string")) nil [83574 83821])
            ("gud-jdb-parse-classpath-string" function (:arguments ("string")) nil [83823 84143])
            ("gud-jdb-marker-filter" function (:arguments ("string")) nil [84254 88385])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [88387 88465])
            ("jdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [88482 91688])
            ("gud-delete-prompt-marker" variable nil nil [93664 93701])
            ("put" code nil nil [93705 93741])
            ("define-derived-mode" code nil nil [93743 96618])
            ("gud-chdir-before-run" variable (:default-value t) nil [96620 96744])
            ("declare-function" code nil nil [96746 96804])
            ("declare-function" code nil nil [96805 96882])
            ("gud-common-init" function (:arguments ("command-line" "massage-args" "marker-filter" "find-file")) nil [97124 100080])
            ("gud-set-buffer" function nil nil [100082 100189])
            ("gud-filter-defer-flag" variable nil nil [100191 100338])
            ("gud-filter" function (:arguments ("proc" "string")) nil [100516 102811])
            ("gud-minor-mode-type" variable nil nil [102813 102845])
            ("gud-overlay-arrow-position" variable nil nil [102846 102885])
            ("add-to-list" code nil nil [102886 102956])
            ("declare-function" code nil nil [102958 102998])
            ("declare-function" code nil nil [102999 103073])
            ("speedbar-previously-used-expansion-list-name" variable nil nil [103074 103127])
            ("gud-sentinel" function (:arguments ("proc" "msg")) nil [103129 104749])
            ("gud-kill-buffer-hook" function nil nil [104751 104980])
            ("gud-reset" function nil nil [104982 105205])
            ("gud-display-frame" function (:user-visible-flag t) nil [105207 105575])
            ("declare-function" code nil nil [105577 105634])
            ("declare-function" code nil nil [105635 105692])
            ("declare-function" code nil nil [105693 105756])
            ("gud-display-line" function (:arguments ("true-file" "line")) nil [106160 107522])
            ("gud-format-command" function (:arguments ("str" "arg")) nil [107771 109482])
            ("gud-read-address" function nil nil [109484 110095])
            ("gud-call" function (:arguments ("fmt" "arg")) nil [110097 110251])
            ("gud-basic-call" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [110253 111177])
            ("gud-refresh" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [111179 111398])
            ("gud-find-expr-function" variable (:default-value (quote gud-find-c-expr)) nil [111570 111618])
            ("gud-find-expr" function (:arguments ("args")) nil [111620 112353])
            ("gud-find-c-expr" function (:user-visible-flag t) nil [112515 113377])
            ("gud-innermost-expr" function nil nil [113379 113964])
            ("gud-backward-sexp" function nil nil [113966 114105])
            ("gud-forward-sexp" function nil nil [114107 114242])
            ("gud-prev-expr" function nil nil [114244 114696])
            ("gud-next-expr" function nil nil [114698 115153])
            ("gud-expr-compound-sep" function (:arguments ("span-start" "span-end")) nil [115155 115918])
            ("gud-expr-compound" function (:arguments ("first" "second")) nil [115920 116886])
            ("declare-function" code nil nil [116889 116943])
            ("declare-function" code nil nil [116944 116998])
            ("gud-find-class" function (:arguments ("f" "_line")) nil [117000 121376])
            ("gdb-script-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 39 "\"" st) (modify-syntax-entry 35 "<" st) (modify-syntax-entry 10 ">" st) st)) nil [121594 121783])
            ("gdb-script-font-lock-keywords" variable (:default-value (quote (("^define\\s-+\\(\\(\\w\\|\\s_\\)+\\)" (1 font-lock-function-name-face)) ("\\$\\(\\w+\\)" (1 font-lock-variable-name-face)) ("^\\s-*\\(\\w\\(\\w\\|\\s_\\)*\\)" (1 font-lock-keyword-face))))) nil [121785 122024])
            ("gdb-script-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("^document\\s-.*\\(
\\)" (1 "< b")) ("^end\\(\\>\\)" (1 (ignore (when (and (> (match-beginning 0) (point-min)) (eq 1 (nth 7 (save-excursion (syntax-ppss (1- (match-beginning 0))))))) (put-text-property (1- (match-beginning 0)) (match-beginning 0) (quote syntax-table) (eval-when-compile (string-to-syntax "> b"))) (put-text-property (1- (match-beginning 0)) (match-end 0) (quote syntax-multiline) t)))))))
                nil [122026 123343])
            ("gdb-script-font-lock-syntactic-face" function (:arguments ("state")) nil [123345 123514])
            ("gdb-script-basic-indent" variable (:default-value 2) nil [123516 123550])
            ("gdb-script-skip-to-head" function nil nil [123552 123822])
            ("gdb-script-calculate-indentation" function nil nil [123824 124373])
            ("gdb-script-indent-line" function (:user-visible-flag t) nil [124375 124997])
            ("gdb-script-beginning-of-defun" function nil nil [125028 125338])
            ("gdb-script-end-of-defun" function nil nil [125369 125592])
            ("define-derived-mode" code nil nil [125609 126669])
            ("tooltip-mode" variable nil nil [126722 126743])
            ("define-minor-mode" code nil nil [126760 128312])
            ("define-obsolete-variable-alias" code nil nil [128314 128423])
            ("gud-tooltip-modes" variable (:default-value (quote (gud-mode c-mode c++-mode fortran-mode python-mode))) nil [128425 128610])
            ("define-obsolete-variable-alias" code nil nil [128612 128725])
            ("gud-tooltip-display" variable (:default-value (quote ((eq (tooltip-event-buffer gud-tooltip-event) (marker-buffer gud-overlay-arrow-position))))) nil [128727 129090])
            ("gud-tooltip-echo-area" variable nil nil [129092 129236])
            ("make-obsolete-variable" code nil nil [129238 129331])
            ("gud-tooltip-change-major-mode" function nil nil [129366 129557])
            ("gud-tooltip-activate-mouse-motions-if-enabled" function nil nil [129559 130006])
            ("gud-tooltip-mouse-motions-active" variable nil nil [130008 130129])
            ("gud-tooltip-activate-mouse-motions" function (:arguments ("activatep")) nil [130453 130930])
            ("tooltip-last-mouse-motion-event" variable nil nil [130932 130972])
            ("declare-function" code nil nil [130973 131038])
            ("declare-function" code nil nil [131039 131096])
            ("gud-tooltip-mouse-motion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [131098 131373])
            ("gud-tooltip-dereference" variable nil nil [131395 131547])
            ("gud-tooltip-event" variable nil nil [131549 131701])
            ("gud-tooltip-dereference" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [131703 132110])
            ("define-obsolete-function-alias" code nil nil [132112 132240])
            ("tooltip-use-echo-area" variable nil nil [132241 132271])
            ("declare-function" code nil nil [132272 132344])
            ("declare-function" code nil nil [132345 132411])
            ("gud-tooltip-process-output" function (:arguments ("process" "output")) nil [132735 133066])
            ("gud-tooltip-print-command" function (:arguments ("expr")) nil [133068 133359])
            ("declare-function" code nil nil [133361 133434])
            ("declare-function" code nil nil [133435 133493])
            ("declare-function" code nil nil [133494 133551])
            ("gud-tooltip-tips" function (:arguments ("event")) nil [133553 135889])
            ("gud" package nil nil [135891 135905]))          
      :file "gud.el.gz"
      :pointmax 135928
      :fsize 36743
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 16136 . 16137) (symbol 16101 . 16118) (open-paren 16100 . 16101)))
    (semanticdb-table "hideif.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cc-mode" include nil nil [4033 4051])
            ("hide-ifdef" customgroup (:user-visible-flag t) nil [4053 4129])
            ("hide-ifdef-initially" variable nil nil [4131 4283])
            ("hide-ifdef-read-only" variable nil nil [4285 4432])
            ("hide-ifdef-lines" variable nil nil [4434 4562])
            ("hide-ifdef-shadow" variable nil nil [4564 4705])
            ("hide-ifdef-shadow" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [4707 4835])
            ("hide-ifdef-mode-submap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "d" (quote hide-ifdef-define)) (define-key map "u" (quote hide-ifdef-undef)) (define-key map "D" (quote hide-ifdef-set-define-alist)) (define-key map "U" (quote hide-ifdef-use-define-alist)) (define-key map "h" (quote hide-ifdefs)) (define-key map "s" (quote show-ifdefs)) (define-key map "" (quote hide-ifdef-block)) (define-key map "" (quote show-ifdef-block)) (define-key map "" (quote hide-ifdef-toggle-read-only)) (define-key map "" (quote hide-ifdef-toggle-shadowing)) (substitute-key-definition (quote read-only-mode) (quote hide-ifdef-toggle-outside-read-only) map) (substitute-key-definition (quote toggle-read-only) (quote hide-ifdef-toggle-outside-read-only) map) map)) nil [4838 5771])
            ("hide-ifdef-mode-prefix-key" variable
               (:constant-flag t
                :default-value "@")
                nil [5773 5867])
            ("hide-ifdef-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map hide-ifdef-mode-prefix-key hide-ifdef-mode-submap) map)) nil [5869 6132])
            ("easy-menu-define" code nil nil [6134 7484])
            ("hide-ifdef-hiding" variable nil nil [7486 7553])
            ("or" code nil nil [7555 7711])
            ("hide-ifdef-syntax-table" variable (:default-value (let ((st (copy-syntax-table c-mode-syntax-table))) (modify-syntax-entry 95 "w" st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) st)) nil [7775 8032])
            ("hide-ifdef-env" variable nil nil [8034 8111])
            ("hif-outside-read-only" variable nil nil [8113 8223])
            ("define-minor-mode" code nil nil [8240 10378])
            ("hif-show-all" function (:user-visible-flag t) nil [10381 10518])
            ("hif-after-revert-function" function nil nil [10678 10779])
            ("add-hook" code nil nil [10780 10836])
            ("hif-end-of-line" function nil nil [10838 10956])
            ("hide-ifdef-region-internal" function (:arguments ("start" "end")) nil [10958 11235])
            ("hide-ifdef-region" function (:arguments ("start" "end")) nil [11237 11578])
            ("hif-show-ifdef-region" function (:arguments ("start" "end")) nil [11580 11719])
            ("hide-ifdef-evaluator" variable (:default-value (quote eval)) nil [11869 12047])
            ("hif-undefined-symbol" variable nil nil [12049 12127])
            ("hif-set-var" function (:arguments ("var" "value")) nil [12130 12274])
            ("declare-function" code nil nil [12276 12346])
            ("declare-function" code nil nil [12347 12417])
            ("hif-lookup" function (:arguments ("var")) nil [12419 12631])
            ("hif-defined" function (:arguments ("var")) nil [12633 12797])
            ("hif-cpp-prefix" variable
               (:constant-flag t
                :default-value "\\(^\\|\\)[ 	]*#[ 	]*")
                nil [12940 12993])
            ("hif-ifndef-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "ifndef"))
                nil [12994 13055])
            ("hif-ifx-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "if\\(n?def\\)?[ 	]+"))
                nil [13056 13128])
            ("hif-else-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "else"))
                nil [13129 13186])
            ("hif-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "endif"))
                nil [13187 13246])
            ("hif-ifx-else-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-ifx-regexp "\\|" hif-else-regexp "\\|" hif-endif-regexp))
                nil [13247 13354])
            ("hif-token" variable nil nil [13459 13477])
            ("hif-token-list" variable nil nil [13478 13501])
            ("hif-token-alist" variable
               (:constant-flag t
                :default-value (quote (("||" . hif-or) ("&&" . hif-and) ("|" . hif-logior) ("^" . hif-logxor) ("&" . hif-logand) ("<<" . hif-shiftleft) (">>" . hif-shiftright) ("==" . hif-equal) ("=" . hif-assign) ("!=" . hif-notequal) ("##" . hif-token-concat) ("!" . hif-not) ("~" . hif-lognot) ("(" . hif-lparen) (")" . hif-rparen) (">" . hif-greater) ("<" . hif-less) (">=" . hif-greater-equal) ("<=" . hif-less-equal) ("+" . hif-plus) ("-" . hif-minus) ("*" . hif-multiply) ("/" . hif-divide) ("%" . hif-modulo) ("?" . hif-conditional) (":" . hif-colon))))
                nil [13503 14377])
            ("hif-token-regexp" variable
               (:constant-flag t
                :default-value (concat (regexp-opt (mapcar (quote car) hif-token-alist)) "\\|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*" "\\|[0-9]+\\.?[0-9]*" "\\|\\w+"))
                nil [14379 14576])
            ("hif-string-literal-regexp" variable
               (:constant-flag t
                :default-value "\\(\"\\(?:[^\"\\]\\|\\\\.\\)*\"\\)")
                nil [14578 14652])
            ("hif-tokenize" function (:arguments ("start" "end")) nil [14655 16590])
            ("hif-nexttoken" function nil nil [18444 18585])
            ("hif-parse-if-exp" function (:arguments ("token-list")) nil [18587 18917])
            ("hif-exprlist" function nil nil [18919 19237])
            ("hif-expr" function nil nil [19239 19685])
            ("hif-or-expr" function nil nil [19687 19923])
            ("hif-and-expr" function nil nil [19925 20180])
            ("hif-logior-expr" function nil nil [20182 20448])
            ("hif-logxor-expr" function nil nil [20450 20718])
            ("hif-logand-expr" function nil nil [20720 20972])
            ("hif-eq-expr" function nil nil [20974 21280])
            ("hif-comp-expr" function nil nil [21282 21661])
            ("hif-logshift-expr" function nil nil [21663 21988])
            ("hif-math" function nil nil [21990 22322])
            ("hif-muldiv-expr" function nil nil [22324 22665])
            ("hif-factor" function nil nil [22667 24045])
            ("hif-mathify" function (:arguments ("val")) nil [24047 24178])
            ("hif-conditional" function (:arguments ("a" "b" "c")) nil [24180 24280])
            ("hif-and" function (:arguments ("a" "b")) nil [24281 24370])
            ("hif-or" function (:arguments ("a" "b")) nil [24371 24458])
            ("hif-not" function (:arguments ("a")) nil [24459 24504])
            ("hif-lognot" function (:arguments ("a")) nil [24505 24554])
            ("hif-mathify-binop" function (:arguments ("fun")) nil [24556 24715])
            ("hif-shiftleft" function (:arguments ("a" "b")) nil [24717 24843])
            ("hif-shiftright" function (:arguments ("a" "b")) nil [24845 24980])
            ("defalias" code nil nil [24983 25034])
            ("defalias" code nil nil [25035 25086])
            ("defalias" code nil nil [25087 25138])
            ("defalias" code nil nil [25139 25190])
            ("defalias" code nil nil [25191 25242])
            ("defalias" code nil nil [25243 25294])
            ("defalias" code nil nil [25295 25347])
            ("defalias" code nil nil [25348 25399])
            ("defalias" code nil nil [25400 25451])
            ("defalias" code nil nil [25452 25504])
            ("defalias" code nil nil [25505 25557])
            ("defalias" code nil nil [25558 25614])
            ("defalias" code nil nil [25615 25671])
            ("defalias" code nil nil [25672 25728])
            ("hif-comma" function (:arguments ("expr")) nil [25731 25959])
            ("hif-canonicalize" function nil nil [26017 26448])
            ("hif-find-any-ifX" function nil nil [26451 26663])
            ("hif-find-next-relevant" function nil nil [26666 27009])
            ("hif-find-previous-relevant" function nil nil [27011 27373])
            ("hif-looking-at-ifX" function nil nil [27376 27465])
            ("hif-looking-at-endif" function nil nil [27466 27529])
            ("hif-looking-at-else" function nil nil [27530 27591])
            ("hif-ifdef-to-endif" function nil nil [27595 28072])
            ("hif-endif-to-ifdef" function nil nil [28075 28584])
            ("forward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28607 29074])
            ("backward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29077 29574])
            ("down-ifdef" function (:user-visible-flag t) nil [29577 29848])
            ("up-ifdef" function (:user-visible-flag t) nil [29851 30181])
            ("next-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30183 30577])
            ("previous-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30579 30992])
            ("hif-make-range" function (:arguments ("start" "end" "else")) nil [31369 31445])
            ("hif-range-start" function (:arguments ("range")) nil [31447 31495])
            ("hif-range-else" function (:arguments ("range")) nil [31496 31543])
            ("hif-range-end" function (:arguments ("range")) nil [31544 31590])
            ("hif-find-range" function nil nil [31817 32812])
            ("hif-hide-line" function (:arguments ("point")) nil [32833 33115])
            ("hif-recurse-on" function (:arguments ("start" "end")) nil [34054 34313])
            ("hif-possibly-hide" function nil nil [34315 35542])
            ("hide-ifdef-guts" function nil nil [35546 35824])
            ("hide-ifdef-toggle-read-only" function (:user-visible-flag t) nil [35903 36252])
            ("hide-ifdef-toggle-outside-read-only" function (:user-visible-flag t) nil [36254 36636])
            ("hide-ifdef-toggle-shadowing" function (:user-visible-flag t) nil [36638 37207])
            ("hide-ifdef-define" function
               (:user-visible-flag t
                :arguments ("var"))
                nil [37209 37389])
            ("hide-ifdef-undef" function
               (:user-visible-flag t
                :arguments ("var"))
                nil [37391 37580])
            ("hide-ifdefs" function
               (:user-visible-flag t
                :arguments ("nomsg"))
                nil [37583 38302])
            ("show-ifdefs" function (:user-visible-flag t) nil [38305 38513])
            ("hif-find-ifdef-block" function nil nil [38516 39125])
            ("hide-ifdef-block" function (:user-visible-flag t) nil [39128 39616])
            ("show-ifdef-block" function (:user-visible-flag t) nil [39618 40075])
            ("hide-ifdef-define-alist" variable nil nil [40109 40198])
            ("hif-compress-define-list" function (:arguments ("env")) nil [40200 40425])
            ("hide-ifdef-set-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [40427 40648])
            ("hide-ifdef-use-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [40650 41265])
            ("hideif" package nil nil [41267 41284]))          
      :file "hideif.el.gz"
      :pointmax 41310
      :fsize 11108
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "compile.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1127 1144])
            ("tool-bar" include nil nil [1146 1165])
            ("comint" include nil nil [1166 1183])
            ("compilation" customgroup (:user-visible-flag t) nil [1185 1308])
            ("compilation-mode-hook" variable nil nil [1326 1453])
            ("compilation-start-hook" variable nil nil [1470 1651])
            ("compilation-window-height" variable nil nil [1668 1859])
            ("compilation-filter-hook" variable nil nil [1861 2238])
            ("compilation-filter-start" variable nil nil [2240 2405])
            ("compilation-first-column" variable (:default-value 1) nil [2407 2694])
            ("compilation-parse-errors-filename-function" variable nil nil [2696 2961])
            ("compilation-process-setup-function" variable nil nil [2978 3283])
            ("compilation-buffer-name-function" variable nil nil [3300 3597])
            ("compilation-finish-function" variable nil nil [3614 3819])
            ("make-obsolete-variable" code nil nil [3821 3958])
            ("compilation-finish-functions" variable nil nil [3975 4193])
            ("compilation-in-progress" variable nil nil [4195 4278])
            ("or" code nil nil [4279 4429])
            ("compilation-error" variable (:default-value "error") nil [4431 4521])
            ("compilation-arguments" variable nil nil [4523 4611])
            ("compilation-num-errors-found" variable nil nil [4613 4650])
            ("compilation-error-regexp-alist-alist" variable (:default-value (quote ((absoft "^\\(?:[Ee]rror on \\|[Ww]arning on\\( \\)\\)?[Ll]ine[ 	]+\\([0-9]+\\)[ 	]+of[ 	]+\"?\\([a-zA-Z]?:?[^\":
]+\\)\"?:" 3 2 nil (1)) (ada "\\(warning: .*\\)? at \\([^ 
]+\\):\\([0-9]+\\)$" 2 3 nil (1)) (aix " in line \\([0-9]+\\) of file \\([^ 
]+[^. 
]\\)\\.? " 2 1) (ant "^[ 	]*\\[[^] 
]+\\][ 	]*\\([^: 
]+\\):\\([0-9]+\\):\\(?:\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\):\\)?\\( warning\\)?" 1 (2 . 4) (3 . 5) (6)) (bash "^\\([^: 
	]+\\): line \\([0-9]+\\):" 1 2) (borland "^\\(?:Error\\|Warnin\\(g\\)\\) \\(?:[FEW][0-9]+ \\)?\\([a-zA-Z]?:?[^:( 	
]+\\) \\([0-9]+\\)\\(?:[) 	]\\|:[^0-9
]\\)" 2 3 nil (1)) (python-tracebacks-and-caml "^[ 	]*File \\(\"?\\)\\([^,\" 
	<>]+\\)\\1, lines? \\([0-9]+\\)-?\\([0-9]+\\)?\\(?:$\\|,\\(?: characters? \\([0-9]+\\)-?\\([0-9]+\\)?:\\)?\\([ 
]Warning\\(?: [0-9]+\\)?:\\)?\\)" 2 (3 . 4) (5 . 6) (7)) (comma "^\"\\([^,\" 
	]+\\)\", line \\([0-9]+\\)\\(?:[(. pos]+\\([0-9]+\\))?\\)?[:.,; (-]\\( warning:\\|[-0-9 ]*(W)\\)?" 1 2 3 (4)) (cucumber "\\(?:^cucumber\\(?: -p [^[:space:]]+\\)?\\|#\\)\\(?: \\)\\([^(].*\\):\\([1-9][0-9]*\\)" 1 2) (msft "^ *\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)) ?: \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)" 2 3 nil (4)) (edg-1 "^\\([^ 
]+\\)(\\([0-9]+\\)): \\(?:error\\|warnin\\(g\\)\\|remar\\(k\\)\\)" 1 2 nil (3 . 4)) (edg-2 "at line \\([0-9]+\\) of \"\\([^ 
]+\\)\"$" 2 1 nil 0) (epc "^Error [0-9]+ at (\\([0-9]+\\):\\([^)
]+\\))" 2 1) (ftnchek "\\(^Warning .*\\)? line[ 
]\\([0-9]+\\)[ 
]\\(?:col \\([0-9]+\\)[ 
]\\)?file \\([^ :;
]+\\)" 4 2 3 (1)) (iar "^\"\\(.*\\)\",\\([0-9]+\\)\\s-+\\(?:Error\\|Warnin\\(g\\)\\)\\[[0-9]+\\]:" 1 2 nil (3)) (ibm "^\\([^( 
	]+\\)(\\([0-9]+\\):\\([0-9]+\\)) : \\(?:warnin\\(g\\)\\|informationa\\(l\\)\\)?" 1 2 3 (4 . 5)) (irix "^[-[:alnum:]_/ ]+: \\(?:\\(?:[sS]evere\\|[eE]rror\\|[wW]arnin\\(g\\)\\|[iI]nf\\(o\\)\\)[0-9 ]*: \\)?\\([^,\" 
	]+\\)\\(?:, line\\|:\\) \\([0-9]+\\):" 3 4 nil (1 . 2)) (java "^\\(?:[ 	]+at \\|==[0-9]+== +\\(?:at\\|b\\(y\\)\\)\\).+(\\([^()
]+\\):\\([0-9]+\\))$" 2 3 nil (1)) (jikes-file "^\\(?:Found\\|Issued\\) .* compiling \"\\(.+\\)\":$" 1 nil nil 0) (maven "\\([^ 
]\\(?:[^
 :]\\| [^-/
]\\|:[^ 
]\\)*?\\):\\[\\([0-9]+\\),\\([0-9]+\\)\\] " 1 2 3) (jikes-line "^ *\\([0-9]+\\)\\.[ 	]+.*
 +\\(<-*>
\\*\\*\\* \\(?:Error\\|Warnin\\(g\\)\\)\\)" nil 1 nil 2 0 (2 (compilation-face (quote (3))))) (gcc-include "^\\(?:In file included \\|                 \\|	\\)from \\([0-9]*[^0-9
]\\(?:[^
 :]\\| [^-/
]\\|:[^ 
]\\)*?\\):\\([0-9]+\\)\\(?::\\([0-9]+\\)\\)?\\(?:\\(:\\)\\|\\(,\\|$\\)\\)?" 1 2 3 (4 . 5)) (ruby-Test::Unit "^[	 ]*\\[\\([^(].*\\):\\([1-9][0-9]*\\)\\(\\]\\)?:in " 1 2) (gnu "^\\(?:[[:alpha:]][-[:alnum:].]+: ?\\|[ 	]+\\(?:in \\|from \\)\\)?\\([0-9]*[^0-9
]\\(?:[^
 :]\\| [^-/
]\\|:[^ 
]\\)*?\\): ?\\([0-9]+\\)\\(?:-\\(?4:[0-9]+\\)\\(?:\\.\\(?5:[0-9]+\\)\\)?\\|[.:]\\(?3:[0-9]+\\)\\(?:-\\(?:\\(?4:[0-9]+\\)\\.\\)?\\(?5:[0-9]+\\)\\)?\\)?:\\(?: *\\(\\(?:Future\\|Runtime\\)?[Ww]arning\\|W:\\)\\| *\\([Ii]nfo\\(?:\\>\\|rmationa?l?\\)\\|I:\\|\\[ skipping .+ \\]\\|\\(?:instantiated\\|required\\) from\\|[Nn]ote\\)\\| *[Ee]rror\\|[0-9]?\\(?:[^0-9
]\\|$\\)\\|[0-9][0-9][0-9]\\)" 1 (2 . 4) (3 . 5) (6 . 7)) (lcc "^\\(?:E\\|\\(W\\)\\), \\([^(
]+\\)(\\([0-9]+\\),[ 	]*\\([0-9]+\\)" 2 3 4 (1)) (makepp "^makepp\\(?:\\(?:: warning\\(:\\).*?\\|\\(: Scanning\\|: [LR]e?l?oading makefile\\|: Imported\\|log:.*?\\) \\|: .*?\\)`\\(\\(\\S +?\\)\\(?::\\([0-9]+\\)\\)?\\)['(]\\)" 4 5 nil (1 . 2) 3 (0 (progn (save-match-data (compilation-parse-errors (match-end 0) (line-end-position) (\` ("`\\(\\(\\S +?\\)\\(?::\\([0-9]+\\)\\)?\\)['(]" 2 3 nil (\, (cond ((match-end 1) 1) ((match-end 2) 0) (t 2))) 1)))) (end-of-line) nil))) (mips-1 " (\\([0-9]+\\)) in \\([^ 
]+\\)" 2 1) (mips-2 " in \\([^()
 ]+\\)(\\([0-9]+\\))$" 1 2) (msft "^ *\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)) : \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)" 2 3 nil (4)) (omake "omake: file \\(.*\\) changed" 1 nil nil nil nil (0 (progn (compilation--flush-file-structure (match-string 1)) nil))) (oracle "^\\(?:Semantic error\\|Error\\|PCC-[0-9]+:\\).* line \\([0-9]+\\)\\(?:\\(?:,\\| at\\)? column \\([0-9]+\\)\\)?\\(?:,\\| in\\| of\\)? file \\(.*?\\):?$" 3 1 2) (perl " at \\([^ 
]+\\) line \\([0-9]+\\)\\(?:[,.]\\|$\\| during global destruction\\.$\\)" 1 2) (php "\\(?:Parse\\|Fatal\\) error: \\(.*\\) in \\(.*\\) on line \\([0-9]+\\)" 2 3 nil nil) (rxp "^\\(?:Error\\|Warnin\\(g\\)\\):.*
.* line \\([0-9]+\\) char \\([0-9]+\\) of file://\\(.+\\)" 4 2 3 (1)) (sparc-pascal-file "^\\w\\w\\w \\w\\w\\w +[0-3]?[0-9] +[0-2][0-9]:[0-5][0-9]:[0-5][0-9] [12][09][0-9][0-9] +\\(.*\\):$" 1 nil nil 0) (sparc-pascal-line "^\\(\\(?:E\\|\\(w\\)\\) +[0-9]+\\) line \\([0-9]+\\) -  " nil 3 nil (2) nil (1 (compilation-face (quote (2))))) (sparc-pascal-example "^ +\\([0-9]+\\) +.*
\\(\\(?:e\\|\\(w\\)\\) [0-9]+\\)-+" nil 1 nil (3) nil (2 (compilation-face (quote (3))))) (sun ": \\(?:ERROR\\|WARNIN\\(G\\)\\|REMAR\\(K\\)\\) \\(?:[[:alnum:] ]+, \\)?File = \\(.+\\), Line = \\([0-9]+\\)\\(?:, Column = \\([0-9]+\\)\\)?" 3 4 5 (1 . 2)) (sun-ada "^\\([^, 
	]+\\), line \\([0-9]+\\), char \\([0-9]+\\)[:., (-]" 1 2 3) (watcom "^[ 	]*\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)): ?\\(?:\\(Error! E[0-9]+\\)\\|\\(Warning! W[0-9]+\\)\\):" 1 2 nil (4)) (4bsd "\\(?:^\\|::  \\|\\S ( \\)\\(/[^ 
	()]+\\)(\\([0-9]+\\))\\(?:: \\(warning:\\)?\\|$\\| ),\\)" 1 2 nil (3)) (gcov-file "^ *-: *\\(0\\):Source:\\(.+\\)$" 2 1 nil 0 nil) (gcov-header "^ *-: *\\(0\\):\\(?:Object\\|Graph\\|Data\\|Runs\\|Programs\\):.+$" nil 1 nil 0 nil) (gcov-nomark "^ *-: *\\([1-9]\\|[0-9]\\{2,\\}\\):.*$" nil 1 nil 0 nil (0 (quote default)) (1 compilation-line-face)) (gcov-called-line "^ *\\([0-9]+\\): *\\([0-9]+\\):.*$" nil 2 nil 0 nil (0 (quote default)) (1 compilation-info-face) (2 compilation-line-face)) (gcov-never-called "^ *\\(#####\\): *\\([0-9]+\\):.*$" nil 2 nil 2 nil (0 (quote default)) (1 compilation-error-face) (2 compilation-line-face)) (perl--Pod::Checker "^\\*\\*\\* \\(?:ERROR\\|\\(WARNING\\)\\).* \\(?:at\\|on\\) line \\([0-9]+\\) \\(?:.* \\)?in file \\([^ 	
]+\\)" 3 2 nil (1)) (perl--Test "^# Failed test [0-9]+ in \\([^ 	
]+\\) at line \\([0-9]+\\)" 1 2) (perl--Test2 "^\\(.*NOK.*\\)?# Test [0-9]+ got:.* (\\([^ 	
]+\\) at line \\([0-9]+\\)\\( fail #[0-9]+\\)?)" 2 3) (perl--Test::Harness "^.*NOK.* \\([^ 	
]+\\) at line \\([0-9]+\\)" 1 2) (weblint "^\\([^ 	
(]+\\) (\\([0-9]+\\):\\([0-9]+\\)) " 1 2 3)))) nil [4858 16995])
            ("compilation-error-regexp-alist" variable (:default-value (mapcar (quote car) compilation-error-regexp-alist-alist)) nil [16997 19809])
            ("compilation-directory" variable nil nil [19884 19970])
            ("compilation-directory-matcher" variable (:default-value (quote ("\\(?:Entering\\|Leavin\\(g\\)\\) directory [`']\\(.+\\)'$" (2 . 1)))) nil [19972 20813])
            ("compilation-page-delimiter" variable (:default-value "^\\(?:\\|.*\\(?:Entering\\|Leaving\\) directory [`'].+'
\\)+") nil [20815 20969])
            ("compilation-mode-font-lock-keywords" variable (:default-value (quote (("^[Cc]hecking \\(?:[Ff]or \\|[Ii]f \\|[Ww]hether \\(?:to \\)?\\)?\\(.+\\)\\.\\.\\. *\\(?:(cached) *\\)?\\(\\(yes\\(?: .+\\)?\\)\\|no\\|\\(.*\\)\\)$" (1 font-lock-variable-name-face) (2 (compilation-face (quote (4 . 3))))) ("^\\([[:alnum:]_/.+-]+\\)\\(\\[\\([0-9]+\\)\\]\\)?[ 	]*:" (1 font-lock-function-name-face) (3 compilation-line-face nil t)) (" --?o\\(?:utfile\\|utput\\)?[= ]\\(\\S +\\)" . 1) ("^Compilation \\(finished\\).*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-info-face)) ("^Compilation \\(exited abnormally\\|interrupt\\|killed\\|terminated\\|segmentation fault\\)\\(?:.*with code \\([0-9]+\\)\\)?.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-error-face) (2 compilation-error-face nil t))))) nil [20971 22086])
            ("compilation-highlight-regexp" variable (:default-value t) nil [22088 22267])
            ("compilation-highlight-overlay" variable nil nil [22269 22374])
            ("compilation-error-screen-columns" variable (:default-value t) nil [22376 23001])
            ("compilation-read-command" variable (:default-value t) nil [23003 23455])
            ("compilation-ask-about-save" variable (:default-value t) nil [23472 23683])
            ("compilation-save-buffers-predicate" variable nil nil [23685 24286])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [24303 24658])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [24675 25296])
            ("compilation-disable-input" variable nil nil [25473 25775])
            ("compilation-locs" variable nil nil [26001 26029])
            ("compilation-debug" variable nil nil [26031 26262])
            ("compilation-exit-message-function" variable nil nil [26264 26607])
            ("compilation-environment" variable nil nil [26609 26991])
            ("compile-history" variable nil nil [27025 27053])
            ("compilation-error" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [27055 27190])
            ("compilation-warning" variable
               (:default-value (quote ((t :inherit warning)))
                :type "face")
                nil [27192 27333])
            ("compilation-info" variable
               (:default-value (quote ((t :inherit success)))
                :type "face")
                nil [27335 27476])
            ("compilation-mode-line-fail" variable
               (:default-value (quote ((default :inherit compilation-error) (((class color) (min-colors 16)) (:foreground "Red1" :weight bold)) (((class color) (min-colors 8)) (:foreground "red")) (t (:inverse-video t :weight bold))))
                :type "face")
                nil [27588 27938])
            ("compilation-mode-line-run" variable
               (:default-value (quote ((t :inherit compilation-warning)))
                :type "face")
                nil [27940 28118])
            ("compilation-mode-line-exit" variable
               (:default-value (quote ((default :inherit compilation-info) (((class color) (min-colors 16)) (:foreground "ForestGreen" :weight bold)) (((class color)) (:foreground "green" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [28120 28463])
            ("compilation-line-number" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [28465 28638])
            ("compilation-column-number" variable
               (:default-value (quote ((t :inherit font-lock-doc-face)))
                :type "face")
                nil [28640 28813])
            ("compilation-message-face" variable (:default-value (quote underline)) nil [28815 29136])
            ("compilation-error-face" variable (:default-value (quote compilation-error)) nil [29138 29242])
            ("compilation-warning-face" variable (:default-value (quote compilation-warning)) nil [29244 29354])
            ("compilation-info-face" variable (:default-value (quote compilation-info)) nil [29356 29466])
            ("compilation-line-face" variable (:default-value (quote compilation-line-number)) nil [29468 29583])
            ("compilation-column-face" variable (:default-value (quote compilation-column-number)) nil [29585 29706])
            ("compilation-enter-directory-face" variable (:default-value (quote font-lock-function-name-face)) nil [29736 29861])
            ("compilation-leave-directory-face" variable (:default-value (quote font-lock-builtin-face)) nil [29863 29981])
            ("compilation-parse-errors-function" variable nil nil [30034 30080])
            ("make-obsolete-variable" code nil nil [30081 30182])
            ("compilation-auto-jump-to-first-error" variable nil nil [30184 30367])
            ("compilation-auto-jump-to-next" variable nil nil [30369 30477])
            ("make-variable-buffer-local" code nil nil [30478 30537])
            ("compilation-skip-to-next-location" variable (:default-value t) nil [30719 30838])
            ("compilation-skip-threshold" variable (:default-value 1) nil [30840 31320])
            ("compilation-set-skip-threshold" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [31322 31799])
            ("compilation-skip-visited" variable nil nil [31801 32149])
            ("compilation-face" function (:arguments ("type")) nil [32151 32351])
            ("compilation--make-cdrloc" function (:arguments ("line" "file-struct" "marker")) nil [33763 33865])
            ("compilation--loc->col" function (:arguments ("loc")) nil [33866 33916])
            ("compilation--loc->line" function (:arguments ("loc")) nil [33917 33969])
            ("compilation--loc->file-struct" function (:arguments ("loc")) nil [33970 34030])
            ("compilation--loc->marker" function (:arguments ("loc")) nil [34031 34086])
            ("compilation--loc->visited" function (:arguments ("loc")) nil [34149 34208])
            ("compilation--make-file-struct" function (:arguments ("file-spec" "formats" "loc-tree")) nil [34898 35024])
            ("compilation--file-struct->file-spec" function (:arguments ("fs")) nil [35025 35087])
            ("compilation--file-struct->formats" function (:arguments ("fs")) nil [35088 35149])
            ("compilation--file-struct->loc-tree" function (:arguments ("fs")) nil [35213 35274])
            ("cl-defstruct" code nil nil [35723 36020])
            ("compilation--previous-directory-cache" variable nil nil [36022 36333])
            ("make-variable-buffer-local" code nil nil [36334 36401])
            ("compilation--flush-directory-cache" function (:arguments ("start" "_end")) nil [36403 36898])
            ("compilation--previous-directory" function (:arguments ("pos")) nil [36900 38884])
            ("compilation-directory-properties" function (:arguments ("idx" "leave")) nil [39164 40247])
            ("compilation-assq" function (:arguments ("key" "alist")) nil [40802 41109])
            ("compilation-auto-jump" function (:arguments ("buffer" "pos")) nil [41112 41362])
            ("compilation-error-properties" function (:arguments ("file" "line" "end-line" "col" "end-col" "type" "fmt")) nil [41586 44413])
            ("compilation-move-to-column" function (:arguments ("col" "screen")) nil [44415 44763])
            ("compilation-internal-error-properties" function (:arguments ("file" "line" "end-line" "col" "end-col" "type" "fmts")) nil [44765 49529])
            ("compilation--put-prop" function (:arguments ("matchnum" "prop" "val")) nil [49531 49733])
            ("compilation--remove-properties" function (:arguments ("start" "end")) nil [49735 50937])
            ("compilation--parse-region" function (:arguments ("start" "end")) nil [50939 52648])
            ("compilation-parse-errors" function (:arguments ("start" "end" "rules")) nil [52650 57739])
            ("compilation--parsed" variable (:default-value -1) nil [57741 57772])
            ("make-variable-buffer-local" code nil nil [57773 57822])
            ("compilation--ensure-parse" function (:arguments ("limit")) nil [57824 58834])
            ("compilation--flush-parse" function (:arguments ("start" "_end")) nil [58836 59048])
            ("compilation-mode-font-lock-keywords" function nil nil [59050 59237])
            ("compilation-read-command" function (:arguments ("command")) nil [59239 59487])
            ("compile" function
               (:user-visible-flag t
                :arguments ("command" "comint"))
                nil [59506 61235])
            ("recompile" function
               (:user-visible-flag t
                :arguments ("edit-command"))
                nil [61282 62102])
            ("compilation-scroll-output" variable nil nil [62104 62712])
            ("compilation-buffer-name" function (:arguments ("name-of-mode" "mode-command" "name-function")) nil [62715 63419])
            ("compilation-always-kill" variable nil nil [63421 63620])
            ("compilation-start" function (:arguments ("command" "mode" "name-function" "highlight-regexp")) nil [63637 74147])
            ("compilation-set-window-height" function (:arguments ("window")) nil [74149 74744])
            ("compilation-menu-map" variable (:default-value (let ((map (make-sparse-keymap "Errors")) (opt-map (make-sparse-keymap "Skip"))) (define-key map [stop-subjob] (quote (menu-item "Stop Compilation" kill-compilation :help "Kill the process made by the M-x compile or M-x grep commands"))) (define-key map [compilation-mode-separator3] (quote ("----"))) (define-key map [compilation-next-error-follow-minor-mode] (quote (menu-item "Auto Error Display" next-error-follow-minor-mode :help "Display the error under cursor when moving the cursor" :button (:toggle . next-error-follow-minor-mode)))) (define-key map [compilation-skip] (cons "Skip Less Important Messages" opt-map)) (define-key opt-map [compilation-skip-none] (quote (menu-item "Don't Skip Any Messages" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 0)) :help "Do not skip any type of messages" :button (:radio eq compilation-skip-threshold 0)))) (define-key opt-map [compilation-skip-info] (quote (menu-item "Skip Info" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 1)) :help "Skip anything less than warning" :button (:radio eq compilation-skip-threshold 1)))) (define-key opt-map [compilation-skip-warning-and-info] (quote (menu-item "Skip Warnings and Info" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 2)) :help "Skip over Warnings and Info, stop for errors" :button (:radio eq compilation-skip-threshold 2)))) (define-key map [compilation-mode-separator2] (quote ("----"))) (define-key map [compilation-first-error] (quote (menu-item "First Error" first-error :help "Restart at the first error, visit corresponding source code"))) (define-key map [compilation-previous-error] (quote (menu-item "Previous Error" previous-error :help "Visit previous `next-error' message and corresponding source code"))) (define-key map [compilation-next-error] (quote (menu-item "Next Error" next-error :help "Visit next `next-error' message and corresponding source code"))) map)) nil [74746 76910])
            ("compilation-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compilation-display-error)) (define-key map "" (quote kill-compilation)) (define-key map "\356" (quote compilation-next-error)) (define-key map "\360" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map "g" (quote recompile)) (define-key map [menu-bar compilation] (cons "Errors" compilation-menu-map)) map)) nil [76912 77754])
            ("compilation-shell-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\215" (quote compile-goto-error)) (define-key map "\216" (quote compilation-next-error)) (define-key map "\220" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map [menu-bar compilation] (cons "Errors" compilation-menu-map)) map)) nil [77756 78274])
            ("compilation-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) map)) nil [78276 78542])
            ("fset" code nil nil [78543 78596])
            ("compilation-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compilation-display-error)) (define-key map "" (quote kill-compilation)) (define-key map "\356" (quote compilation-next-error)) (define-key map "\360" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map "	" (quote compilation-next-error)) (define-key map [backtab] (quote compilation-previous-error)) (define-key map "g" (quote recompile)) (define-key map "" (quote next-error-follow-minor-mode)) (let ((submap (make-sparse-keymap "Compile"))) (define-key map [menu-bar compilation] (cons "Compile" submap)) (set-keymap-parent submap compilation-menu-map)) (define-key map [menu-bar compilation compilation-separator2] (quote ("----"))) (define-key map [menu-bar compilation compilation-grep] (quote (menu-item "Search Files (grep)..." grep :help "Run grep, with user-specified args, and collect output in a buffer"))) (define-key map [menu-bar compilation compilation-recompile] (quote (menu-item "Recompile" recompile :help "Re-compile the program including the current buffer"))) (define-key map [menu-bar compilation compilation-compile] (quote (menu-item "Compile..." compile :help "Compile the program including the current buffer.  Default: run `make'"))) map)) nil [78598 80532])
            ("compilation-mode-tool-bar-map" variable (:default-value (when (keymapp tool-bar-map) (let ((map (copy-keymap tool-bar-map))) (define-key map [undo] nil) (define-key map [separator-2] nil) (define-key-after map [separator-compile] menu-bar-separator) (tool-bar-local-item "left-arrow" (quote previous-error-no-select) (quote previous-error-no-select) map :rtl "right-arrow" :help "Goto previous error") (tool-bar-local-item "right-arrow" (quote next-error-no-select) (quote next-error-no-select) map :rtl "left-arrow" :help "Goto next error") (tool-bar-local-item "cancel" (quote kill-compilation) (quote kill-compilation) map :enable (quote (let ((buffer (compilation-find-buffer))) (get-buffer-process buffer))) :help "Stop compilation") (tool-bar-local-item "refresh" (quote recompile) (quote recompile) map :help "Restart compilation") map))) nil [80534 81531])
            ("put" code nil nil [81533 81577])
            ("compilation-mode" function
               (:user-visible-flag t
                :arguments ("name-of-mode"))
                nil [81594 82951])
            ("put" code nil nil [82968 83016])
            ("define-compilation-mode" function (:arguments ("mode" "name" "doc" "body")) nil [83018 84603])
            ("compilation-revert-buffer" function (:arguments ("ignore-auto" "noconfirm")) nil [84605 84883])
            ("compilation-current-error" variable nil nil [84885 85058])
            ("compilation-messages-start" variable nil nil [85060 85202])
            ("compilation-setup" function (:arguments ("minor")) nil [85204 86925])
            ("compilation--unsetup" function nil nil [86927 87260])
            ("define-minor-mode" code nil nil [87277 87876])
            ("define-minor-mode" code nil nil [87893 88404])
            ("compilation-handle-exit" function (:arguments ("process-status" "exit-status" "msg")) nil [88406 90074])
            ("compilation-sentinel" function (:arguments ("proc" "msg")) nil [90126 90871])
            ("compilation-filter" function (:arguments ("proc" "string")) nil [90873 92498])
            ("compilation-buffer-internal-p" function nil nil [92575 92698])
            ("compilation-buffer-p" function (:arguments ("buffer")) nil [92782 92933])
            ("compilation-loop" function (:arguments ("<" "property-change" "1+" "error" "limit")) nil [92935 94323])
            ("compilation-next-single-property-change" function (:arguments ("position" "prop" "object" "limit")) nil [94325 95114])
            ("compilation-next-error" function
               (:user-visible-flag t
                :arguments ("n" "different-file" "pt"))
                nil [95116 97219])
            ("compilation-previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [97221 97519])
            ("compilation-next-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [97521 97760])
            ("compilation-previous-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [97762 98010])
            ("compilation-display-error" function (:user-visible-flag t) nil [98012 98194])
            ("kill-compilation" function (:user-visible-flag t) nil [98196 98504])
            ("defalias" code nil nil [98506 98562])
            ("compile-goto-error" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [98564 99144])
            ("compilation-find-buffer" function (:arguments ("avoid-current")) nil [99259 99674])
            ("compilation-next-error-function" function
               (:user-visible-flag t
                :arguments ("n" "reset"))
                nil [99691 103797])
            ("compilation-gcpro" variable nil nil [103799 103893])
            ("make-variable-buffer-local" code nil nil [103894 103941])
            ("compilation-fake-loc" function (:arguments ("marker" "file" "line" "col")) nil [103943 105446])
            ("compilation-context-lines" variable nil nil [105448 105916])
            ("compilation-set-window" function (:arguments ("w" "mk")) nil [105918 106429])
            ("next-error-highlight-timer" variable nil nil [106431 106466])
            ("compilation-goto-locus" function (:arguments ("msg" "mk" "end-mk")) nil [106468 110301])
            ("compilation-goto-locus-delete-o" function nil nil [110303 110624])
            ("compilation-find-file" function (:arguments ("marker" "filename" "directory" "formats")) nil [110627 115030])
            ("compilation-get-file-structure" function (:arguments ("file" "fmt")) nil [115032 117362])
            ("compilation--flush-file-structure" function (:arguments ("file")) nil [117364 117795])
            ("defvaralias" code nil nil [117841 117903])
            ("compilation-parsing-end" variable (:default-value (make-marker)) nil [117904 117950])
            ("compilation-error-list" variable nil nil [117951 117986])
            ("compilation-old-error-list" variable nil nil [117987 118026])
            ("compilation--compat-error-properties" function (:arguments ("err")) nil [118028 118899])
            ("compilation--compat-parse-errors" function (:arguments ("limit")) nil [118901 120847])
            ("compilation-forget-errors" function nil nil [120929 122741])
            ("compile" package nil nil [122743 122761]))          
      :file "compile.el.gz"
      :pointmax 122788
      :fsize 34406
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 41109 . 41110) (symbol 40738 . 40755) (open-paren 40737 . 40738) (close-paren 1144 . 1145) (symbol 1109 . 1126) (open-paren 1108 . 1109))))
  :file "!usr!share!emacs!24.5!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
