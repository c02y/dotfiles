;; Object magit-90141129/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "magit-90141129/"
  :tables
  (list
    (semanticdb-table "magit.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("magit-version" variable (:default-value (quote undefined)) nil [2206 2343])
            ("when" code nil nil [2476 2565])
            ("unless" code nil nil [2771 2842])
            ("git-rebase-mode" include nil nil [2844 2870])
            ("ansi-color" include nil nil [2872 2893])
            ("autorevert" include nil nil [2894 2915])
            ("cl-lib" include nil nil [2916 2933])
            ("diff-mode" include nil nil [2934 2954])
            ("easymenu" include nil nil [2955 2974])
            ("epa" include nil nil [2975 2989])
            ("format-spec" include nil nil [2990 3012])
            ("grep" include nil nil [3013 3028])
            ("help-mode" include nil nil [3029 3049])
            ("ring" include nil nil [3050 3065])
            ("server" include nil nil [3066 3083])
            ("tramp" include nil nil [3084 3100])
            ("view" include nil nil [3101 3116])
            ("view" include nil nil [3284 3299])
            ("package" include nil nil [3257 3281])
            ("iswitchb" include nil nil [3235 3254])
            ("ido" include nil nil [3218 3232])
            ("eshell" include nil nil [3198 3215])
            ("ediff" include nil nil [3179 3195])
            ("dired-x" include nil nil [3158 3176])
            ("dired" include nil nil [3139 3155])
            ("if" code nil nil [3321 3416])
            ("declare-function" code nil nil [3418 3456])
            ("declare-function" code nil nil [3457 3496])
            ("declare-function" code nil nil [3497 3541])
            ("declare-function" code nil nil [3542 3591])
            ("declare-function" code nil nil [3592 3635])
            ("declare-function" code nil nil [3636 3685])
            ("declare-function" code nil nil [3686 3731])
            ("declare-function" code nil nil [3732 3780])
            ("declare-function" code nil nil [3781 3829])
            ("declare-function" code nil nil [3830 3864])
            ("git-commit-previous-winconf" variable nil nil [3866 3902])
            ("magit-commit-buffer-name" variable nil nil [3903 3936])
            ("magit-custom-options" variable nil nil [3937 3966])
            ("magit-log-buffer-name" variable nil nil [3967 3997])
            ("magit-marked-commit" variable nil nil [3998 4026])
            ("magit-process-buffer-name" variable nil nil [4027 4061])
            ("magit-reflog-buffer-name" variable nil nil [4062 4095])
            ("magit-refresh-args" variable nil nil [4096 4123])
            ("magit-stash-buffer-name" variable nil nil [4124 4156])
            ("magit-status-buffer-name" variable nil nil [4157 4190])
            ("magit-this-process" variable nil nil [4191 4218])
            ("package-alist" variable nil nil [4219 4241])
            ("unless" code nil nil [5133 6194])
            ("unless" code nil nil [4674 5104])
            ("unless" code nil nil [4428 4619])
            ("unless" code nil nil [4309 4373])
            ("magit" customgroup (:user-visible-flag t) nil [6235 6303])
            ("magit-process" customgroup (:user-visible-flag t) nil [6305 6401])
            ("magit-modes" customgroup (:user-visible-flag t) nil [6403 6474])
            ("magit-status" customgroup (:user-visible-flag t) nil [6476 6570])
            ("magit-diff" customgroup (:user-visible-flag t) nil [6572 6657])
            ("magit-commit" customgroup (:user-visible-flag t) nil [6659 6748])
            ("magit-log" customgroup (:user-visible-flag t) nil [6750 6836])
            ("magit-extensions" customgroup (:user-visible-flag t) nil [6838 6910])
            ("magit-faces" customgroup (:user-visible-flag t) nil [6912 6995])
            ("when" code nil nil [6997 7105])
            ("when" code nil nil [7107 7279])
            ("when" code nil nil [7281 7453])
            ("custom-add-to-group" code nil nil [7455 7520])
            ("magit-git-executable" variable (:default-value (or (and (eq system-type (quote windows-nt)) (let ((exe (executable-find "git.exe"))) (when exe (let ((alt (directory-file-name (file-name-directory exe)))) (if (and (equal (file-name-nondirectory alt) "cmd") (setq alt (expand-file-name (convert-standard-filename "bin/git.exe") (file-name-directory alt))) (file-executable-p alt)) alt exe))))) "git")) nil [7559 8842])
            ("magit-git-standard-options" variable (:default-value (quote ("--no-pager" "-c" "core.preloadindex=true"))) nil [8844 9131])
            ("magit-gitk-executable" variable (:default-value (or (and (eq system-type (quote windows-nt)) (let ((exe (expand-file-name "gitk" (file-name-nondirectory magit-git-executable)))) (and (file-executable-p exe) exe))) (executable-find "gitk") "gitk")) nil [9133 9515])
            ("magit-locate-emacsclient" function nil nil [9517 11007])
            ("magit-take" function (:arguments ("n" "l")) nil [11009 11139])
            ("magit-locate-emacsclient-1" function (:arguments ("path" "depth")) nil [11141 11963])
            ("magit-emacsclient-version" function (:arguments ("exec")) nil [11965 12068])
            ("magit-emacsclient-executable" variable (:default-value (magit-locate-emacsclient)) nil [12070 12461])
            ("magit-process-connection-type" variable (:default-value (not (eq system-type (quote cygwin)))) nil [12463 12832])
            ("magit-process-popup-time" variable (:default-value -1) nil [12834 13122])
            ("magit-process-log-max" variable (:default-value 32) nil [13124 13490])
            ("magit-process-quote-curly-braces" variable (:default-value (and (eq system-type (quote windows-nt)) (let ((case-fold-search t)) (string-match-p "cygwin" magit-git-executable)) t)) nil [13492 14226])
            ("magit-process-yes-or-no-prompt-regexp" variable (:default-value " [[(]\\([Yy]\\(?:es\\)?\\)[/|]\\([Nn]o?\\)[])] ?[?:] ?$") nil [14228 14485])
            ("magit-process-password-prompt-regexps" variable (:default-value (quote ("^\\(Enter \\)?[Pp]assphrase\\( for \\(RSA \\)?key '.*'\\)?: ?$" "^\\(Enter \\)?[Pp]assword\\( for '.*'\\)?: ?$" "^.*'s password: ?$" "^Yubikey for .*: ?$"))) nil [14487 14873])
            ("magit-process-username-prompt-regexps" variable (:default-value (quote ("^Username for '.*': ?$"))) nil [14875 15118])
            ("magit-server-window-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "Use selected window" :match (lambda (widget value) (not (functionp value))) nil) (function-item :tag "Display in new frame" switch-to-buffer-other-frame) (function-item :tag "Use pop-to-buffer" pop-to-buffer) (function :tag "Other function"))))
                nil [15120 15480])
            ("magit-server-window-for-commit" variable (:default-value (quote pop-to-buffer)) nil [15482 15874])
            ("magit-server-window-for-rebase" variable (:default-value server-window) nil [15876 16301])
            ("magit-stage-all-confirm" variable (:default-value t) nil [16318 16709])
            ("magit-unstage-all-confirm" variable (:default-value t) nil [16711 17107])
            ("magit-revert-item-confirm" variable (:default-value t) nil [17109 17311])
            ("magit-revert-backup" variable nil nil [17313 17796])
            ("magit-save-some-buffers" variable (:default-value t) nil [17798 18173])
            ("magit-save-some-buffers-predicate" variable (:default-value (quote magit-save-buffers-predicate-tree-only)) nil [18175 18607])
            ("magit-rewrite-inclusive" variable (:default-value t) nil [18609 19312])
            ("magit-set-variable-and-refresh" function (:arguments ("symbol" "value")) nil [19334 19756])
            ("magit-highlight-whitespace" variable (:default-value t) nil [19758 20216])
            ("magit-highlight-trailing-whitespace" variable (:default-value t) nil [20218 20462])
            ("magit-highlight-indentation" variable nil nil [20464 21383])
            ("magit-item-highlight-face" variable (:default-value (quote magit-item-highlight)) nil [21393 22682])
            ("magit-use-overlays" variable (:default-value (not (eq magit-item-highlight-face (quote bold)))) nil [22684 23517])
            ("define-obsolete-variable-alias" code nil nil [23519 23606])
            ("magit-completing-read-function" variable (:default-value (quote magit-builtin-completing-read)) nil [23626 24002])
            ("magit-remote-ref-format" variable (:default-value (quote remote-slash-branch)) nil [24004 24570])
            ("magit-repo-dirs" variable nil nil [24572 24798])
            ("magit-repo-dirs-depth" variable (:default-value 3) nil [24800 25038])
            ("magit-mode-hook" variable nil nil [25067 25231])
            ("magit-show-xref-buttons" variable (:default-value (quote (magit-diff-mode magit-commit-mode))) nil [25233 25603])
            ("magit-show-child-count" variable nil nil [25605 25785])
            ("magit-status-line-align-to" variable (:default-value 9) nil [25787 25824])
            ("magit-restore-window-configuration" variable nil nil [25826 26741])
            ("magit-refs-namespaces" variable (:default-value (quote (("^\\(HEAD\\)$" magit-log-head-label-head nil) ("^refs/tags/\\(.+\\)" magit-log-head-label-tags nil) ("^refs/heads/\\(.+\\)" magit-log-head-label-local nil) ("^refs/remotes/\\(.+\\)" magit-log-head-label-remote nil) ("^refs/bisect/\\(bad\\)" magit-log-head-label-bisect-bad nil) ("^refs/bisect/\\(skip.*\\)" magit-log-head-label-bisect-skip nil) ("^refs/bisect/\\(good.*\\)" magit-log-head-label-bisect-good nil) ("^refs/wip/\\(.+\\)" magit-log-head-label-wip nil) ("^refs/patches/\\(.+\\)" magit-log-head-label-patches nil) ("^\\(bad\\):" magit-log-head-label-bisect-bad nil) ("^\\(skip\\):" magit-log-head-label-bisect-skip nil) ("^\\(good\\):" magit-log-head-label-bisect-good nil) ("\\(.+\\)" magit-log-head-label-default nil)))) nil [26743 28589])
            ("magit-status-mode-hook" variable nil nil [28606 28737])
            ("magit-status-sections-hook" variable (:default-value (quote (magit-insert-status-local-line magit-insert-status-remote-line magit-insert-status-head-line magit-insert-status-tags-line magit-insert-status-merge-line magit-insert-status-rebase-lines magit-insert-empty-line magit-insert-rebase-sequence magit-insert-bisect-output magit-insert-bisect-rest magit-insert-bisect-log magit-insert-stashes magit-insert-untracked-files magit-insert-pending-commits magit-insert-unstaged-changes magit-insert-staged-changes magit-insert-unpulled-commits magit-insert-unpushed-commits))) nil [28739 29975])
            ("magit-status-buffer-switch-function" variable (:default-value (quote pop-to-buffer)) nil [29977 30329])
            ("magit-status-show-sequence-help" variable (:default-value t) nil [30331 30642])
            ("magit-status-tags-line-subject" variable (:default-value (quote head)) nil [30644 31620])
            ("magit-set-default-diff-options" function
               (:user-visible-flag t
                :arguments ("symbol" "value"))
                nil [31635 32262])
            ("magit-diff-options" variable nil nil [32264 33891])
            ("put" code nil nil [33893 33937])
            ("magit-show-diffstat" variable (:default-value t) nil [33939 34128])
            ("magit-diff-refine-hunk" variable nil nil [34130 34614])
            ("magit-commit-ask-to-stage" variable (:default-value t) nil [34631 34826])
            ("magit-commit-extend-override-date" variable nil nil [34828 35023])
            ("magit-commit-reword-override-date" variable nil nil [35025 35220])
            ("magit-commit-squash-commit" variable nil nil [35222 36099])
            ("magit-expand-staged-on-commit" variable nil nil [36101 36914])
            ("magit-log-auto-more" variable nil nil [36928 37162])
            ("magit-log-cutoff-length" variable (:default-value 100) nil [37164 37314])
            ("magit-log-infinite-length" variable (:default-value 99999) nil [37316 37469])
            ("magit-log-format-graph-function" variable nil nil [37471 37977])
            ("magit-log-format-unicode-graph-alist" variable (:default-value (quote ((47 . 9585) (124 . 9474) (92 . 9586) (42 . 9670) (111 . 9671)))) nil [37979 38362])
            ("magit-log-show-gpg-status" variable nil nil [38364 38547])
            ("magit-log-show-margin" variable (:default-value t) nil [38549 38912])
            ("put" code nil nil [38914 38961])
            ("magit-log-margin-spec" variable (:default-value (quote (25 nil magit-duration-spec))) nil [38963 40382])
            ("magit-duration-spec" variable (:default-value (\` ((89 "year" "years" (\, (round (* 60 60 24 365.2425)))) (77 "month" "months" (\, (round (* 60 60 24 30.436875)))) (119 "week" "weeks" (\, (* 60 60 24 7))) (100 "day" "days" (\, (* 60 60 24))) (104 "hour" "hours" (\, (* 60 60))) (109 "minute" "minutes" 60) (115 "second" "seconds" 1)))) nil [40384 41436])
            ("magit-ellipsis" variable (:default-value 8230) nil [41438 41757])
            ("magit-auto-revert-mode-lighter" variable (:default-value " MRev") nil [41774 41907])
            ("define-minor-mode" code nil nil [41909 42438])
            ("magit-merge-warn-dirty-worktree" variable (:default-value t) nil [42440 42647])
            ("magit-push-hook" variable (:default-value (quote (magit-push-dwim))) nil [42649 42884])
            ("magit-set-upstream-on-push" variable nil nil [42886 43511])
            ("magit-wazzup-sections-hook" variable (:default-value (quote (magit-insert-wazzup-head-line magit-insert-empty-line magit-insert-wazzup-branches))) nil [43513 43777])
            ("magit-cherry-sections-hook" variable (:default-value (quote (magit-insert-cherry-head-line magit-insert-cherry-upstream-line magit-insert-cherry-help-lines magit-insert-empty-line magit-insert-cherry-commits))) nil [43779 44115])
            ("magit-section-title" variable
               (:default-value (quote ((t :inherit header-line)))
                :type "face")
                nil [44136 44246])
            ("magit-branch" variable
               (:default-value (quote ((((class color) (background light)) :background "Grey85" :foreground "LightSkyBlue4") (((class color) (background dark)) :background "Grey13" :foreground "LightSkyBlue1")))
                :type "face")
                nil [44248 44515])
            ("magit-tag" variable
               (:default-value (quote ((((class color) (background light)) :background "LemonChiffon1" :foreground "goldenrod4") (((class color) (background dark)) :background "LemonChiffon1" :foreground "goldenrod4")))
                :type "face")
                nil [44517 44785])
            ("magit-diff-file-header" variable
               (:default-value (quote ((t :inherit diff-file-header)))
                :type "face")
                nil [44787 44913])
            ("magit-diff-hunk-header" variable
               (:default-value (quote ((t :inherit diff-hunk-header)))
                :type "face")
                nil [44915 45041])
            ("magit-diff-add" variable
               (:default-value (quote ((t :inherit diff-added)))
                :type "face")
                nil [45043 45169])
            ("magit-diff-del" variable
               (:default-value (quote ((t :inherit diff-removed)))
                :type "face")
                nil [45171 45301])
            ("magit-diff-none" variable
               (:default-value (quote ((t :inherit diff-context)))
                :type "face")
                nil [45303 45430])
            ("magit-diff-merge-current" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [45432 45585])
            ("magit-diff-merge-separator" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [45587 45737])
            ("magit-diff-merge-diff3-separator" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [45739 45895])
            ("magit-diff-merge-proposed" variable
               (:default-value (quote ((t :inherit font-lock-preprocessor-face)))
                :type "face")
                nil [45897 46052])
            ("magit-log-graph" variable
               (:default-value (quote ((((class color) (background light)) :foreground "grey11") (((class color) (background dark)) :foreground "grey80")))
                :type "face")
                nil [46054 46285])
            ("magit-log-sha1" variable
               (:default-value (quote ((((class color) (background light)) :foreground "firebrick") (((class color) (background dark)) :foreground "tomato")))
                :type "face")
                nil [46287 46519])
            ("magit-log-author" variable
               (:default-value (quote ((((class color) (background light)) :foreground "firebrick") (((class color) (background dark)) :foreground "tomato")))
                :type "face")
                nil [46521 46757])
            ("magit-log-date" variable
               (:default-value (quote ((t)))
                :type "face")
                nil [46759 46863])
            ("magit-log-message" variable
               (:default-value (quote ((t)))
                :type "face")
                nil [46865 46975])
            ("magit-cherry-unmatched" variable
               (:default-value (quote ((t :foreground "cyan")))
                :type "face")
                nil [46977 47076])
            ("magit-cherry-equivalent" variable
               (:default-value (quote ((t :foreground "magenta")))
                :type "face")
                nil [47078 47182])
            ("magit-item-highlight" variable
               (:default-value (quote ((t :inherit secondary-selection)))
                :type "face")
                nil [47184 47318])
            ("magit-item-mark" variable
               (:default-value (quote ((t :inherit highlight)))
                :type "face")
                nil [47320 47434])
            ("magit-log-head-label-bisect-good" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "light green" :foreground "dark olive green") (((class color) (background dark)) :box t :background "light green" :foreground "dark olive green")))
                :type "face")
                nil [47436 47771])
            ("magit-log-head-label-bisect-skip" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "light goldenrod" :foreground "dark goldenrod") (((class color) (background dark)) :box t :background "light goldenrod" :foreground "dark goldenrod")))
                :type "face")
                nil [47773 48115])
            ("magit-log-head-label-bisect-bad" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [48117 48436])
            ("magit-log-head-label-remote" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "OliveDrab4") (((class color) (background dark)) :box t :background "Grey11" :foreground "DarkSeaGreen2")))
                :type "face")
                nil [48438 48778])
            ("magit-log-head-label-tags" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "LemonChiffon1" :foreground "goldenrod4") (((class color) (background dark)) :box t :background "LemonChiffon1" :foreground "goldenrod4")))
                :type "face")
                nil [48780 49114])
            ("magit-log-head-label-patches" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [49116 49436])
            ("magit-whitespace-warning-face" variable
               (:default-value (quote ((t :inherit trailing-whitespace)))
                :type "face")
                nil [49438 49597])
            ("magit-log-head-label-local" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "LightSkyBlue4") (((class color) (background dark)) :box t :background "Grey13" :foreground "LightSkyBlue1")))
                :type "face")
                nil [49599 49940])
            ("magit-log-head-label-head" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey70" :foreground "Black") (((class color) (background dark)) :box t :background "Grey20" :foreground "White")))
                :type "face")
                nil [49942 50268])
            ("magit-log-head-label-default" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [50270 50541])
            ("magit-log-head-label-wip" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey95" :foreground "LightSkyBlue3") (((class color) (background dark)) :box t :background "Grey07" :foreground "LightSkyBlue4")))
                :type "face")
                nil [50543 50872])
            ("magit-signature-good" variable
               (:default-value (quote ((t :foreground "green")))
                :type "face")
                nil [50874 50985])
            ("magit-signature-bad" variable
               (:default-value (quote ((t :foreground "red")))
                :type "face")
                nil [50987 51094])
            ("magit-signature-untrusted" variable
               (:default-value (quote ((t :foreground "cyan")))
                :type "face")
                nil [51096 51221])
            ("magit-signature-none" variable
               (:default-value (quote ((t :inherit magit-log-message)))
                :type "face")
                nil [51223 51342])
            ("magit-log-reflog-label-commit" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "LemonChiffon1" :foreground "goldenrod4") (((class color) (background dark)) :box t :background "LemonChiffon1" :foreground "goldenrod4")))
                :type "face")
                nil [51345 51697])
            ("magit-log-reflog-label-amend" variable
               (:default-value (quote ((t :inherit magit-log-reflog-label-commit)))
                :type "face")
                nil [51699 51866])
            ("magit-log-reflog-label-merge" variable
               (:default-value (quote ((t :inherit magit-log-reflog-label-commit)))
                :type "face")
                nil [51868 52035])
            ("magit-log-reflog-label-checkout" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "LightSkyBlue4") (((class color) (background dark)) :box t :background "Grey13" :foreground "LightSkyBlue1")))
                :type "face")
                nil [52037 52383])
            ("magit-log-reflog-label-reset" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "IndianRed1" :foreground "IndianRed4") (((class color) (background dark)) :box t :background "IndianRed1" :foreground "IndianRed4")))
                :type "face")
                nil [52385 52730])
            ("magit-log-reflog-label-rebase" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey85" :foreground "OliveDrab4") (((class color) (background dark)) :box t :background "Grey11" :foreground "DarkSeaGreen2")))
                :type "face")
                nil [52732 53073])
            ("magit-log-reflog-label-cherry-pick" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "light green" :foreground "dark olive green") (((class color) (background dark)) :box t :background "light green" :foreground "dark olive green")))
                :type "face")
                nil [53075 53438])
            ("magit-log-reflog-label-remote" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [53440 53718])
            ("magit-log-reflog-label-other" variable
               (:default-value (quote ((((class color) (background light)) :box t :background "Grey50") (((class color) (background dark)) :box t :background "Grey50")))
                :type "face")
                nil [53720 53997])
            ("magit-process-ok" variable
               (:default-value (quote ((t :inherit magit-section-title :foreground "green")))
                :type "face")
                nil [53999 54143])
            ("magit-process-ng" variable
               (:default-value (quote ((t :inherit magit-section-title :foreground "red")))
                :type "face")
                nil [54145 54291])
            ("magit-rigid-key-bindings" variable nil nil [54349 54602])
            ("when" code nil nil [54604 54710])
            ("magit-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map t) (define-key map (kbd "n") (quote magit-goto-next-section)) (define-key map (kbd "p") (quote magit-goto-previous-section)) (define-key map (kbd "^") (quote magit-goto-parent-section)) (define-key map (kbd "M-n") (quote magit-goto-next-sibling-section)) (define-key map (kbd "M-p") (quote magit-goto-previous-sibling-section)) (define-key map (kbd "TAB") (quote magit-toggle-section)) (define-key map (kbd "<backtab>") (quote magit-expand-collapse-section)) (define-key map (kbd "1") (quote magit-show-level-1)) (define-key map (kbd "2") (quote magit-show-level-2)) (define-key map (kbd "3") (quote magit-show-level-3)) (define-key map (kbd "4") (quote magit-show-level-4)) (define-key map (kbd "M-1") (quote magit-show-level-1-all)) (define-key map (kbd "M-2") (quote magit-show-level-2-all)) (define-key map (kbd "M-3") (quote magit-show-level-3-all)) (define-key map (kbd "M-4") (quote magit-show-level-4-all)) (define-key map (kbd "M-h") (quote magit-show-only-files)) (define-key map (kbd "M-H") (quote magit-show-only-files-all)) (define-key map (kbd "M-s") (quote magit-show-level-4)) (define-key map (kbd "M-S") (quote magit-show-level-4-all)) (define-key map (kbd "g") (quote magit-refresh)) (define-key map (kbd "G") (quote magit-refresh-all)) (define-key map (kbd "?") (quote magit-key-mode-popup-dispatch)) (define-key map (kbd ":") (quote magit-git-command)) (define-key map (kbd "C-x 4 a") (quote magit-add-change-log-entry-other-window)) (define-key map (kbd "L") (quote magit-add-change-log-entry)) (define-key map (kbd "RET") (quote magit-visit-item)) (define-key map (kbd "C-<return>") (quote magit-dired-jump)) (define-key map (kbd "SPC") (quote magit-show-item-or-scroll-up)) (define-key map (kbd "DEL") (quote magit-show-item-or-scroll-down)) (define-key map (kbd "C-w") (quote magit-copy-item-as-kill)) (cond (magit-rigid-key-bindings (define-key map (kbd "c") (quote magit-commit)) (define-key map (kbd "m") (quote magit-merge)) (define-key map (kbd "b") (quote magit-checkout)) (define-key map (kbd "M") (quote magit-branch-manager)) (define-key map (kbd "r") (quote undefined)) (define-key map (kbd "f") (quote magit-fetch-current)) (define-key map (kbd "F") (quote magit-pull)) (define-key map (kbd "J") (quote magit-apply-mailbox)) (define-key map (kbd "!") (quote magit-git-command-topdir)) (define-key map (kbd "P") (quote magit-push)) (define-key map (kbd "t") (quote magit-tag)) (define-key map (kbd "l") (quote magit-log)) (define-key map (kbd "o") (quote magit-submodule-update)) (define-key map (kbd "B") (quote undefined)) (define-key map (kbd "z") (quote magit-stash))) (t (define-key map (kbd "c") (quote magit-key-mode-popup-committing)) (define-key map (kbd "m") (quote magit-key-mode-popup-merging)) (define-key map (kbd "b") (quote magit-key-mode-popup-branching)) (define-key map (kbd "M") (quote magit-key-mode-popup-remoting)) (define-key map (kbd "r") (quote magit-key-mode-popup-rewriting)) (define-key map (kbd "f") (quote magit-key-mode-popup-fetching)) (define-key map (kbd "F") (quote magit-key-mode-popup-pulling)) (define-key map (kbd "J") (quote magit-key-mode-popup-apply-mailbox)) (define-key map (kbd "!") (quote magit-key-mode-popup-running)) (define-key map (kbd "P") (quote magit-key-mode-popup-pushing)) (define-key map (kbd "t") (quote magit-key-mode-popup-tagging)) (define-key map (kbd "l") (quote magit-key-mode-popup-logging)) (define-key map (kbd "o") (quote magit-key-mode-popup-submodule)) (define-key map (kbd "B") (quote magit-key-mode-popup-bisecting)) (define-key map (kbd "z") (quote magit-key-mode-popup-stashing)))) (define-key map (kbd "$") (quote magit-process)) (define-key map (kbd "E") (quote magit-interactive-rebase)) (define-key map (kbd "R") (quote magit-rebase-step)) (define-key map (kbd "e") (quote magit-ediff)) (define-key map (kbd "w") (quote magit-wazzup)) (define-key map (kbd "y") (quote magit-cherry)) (define-key map (kbd "q") (quote magit-mode-quit-window)) (define-key map (kbd "x") (quote magit-reset-head)) (define-key map (kbd "v") (quote magit-revert-item)) (define-key map (kbd "a") (quote magit-apply-item)) (define-key map (kbd "A") (quote magit-cherry-pick-item)) (define-key map (kbd "d") (quote magit-diff-working-tree)) (define-key map (kbd "D") (quote magit-diff)) (define-key map (kbd "-") (quote magit-diff-smaller-hunks)) (define-key map (kbd "+") (quote magit-diff-larger-hunks)) (define-key map (kbd "0") (quote magit-diff-default-hunks)) (define-key map (kbd "h") (quote magit-key-mode-popup-diff-options)) (define-key map (kbd "H") (quote magit-diff-toggle-refine-hunk)) (define-key map (kbd "S") (quote magit-stage-all)) (define-key map (kbd "U") (quote magit-unstage-all)) (define-key map (kbd "X") (quote magit-reset-working-tree)) (define-key map (kbd "C-c C-c") (quote magit-key-mode-popup-dispatch)) (define-key map (kbd "C-c C-e") (quote magit-key-mode-popup-dispatch)) map)) nil [54712 59737])
            ("magit-commit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd "C-c C-b") (quote magit-go-backward)) (define-key map (kbd "C-c C-f") (quote magit-go-forward)) (define-key map (kbd "SPC") (quote scroll-up)) (define-key map (kbd "DEL") (quote scroll-down)) (define-key map (kbd "j") (quote magit-jump-to-diffstats)) map)) nil [59739 60150])
            ("magit-status-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd "s") (quote magit-stage-item)) (define-key map (kbd "u") (quote magit-unstage-item)) (define-key map (kbd "i") (quote magit-ignore-item)) (define-key map (kbd "I") (quote magit-ignore-item-locally)) (define-key map (kbd "j") (quote magit-section-jump-map)) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "k") (quote magit-discard-item)) (define-key map (kbd "C") (quote magit-commit-add-log)) map)) nil [60152 60774])
            ("eval-after-load" code nil nil [60776 60877])
            ("magit-log-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "e") (quote magit-log-show-more-entries)) (define-key map (kbd "h") (quote magit-log-toggle-margin)) map)) nil [60879 61244])
            ("magit-cherry-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) map)) nil [61246 61400])
            ("magit-reflog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-log-mode-map) map)) nil [61402 61560])
            ("magit-diff-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd "C-c C-b") (quote magit-go-backward)) (define-key map (kbd "C-c C-f") (quote magit-go-forward)) (define-key map (kbd "SPC") (quote scroll-up)) (define-key map (kbd "DEL") (quote scroll-down)) (define-key map (kbd "j") (quote magit-jump-to-diffstats)) map)) nil [61562 61969])
            ("magit-wazzup-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd ".") (quote magit-mark-item)) (define-key map (kbd "=") (quote magit-diff-with-mark)) (define-key map (kbd "i") (quote magit-ignore-item)) map)) nil [61971 62276])
            ("magit-branch-manager-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) (define-key map (kbd "c") (quote magit-create-branch)) (define-key map (kbd "a") (quote magit-add-remote)) (define-key map (kbd "r") (quote magit-rename-item)) (define-key map (kbd "k") (quote magit-discard-item)) (define-key map (kbd "T") (quote magit-change-what-branch-tracks)) map)) nil [62278 62714])
            ("magit-process-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map magit-mode-map) map)) nil [62716 62872])
            ("magit-section-jump-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "z") (quote magit-jump-to-stashes)) (define-key map (kbd "n") (quote magit-jump-to-untracked)) (define-key map (kbd "u") (quote magit-jump-to-unstaged)) (define-key map (kbd "s") (quote magit-jump-to-staged)) (define-key map (kbd "f") (quote magit-jump-to-unpulled)) (define-key map (kbd "p") (quote magit-jump-to-unpushed)) (define-key map (kbd "r") (quote magit-jump-to-pending)) map)) nil [62874 63391])
            ("fset" code nil nil [63392 63445])
            ("easy-menu-define" code nil nil [63447 65413])
            ("magit-iswitchb-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [65458 65962])
            ("magit-ido-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [65964 66470])
            ("magit-builtin-completing-read" function (:arguments ("prompt" "choices" "predicate" "require-match" "initial-input" "hist" "def")) nil [66472 67098])
            ("magit-completing-read" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def")) nil [67100 67497])
            ("magit-gpg-secret-key-hist" variable nil nil [67499 67537])
            ("magit-read-gpg-secret-key" function (:arguments ("prompt")) nil [67539 68290])
            ("magit-bind-match-strings" function (:arguments ("varlist" "body")) nil [68316 68553])
            ("magit-file-line" function (:arguments ("file")) nil [68555 68829])
            ("magit-file-lines" function (:arguments ("file" "keep-empty-lines")) nil [68831 69182])
            ("defvar-local" code nil nil [69184 69275])
            ("magit-buffer-file-name" function (:arguments ("relative")) nil [69277 69837])
            ("magit-format-duration" function (:arguments ("duration" "spec" "width")) nil [69839 70307])
            ("magit-flatten-onelevel" function (:arguments ("list")) nil [70309 70487])
            ("magit-insert" function (:arguments ("string" "face" "args")) nil [70489 70859])
            ("magit-put-face-property" function (:arguments ("start" "end" "face")) nil [70861 71145])
            ("magit-set-buffer-margin" function (:arguments ("width" "enable")) nil [71168 71917])
            ("magit-make-margin-overlay" function (:arguments ("strings")) nil [71919 72261])
            ("defvar-local" code nil nil [72263 72313])
            ("magit-log-margin-set-timeunit-width" function nil nil [72315 72758])
            ("magit-with-emacsclient" function (:arguments ("server-window" "body")) nil [72786 75185])
            ("magit-use-emacsclient-p" function nil nil [75187 75310])
            ("magit-assert-emacsclient" function (:arguments ("action")) nil [75312 75594])
            ("magit-get" function (:arguments ("keys")) nil [75613 75764])
            ("magit-get-all" function (:arguments ("keys")) nil [75766 75937])
            ("magit-get-boolean" function (:arguments ("keys")) nil [75939 76113])
            ("magit-set" function (:arguments ("val" "keys")) nil [76115 76356])
            ("magit-git-repo-p" function (:arguments ("dir")) nil [76378 76456])
            ("magit-git-dir" function (:arguments ("path")) nil [76458 76951])
            ("magit-no-commit-p" function nil nil [76953 77103])
            ("magit-get-top-dir" function (:arguments ("directory")) nil [77105 78234])
            ("magit-expand-git-file-name" function (:arguments ("filename")) nil [78236 78594])
            ("magit-file-relative-name" function (:arguments ("file")) nil [78596 78902])
            ("magit-bare-repo-p" function nil nil [78904 79034])
            ("magit-get-ref" function (:arguments ("ref")) nil [79036 79108])
            ("magit-get-current-branch" function nil nil [79110 79268])
            ("magit-get-remote/branch" function (:arguments ("branch" "verify")) nil [79270 80161])
            ("magit-get-tracked-branch" function (:arguments ("branch" "qualified" "pretty")) nil [80163 82497])
            ("magit-get-previous-branch" function nil nil [82499 82731])
            ("magit-get-current-tag" function (:arguments ("with-distance-p")) nil [82733 83572])
            ("magit-get-next-tag" function (:arguments ("with-distance-p")) nil [83574 84303])
            ("magit-get-remote" function (:arguments ("branch")) nil [84305 84688])
            ("magit-get-current-remote" function nil nil [84690 84973])
            ("magit-ref-exists-p" function (:arguments ("ref")) nil [84975 85055])
            ("magit-rev-parse" function (:arguments ("args")) nil [85057 85239])
            ("magit-ref-ambiguous-p" function (:arguments ("ref")) nil [85241 85533])
            ("magit-rev-diff-count" function (:arguments ("a" "b")) nil [85535 85906])
            ("magit-name-rev" function (:arguments ("rev" "no-trim")) nil [85908 87371])
            ("magit-file-uptodate-p" function (:arguments ("file")) nil [87373 87458])
            ("magit-anything-staged-p" function nil nil [87460 87544])
            ("magit-anything-unstaged-p" function nil nil [87546 87621])
            ("magit-anything-modified-p" function nil nil [87623 87726])
            ("magit-commit-parents" function (:arguments ("commit")) nil [87728 87842])
            ("magit-assert-one-parent" function (:arguments ("commit" "command")) nil [87844 87998])
            ("magit-decode-git-path" function (:arguments ("path")) nil [88000 88115])
            ("magit-abbrev-length" function nil nil [88117 88203])
            ("magit-abbrev-arg" function nil nil [88205 88279])
            ("magit-uninteresting-refs" variable (:default-value (quote ("^refs/stash$" "^refs/remotes/[^/]+/HEAD$" "^refs/remotes/[^/]+/top-bases$" "^refs/top-bases$"))) nil [88301 88446])
            ("cl-defun" code nil nil [88448 89431])
            ("magit-format-ref" function (:arguments ("ref")) nil [89433 90051])
            ("magit-read-file-hist" variable nil nil [90053 90086])
            ("magit-read-file-from-rev" function (:arguments ("revision" "default")) nil [90088 90487])
            ("magit-read-file-trace" function (:arguments ("ignored")) nil [90489 90827])
            ("magit-read-rev-history" variable nil nil [90829 90932])
            ("magit-read-tag" function (:arguments ("prompt" "require-match")) nil [90934 91117])
            ("magit-read-rev" function (:arguments ("prompt" "default" "uninteresting" "noselection")) nil [91119 91819])
            ("magit-read-rev-with-default" function (:arguments ("prompt")) nil [91821 92140])
            ("magit-read-rev-range" function (:arguments ("op" "def-beg" "def-end")) nil [92142 92524])
            ("magit-read-stash" function (:arguments ("prompt")) nil [92526 92758])
            ("magit-read-remote" function (:arguments ("prompt" "default" "require-match")) nil [92760 92996])
            ("magit-read-remote-branch" function (:arguments ("prompt" "remote" "default")) nil [92998 93573])
            ("magit-format-ref-label" function (:arguments ("ref")) nil [93575 93873])
            ("magit-format-ref-labels" function (:arguments ("string")) nil [93875 94151])
            ("magit-insert-ref-labels" function (:arguments ("string")) nil [94153 94635])
            ("magit-format-rev-summary" function (:arguments ("rev")) nil [94637 94905])
            ("cl-defstruct" code nil nil [94958 95137])
            ("defvar-local" code nil nil [95139 95363])
            ("put" code nil nil [95364 95408])
            ("magit-with-section--parent" variable nil nil [95434 95515])
            ("magit-with-section--oldroot" variable nil nil [95517 95599])
            ("magit-with-section" function (:arguments ("arglist" "body")) nil [95601 98536])
            ("magit-cmd-insert-section" function (:arguments ("arglist" "washer" "program" "args")) nil [98538 99572])
            ("magit-git-insert-section" function (:arguments ("arglist" "washer" "args")) nil [99574 99835])
            ("magit-insert-line-section" function (:arguments ("arglist" "line")) nil [99837 100454])
            ("magit-find-section" function (:arguments ("path" "top")) nil [100481 100886])
            ("magit-section-path" function (:arguments ("section")) nil [100888 101117])
            ("magit-find-section-after" function (:arguments ("pos")) nil [101119 101267])
            ("magit-find-section-after*" function (:arguments ("pos" "secs")) nil [101269 101699])
            ("magit-find-section-before" function (:arguments ("pos")) nil [101701 102329])
            ("magit-find-section-before*" function (:arguments ("pos" "secs")) nil [102331 102615])
            ("magit-current-section" function nil nil [102617 102722])
            ("magit-find-section-at" function (:arguments ("pos")) nil [102724 102867])
            ("magit-goto-next-section" function (:user-visible-flag t) nil [102892 103104])
            ("magit-goto-previous-section" function (:user-visible-flag t) nil [103106 103313])
            ("magit-goto-parent-section" function (:user-visible-flag t) nil [103315 103532])
            ("magit-goto-next-sibling-section" function (:user-visible-flag t) nil [103534 103990])
            ("magit-goto-previous-sibling-section" function (:user-visible-flag t) nil [103992 104462])
            ("magit-goto-section" function (:arguments ("section")) nil [104464 104986])
            ("magit-goto-section-at-path" function (:arguments ("path")) nil [104988 105228])
            ("magit-define-section-jumper" function (:arguments ("sym" "title")) nil [105230 105996])
            ("magit-define-section-jumper" code nil nil [105998 106047])
            ("magit-define-section-jumper" code nil nil [106048 106105])
            ("magit-define-section-jumper" code nil nil [106106 106164])
            ("magit-define-section-jumper" code nil nil [106165 106221])
            ("magit-define-section-jumper" code nil nil [106222 106280])
            ("magit-define-section-jumper" code nil nil [106281 106339])
            ("magit-define-section-jumper" code nil nil [106340 106391])
            ("magit-add-section-hook" function (:arguments ("hook" "function" "at" "append" "local")) nil [106414 108502])
            ("magit-map-sections" function (:arguments ("function" "section")) nil [108529 108763])
            ("magit-wash-sequence" function (:arguments ("function")) nil [108765 108970])
            ("magit-section-parent-info" function (:arguments ("section")) nil [108972 109111])
            ("magit-section-siblings" function (:arguments ("section" "direction")) nil [109113 109449])
            ("magit-section-region-siblings" function (:arguments ("key")) nil [109451 110468])
            ("magit-diff-section-for-diffstat" function (:arguments ("section")) nil [110470 110779])
            ("magit-section-set-hidden" function (:arguments ("section" "hidden")) nil [110807 111510])
            ("magit-section-any-hidden" function (:arguments ("section")) nil [111512 111824])
            ("magit-section-collapse" function (:arguments ("section")) nil [111826 112037])
            ("magit-section-expand" function (:arguments ("section")) nil [112039 112245])
            ("magit-section-expand-all-aux" function (:arguments ("section")) nil [112247 112463])
            ("magit-section-expand-all" function (:arguments ("section")) nil [112465 112628])
            ("magit-section-hideshow" function (:arguments ("flag-or-func")) nil [112630 113162])
            ("magit-show-section" function (:user-visible-flag t) nil [113164 113266])
            ("magit-hide-section" function (:user-visible-flag t) nil [113268 113368])
            ("magit-collapse-section" function (:user-visible-flag t) nil [113370 113515])
            ("magit-expand-section" function (:user-visible-flag t) nil [113517 113658])
            ("magit-toggle-file-section" function (:user-visible-flag t) nil [113660 113898])
            ("magit-toggle-section" function (:user-visible-flag t) nil [113900 114100])
            ("magit-expand-collapse-section" function (:user-visible-flag t) nil [114102 114399])
            ("magit-cycle-section" function (:user-visible-flag t) nil [114401 114989])
            ("magit-section-lineage" function (:arguments ("section")) nil [114991 115178])
            ("magit-section-show-level" function (:arguments ("section" "level" "threshold" "path")) nil [115180 115581])
            ("magit-show-level" function (:arguments ("level" "all")) nil [115583 116014])
            ("magit-show-only-files" function (:user-visible-flag t) nil [116016 116319])
            ("magit-show-only-files-all" function (:user-visible-flag t) nil [116321 116600])
            ("magit-define-level-shower-1" function (:arguments ("level" "all")) nil [116602 117117])
            ("magit-define-level-shower" function (:arguments ("level")) nil [117119 117371])
            ("magit-define-level-shower" code nil nil [117373 117402])
            ("magit-define-level-shower" code nil nil [117403 117432])
            ("magit-define-level-shower" code nil nil [117433 117462])
            ("magit-define-level-shower" code nil nil [117463 117492])
            ("defvar-local" code nil nil [117522 117566])
            ("defvar-local" code nil nil [117567 117609])
            ("magit-highlight-section" function nil nil [117611 118806])
            ("magit-section-context-type" function (:arguments ("section")) nil [118831 119041])
            ("magit-section-match-1" function (:arguments ("l1" "l2")) nil [119043 119365])
            ("magit-section-match" function (:arguments ("condition" "section")) nil [119367 119960])
            ("magit-section-case" function (:arguments ("slots" "clauses")) nil [119962 120420])
            ("magit-section-action-success" variable
               (:constant-flag t
                :default-value (make-symbol "magit-section-action-success"))
                nil [120422 120508])
            ("magit-section-action" function (:arguments ("opname" "slots" "clauses")) nil [120510 121568])
            ("magit-process" function (:user-visible-flag t) nil [121611 121831])
            ("magit-process-kill" function (:user-visible-flag t) nil [121833 122141])
            ("magit-git-command-history" variable nil nil [122143 122181])
            ("magit-git-command" function
               (:user-visible-flag t
                :arguments ("args" "directory"))
                nil [122198 122871])
            ("magit-git-command-topdir" function
               (:user-visible-flag t
                :arguments ("args" "directory"))
                nil [122873 123162])
            ("magit-git-command-read-args" function (:arguments ("root")) nil [123164 123592])
            ("define-derived-mode" code nil nil [123614 123725])
            ("magit-process-buffer-name" variable (:default-value "*magit-process*") nil [123727 123832])
            ("magit-process-buffer" function (:arguments ("topdir" "create")) nil [123834 124517])
            ("magit-git-exit-code" function (:arguments ("args")) nil [124548 124790])
            ("magit-git-success" function (:arguments ("args")) nil [124792 124935])
            ("magit-git-failure" function (:arguments ("args")) nil [124937 125080])
            ("magit-git-string" function (:arguments ("args")) nil [125082 125637])
            ("magit-git-true" function (:arguments ("args")) nil [125639 125884])
            ("magit-git-false" function (:arguments ("args")) nil [125886 126135])
            ("magit-git-insert" function (:arguments ("args")) nil [126137 126391])
            ("magit-git-lines" function (:arguments ("args")) nil [126393 126783])
            ("magit-run-git" function (:arguments ("args")) nil [126785 127629])
            ("magit-call-git" function (:arguments ("args")) nil [127631 128224])
            ("magit-call-process" function (:arguments ("program" "args")) nil [128226 128905])
            ("magit-run-git-with-input" function (:arguments ("input" "args")) nil [128907 129898])
            ("magit-run-git-with-logfile" function (:arguments ("file" "args")) nil [129900 130321])
            ("magit-this-process" variable nil nil [130353 130384])
            ("magit-run-git-async" function (:arguments ("args")) nil [130386 131413])
            ("magit-start-git" function (:arguments ("input" "args")) nil [131415 132395])
            ("magit-start-process" function (:arguments ("program" "input" "args")) nil [132397 134845])
            ("magit-process-setup" function (:arguments ("program" "args")) nil [134872 135657])
            ("magit-process-truncate-log" function (:arguments ("buffer")) nil [135659 136587])
            ("magit-process-sentinel" function (:arguments ("process" "event")) nil [136589 137186])
            ("magit-process-filter" function (:arguments ("proc" "string")) nil [137188 138303])
            ("magit-process-logfile-filter" function (:arguments ("process" "string")) nil [138305 138703])
            ("magit-process-yes-or-no-prompt" function (:arguments ("proc" "string")) nil [138705 139123])
            ("magit-process-password-prompt" function (:arguments ("proc" "string")) nil [139125 139414])
            ("magit-process-username-prompt" function (:arguments ("proc" "string")) nil [139416 139841])
            ("magit-process-match-prompt" function (:arguments ("prompts" "string")) nil [139843 140231])
            ("magit-process-wait" function nil nil [140233 140377])
            ("magit-process-set-mode-line" function (:arguments ("program" "args")) nil [140379 140761])
            ("magit-process-unset-mode-line" function nil nil [140763 140872])
            ("magit-process-error-message-re" variable (:default-value (concat "^\\(?:error\\|fatal\\|git\\): \\(.*\\)" paragraph-separate)) nil [140874 140984])
            ("magit-process-finish" function (:arguments ("arg" "process-buf" "command-buf" "default-dir" "section")) nil [140986 142801])
            ("magit-process-display-buffer" function (:arguments ("process")) nil [142803 143480])
            ("magit-process-quote-arguments" function (:arguments ("args")) nil [143482 143965])
            ("define-derived-mode" code nil nil [144004 144738])
            ("defvar-local" code nil nil [144740 144781])
            ("put" code nil nil [144782 144830])
            ("defvar-local" code nil nil [144832 144869])
            ("put" code nil nil [144870 144914])
            ("magit-mode-setup" function (:arguments ("buffer" "switch-func" "mode" "refresh-func" "refresh-args")) nil [144916 145974])
            ("magit-mode-init" function (:arguments ("dir" "mode" "refresh-func" "refresh-args")) nil [145976 146720])
            ("defvar-local" code nil nil [146722 146776])
            ("put" code nil nil [146777 146838])
            ("magit-mode-display-buffer" function (:arguments ("buffer" "mode" "switch-function")) nil [146840 148056])
            ("magit-mode-get-buffer" function (:arguments ("format" "mode" "topdir" "create")) nil [148058 148973])
            ("magit-mode-get-buffer-create" function (:arguments ("format" "mode" "topdir")) nil [148975 149089])
            ("cl-defun" code nil nil [149091 150426])
            ("magit-mode-quit-window" function
               (:user-visible-flag t
                :arguments ("kill-buffer"))
                nil [150428 151405])
            ("magit-map-magit-buffers" function (:arguments ("func" "dir")) nil [151429 151697])
            ("defvar-local" code nil nil [151724 151759])
            ("put" code nil nil [151760 151802])
            ("magit-remember-point" function nil nil [151804 151869])
            ("magit-invisible-region-end" function (:arguments ("pos")) nil [151871 152024])
            ("magit-invisible-region-start" function (:arguments ("pos")) nil [152026 152190])
            ("magit-correct-point-after-command" function nil nil [152192 152887])
            ("magit-go-backward" function (:user-visible-flag t) nil [152911 153125])
            ("magit-go-forward" function (:user-visible-flag t) nil [153127 153346])
            ("magit-xref-insert-buttons" function nil nil [153348 153880])
            ("magit-xref-insert-button" function (:arguments ("label" "type")) nil [153882 154074])
            ("define-button-type" code nil nil [154076 154255])
            ("define-button-type" code nil nil [154257 154434])
            ("magit-setup-xref" function (:arguments ("item")) nil [154436 154762])
            ("magit-refresh" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [154789 155707])
            ("magit-refresh-all" function (:user-visible-flag t) nil [155709 156128])
            ("magit-revert-buffers" function nil nil [156130 156782])
            ("magit-diff-context-lines" variable (:default-value 3) nil [156819 156854])
            ("magit-diff-U-arg" function nil nil [156856 156926])
            ("magit-diff-smaller-hunks" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [156928 157143])
            ("magit-diff-larger-hunks" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [157145 157351])
            ("magit-diff-default-hunks" function (:user-visible-flag t) nil [157353 157512])
            ("magit-set-diff-options" function (:user-visible-flag t) nil [157514 157731])
            ("magit-save-default-diff-options" function (:user-visible-flag t) nil [157805 158072])
            ("magit-reset-diff-options" function (:user-visible-flag t) nil [158074 158306])
            ("magit-insert-diff" function (:arguments ("section" "file" "status")) nil [158331 158741])
            ("magit-wash-raw-diffs" function (:arguments ("staged")) nil [158743 158913])
            ("magit-wash-raw-diff" function (:arguments ("previous" "staged")) nil [158915 160275])
            ("define-derived-mode" code nil nil [160327 160930])
            ("magit-commit-buffer-name" variable (:default-value "*magit-commit*") nil [160932 161027])
            ("magit-show-commit" function
               (:user-visible-flag t
                :arguments ("commit" "noselect"))
                nil [161044 161564])
            ("magit-show-item-or-scroll-up" function (:user-visible-flag t) nil [161566 161993])
            ("magit-show-item-or-scroll-down" function (:user-visible-flag t) nil [161995 162428])
            ("magit-show-item-or-scroll" function (:arguments ("fn")) nil [162430 163340])
            ("magit-refresh-commit-buffer" function (:arguments ("commit")) nil [163342 163612])
            ("magit-wash-commit" function nil nil [163636 165181])
            ("magit-insert-commit-button" function (:arguments ("hash")) nil [165183 165707])
            ("define-derived-mode" code nil nil [165727 166313])
            ("magit-status-buffer-name" variable (:default-value "*magit: %t*") nil [166315 166420])
            ("magit-status" function
               (:user-visible-flag t
                :arguments ("dir" "switch-function"))
                nil [166437 168032])
            ("defalias" code nil nil [168034 168081])
            ("magit-refresh-status" function nil nil [168107 168328])
            ("magit-insert-stashes" function nil nil [168363 169000])
            ("magit-insert-untracked-files" function nil nil [169002 169568])
            ("magit-insert-pending-commits" function nil nil [169570 170295])
            ("magit-insert-unstaged-changes" function nil nil [170297 170573])
            ("magit-insert-staged-changes" function nil nil [170575 171135])
            ("magit-insert-unpulled-or-recent-commits" function nil nil [171137 171592])
            ("magit-insert-unpulled-commits" function nil nil [171594 171886])
            ("magit-insert-unpushed-commits" function nil nil [171888 172180])
            ("magit-insert-unpulled-cherries" function nil nil [172182 172487])
            ("magit-insert-unpushed-cherries" function nil nil [172489 172767])
            ("magit-insert-empty-line" function nil nil [172789 172839])
            ("magit-insert-status-local-line" function nil nil [172841 173132])
            ("magit-insert-status-remote-line" function nil nil [173134 173509])
            ("magit-format-tracked-line" function (:arguments ("tracked" "branch")) nil [173511 174035])
            ("magit-insert-status-head-line" function nil nil [174037 174353])
            ("magit-insert-status-tags-line" function nil nil [174355 175018])
            ("magit-format-status-tag-sentence" function (:arguments ("behindp" "tag" "cnt" "ignored")) nil [175020 175483])
            ("magit-insert-status-merge-line" function nil nil [175509 175889])
            ("magit-insert-status-rebase-lines" function nil nil [175891 176459])
            ("magit-insert-rebase-sequence" function nil nil [176461 177308])
            ("magit-insert-bisect-output" function nil nil [177310 178318])
            ("magit-insert-bisect-rest" function nil nil [178320 178587])
            ("magit-insert-bisect-log" function nil nil [178589 178763])
            ("magit-wash-bisect-log" function nil nil [178765 179730])
            ("magit-bisecting-p" function nil nil [179732 179807])
            ("magit-default-directory" variable nil nil [179846 179882])
            ("magit-save-some-buffers" function
               (:user-visible-flag t
                :arguments ("msg" "pred" "topdir"))
                nil [179884 180916])
            ("magit-save-buffers-predicate-all" function nil nil [180918 181018])
            ("magit-save-buffers-predicate-tree-only" function nil nil [181020 181589])
            ("magit-apply-item" function (:user-visible-flag t) nil [181651 182037])
            ("magit-stage-item" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [182053 183910])
            ("magit-stage-all" function
               (:user-visible-flag t
                :arguments ("including-untracked"))
                nil [183927 184386])
            ("magit-unstage-item" function (:user-visible-flag t) nil [184404 185229])
            ("magit-unstage-all" function (:user-visible-flag t) nil [185246 185677])
            ("magit-discard-item" function (:user-visible-flag t) nil [185695 187625])
            ("magit-revert-item" function (:user-visible-flag t) nil [187642 188361])
            ("magit-revert-commit" function (:arguments ("commit")) nil [188363 188491])
            ("magit-revert-backup-file" variable
               (:constant-flag t
                :default-value "magit/reverted.diff")
                nil [188493 188550])
            ("magit-revert-undo" function (:user-visible-flag t) nil [188552 188863])
            ("magit-discard-diff" function (:arguments ("diff" "stagedp")) nil [188883 189527])
            ("magit-apply-commit" function (:arguments ("commit")) nil [189529 189666])
            ("magit-apply-diff-item" function (:arguments ("diff" "args")) nil [189668 190061])
            ("magit-apply-hunk-item" function (:arguments ("hunk" "args")) nil [190063 191439])
            ("magit-insert-diff-item-patch" function (:arguments ("diff" "buf")) nil [191441 191626])
            ("magit-insert-hunk-item-patch" function (:arguments ("hunk" "buf")) nil [191628 191871])
            ("magit-insert-hunk-item-region-patch" function (:arguments ("hunk" "reverse" "beg" "end" "buf")) nil [191873 192756])
            ("magit-diff-item-insert-header" function (:arguments ("diff" "buf")) nil [192758 193121])
            ("magit-insert-region" function (:arguments ("beg" "end" "buf")) nil [193123 193272])
            ("magit-insert-current-line" function (:arguments ("buf")) nil [193274 193482])
            ("magit-revert-backup" function (:arguments ("buffer" "args")) nil [193484 193960])
            ("magit-visit-item" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [193974 194542])
            ("magit-visit-file-item" function (:arguments ("file" "other-window" "line" "column")) nil [194544 195401])
            ("magit-hunk-item-target-line" function (:arguments ("hunk")) nil [195403 195980])
            ("magit-dired-jump" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [195997 196449])
            ("defvar-local" code nil nil [196451 196489])
            ("defvar-local" code nil nil [196490 196535])
            ("magit-show" function
               (:user-visible-flag t
                :arguments ("rev" "file" "switch-function"))
                nil [196552 199520])
            ("magit-merge" function
               (:user-visible-flag t
                :arguments ("revision" "do-commit"))
                nil [199561 200433])
            ("magit-merge-abort" function (:user-visible-flag t) nil [200450 200716])
            ("magit-checkout" function
               (:user-visible-flag t
                :arguments ("revision"))
                nil [200750 202151])
            ("magit-create-branch" function
               (:user-visible-flag t
                :arguments ("branch" "parent"))
                nil [202168 202856])
            ("magit-delete-branch" function
               (:user-visible-flag t
                :arguments ("branch" "force"))
                nil [202873 204399])
            ("magit-rename-branch" function
               (:user-visible-flag t
                :arguments ("old" "new" "force"))
                nil [204416 204943])
            ("magit-guess-branch" function nil nil [204945 205259])
            ("magit-add-remote" function
               (:user-visible-flag t
                :arguments ("remote" "url"))
                nil [205292 205552])
            ("magit-remove-remote" function
               (:user-visible-flag t
                :arguments ("remote"))
                nil [205569 205753])
            ("magit-rename-remote" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [205770 206218])
            ("magit-guess-remote" function nil nil [206220 206403])
            ("magit-rebase-info" function nil nil [206419 208445])
            ("magit-rebase-step" function (:user-visible-flag t) nil [208447 209390])
            ("magit-interactive-rebase" function
               (:user-visible-flag t
                :arguments ("commit"))
                nil [209407 209946])
            ("magit-apply-mailbox" function
               (:user-visible-flag t
                :arguments ("file-or-dir"))
                nil [209958 210211])
            ("magit-reset-head" function
               (:user-visible-flag t
                :arguments ("revision" "hard"))
                nil [210241 210989])
            ("magit-reset-head-hard" function
               (:user-visible-flag t
                :arguments ("revision"))
                nil [211006 211368])
            ("magit-reset-working-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211385 212217])
            ("magit-read-rewrite-info" function nil nil [212236 212481])
            ("magit-write-rewrite-info" function (:arguments ("info")) nil [212483 212646])
            ("magit-rewrite-set-commit-property" function (:arguments ("commit" "prop" "value")) nil [212648 212966])
            ("add-hook" code nil nil [212968 213017])
            ("put" code nil nil [213018 213092])
            ("magit-rewrite-apply" function (:arguments ("commit")) nil [213093 213212])
            ("add-hook" code nil nil [213214 213268])
            ("put" code nil nil [213269 213342])
            ("magit-rewrite-pick" function (:arguments ("commit")) nil [213343 213467])
            ("add-hook" code nil nil [213469 213520])
            ("put" code nil nil [213521 213596])
            ("magit-rewrite-revert" function (:arguments ("commit")) nil [213597 213819])
            ("magit-rewrite-set-used" function nil nil [213821 213998])
            ("magit-rewrite-set-unused" function nil nil [214000 214181])
            ("magit-rewrite-start" function (:arguments ("from" "onto")) nil [214183 215089])
            ("magit-rewrite-stop" function (:arguments ("noconfirm")) nil [215091 215389])
            ("magit-rewrite-abort" function nil nil [215391 215800])
            ("magit-rewrite-finish" function nil nil [215802 215897])
            ("magit-rewrite-finish-step" function nil nil [215899 216660])
            ("magit-rewrite-diff-pending" function nil nil [216662 216893])
            ("magit-rewrite-diff-pending-transition" function nil nil [216895 217092])
            ("define-obsolete-function-alias" code nil nil [217094 217295])
            ("magit-fetch" function
               (:user-visible-flag t
                :arguments ("remote"))
                nil [217328 217497])
            ("magit-fetch-current" function (:user-visible-flag t) nil [217514 217741])
            ("magit-remote-update" function (:user-visible-flag t) nil [217758 217963])
            ("magit-pull" function (:user-visible-flag t) nil [217995 220629])
            ("magit-push-tags" function (:user-visible-flag t) nil [220661 221448])
            ("magit-push" function (:user-visible-flag t) nil [221465 222237])
            ("magit-push-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [222239 224714])
            ("magit-commit" function
               (:user-visible-flag t
                :arguments ("amendp"))
                nil [224749 225152])
            ("magit-commit-amend" function (:user-visible-flag t) nil [225169 225369])
            ("magit-commit-extend" function
               (:user-visible-flag t
                :arguments ("override-date"))
                nil [225386 226239])
            ("magit-commit-reword" function
               (:user-visible-flag t
                :arguments ("override-date"))
                nil [226256 227145])
            ("defvar-local" code nil nil [227147 227191])
            ("defvar-local" code nil nil [227192 227236])
            ("magit-commit-unmark-after-squash" variable (:default-value t) nil [227238 227281])
            ("magit-commit-fixup" function
               (:user-visible-flag t
                :arguments ("commit"))
                nil [227298 227692])
            ("magit-commit-squash" function
               (:user-visible-flag t
                :arguments ("commit" "fixup"))
                nil [227709 228758])
            ("magit-commit-squash-commit" function nil nil [228760 229175])
            ("magit-commit-squash-marked" function nil nil [229177 229614])
            ("magit-commit-squash-abort" function (:arguments ("buffer")) nil [229616 229875])
            ("magit-commit-assert" function (:arguments ("args")) nil [229877 230528])
            ("magit-commit-maybe-expand" function (:arguments ("unstaged")) nil [230530 230762])
            ("magit-commit-internal" function (:arguments ("subcmd" "args")) nil [230764 232224])
            ("magit-commit-add-log" function (:user-visible-flag t) nil [232226 235125])
            ("magit-tag" function
               (:user-visible-flag t
                :arguments ("name" "rev" "annotate"))
                nil [235157 235823])
            ("magit-delete-tag" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [235840 236043])
            ("magit-read-stash-history" variable nil nil [236061 236142])
            ("magit-stash" function
               (:user-visible-flag t
                :arguments ("description"))
                nil [236159 236628])
            ("magit-stash-snapshot" function (:user-visible-flag t) nil [236645 237064])
            ("magit-stash-apply" function
               (:user-visible-flag t
                :arguments ("stash"))
                nil [237066 237297])
            ("magit-stash-pop" function
               (:user-visible-flag t
                :arguments ("stash"))
                nil [237299 237537])
            ("magit-stash-drop" function
               (:user-visible-flag t
                :arguments ("stash"))
                nil [237539 237746])
            ("magit-cherry-pick-item" function (:user-visible-flag t) nil [237767 237977])
            ("magit-cherry-pick-commit" function (:arguments ("commit")) nil [237979 238108])
            ("magit-submodule-update" function
               (:user-visible-flag t
                :arguments ("init"))
                nil [238144 238433])
            ("magit-submodule-update-init" function (:user-visible-flag t) nil [238450 238598])
            ("magit-submodule-init" function (:user-visible-flag t) nil [238615 238788])
            ("magit-submodule-sync" function (:user-visible-flag t) nil [238805 239002])
            ("magit-bisect-start" function
               (:user-visible-flag t
                :arguments ("bad" "good"))
                nil [239036 239662])
            ("magit-bisect-reset" function (:user-visible-flag t) nil [239679 239943])
            ("magit-bisect-good" function (:user-visible-flag t) nil [239960 240177])
            ("magit-bisect-bad" function (:user-visible-flag t) nil [240194 240404])
            ("magit-bisect-skip" function (:user-visible-flag t) nil [240421 240664])
            ("magit-bisect-run" function
               (:user-visible-flag t
                :arguments ("cmdline"))
                nil [240681 240892])
            ("magit-run-git-bisect" function (:arguments ("subcommand" "args" "no-assert")) nil [240894 241287])
            ("magit-log" function (:arguments ("range")) nil [241319 241690])
            ("magit-log-ranged" function (:arguments ("range")) nil [241707 241818])
            ("magit-log-long" function (:arguments ("range")) nil [241835 242112])
            ("magit-log-long-ranged" function (:arguments ("range")) nil [242129 242255])
            ("magit-file-log" function
               (:user-visible-flag t
                :arguments ("file" "use-graph"))
                nil [242272 242929])
            ("magit-reflog" function
               (:user-visible-flag t
                :arguments ("ref"))
                nil [242946 243432])
            ("magit-reflog-head" function (:user-visible-flag t) nil [243449 243546])
            ("define-derived-mode" code nil nil [243592 244459])
            ("magit-log-buffer-name" variable (:default-value "*magit-log*") nil [244461 244553])
            ("magit-refresh-log-buffer" function (:arguments ("style" "range" "args" "file")) nil [244555 245683])
            ("magit-log-oneline-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?4:\\(?: *[-_/|\\*o.] *\\)+ *\\)?" "\\(?:" "\\(?1:[0-9a-fA-F]+\\) " "\\(?:\\(?3:([^()]+)\\) \\)?" "\\(?7:[BGUN]\\)?" "\\[\\(?5:[^]]*\\)\\]" "\\[\\(?6:[^]]*\\)\\]" "\\(?2:.*\\)" "\\)?$"))
                nil [245704 246193])
            ("magit-log-long-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?4:\\(?:[-_/|\\*o.] *\\)+ *\\)?" "\\(?:" "\\(?:commit \\(?1:[0-9a-fA-F]+\\)" "\\(?: \\(?3:([^()]+)\\)\\)?\\)" "\\|" "\\(?2:.+\\)\\)$"))
                nil [246195 246475])
            ("magit-log-unique-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?1:[0-9a-fA-F]+\\) " "\\(?2:.*\\)$"))
                nil [246506 246634])
            ("magit-log-cherry-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?8:[-+]\\) " "\\(?1:[0-9a-fA-F]+\\) " "\\(?2:.*\\)$"))
                nil [246666 246854])
            ("magit-log-bisect-vis-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?1:[0-9a-fA-F]+\\) " "\\(?:\\(?3:([^()]+)\\) \\)?" "\\(?2:.+\\)$"))
                nil [246886 247076])
            ("magit-log-bisect-log-re" variable
               (:constant-flag t
                :default-value (concat "^# " "\\(?3:bad:\\|skip:\\|good:\\) " "\\[\\(?1:[^]]+\\)\\] " "\\(?2:.+\\)$"))
                nil [247108 247281])
            ("magit-log-reflog-re" variable
               (:constant-flag t
                :default-value (concat "^" "\\(?1:[^ ]+\\) " "\\[\\(?5:[^]]*\\)\\] " "\\(?6:[^ ]*\\) " "[^@]+@{\\(?9:[^}]+\\)} " "\\(?10:merge\\|[^:]+\\)?:? ?" "\\(?2:.+\\)?$"))
                nil [247313 247680])
            ("magit-reflog-subject-re" variable
               (:constant-flag t
                :default-value (concat "\\([^ ]+\\) ?" "\\(\\(?: ?-[^ ]+\\)+\\)?" "\\(?: ?(\\([^)]+\\))\\)?"))
                nil [247711 247913])
            ("magit-log-count" variable nil nil [247941 247969])
            ("magit-wash-log" function (:arguments ("style" "color" "longer")) nil [247971 248934])
            ("magit-wash-log-line" function (:arguments ("style" "abbrev")) nil [248936 251199])
            ("magit-log-format-unicode-graph" function (:arguments ("string")) nil [251201 251753])
            ("magit-format-log-margin" function (:arguments ("author" "date")) nil [251755 252807])
            ("magit-log-toggle-margin" function (:user-visible-flag t) nil [252829 253505])
            ("magit-log-show-more-entries" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253507 254101])
            ("define-derived-mode" code nil nil [254121 254857])
            ("magit-cherry-buffer-name" variable (:default-value "*magit-cherry*") nil [254859 254973])
            ("magit-cherry" function
               (:user-visible-flag t
                :arguments ("head" "upstream"))
                nil [254990 255468])
            ("magit-refresh-cherry-buffer" function (:arguments ("upstream" "head")) nil [255470 255619])
            ("magit-insert-cherry-head-line" function nil nil [255621 255848])
            ("magit-insert-cherry-upstream-line" function nil nil [255850 256027])
            ("magit-insert-cherry-help-lines" function nil nil [256029 256423])
            ("magit-insert-cherry-commits" function nil nil [256425 256625])
            ("magit-reflog-buffer-name" variable (:default-value "*magit-reflog*") nil [256645 256746])
            ("define-derived-mode" code nil nil [256748 257456])
            ("magit-refresh-reflog-buffer" function (:arguments ("ref")) nil [257458 257795])
            ("magit-reflog-labels" variable (:default-value (quote (("commit" . magit-log-reflog-label-commit) ("amend" . magit-log-reflog-label-amend) ("merge" . magit-log-reflog-label-merge) ("checkout" . magit-log-reflog-label-checkout) ("branch" . magit-log-reflog-label-checkout) ("reset" . magit-log-reflog-label-reset) ("rebase" . magit-log-reflog-label-rebase) ("cherry-pick" . magit-log-reflog-label-cherry-pick) ("initial" . magit-log-reflog-label-commit) ("pull" . magit-log-reflog-label-remote) ("clone" . magit-log-reflog-label-remote)))) nil [257797 258404])
            ("magit-log-format-reflog" function (:arguments ("subject")) nil [258406 259190])
            ("magit-ediff-buffers" variable nil nil [259212 259309])
            ("magit-ediff-windows" variable nil nil [259311 259418])
            ("magit-ediff" function (:user-visible-flag t) nil [259420 260931])
            ("magit-ediff-buffers" function (:arguments ("a" "b")) nil [260933 261115])
            ("magit-ediff-buffers3" function (:arguments ("a" "b" "c")) nil [261117 261307])
            ("magit-diff-range" function (:arguments ("diff")) nil [261309 261664])
            ("magit-ediff-add-cleanup" function nil nil [261666 261941])
            ("magit-ediff-restore" function nil nil [261943 262539])
            ("magit-save-index" function (:user-visible-flag t) nil [262556 263466])
            ("magit-interactive-resolve" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [263483 266002])
            ("define-derived-mode" code nil nil [266036 266648])
            ("magit-diff-buffer-name" variable (:default-value "*magit-diff*") nil [266650 266739])
            ("magit-stash-buffer-name" variable (:default-value "*magit-stash*") nil [266741 266833])
            ("magit-diff" function
               (:user-visible-flag t
                :arguments ("range" "working" "args"))
                nil [266877 267439])
            ("magit-diff-working-tree" function
               (:user-visible-flag t
                :arguments ("rev"))
                nil [267456 267672])
            ("magit-diff-staged" function (:user-visible-flag t) nil [267689 267834])
            ("magit-diff-unstaged" function (:user-visible-flag t) nil [267851 267981])
            ("magit-diff-stash" function
               (:user-visible-flag t
                :arguments ("stash" "noselect"))
                nil [267998 268535])
            ("magit-diff-with-mark" function
               (:user-visible-flag t
                :arguments ("range"))
                nil [268537 269195])
            ("magit-refresh-diff-buffer" function (:arguments ("range" "working" "args")) nil [269197 270206])
            ("magit-diff-statline-re" variable
               (:constant-flag t
                :default-value (concat "^ ?" "\\(.*\\)" "\\( +| +\\)" "\\([0-9]+\\|Bin\\(?: +[0-9]+ -> [0-9]+ bytes\\)?$\\) ?" "\\(\\+*\\)" "\\(-*\\)$"))
                nil [270228 270467])
            ("magit-current-diff-range" variable nil nil [270476 270570])
            ("defvar-local" code nil nil [270572 270621])
            ("put" code nil nil [270622 270678])
            ("magit-wash-diffs" function nil nil [270680 270917])
            ("magit-wash-diffstats" function nil nil [270919 271409])
            ("magit-wash-diffstat" function nil nil [271411 271899])
            ("magit-wash-diff" function nil nil [271901 272171])
            ("magit-wash-diff-section" function (:arguments ("section")) nil [272173 275568])
            ("magit-insert-diff-title" function (:arguments ("status" "file" "file2")) nil [275570 275785])
            ("magit-wash-hunk" function nil nil [275787 277009])
            ("magit-diff-highlight-whitespace" function (:arguments ("merging")) nil [277011 278389])
            ("magit-diff-toggle-refine-hunk" function
               (:user-visible-flag t
                :arguments ("other"))
                nil [278417 279748])
            ("magit-diff-refine-hunk" function (:arguments ("hunk")) nil [279750 279968])
            ("magit-diff-unrefine-hunk" function (:arguments ("hunk")) nil [279970 280140])
            ("define-derived-mode" code nil nil [280160 280976])
            ("magit-wazzup-buffer-name" variable (:default-value "*magit-wazzup*") nil [280978 281101])
            ("magit-wazzup" function
               (:user-visible-flag t
                :arguments ("branch"))
                nil [281118 281665])
            ("magit-refresh-wazzup-buffer" function (:arguments ("head")) nil [281667 281813])
            ("magit-insert-wazzup-head-line" function nil nil [281815 282041])
            ("magit-insert-wazzup-branches" function nil nil [282043 282388])
            ("magit-insert-wazzup-commits" function (:arguments ("upstream" "head")) nil [282390 283242])
            ("define-derived-mode" code nil nil [283283 283996])
            ("magit-branches-buffer-name" variable (:default-value "*magit-branches*") nil [283998 284108])
            ("magit-branch-manager" function (:user-visible-flag t) nil [284125 284483])
            ("magit-refresh-branch-manager" function nil nil [284485 284638])
            ("magit-wash-branch-line-re" variable
               (:constant-flag t
                :default-value (concat "^\\([ *] \\)" "\\(.+?\\) +" "\\(?:" "\\([0-9a-fA-F]+\\)" " " "\\(?:\\[" "\\([^:
]+?\\)" "\\(?:: \\)?" "\\(?:ahead \\([0-9]+\\)\\)?" "\\(?:, \\)?" "\\(?:behind \\([0-9]+\\)\\)?" "\\] \\)?" "\\(?:.*\\)" "\\|" "-> " "\\(.+\\)" "\\)
"))
                nil [284667 285388])
            ("magit-wash-branch-line" function (:arguments ("remote-name")) nil [285390 287465])
            ("magit-wash-remote-branches-group" function (:arguments ("group")) nil [287467 287930])
            ("magit-wash-branches-between-point-and-marker" function (:arguments ("marker" "remote-name")) nil [287932 288159])
            ("magit-wash-branches" function nil nil [288161 289595])
            ("magit-rename-item" function (:user-visible-flag t) nil [289615 289834])
            ("magit-change-what-branch-tracks" function (:user-visible-flag t) nil [289836 290695])
            ("magit-init" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [290759 291765])
            ("magit-copy-item-as-kill" function (:user-visible-flag t) nil [291767 291981])
            ("magit-ignore-item" function
               (:user-visible-flag t
                :arguments ("edit" "local"))
                nil [291983 292455])
            ("magit-ignore-item-locally" function
               (:user-visible-flag t
                :arguments ("edit"))
                nil [292457 292636])
            ("magit-ignore-file" function (:arguments ("file" "edit" "local")) nil [292638 293547])
            ("magit-ignore-edit-string" function (:arguments ("file")) nil [293549 294088])
            ("magit-marked-commit" variable nil nil [294108 294140])
            ("defvar-local" code nil nil [294142 294179])
            ("put" code nil nil [294180 294224])
            ("magit-mark-item" function
               (:user-visible-flag t
                :arguments ("unmark"))
                nil [294226 294688])
            ("magit-refresh-marked-commits" function nil nil [294690 294798])
            ("magit-refresh-marked-commits-in-buffer" function nil nil [294800 295432])
            ("magit-add-change-log-entry" function
               (:user-visible-flag t
                :arguments ("whoami" "file-name" "other-window"))
                nil [295465 296118])
            ("magit-add-change-log-entry-other-window" function
               (:user-visible-flag t
                :arguments ("whoami" "file-name"))
                nil [296135 296640])
            ("magit-read-top-dir" function (:arguments ("dir")) nil [296664 297459])
            ("magit-list-repos" function (:arguments ("dirs")) nil [297461 297744])
            ("magit-list-repos*" function (:arguments ("dir" "depth")) nil [297746 298226])
            ("magit-list-repos-remove-conflicts" function (:arguments ("alist")) nil [298228 299080])
            ("magit-run-git-gui" function (:user-visible-flag t) nil [299118 299319])
            ("magit-run-git-gui-blame" function
               (:user-visible-flag t
                :arguments ("commit" "filename" "linenum"))
                nil [299336 300458])
            ("magit-run-gitk" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300475 300761])
            ("magit-describe-item" function (:user-visible-flag t) nil [300787 301593])
            ("magit-load-config-extensions" function nil nil [301618 301996])
            ("magit-font-lock-keywords" variable
               (:constant-flag t
                :default-value (eval-when-compile (\` (((\, (concat "(\\(" (regexp-opt (quote ("magit-define-level-shower" "magit-define-section-jumper"))) "\\)\\>[ 	'(]*\\(\\sw+\\)?")) (1 font-lock-keyword-face) (2 font-lock-function-name-face nil t)) ((\, (concat "(" (regexp-opt (quote ("magit-with-section" "magit-cmd-insert-section" "magit-git-insert-section" "magit-insert-line-section" "magit-section-action" "magit-section-case" "magit-add-action-clauses" "magit-bind-match-strings" "magit-visiting-file-item" "magit-tests--with-temp-dir" "magit-tests--with-temp-repo" "magit-tests--with-temp-clone")) t) "\\>")) . 1)))))
                nil [302022 303264])
            ("magit-version" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [303266 304914])
            ("cl-eval-when" code nil nil [304916 304960])
            ("define-obsolete-variable-alias" code nil nil [304962 305067])
            ("define-obsolete-variable-alias" code nil nil [305068 305173])
            ("define-obsolete-variable-alias" code nil nil [305174 305279])
            ("define-obsolete-variable-alias" code nil nil [305281 305383])
            ("magit" package nil nil [305385 305401])
            ("magit-key-mode" include nil nil [305425 305450])
            ("unless" code nil nil [305611 305681]))          
      :file "magit.el"
      :pointmax 305776
      :fsize 305786
      :lastmodtime '(21626 17573 900375 12000)
      :unmatched-syntax '((close-paren 6197 . 6198) (symbol 4264 . 4280) (open-paren 4263 . 4264) (close-paren 3299 . 3300) (symbol 3119 . 3136) (open-paren 3118 . 3119)))
    (semanticdb-table "magit-key-mode.el"
      :file "magit-key-mode.el"
      :fsize 27625
      :lastmodtime '(21626 17574 2372 353000)))
  :file "!home!chz!.emacs.d!elpa!magit-90141129!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
