;; Object bovine/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "bovine/"
  :tables
  (list
    (semanticdb-table "make.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("make-mode" include nil nil [968 988])
            ("semantic" include nil nil [990 1009])
            ("semantic/bovine" include nil nil [1010 1036])
            ("semantic/bovine/make-by" include nil nil [1037 1071])
            ("semantic/analyze" include nil nil [1072 1099])
            ("semantic/dep" include nil nil [1100 1123])
            ("declare-function" code nil nil [1125 1221])
            ("define-lex-analyzer" code nil nil [1233 1758])
            ("define-lex-regex-analyzer" code nil nil [1760 2153])
            ("define-lex-regex-analyzer" code nil nil [2155 2377])
            ("semantic-make-lexer" function (:lexical-analyzer-flag t) nil [2379 2870])
            ("semantic-make-expand-tag" function (:arguments ("tag")) nil [2872 3450])
            ("semantic-get-local-variables" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3452 3668])
            ("semantic-ctxt-current-class-list" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [3670 4319])
            ("semantic-format-tag-abbreviate" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4321 4759])
            ("semantic-function-argument-separator" variable
               (:parent "makefile-mode"
                :override-variable-flag t
                :default-value " ")
                nil [4761 4887])
            ("semantic-format-tag-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [4889 5458])
            ("semantic-format-tag-concise-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5460 5731])
            ("semantic-format-tag-uml-prototype" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [5733 5996])
            ("semantic-analyze-possible-completions" function
               (:parent "makefile-mode"
                :override-function-flag t
                :arguments ("context"))
                nil [5998 7016])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [7018 7207])
            ("semantic-default-make-setup" function nil nil [7224 8281])
            ("semantic/bovine/make" package nil nil [8283 8314]))          
      :file "make.el.gz"
      :pointmax 8484
      :fsize 2792
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "c.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/analyze" include nil nil [975 1002])
            ("semantic/analyze/refs" include nil nil [1003 1035])
            ("semantic/bovine" include nil nil [1036 1062])
            ("semantic/bovine/gcc" include nil nil [1063 1093])
            ("semantic/idle" include nil nil [1094 1118])
            ("semantic/lex-spp" include nil nil [1119 1146])
            ("semantic/bovine/c-by" include nil nil [1147 1178])
            ("semantic/db-find" include nil nil [1179 1206])
            ("hideif" include nil nil [1207 1224])
            ("semantic/find" include nil nil [1247 1271])
            ("declare-function" code nil nil [1274 1345])
            ("declare-function" code nil nil [1346 1407])
            ("declare-function" code nil nil [1408 1467])
            ("declare-function" code nil nil [1468 1546])
            ("declare-function" code nil nil [1547 1597])
            ("declare-function" code nil nil [1598 1646])
            ("cc-mode" include nil nil [1688 1706])
            ("if" code nil nil [1709 2288])
            ("define-child-mode" code nil nil [2300 2384])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [2409 2594])
            ("semantic-default-c-path" variable nil nil [2596 2837])
            ("semantic-dependency-include-path" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value semantic-default-c-path)
                nil [2839 2969])
            ("if" code nil nil [3089 3168])
            ("semantic-lex-c-preprocessor-symbol-map-builtin" variable (:default-value (quote (("__THROW" . "") ("__const" . "const") ("__restrict" . "") ("__attribute_pure__" . "") ("__attribute_malloc__" . "") ("__nonnull" . "") ("__wur" . "") ("__declspec" (spp-arg-list ("foo") 1 . 2)) ("__attribute__" (spp-arg-list ("foo") 1 . 2)) ("__asm" (spp-arg-list ("foo") 1 . 2))))) nil [3217 3665])
            ("semantic-c-in-reset-preprocessor-table" variable nil nil [3667 3866])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [3868 3916])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [3917 3964])
            ("semantic-c-reset-preprocessor-symbol-map" function nil nil [3966 5707])
            ("add-hook" code nil nil [5787 5861])
            ("semantic-lex-c-preprocessor-symbol-map" variable nil nil [5863 7218])
            ("semantic-lex-c-preprocessor-symbol-file" variable nil nil [7220 7795])
            ("semantic-c-member-of-autocast" variable (:default-value (quote t)) nil [7797 8208])
            ("define-lex-spp-macro-declaration-analyzer" code nil nil [8210 9683])
            ("define-lex-spp-macro-undeclaration-analyzer" code nil nil [9685 9936])
            ("semantic-c-obey-conditional-section-parsing-flag" variable
               (:user-visible-flag t
                :default-value t)
                nil [9968 10232])
            ("semantic-c-skip-conditional-section" function nil nil [10234 11561])
            ("semantic-c-convert-spp-value-to-hideif-value" function (:arguments ("symbol" "macrovalue")) nil [12037 13001])
            ("semantic-c-evaluate-symbol-for-hideif" function
               (:user-visible-flag t
                :arguments ("spp-symbol"))
                nil [13003 14320])
            ("semantic-c-hideif-lookup" function (:arguments ("var")) nil [14571 14996])
            ("semantic-c-hideif-defined" function (:arguments ("var")) nil [14998 15558])
            ("semantic-c-takeover-hideif" variable nil nil [15643 15740])
            ("define-lex-regex-analyzer" code nil nil [16409 16624])
            ("semantic-c-do-lex-if" function nil nil [16626 18100])
            ("define-lex-regex-analyzer" code nil nil [18102 18365])
            ("semantic-c-do-lex-ifdef" function nil nil [18367 19550])
            ("define-lex-regex-analyzer" code nil nil [19552 20096])
            ("define-lex-regex-analyzer" code nil nil [20098 20342])
            ("define-lex-spp-include-analyzer" code nil nil [20344 20724])
            ("define-lex-spp-include-analyzer" code nil nil [20726 21097])
            ("define-lex-regex-analyzer" code nil nil [21100 21283])
            ("define-lex-regex-analyzer" code nil nil [21285 22264])
            ("semantic-lex-c-nested-namespace-ignore-second" variable (:default-value t) nil [22266 22797])
            ("define-lex-regex-analyzer" code nil nil [22799 23434])
            ("define-lex-regex-analyzer" code nil nil [23436 23639])
            ("define-lex-regex-analyzer" code nil nil [23641 25390])
            ("define-lex-regex-analyzer" code nil nil [25392 25635])
            ("define-lex-regex-analyzer" code nil nil [25637 26041])
            ("define-lex-regex-analyzer" code nil nil [26043 26401])
            ("semantic-c-lexer" function (:lexical-analyzer-flag t) nil [26404 27585])
            ("define-lex-simple-regex-analyzer" code nil nil [27587 27710])
            ("semantic-cpp-lexer" function (:lexical-analyzer-flag t) nil [27712 28654])
            ("semantic-parse-region" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("start" "end" "&optional" "nonterminal" "depth" "returnonerror"))
                nil [28656 30847])
            ("semantic-c-parse-token-hack-depth" variable nil nil [30849 30967])
            ("semantic-c-parse-lexical-token" function (:arguments ("lexicaltoken" "nonterminal" "depth" "returnonerror")) nil [30969 33558])
            ("semantic-c-debug-mode-init-last-mode" variable nil nil [33560 33653])
            ("semantic-c-debug-mode-init" function
               (:user-visible-flag t
                :arguments ("mm"))
                nil [33655 34156])
            ("semantic-c-debug-mode-init-pch" function nil nil [34158 34726])
            ("semantic-expand-c-tag" function (:arguments ("tag")) nil [34728 36376])
            ("semantic-expand-c-extern-C" function (:arguments ("tag")) nil [36378 36930])
            ("semantic-expand-c-complex-type" function (:arguments ("tag")) nil [36932 38454])
            ("semantic-expand-c-tag-namelist" function (:arguments ("tag")) nil [38456 42248])
            ("semantic-tag-expand-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-expand-c-tag))
                nil [42250 42395])
            ("semantic-c-classname" variable nil nil [42397 42713])
            ("semantic-analyze-split-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("name"))
                nil [42715 42929])
            ("semantic-analyze-tag-references" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "db"))
                nil [42931 44311])
            ("semantic-c-reconstitute-token" function (:arguments ("tokenpart" "declmods" "typedecl")) nil [44313 47528])
            ("semantic-c-reconstitute-template" function (:arguments ("tag" "specifier")) nil [47530 47715])
            ("semantic-c-reconstitute-function-arglist" function (:arguments ("arglist")) nil [47717 48386])
            ("semantic-format-tag-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [48426 48808])
            ("semantic-format-tag-canonical-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [48810 49192])
            ("semantic-format-tag-type" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "color"))
                nil [49194 50236])
            ("semantic-find-tags-by-scope-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("scopeprotection" "parent" "&optional" "table"))
                nil [50238 51102])
            ("semantic-tag-protection" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [51104 52677])
            ("semantic-find-tags-included" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("&optional" "table"))
                nil [52679 53244])
            ("semantic-tag-components" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [53247 53794])
            ("semantic-c-tag-template" function (:arguments ("tag")) nil [53796 53933])
            ("semantic-c-tag-template-specifier" function (:arguments ("tag")) nil [53935 54102])
            ("semantic-c-template-string-body" function (:arguments ("templatespec")) nil [54104 54461])
            ("semantic-c-template-string" function (:arguments ("token" "parent" "color")) nil [54463 55255])
            ("semantic-format-tag-concise-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [55257 55694])
            ("semantic-format-tag-uml-prototype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("token" "&optional" "parent" "color"))
                nil [55696 56110])
            ("semantic-tag-abstract-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [56112 57195])
            ("semantic-c-dereference-typedef" function (:arguments ("type" "scope" "type-declaration")) nil [57197 58065])
            ("semantic-c--instantiate-template" function (:arguments ("tag" "def-list" "spec-list")) nil [58067 58640])
            ("semantic-c--template-name-1" function (:arguments ("spec-list")) nil [58642 59006])
            ("semantic-c--template-name" function (:arguments ("type" "spec-list")) nil [59008 59300])
            ("semantic-c-dereference-template" function (:arguments ("type" "scope" "type-declaration")) nil [59302 60218])
            ("semantic-c-dereference-member-of" function (:arguments ("type" "scope" "type-declaration")) nil [60273 60912])
            ("semantic-c-dereference-namespace" function (:arguments ("type" "scope" "type-declaration")) nil [61149 63053])
            ("semantic-c-dereference-namespace-alias" function (:arguments ("type" "namespace")) nil [63055 64306])
            ("semantic-c-check-type-namespace-using" function (:arguments ("type" "namespace")) nil [64391 66337])
            ("semantic-analyze-dereference-metatype" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type" "scope" "&optional" "type-declaration"))
                nil [66340 67515])
            ("semantic-analyze-type-constants" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("type"))
                nil [67517 67824])
            ("semantic-analyze-unsplit-name" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("namelist"))
                nil [67826 68003])
            ("semantic-ctxt-scoped-types" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [68005 69843])
            ("semantic-ctxt-imported-packages" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [69845 70710])
            ("semanticdb-expand-nested-tag" function
               (:parent "c++-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [70712 71605])
            ("semanticdb-find-table-for-include" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("includetag" "&optional" "table"))
                nil [71607 73790])
            ("semantic-get-local-variables" function
               (:parent "c++-mode"
                :override-function-flag t)
                nil [73793 74464])
            ("semantic-idle-summary-current-symbol-info" function
               (:parent "c-mode"
                :override-function-flag t)
                nil [74466 75239])
            ("semantic--tag-similar-names-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2" "blankok"))
                nil [75241 75592])
            ("semantic--tag-similar-types-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("tag1" "tag2"))
                nil [75594 76576])
            ("semantic--tag-attribute-similar-p" function
               (:parent "c-mode"
                :override-function-flag t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [76579 77008])
            ("semantic-orphaned-member-metaparent-type" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value "struct")
                nil [77010 77166])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Functions") (include . "Includes"))))
                nil [77168 77399])
            ("semantic-symbol->name-assoc-list-for-type-parts" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Attributes") (function . "Methods") (label . "Labels"))))
                nil [77401 77663])
            ("imenu-create-index-function" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [77665 77780])
            ("semantic-type-relation-separator-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote ("." "->" "::")))
                nil [77782 77943])
            ("semantic-command-separation-character" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value ";")
                nil [77945 78053])
            ("senator-step-at-tag-classes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (function variable)))
                nil [78055 78182])
            ("semantic-tag-similar-ignorable-attributes" variable
               (:parent "c-mode"
                :override-variable-flag t
                :default-value (quote (:prototype-flag :parent :typemodifiers)))
                nil [78184 78475])
            ("semantic-default-c-setup" function nil nil [78492 79030])
            ("semantic-c-add-preprocessor-symbol" function
               (:user-visible-flag t
                :arguments ("sym" "replacement"))
                nil [79047 79551])
            ("semantic-c-describe-environment" function (:user-visible-flag t) nil [79572 82905])
            ("semantic/bovine/c" package nil nil [82907 82935])
            ("semantic-c-reset-preprocessor-symbol-map" code nil nil [82937 82979]))          
      :file "c.el.gz"
      :pointmax 83143
      :fsize 22969
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 1706 . 1707) (symbol 1670 . 1687) (open-paren 1669 . 1670) (close-paren 1271 . 1272) (symbol 1227 . 1244) (open-paren 1226 . 1227)))
    (semanticdb-table "scm.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [922 941])
            ("semantic/bovine" include nil nil [942 968])
            ("semantic/bovine/scm-by" include nil nil [969 1002])
            ("semantic/format" include nil nil [1003 1029])
            ("semantic/dep" include nil nil [1030 1053])
            ("defcustom-mode-local-semantic-dependency-system-include-path" code nil nil [1066 1344])
            ("semantic-format-tag-prototype" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [1346 1762])
            ("semantic-documentation-for-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [1764 2062])
            ("semantic-insert-foreign-tag" function
               (:parent "scheme-mode"
                :override-function-flag t
                :arguments ("tag" "tagfile"))
                nil [2064 2393])
            ("define-lex-regex-analyzer" code nil nil [2436 2781])
            ("semantic-scheme-lexer" function (:lexical-analyzer-flag t) nil [2784 3283])
            ("semantic-default-scheme-setup" function nil nil [3300 3976])
            ("semantic/bovine/scm" package nil nil [3978 4008]))          
      :file "scm.el.gz"
      :pointmax 4176
      :fsize 1739
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "el.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [912 931])
            ("semantic/bovine" include nil nil [932 958])
            ("semantic/db-el" include nil nil [959 984])
            ("find-func" include nil nil [985 1005])
            ("semantic/ctxt" include nil nil [1007 1031])
            ("semantic/format" include nil nil [1032 1058])
            ("thingatpt" include nil nil [1059 1079])
            ("semantic-emacs-lisp-lexer" function (:lexical-analyzer-flag t) nil [1106 1600])
            ("semantic--elisp-parse-table" variable (:default-value (\` ((bovine-toplevel (semantic-list (\, (lambda (vals start end) (let ((tag (semantic-elisp-use-read (car vals)))) (cond ((and (listp tag) (semantic-tag-p (car tag))) (nreverse tag)) ((semantic--tag-expanded-p tag) tag) (t (append tag (list start end)))))))))))) nil [1617 2449])
            ("semantic-elisp-desymbolify" function (:arguments ("arglist")) nil [2451 2874])
            ("semantic-elisp-desymbolify-args" function (:arguments ("arglist")) nil [2876 3126])
            ("semantic-elisp-clos-slot-property-string" function (:arguments ("slot" "property")) nil [3128 3483])
            ("semantic-elisp-clos-args-to-semantic" function (:arguments ("partlist")) nil [3485 4438])
            ("semantic-elisp-form-to-doc-string" function (:arguments ("form")) nil [4440 4821])
            ("semantic-elisp-store-documentation-in-tag" variable (:user-visible-flag t) nil [4823 4945])
            ("semantic-elisp-do-doc" function (:arguments ("str")) nil [4947 5139])
            ("semantic-elisp-setup-form-parser" function (:arguments ("parser" "symbols")) nil [5141 5750])
            ("put" code nil nil [5751 5814])
            ("semantic-elisp-reuse-form-parser" function (:arguments ("symbol" "symbols")) nil [5816 6345])
            ("semantic-elisp-use-read" function (:arguments ("sl")) nil [6347 7100])
            ("semantic-elisp-setup-form-parser" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7123 7362])
            ("eval-and-compile" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7364 7783])
            ("defun" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [7785 8363])
            ("defvar" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8365 8895])
            ("defface" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [8897 9358])
            ("defimage" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9361 9837])
            ("defgroup" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [9840 10189])
            ("autoload" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10192 10548])
            ("defmethod" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [10550 11221])
            ("defadvice" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11223 11438])
            ("defclass" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [11440 12025])
            ("defstruct" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12027 12516])
            ("define-lex" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12518 12780])
            ("define-mode-overload-implementation" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [12782 13211])
            ("defvar-mode-local" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13213 13577])
            ("require" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13579 13895])
            ("provide" function
               (:form-parser t
                :arguments ("form" "start" "end"))
                nil [13897 14189])
            ("semantic-dependency-tag-file" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [14210 15111])
            ("semantic-emacs-lisp-overridable-doc" function (:arguments ("tag")) nil [15132 15594])
            ("semantic-emacs-lisp-obsoleted-doc" function (:arguments ("tag")) nil [15596 16228])
            ("semantic-documentation-for-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "nosnarf"))
                nil [16230 17736])
            ("semantic-tag-include-filename" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [17758 18081])
            ("semantic-insert-foreign-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [18083 18397])
            ("semantic-tag-protection" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [18399 19052])
            ("semantic-tag-static-p" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent"))
                nil [19054 19363])
            ("semantic-up-context" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "bounds-type"))
                nil [19504 20178])
            ("semantic-ctxt-current-function" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point" "same-as-symbol-return"))
                nil [20181 21422])
            ("semantic-get-local-variables" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [21425 23002])
            ("semantic-end-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23004 23247])
            ("semantic-beginning-of-command" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t)
                nil [23249 23546])
            ("semantic-ctxt-current-symbol" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23548 23825])
            ("semantic-ctxt-current-assignment" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [23828 25210])
            ("semantic-ctxt-current-argument" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25212 25676])
            ("semantic-ctxt-current-class-list" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [25678 26420])
            ("semantic-format-tag-abbreviate" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26440 26832])
            ("semantic-format-tag-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [26834 27648])
            ("semantic-format-tag-concise-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27650 27937])
            ("semantic-format-tag-uml-prototype" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [27939 28218])
            ("semantic-ia-insert-tag" function
               (:parent "emacs-lisp-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [28239 28669])
            ("semantic-lex-analyzer" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-emacs-lisp-lexer))
                nil [28705 28791])
            ("semantic--parse-table" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value semantic--elisp-parse-table)
                nil [28793 28880])
            ("semantic-function-argument-separator" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28882 28960])
            ("semantic-function-argument-separation-character" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value " ")
                nil [28962 29051])
            ("semantic-symbol->name-assoc-list" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote ((type . "Types") (variable . "Variables") (function . "Defuns") (include . "Requires") (package . "Provides"))))
                nil [29053 29268])
            ("imenu-create-index-function" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote semantic-create-imenu-index))
                nil [29270 29364])
            ("semantic-stickyfunc-sticky-classes" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (function type variable)))
                nil [29366 29542])
            ("define-child-mode" code nil nil [29544 29662])
            ("semantic-default-elisp-setup" function nil nil [29679 29872])
            ("add-hook" code nil nil [29874 29936])
            ("add-hook" code nil nil [30106 30162])
            ("eval-after-load" code nil nil [30164 30227])
            ("semantic/bovine/el" package nil nil [30230 30259]))          
      :file "el.el.gz"
      :pointmax 30425
      :fsize 8163
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!cedet!semantic!bovine!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
