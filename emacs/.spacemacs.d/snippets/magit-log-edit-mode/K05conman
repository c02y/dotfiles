;; Object linux-3.0.8/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "linux-3.0.8/"
  :tables (list 
   (semanticdb-table "Makefile"
    :major-mode 'makefile-gmake-mode
    :tags 
        '( ("VERSION" variable (:default-value ("3")) nil [1 13])
            ("PATCHLEVEL" variable (:default-value ("0")) nil [13 28])
            ("SUBLEVEL" variable (:default-value ("8")) nil [28 41])
            ("EXTRAVERSION" variable nil nil [41 56])
            ("NAME" variable (:default-value ("Sneaky" "Weasel")) nil [56 77])
            ("MAKEFLAGS" variable (:default-value ("-rR" "--no-print-directory")) nil [481 519])
            ("LC_COLLATE" variable (:default-value ("C")) nil [577 590])
            ("LC_NUMERIC" variable (:default-value ("C")) nil [590 603])
            ("PHONY" variable (:default-value ("_all")) nil [3426 3440])
            ("_all" function nil nil [3440 3446])
            ("$(CURDIR)" function (:arguments (";")) nil [3487 3518])
            ("Makefile" function (:arguments (";")) nil [3487 3518])
            ("saved-output" variable (:default-value ("$(KBUILD_OUTPUT)")) nil [3670 3703])
            ("KBUILD_OUTPUT" variable (:default-value ("$(shell cd $(KBUILD_OUTPUT) && /bin/pwd)")) nil [3703 3761])
            ("PHONY" variable (:default-value ("$(MAKECMDGOALS)" "sub-make")) nil [3853 3887])
            ("$(filter-out _all sub-make $(CURDIR)/Makefile, $(MAKECMDGOALS))" function (:arguments ("sub-make")) nil [3888 3975])
            ("_all" function (:arguments ("sub-make")) nil [3888 3975])
            ("sub-make" function (:arguments ("FORCE")) nil [3976 4178])
            ("skip-makefile" variable (:default-value ("1")) nil [4226 4245])
            ("PHONY" variable (:default-value ("all")) nil [4519 4532])
            ("_all" function (:arguments ("all")) nil [4557 4567])
            ("_all" function (:arguments ("modules")) nil [4572 4586])
            ("srctree" variable (:default-value ("$(if $(KBUILD_SRC),$(KBUILD_SRC),$(CURDIR))")) nil [4593 4649])
            ("objtree" variable (:default-value ("$(CURDIR)")) nil [4649 4671])
            ("src" variable (:default-value ("$(srctree)")) nil [4671 4690])
            ("obj" variable (:default-value ("$(objtree)")) nil [4690 4709])
            ("VPATH" variable (:default-value ("$(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))")) nil [4710 4771])
            ("SUBARCH" variable (:default-value ("$(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \\
				  -e s/arm.*/arm/ -e s/sa110/arm/ \\
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \\
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \\
				  -e s/sh[234].*/sh/ )")) nil [5140 5372])
            ("export" function (:arguments ("=" "$(SUBARCH)")) nil [6414 6452])
            ("KBUILD_BUILDHOST" function (:arguments ("=" "$(SUBARCH)")) nil [6414 6452])
            ("UTS_MACHINE" variable (:default-value ("$(ARCH)")) nil [6533 6557])
            ("SRCARCH" variable (:default-value ("$(ARCH)")) nil [6557 6577])
            ("hdr-arch" variable (:default-value ("$(SRCARCH)")) nil [7120 7144])
            ("CONFIG_SHELL" variable (:default-value ("$(shell if [ -x \"$$BASH\" ]; then echo $$BASH; \\
	  else if [ -x /bin/bash ]; then echo /bin/bash; \\
	  else echo sh; fi ; fi)")) nil [7274 7416])
            ("HOSTCC" variable (:default-value ("gcc")) nil [7417 7436])
            ("HOSTCXX" variable (:default-value ("g++")) nil [7436 7455])
            ("HOSTCFLAGS" variable (:default-value ("-Wall" "-Wmissing-prototypes" "-Wstrict-prototypes" "-O2" "-fomit-frame-pointer")) nil [7455 7542])
            ("HOSTCXXFLAGS" variable (:default-value ("-O2")) nil [7542 7561])
            ("KBUILD_MODULES" variable nil nil [7647 7665])
            ("KBUILD_BUILTIN" variable (:default-value ("1")) nil [7665 7685])
            ("MAKEFLAGS" variable (:default-value ("--include-dir=$(srctree)")) nil [9651 9689])
            ("$(srctree)" function (:arguments (";")) nil [9758 9795])
            ("$(srctree)/scripts/Kbuild.include" include nil nil [9795 9837])
            ("AS" variable (:default-value ("$(CROSS_COMPILE)as")) nil [9869 9894])
            ("LD" variable (:default-value ("$(CROSS_COMPILE)ld")) nil [9894 9919])
            ("CC" variable (:default-value ("$(CROSS_COMPILE)gcc")) nil [9919 9945])
            ("CPP" variable (:default-value ("$(CC)" "-E")) nil [9945 9961])
            ("AR" variable (:default-value ("$(CROSS_COMPILE)ar")) nil [9961 9986])
            ("NM" variable (:default-value ("$(CROSS_COMPILE)nm")) nil [9986 10011])
            ("STRIP" variable (:default-value ("$(CROSS_COMPILE)strip")) nil [10011 10042])
            ("OBJCOPY" variable (:default-value ("$(CROSS_COMPILE)objcopy")) nil [10042 10077])
            ("OBJDUMP" variable (:default-value ("$(CROSS_COMPILE)objdump")) nil [10077 10112])
            ("AWK" variable (:default-value ("awk")) nil [10112 10123])
            ("GENKSYMS" variable (:default-value ("scripts/genksyms/genksyms")) nil [10123 10160])
            ("INSTALLKERNEL" variable (:default-value ("installkernel")) nil [10160 10192])
            ("DEPMOD" variable (:default-value ("/sbin/depmod")) nil [10192 10215])
            ("KALLSYMS" variable (:default-value ("scripts/kallsyms")) nil [10215 10243])
            ("PERL" variable (:default-value ("perl")) nil [10243 10256])
            ("CHECK" variable (:default-value ("sparse")) nil [10256 10272])
            ("CHECKFLAGS" variable (:default-value ("-D__linux__" "-Dlinux" "-D__STDC__" "-Dunix" "-D__unix__" "-Wbitwise" "-Wno-return-void" "$(CF)")) nil [10273 10379])
            ("CFLAGS_MODULE" variable nil nil [10379 10397])
            ("AFLAGS_MODULE" variable nil nil [10397 10415])
            ("LDFLAGS_MODULE" variable nil nil [10415 10433])
            ("CFLAGS_KERNEL" variable nil nil [10433 10449])
            ("AFLAGS_KERNEL" variable nil nil [10449 10465])
            ("CFLAGS_GCOV" variable (:default-value ("-fprofile-arcs" "-ftest-coverage")) nil [10465 10510])
            ("LINUXINCLUDE" variable (:default-value ("-I$(srctree)/arch/$(hdr-arch)/include" "-Iarch/$(hdr-arch)/include/generated" "-Iinclude" "$(if $(KBUILD_SRC), -I$(srctree)/include)" "-include" "include/generated/autoconf.h")) nil [10624 10871])
            ("KBUILD_CPPFLAGS" variable (:default-value ("-D__KERNEL__")) nil [10872 10904])
            ("KBUILD_CFLAGS" variable (:default-value ("-Wall" "-Wundef" "-Wstrict-prototypes" "-Wno-trigraphs" "-fno-strict-aliasing" "-fno-common" "-Werror-implicit-function-declaration" "-Wno-format-security" "-fno-delete-null-pointer-checks")) nil [10905 11125])
            ("KBUILD_AFLAGS_KERNEL" variable nil nil [11125 11149])
            ("KBUILD_CFLAGS_KERNEL" variable nil nil [11149 11173])
            ("KBUILD_AFLAGS" variable (:default-value ("-D__ASSEMBLY__")) nil [11173 11207])
            ("KBUILD_AFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [11207 11241])
            ("KBUILD_CFLAGS_MODULE" variable (:default-value ("-DMODULE")) nil [11241 11275])
            ("KBUILD_LDFLAGS_MODULE" variable (:default-value ("-T" "$(srctree)/scripts/module-common.lds")) nil [11275 11340])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat include/config/kernel.release 2> /dev/null)")) nil [11412 11484])
            ("KERNELVERSION" variable (:default-value ("$(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)")) nil [11484 11590])
            ("export" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [12357 12444])
            ("MODVERDIR" function (:arguments ("=" "$(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions")) nil [12357 12444])
            ("RCS_FIND_IGNORE" variable (:default-value ("\\( -name SCCS -o -name BitKeeper -o -name .svn -o -name CVS -o -name .pc -o -name .hg -o -name .git \\)" "-prune" "-o")) nil [12487 12619])
            ("export" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [12619 12751])
            ("RCS_TAR_IGNORE" function (:arguments ("=" "--exclude" "SCCS" "--exclude" "BitKeeper" "--exclude" ".svn" "--exclude" "CVS" "--exclude" ".pc" "--exclude" ".hg" "--exclude" ".git")) nil [12619 12751])
            ("PHONY" variable (:default-value ("scripts_basic")) nil [12922 12945])
            ("scripts_basic" function nil nil [12945 13031])
            ("scripts/basic/%" function (:arguments ("scripts_basic" ";")) nil [13098 13131])
            ("PHONY" variable (:default-value ("outputmakefile")) nil [13132 13156])
            ("outputmakefile" function nil nil [13321 13337])
            ("PHONY" variable (:default-value ("asm-generic")) nil [13554 13575])
            ("asm-generic" function nil nil [13575 13701])
            ("no-dot-config-targets" variable (:default-value ("clean" "mrproper" "distclean" "cscope" "gtags" "TAGS" "tags" "help" "%docs" "check%" "coccicheck" "include/linux/version.h" "headers_%" "kernelversion" "%src-pkg")) nil [14134 14311])
            ("config-targets" variable (:default-value ("0")) nil [14312 14332])
            ("mixed-targets" variable (:default-value ("0")) nil [14332 14352])
            ("dot-config" variable (:default-value ("1")) nil [14352 14372])
            ("%" function (:arguments ("FORCE")) nil [15000 15052])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [15449 15493])
            ("config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [15533 15660])
            ("%config" function (:arguments ("scripts_basic" "outputmakefile" "FORCE")) nil [15661 15789])
            ("PHONY" variable (:default-value ("scripts")) nil [16166 16183])
            ("scripts" function (:arguments ("scripts_basic" "include/config/auto.conf" "include/config/tristate.conf")) nil [16183 16287])
            ("init-y" variable (:default-value ("init/")) nil [16351 16368])
            ("drivers-y" variable (:default-value ("drivers/" "sound/" "firmware/")) nil [16368 16407])
            ("net-y" variable (:default-value ("net/")) nil [16407 16422])
            ("libs-y" variable (:default-value ("lib/")) nil [16422 16438])
            ("core-y" variable (:default-value ("usr/")) nil [16438 16454])
            ("$(KCONFIG_CONFIG)" function (:arguments (";")) nil [16781 16831])
            ("include/config/auto.conf.cmd" function (:arguments (";")) nil [16781 16831])
            ("include/config/%.conf" function (:arguments ("$(KCONFIG_CONFIG)" "include/config/auto.conf.cmd")) nil [17089 17211])
            ("PHONY" variable (:default-value ("include/config/auto.conf")) nil [17375 17409])
            ("include/config/auto.conf" function nil nil [17410 17743])
            ("include/config/auto.conf" function (:arguments (";")) nil [17824 17852])
            ("all" function (:arguments ("vmlinux")) nil [18106 18119])
            ("KBUILD_CFLAGS" variable (:default-value ("-Os")) nil [18154 18175])
            ("KBUILD_CFLAGS" variable (:default-value ("-O2")) nil [18180 18201])
            ("$(srctree)/arch/$(SRCARCH)/Makefile" include nil nil [18208 18252])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})")) nil [18284 18360])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-stack-protector)")) nil [18458 18515])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, unused-but-set-variable)")) nil [18649 18718])
            ("KBUILD_CFLAGS" variable (:default-value ("-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")) nil [18746 18815])
            ("KBUILD_CFLAGS" variable (:default-value ("-fomit-frame-pointer")) nil [19183 19221])
            ("KBUILD_CFLAGS" variable (:default-value ("-g")) nil [19258 19278])
            ("KBUILD_AFLAGS" variable (:default-value ("-gdwarf-2")) nil [19278 19305])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -femit-struct-debug-baseonly)")) nil [19344 19410])
            ("KBUILD_CFLAGS" variable (:default-value ("-pg")) nil [19446 19467])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option, -fno-inline-functions-called-once)")) nil [19697 19767])
            ("NOSTDINC_FLAGS" variable (:default-value ("-nostdinc" "-isystem" "$(shell $(CC) -print-file-name=include)")) nil [19851 19928])
            ("CHECKFLAGS" variable (:default-value ("$(NOSTDINC_FLAGS)")) nil [19928 19964])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-Wdeclaration-after-statement,)")) nil [20010 20076])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-disable-warning, pointer-sign)")) nil [20133 20191])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fno-strict-overflow)")) nil [20259 20315])
            ("KBUILD_CFLAGS" variable (:default-value ("$(call cc-option,-fconserve-stack)")) nil [20346 20400])
            ("KBUILD_ARFLAGS" variable (:default-value ("$(call ar-option,D)")) nil [20449 20487])
            ("warn-assign" variable (:default-value ("$(warning \"WARNING: Appending $$K$(1) ($(K$(1))) from $(origin K$(1)) to kernel $$$(1)\")")) nil [20729 20834])
            ("LDFLAGS_BUILD_ID" variable (:default-value ("$(patsubst -Wl$(comma)%,%,\\
			      $(call cc-ldoption, -Wl$(comma)--build-id,))")) nil [21168 21269])
            ("KBUILD_LDFLAGS_MODULE" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [21269 21314])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(LDFLAGS_BUILD_ID)")) nil [21314 21353])
            ("LDFLAGS_vmlinux" variable (:default-value ("$(call ld-option, -X,)")) nil [21388 21430])
            ("MODLIB" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)")) nil [22076 22134])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "--strip-debug")) nil [22477 22516])
            ("mod_strip_cmd" variable (:default-value ("$(STRIP)" "$(INSTALL_MOD_STRIP)")) nil [22521 22567])
            ("mod_strip_cmd" variable (:default-value ("true")) nil [22600 22621])
            ("core-y" variable (:default-value ("kernel/" "mm/" "fs/" "ipc/" "security/" "crypto/" "block/")) nil [22695 22752])
            ("vmlinux-dirs" variable (:default-value ("$(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \\
		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \\
		     $(net-y) $(net-m) $(libs-y) $(libs-m)))")) nil [22753 22922])
            ("vmlinux-alldirs" variable (:default-value ("$(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \\
		     $(init-n) $(init-) \\
		     $(core-n) $(core-) $(drivers-n) $(drivers-) \\
		     $(net-n)  $(net-)  $(libs-n)    $(libs-))))")) nil [22923 23128])
            ("init-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(init-y))")) nil [23129 23180])
            ("core-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(core-y))")) nil [23180 23231])
            ("drivers-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(drivers-y))")) nil [23231 23287])
            ("net-y" variable (:default-value ("$(patsubst %/, %/built-in.o, $(net-y))")) nil [23287 23336])
            ("libs-y1" variable (:default-value ("$(patsubst %/, %/lib.a, $(libs-y))")) nil [23336 23383])
            ("libs-y2" variable (:default-value ("$(patsubst %/, %/built-in.o, $(libs-y))")) nil [23383 23435])
            ("libs-y" variable (:default-value ("$(libs-y1)" "$(libs-y2)")) nil [23435 23468])
            ("vmlinux-init" variable (:default-value ("$(head-y)" "$(init-y)")) nil [24477 24513])
            ("vmlinux-main" variable (:default-value ("$(core-y)" "$(libs-y)" "$(drivers-y)" "$(net-y)")) nil [24513 24571])
            ("vmlinux-all" variable (:default-value ("$(vmlinux-init)" "$(vmlinux-main)")) nil [24571 24619])
            ("vmlinux-lds" variable (:default-value ("arch/$(SRCARCH)/kernel/vmlinux.lds")) nil [24619 24670])
            ("export" function (:arguments ("=" "$(vmlinux-all)")) nil [24670 24715])
            ("KBUILD_VMLINUX_OBJS" function (:arguments ("=" "$(vmlinux-all)")) nil [24670 24715])
            ("quiet_cmd_vmlinux_version" variable (:default-value ("GEN" ".version")) nil [25173 25218])
            ("quiet_cmd_sysmap" variable (:default-value ("SYSMAP")) nil [25509 25535])
            ("last_kallsyms" variable (:default-value ("2")) nil [27476 27495])
            ("last_kallsyms" variable (:default-value ("3")) nil [27555 27574])
            ("kallsyms.o" variable (:default-value (".tmp_kallsyms$(last_kallsyms).o")) nil [27587 27633])
            ("cmd_ksym_ld" variable (:default-value ("$(cmd_vmlinux__)")) nil [28339 28370])
            ("quiet_cmd_kallsyms" variable (:default-value ("KSYM" "$@")) nil [28555 28587])
            (".tmp_kallsyms1.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [28706 28812])
            (".tmp_kallsyms2.o" function (:arguments ("%.o:" "%.S" "scripts" "FORCE")) nil [28706 28812])
            (".tmp_kallsyms%.S" function (:arguments (".tmp_vmlinux%" "$(KALLSYMS)")) nil [28813 28879])
            (".tmp_vmlinux1" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" "FORCE")) nil [28956 29040])
            (".tmp_vmlinux2" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" ".tmp_kallsyms1.o" "FORCE")) nil [29041 29139])
            (".tmp_vmlinux3" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-all)" ".tmp_kallsyms2.o" "FORCE")) nil [29140 29238])
            ("$(KALLSYMS)" function (:arguments ("scripts" ";")) nil [29297 29320])
            ("debug_kallsyms" function (:arguments (".tmp_map$(last_kallsyms)")) nil [29382 29423])
            (".tmp_map%" function (:arguments (".tmp_vmlinux%" "FORCE")) nil [29424 29540])
            (".tmp_map3" function (:arguments (".tmp_map2")) nil [29541 29562])
            (".tmp_map2" function (:arguments (".tmp_map1")) nil [29563 29584])
            ("quiet_cmd_vmlinux-modpost" variable (:default-value ("LD" "$@")) nil [29738 29777])
            ("vmlinux" function (:arguments ("$(vmlinux-lds)" "$(vmlinux-init)" "$(vmlinux-main)" "vmlinux.o" "$(kallsyms.o)" "FORCE")) nil [30229 30315])
            (".tmp_vmlinux1" function (:arguments ("vmlinux.o")) nil [30693 30718])
            ("modpost-init" variable (:default-value ("$(filter-out init/built-in.o, $(vmlinux-init))")) nil [30725 30788])
            ("vmlinux.o" function (:arguments ("$(modpost-init)" "$(vmlinux-main)" "FORCE")) nil [30788 30878])
            ("$(sort $(vmlinux-init) $(vmlinux-main))" function (:arguments ("$(vmlinux-dirs)" ";")) nil [30970 31044])
            ("$(vmlinux-lds)" function (:arguments ("$(vmlinux-dirs)" ";")) nil [30970 31044])
            ("PHONY" variable (:default-value ("$(vmlinux-dirs)")) nil [31329 31354])
            ("$(vmlinux-dirs)" function (:arguments ("prepare" "scripts")) nil [31354 31412])
            ("include/config/kernel.release" function (:arguments ("include/config/auto.conf" "FORCE")) nil [31480 31655])
            ("PHONY" variable (:default-value ("prepare" "archprepare" "prepare0" "prepare1" "prepare2" "prepare3")) nil [32001 32066])
            ("prepare3" function (:arguments ("include/config/kernel.release")) nil [32234 32274])
            ("prepare2" function (:arguments ("prepare3" "outputmakefile" "asm-generic")) nil [32628 32674])
            ("prepare1" function (:arguments ("prepare2" "include/linux/version.h" "include/generated/utsrelease.h" "include/config/auto.conf")) nil [32675 32815])
            ("archprepare" function (:arguments ("prepare1" "scripts_basic")) nil [32816 32852])
            ("prepare0" function (:arguments ("archprepare" "FORCE")) nil [32853 32946])
            ("prepare" function (:arguments ("prepare0")) nil [32969 32987])
            ("uts_len" variable (:default-value ("64")) nil [33225 33239])
            ("include/linux/version.h" function (:arguments ("$(srctree)/Makefile" "FORCE")) nil [33851 33929])
            ("include/generated/utsrelease.h" function (:arguments ("include/config/kernel.release" "FORCE")) nil [33930 34028])
            ("PHONY" variable (:default-value ("headerdep")) nil [34029 34048])
            ("headerdep" function nil nil [34048 34178])
            ("PHONY" variable (:default-value ("depend" "dep")) nil [34258 34278])
            ("depend" function nil nil [34278 34340])
            ("dep" function nil nil [34278 34340])
            ("INSTALL_FW_PATH" variable (:default-value ("$(INSTALL_MOD_PATH)/lib/firmware")) nil [34438 34487])
            ("PHONY" variable (:default-value ("firmware_install")) nil [34511 34537])
            ("firmware_install" function (:arguments ("FORCE")) nil [34537 34669])
            ("hdr-inst" variable (:default-value ("-rR" "-f" "$(srctree)/scripts/Makefile.headersinst" "obj")) nil [34848 34911])
            ("hdr-dst" variable (:default-value ("$(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)")) nil [34970 35050])
            ("PHONY" variable (:default-value ("__headers")) nil [35051 35070])
            ("__headers" function (:arguments ("include/linux/version.h" "scripts_basic" "asm-generic" "FORCE")) nil [35070 35181])
            ("PHONY" variable (:default-value ("headers_install_all")) nil [35182 35211])
            ("headers_install_all" function nil nil [35211 35291])
            ("PHONY" variable (:default-value ("headers_install")) nil [35292 35317])
            ("headers_install" function (:arguments ("__headers")) nil [35317 35577])
            ("PHONY" variable (:default-value ("headers_check_all")) nil [35578 35605])
            ("headers_check_all" function (:arguments ("headers_install_all")) nil [35605 35701])
            ("PHONY" variable (:default-value ("headers_check")) nil [35702 35725])
            ("headers_check" function (:arguments ("headers_install")) nil [35725 35876])
            ("all" function (:arguments ("modules")) nil [36025 36038])
            ("PHONY" variable (:default-value ("modules")) nil [36232 36249])
            ("modules" function (:arguments ("$(vmlinux-dirs)" "$(if $(KBUILD_BUILTIN),vmlinux)" "modules.builtin")) nil [36249 36591])
            ("modules.builtin" function (:arguments ("$(vmlinux-dirs:%=%/modules.builtin)")) nil [36592 36701])
            ("%/modules.builtin" function (:arguments ("include/config/auto.conf")) nil [36702 36776])
            ("PHONY" variable (:default-value ("modules_prepare")) nil [36824 36849])
            ("modules_prepare" function (:arguments ("prepare" "scripts")) nil [36849 36882])
            ("PHONY" variable (:default-value ("modules_install")) nil [36911 36936])
            ("modules_install" function (:arguments ("_modinst_" "_modinst_post")) nil [36936 36977])
            ("PHONY" variable (:default-value ("_modinst_")) nil [36978 36997])
            ("_modinst_" function nil nil [36997 37387])
            ("PHONY" variable (:default-value ("_modinst_post")) nil [37561 37584])
            ("_modinst_post" function (:arguments ("_modinst_")) nil [37584 37706])
            ("modules" function (:arguments ("FORCE")) nil [37834 38074])
            ("modules_install" function (:arguments ("FORCE")) nil [37834 38074])
            ("CLEAN_DIRS" variable (:default-value ("$(MODVERDIR)")) nil [38443 38471])
            ("CLEAN_FILES" variable (:default-value ("vmlinux" "System.map" ".tmp_kallsyms*" ".tmp_version" ".tmp_vmlinux*" ".tmp_System.map")) nil [38471 38581])
            ("MRPROPER_DIRS" variable (:default-value ("include/config" "usr/include" "include/generated" "arch/*/include/generated")) nil [38633 38750])
            ("MRPROPER_FILES" variable (:default-value (".config" ".config.old" ".version" ".old_version" "include/linux/version.h" "Module.symvers" "tags" "TAGS" "cscope*" "GPATH" "GTAGS" "GRTAGS" "GSYMS")) nil [38750 38960])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(CLEAN_DIRS)")) nil [39029 39062])
            ("clean" function (:arguments ("rm-files" ":=" "$(CLEAN_FILES)")) nil [39062 39096])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_, . $(vmlinux-alldirs) Documentation)")) nil [39096 39172])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean" "archclean")) nil [39173 39212])
            ("$(clean-dirs)" function nil nil [39212 39275])
            ("clean" function (:arguments ("archclean")) nil [39276 39293])
            ("mrproper" function (:arguments ("rm-dirs" ":=" "$(wildcard $(MRPROPER_DIRS))")) nil [39355 39406])
            ("mrproper" function (:arguments ("rm-files" ":=" "$(wildcard $(MRPROPER_FILES))")) nil [39406 39458])
            ("mrproper-dirs" variable (:default-value ("$(addprefix _mrproper_,Documentation/DocBook scripts)")) nil [39458 39534])
            ("PHONY" variable (:default-value ("$(mrproper-dirs)" "mrproper" "archmrproper")) nil [39535 39583])
            ("$(mrproper-dirs)" function nil nil [39583 39652])
            ("mrproper" function (:arguments ("clean" "archmrproper" "$(mrproper-dirs)")) nil [39653 39740])
            ("PHONY" variable (:default-value ("distclean")) nil [39755 39774])
            ("distclean" function (:arguments ("mrproper")) nil [39775 40061])
            ("package-dir" variable (:default-value ("$(srctree)/scripts/package")) nil [40231 40273])
            ("%src-pkg" function (:arguments ("FORCE")) nil [40274 40330])
            ("%pkg" function (:arguments ("include/config/kernel.release" "FORCE")) nil [40330 40412])
            ("rpm" function (:arguments ("include/config/kernel.release" "FORCE")) nil [40412 40493])
            ("boards" variable (:default-value ("$(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)")) nil [40624 40693])
            ("boards" variable (:default-value ("$(notdir $(boards))")) nil [40693 40723])
            ("board-dirs" variable (:default-value ("$(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))")) nil [40723 40805])
            ("board-dirs" variable (:default-value ("$(sort $(notdir $(board-dirs:/=)))")) nil [40805 40854])
            ("help" function nil nil [40855 43817])
            ("help-board-dirs" variable (:default-value ("$(addprefix help-,$(board-dirs))")) nil [44782 44834])
            ("help-boards" function (:arguments ("$(help-board-dirs)")) nil [44835 44867])
            ("boards-per-dir" variable (:default-value ("$(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig))")) nil [44868 44957])
            ("$(help-board-dirs)" function (:arguments ("help-%:")) nil [44958 45193])
            ("%docs" function (:arguments ("scripts_basic" "FORCE")) nil [45297 45415])
            ("KBUILD_MODULES" variable (:default-value ("1")) nil [46198 46218])
            ("PHONY" variable (:default-value ("crmodverdir")) nil [46218 46239])
            ("crmodverdir" function nil nil [46239 46272])
            ("PHONY" variable (:default-value ("$(objtree)/Module.symvers")) nil [46273 46308])
            ("$(objtree)" function nil nil [46308 46548])
            ("module-dirs" variable (:default-value ("$(addprefix _module_,$(KBUILD_EXTMOD))")) nil [46549 46603])
            ("PHONY" variable (:default-value ("$(module-dirs)" "modules")) nil [46603 46635])
            ("$(module-dirs)" function (:arguments ("crmodverdir" "$(objtree)/Module.symvers")) nil [46635 46738])
            ("modules" function (:arguments ("$(module-dirs)")) nil [46739 46858])
            ("PHONY" variable (:default-value ("modules_install")) nil [46859 46884])
            ("modules_install" function (:arguments ("_emodinst_" "_emodinst_post")) nil [46884 46927])
            ("install-dir" variable (:default-value ("$(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)")) nil [46928 46993])
            ("PHONY" variable (:default-value ("_emodinst_")) nil [46993 47013])
            ("_emodinst_" function nil nil [47013 47116])
            ("PHONY" variable (:default-value ("_emodinst_post")) nil [47117 47141])
            ("_emodinst_post" function (:arguments ("_emodinst_")) nil [47141 47188])
            ("clean-dirs" variable (:default-value ("$(addprefix _clean_,$(KBUILD_EXTMOD))")) nil [47189 47241])
            ("PHONY" variable (:default-value ("$(clean-dirs)" "clean")) nil [47242 47271])
            ("$(clean-dirs)" function nil nil [47271 47334])
            ("clean" function (:arguments ("rm-dirs" ":=" "$(MODVERDIR)")) nil [47335 47366])
            ("clean" function (:arguments ("rm-files" ":=" "$(KBUILD_EXTMOD)/Module.symvers")) nil [47366 47417])
            ("help" function nil nil [47418 47740])
            ("PHONY" variable (:default-value ("prepare" "scripts")) nil [47754 47779])
            ("prepare" function (:arguments (";")) nil [47779 47790])
            ("scripts" function (:arguments (";")) nil [47790 47801])
            ("clean" function (:arguments ("$(clean-dirs)")) nil [47824 48226])
            ("quiet_cmd_tags" variable (:default-value ("GEN" "$@")) nil [48333 48361])
            ("tags" function (:arguments ("FORCE")) nil [48425 48473])
            ("TAGS" function (:arguments ("FORCE")) nil [48425 48473])
            ("PHONY" variable (:default-value ("includecheck" "versioncheck" "coccicheck" "namespacecheck" "export_report")) nil [48603 48678])
            ("includecheck" function nil nil [48679 48832])
            ("versioncheck" function nil nil [48833 48985])
            ("coccicheck" function nil nil [48986 49041])
            ("namespacecheck" function nil nil [49042 49099])
            ("export_report" function nil nil [49100 49160])
            ("PHONY" variable (:default-value ("checkstack" "kernelrelease" "kernelversion")) nil [49229 49277])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(SUBARCH)")) nil [49544 49574])
            ("CHECKSTACK_ARCH" variable (:default-value ("$(ARCH)")) nil [49579 49606])
            ("checkstack" function nil nil [49612 49732])
            ("kernelrelease" function nil nil [49733 49839])
            ("kernelversion" function nil nil [49840 49879])
            ("%.s" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [50534 50626])
            ("%.i" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [50626 50718])
            ("%.o" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [50718 50810])
            ("%.lst" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [50810 50904])
            ("%.s" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [50904 50996])
            ("%.o" function (:arguments ("%.S" "prepare" "scripts" "FORCE")) nil [50996 51088])
            ("%.symtypes" function (:arguments ("%.c" "prepare" "scripts" "FORCE")) nil [51088 51187])
            ("/" function (:arguments ("prepare" "scripts" "FORCE")) nil [51198 51322])
            ("%/" function (:arguments ("prepare" "scripts" "FORCE")) nil [51322 51447])
            ("%.ko" function (:arguments ("prepare" "scripts" "FORCE")) nil [51447 51640])
            ("quiet_cmd_rmdirs" variable (:default-value ("$(if $(wildcard $(rm-dirs)),CLEAN   $(wildcard $(rm-dirs)))")) nil [51768 51847])
            ("quiet_cmd_rmfiles" variable (:default-value ("$(if $(wildcard $(rm-files)),CLEAN   $(wildcard $(rm-files)))")) nil [51885 51967])
            ("quiet_cmd_depmod" variable (:default-value ("DEPMOD" "$(KERNELRELEASE)")) nil [52071 52115])
            ("cmd_crmodverdir" variable (:default-value ("$(Q)mkdir" "-p" "$(MODVERDIR)" "$(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)")) nil [52321 52432])
            ("a_flags" variable (:default-value ("-Wp,-MD,$(depfile)" "$(KBUILD_AFLAGS)" "$(AFLAGS_KERNEL)" "$(KBUILD_AFLAGS_KERNEL)" "$(NOSTDINC_FLAGS)" "$(LINUXINCLUDE)" "$(KBUILD_CPPFLAGS)" "$(modkern_aflags)" "$(EXTRA_AFLAGS)" "$(AFLAGS_$(basetarget).o)")) nil [52433 52677])
            ("quiet_cmd_as_o_S" variable (:default-value ("AS" "$@")) nil [52678 52708])
            ("cmd_as_o_S" variable (:default-value ("$(CC)" "$(a_flags)" "-c" "-o" "$@" "$<")) nil [52708 52756])
            ("targets" variable (:default-value ("$(wildcard $(sort $(targets)))")) nil [52789 52831])
            ("cmd_files" variable (:default-value ("$(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))")) nil [52831 52918])
            ("clean" variable (:default-value ("-f" "$(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.clean" "obj")) nil [53136 53206])
            ("PHONY" variable (:default-value ("FORCE")) nil [53230 53245])
            ("FORCE" function nil nil [53245 53252]))          
    :file "Makefile"
    :pointmax 53412
    :fsize 53411
    :lastmodtime '(21468 9216 602130 211000)
    :unmatched-syntax '((semantic-list 53404 . 53411) (punctuation 53403 . 53404) (punctuation 53401 . 53402) (symbol 53395 . 53401) (bol 53395 . 53395) (ENDIF 53207 . 53212) (bol 53207 . 53207) (semantic-list 53019 . 53030) (punctuation 53018 . 53019) (INCLUDE 53010 . 53017) (bol 53008 . 53008) (punctuation 52957 . 52958) (punctuation 52955 . 52956) (semantic-list 52944 . 52955) (punctuation 52943 . 52944) (bol 52941 . 52941) (semantic-list 52211 . 52226) (punctuation 52210 . 52211) (semantic-list 52180 . 52188) (punctuation 52179 . 52180) (symbol 52160 . 52178) (semantic-list 52151 . 52160) (punctuation 52150 . 52151) (semantic-list 52135 . 52149) (punctuation 52134 . 52135) (punctuation 52132 . 52133) (symbol 52121 . 52131) (bol 52115 . 52115) (semantic-list 51994 . 52004) (punctuation 51993 . 51994) (symbol 51990 . 51992) (symbol 51987 . 51989) (punctuation 51985 . 51986) (symbol 51973 . 51984) (bol 51967 . 51967) (semantic-list 51874 . 51883) (punctuation 51873 . 51874) (symbol 51869 . 51872) (symbol 51866 . 51868) (punctuation 51864 . 51865) (symbol 51853 . 51863) (bol 51847 . 51847) (semantic-list 50485 . 50526) (punctuation 50484 . 50485) (punctuation 50482 . 50483) (symbol 50471 . 50481) (bol 50463 . 50463) (semantic-list 50431 . 50462) (punctuation 50430 . 50431) (semantic-list 50415 . 50430) (punctuation 50414 . 50415) (punctuation 50412 . 50413) (symbol 50401 . 50410) (bol 50393 . 50393) (semantic-list 50351 . 50392) (punctuation 50350 . 50351) (punctuation 50349 . 50350) (symbol 50340 . 50349) (bol 50332 . 50332) (semantic-list 50318 . 50326) (punctuation 50317 . 50318) (punctuation 50315 . 50316) (symbol 50304 . 50314) (bol 50296 . 50296) (semantic-list 50270 . 50295) (punctuation 50269 . 50270) (punctuation 50267 . 50268) (symbol 50256 . 50265) (bol 50248 . 50248) (ENDIF 49195 . 49200) (bol 49195 . 49195) (ENDIF 49161 . 49166) (bol 49161 . 49161) (punctuation 48422 . 48423) (punctuation 48421 . 48422) (symbol 48404 . 48420) (semantic-list 48395 . 48404) (punctuation 48394 . 48395) (semantic-list 48379 . 48393) (punctuation 48378 . 48379) (punctuation 48376 . 48377) (symbol 48367 . 48375) (bol 48361 . 48361) (ENDIF 47801 . 47806) (bol 47801 . 47801) (ELSE 45416 . 45420) (bol 45416 . 45416) (shell-command 44732 . 44779) (bol 44731 . 44731) (shell-command 44655 . 44730) (bol 44654 . 44654) (shell-command 44644 . 44653) (bol 44643 . 44643) (shell-command 44562 . 44642) (bol 44561 . 44561) (shell-command 44499 . 44560) (bol 44498 . 44498) (shell-command 44434 . 44497) (bol 44433 . 44433) (shell-command 44360 . 44432) (bol 44359 . 44359) (shell-command 44287 . 44358) (bol 44286 . 44286) (shell-command 44215 . 44285) (bol 44214 . 44214) (shell-command 44141 . 44213) (bol 44140 . 44140) (shell-command 44056 . 44139) (bol 44055 . 44055) (shell-command 43971 . 44054) (bol 43970 . 43970) (shell-command 43899 . 43969) (bol 43898 . 43898) (shell-command 43819 . 43897) (bol 43818 . 43818) (ENDIF 38075 . 38080) (bol 38075 . 38075) (ELSE 37707 . 37711) (bol 37707 . 37707) (symbol 34842 . 34846) (semantic-list 34833 . 34842) (punctuation 34832 . 34833) (punctuation 34830 . 34831) (symbol 34813 . 34829) (symbol 34806 . 34812) (bol 34806 . 34806) (symbol 34494 . 34509) (symbol 34487 . 34493) (bol 34487 . 34487) (symbol 33844 . 33849) (bol 33844 . 33844) (shell-command 33627 . 33843) (bol 33626 . 33626) (symbol 33608 . 33625) (symbol 33601 . 33607) (bol 33601 . 33601) (symbol 33594 . 33599) (bol 33594 . 33594) (shell-command 33268 . 33593) (bol 33267 . 33267) (symbol 33246 . 33266) (symbol 33239 . 33245) (bol 33239 . 33239) (shell-command 32351 . 32553) (bol 32350 . 32350) (shell-command 32298 . 32349) (bol 32297 . 32297) (shell-command 30584 . 30606) (bol 30583 . 30583) (shell-command 30549 . 30582) (bol 30548 . 30548) (shell-command 30524 . 30547) (bol 30523 . 30523) (shell-command 30482 . 30516) (bol 30481 . 30481) (shell-command 30420 . 30448) (bol 30419 . 30419) (shell-command 30343 . 30391) (bol 30342 . 30342) (symbol 30171 . 30176) (bol 30171 . 30171) (shell-command 30107 . 30170) (bol 30106 . 30106) (shell-command 30052 . 30105) (bol 30051 . 30051) (shell-command 30022 . 30050) (bol 30021 . 30021) (shell-command 30019 . 30020) (bol 30018 . 30018) (symbol 29997 . 30017) (symbol 29990 . 29996) (bol 29990 . 29990) (semantic-list 29935 . 29989) (punctuation 29934 . 29935) (symbol 29906 . 29917) (semantic-list 29891 . 29905) (punctuation 29890 . 29891) (symbol 29876 . 29889) (semantic-list 29861 . 29875) (punctuation 29860 . 29861) (punctuation 29829 . 29830) (punctuation 29828 . 29829) (symbol 29825 . 29827) (symbol 29822 . 29824) (semantic-list 29812 . 29821) (punctuation 29811 . 29812) (semantic-list 29806 . 29810) (punctuation 29805 . 29806) (punctuation 29803 . 29804) (symbol 29783 . 29802) (bol 29777 . 29777) (ENDIF 29585 . 29590) (bol 29585 . 29585) (punctuation 28703 . 28704) (punctuation 28702 . 28703) (symbol 28700 . 28701) (semantic-list 28658 . 28699) (punctuation 28657 . 28658) (semantic-list 28623 . 28633) (punctuation 28622 . 28623) (symbol 28620 . 28621) (symbol 28618 . 28619) (punctuation 28617 . 28618) (symbol 28614 . 28616) (semantic-list 28609 . 28613) (punctuation 28608 . 28609) (punctuation 28606 . 28607) (symbol 28593 . 28605) (bol 28587 . 28587) (symbol 28505 . 28510) (bol 28505 . 28505) (shell-command 28448 . 28504) (bol 28447 . 28447) (shell-command 28425 . 28446) (bol 28424 . 28424) (shell-command 28395 . 28423) (bol 28394 . 28394) (shell-command 28391 . 28393) (bol 28390 . 28390) (symbol 28377 . 28389) (symbol 28370 . 28376) (bol 28370 . 28370) (symbol 28166 . 28171) (bol 28166 . 28166) (shell-command 27864 . 28165) (bol 27863 . 27863) (shell-command 27658 . 27862) (bol 27657 . 27657) (symbol 27641 . 27656) (symbol 27634 . 27640) (bol 27634 . 27634) (symbol 26486 . 26491) (bol 26486 . 26486) (shell-command 26467 . 26485) (bol 26466 . 26466) (shell-command 26044 . 26465) (bol 26043 . 26043) (shell-command 25985 . 26041) (bol 25984 . 25984) (shell-command 25962 . 25983) (bol 25961 . 25961) (shell-command 25905 . 25959) (bol 25904 . 25904) (shell-command 25902 . 25903) (bol 25901 . 25901) (symbol 25886 . 25900) (symbol 25879 . 25885) (bol 25879 . 25879) (symbol 25580 . 25597) (semantic-list 25571 . 25580) (punctuation 25570 . 25571) (semantic-list 25555 . 25569) (punctuation 25554 . 25555) (punctuation 25552 . 25553) (symbol 25541 . 25551) (bol 25535 . 25535) (symbol 25481 . 25485) (punctuation 25480 . 25481) (semantic-list 25473 . 25480) (punctuation 25472 . 25473) (semantic-list 25465 . 25471) (punctuation 25464 . 25465) (punctuation 25454 . 25455) (symbol 25452 . 25454) (punctuation 25447 . 25448) (symbol 25438 . 25447) (symbol 25436 . 25437) (punctuation 25434 . 25435) (semantic-list 25415 . 25433) (punctuation 25414 . 25415) (punctuation 25413 . 25414) (symbol 25412 . 25413) (symbol 25407 . 25411) (punctuation 25398 . 25399) (symbol 25386 . 25398) (symbol 25377 . 25385) (symbol 25374 . 25376) (ELSE 25359 . 25363) (punctuation 25351 . 25352) (symbol 25342 . 25351) (symbol 25340 . 25341) (symbol 25335 . 25339) (punctuation 25325 . 25326) (symbol 25317 . 25325) (symbol 25314 . 25316) (symbol 25311 . 25313) (symbol 25299 . 25303) (punctuation 25297 . 25298) (semantic-list 25280 . 25297) (IF 25277 . 25279) (punctuation 25252 . 25253) (symbol 25250 . 25252) (symbol 25246 . 25249) (punctuation 25244 . 25245) (symbol 25224 . 25243) (bol 25218 . 25218) (semantic-list 25061 . 25140) (punctuation 25060 . 25061) (symbol 25023 . 25034) (semantic-list 25008 . 25022) (punctuation 25007 . 25008) (symbol 24993 . 25006) (semantic-list 24945 . 24959) (punctuation 24944 . 24945) (semantic-list 24930 . 24943) (punctuation 24929 . 24930) (symbol 24926 . 24928) (punctuation 24916 . 24917) (punctuation 24915 . 24916) (symbol 24912 . 24914) (semantic-list 24894 . 24911) (punctuation 24893 . 24894) (semantic-list 24883 . 24892) (punctuation 24882 . 24883) (semantic-list 24877 . 24881) (punctuation 24876 . 24877) (punctuation 24874 . 24875) (punctuation 24873 . 24874) (symbol 24859 . 24872) (bol 24853 . 24853) (punctuation 24851 . 24852) (punctuation 24850 . 24851) (symbol 24842 . 24844) (punctuation 24840 . 24841) (punctuation 24839 . 24840) (symbol 24819 . 24838) (bol 24819 . 24819) (symbol 22654 . 22667) (symbol 22647 . 22653) (bol 22647 . 22647) (ENDIF 22621 . 22626) (bol 22621 . 22621) (ENDIF 22567 . 22572) (bol 22567 . 22567) (symbol 22141 . 22147) (symbol 22134 . 22140) (bol 22134 . 22134) (symbol 21867 . 21872) (punctuation 21865 . 21866) (punctuation 21864 . 21865) (symbol 21851 . 21863) (symbol 21844 . 21850) (bol 21844 . 21844) (symbol 21696 . 21703) (punctuation 21694 . 21695) (punctuation 21693 . 21694) (symbol 21680 . 21692) (symbol 21673 . 21679) (bol 21673 . 21673) (semantic-list 21118 . 21127) (punctuation 21117 . 21118) (punctuation 21115 . 21116) (punctuation 21114 . 21115) (symbol 21100 . 21113) (bol 21092 . 21092) (semantic-list 21066 . 21091) (punctuation 21065 . 21066) (bol 21057 . 21057) (semantic-list 21021 . 21030) (punctuation 21020 . 21021) (punctuation 21018 . 21019) (punctuation 21017 . 21018) (symbol 21003 . 21016) (bol 20995 . 20995) (semantic-list 20969 . 20994) (punctuation 20968 . 20969) (bol 20960 . 20960) (semantic-list 20922 . 20933) (punctuation 20921 . 20922) (punctuation 20919 . 20920) (punctuation 20918 . 20919) (symbol 20902 . 20917) (bol 20894 . 20894) (semantic-list 20866 . 20893) (punctuation 20865 . 20866) (bol 20857 . 20857) (shell-command 20584 . 20619) (bol 20583 . 20583) (shell-command 19588 . 19593) (bol 19587 . 19587) (shell-command 19558 . 19586) (bol 19557 . 19557) (shell-command 19530 . 19556) (bol 19529 . 19529) (shell-command 19496 . 19528) (bol 19495 . 19495) (ENDIF 17852 . 17857) (bol 17852 . 17852) (ENDIF 17744 . 17749) (bol 17744 . 17744) (symbol 16686 . 16714) (symbol 16677 . 16685) (bol 16677 . 16677) (symbol 16526 . 16550) (symbol 16517 . 16525) (bol 16517 . 16517) (ENDIF 16454 . 16459) (bol 16454 . 16454) (symbol 15517 . 15531) (symbol 15500 . 15516) (symbol 15493 . 15499) (bol 15493 . 15493) (ENDIF 14793 . 14798) (bol 14785 . 14785) (ENDIF 14779 . 14784) (bol 14763 . 14763) (symbol 14761 . 14762) (punctuation 14759 . 14760) (punctuation 14758 . 14759) (symbol 14744 . 14757) (bol 14720 . 14720) (semantic-list 14672 . 14719) (IFNEQ 14666 . 14671) (bol 14650 . 14650) (symbol 14648 . 14649) (punctuation 14646 . 14647) (punctuation 14645 . 14646) (symbol 14630 . 14644) (bol 14614 . 14614) (semantic-list 14570 . 14613) (IFNEQ 14564 . 14569) (bol 14556 . 14556) (shell-command 14518 . 14523) (bol 14517 . 14517) (shell-command 14500 . 14516) (bol 14499 . 14499) (shell-command 14435 . 14498) (bol 14434 . 14434) (shell-command 13392 . 13495) (bol 13391 . 13391) (shell-command 13361 . 13390) (bol 13360 . 13360) (symbol 12193 . 12207) (symbol 12186 . 12192) (bol 12186 . 12186) (symbol 12165 . 12185) (symbol 12144 . 12164) (symbol 12137 . 12143) (bol 12137 . 12137) (symbol 12115 . 12136) (symbol 12094 . 12114) (symbol 12073 . 12093) (symbol 12066 . 12072) (bol 12066 . 12066) (symbol 12052 . 12065) (symbol 12038 . 12051) (symbol 12024 . 12037) (symbol 12017 . 12023) (bol 12017 . 12017) (symbol 12005 . 12016) (symbol 11991 . 12004) (symbol 11977 . 11990) (symbol 11963 . 11976) (symbol 11956 . 11962) (bol 11956 . 11956) (symbol 11948 . 11955) (symbol 11935 . 11947) (symbol 11922 . 11934) (symbol 11907 . 11921) (symbol 11891 . 11906) (symbol 11884 . 11890) (bol 11884 . 11884) (symbol 11872 . 11882) (symbol 11866 . 11871) (symbol 11851 . 11865) (symbol 11838 . 11850) (symbol 11830 . 11837) (symbol 11823 . 11829) (bol 11823 . 11823) (symbol 11811 . 11822) (symbol 11806 . 11810) (symbol 11792 . 11805) (symbol 11783 . 11791) (symbol 11779 . 11782) (symbol 11774 . 11778) (symbol 11767 . 11773) (bol 11767 . 11767) (symbol 11759 . 11766) (symbol 11751 . 11758) (symbol 11745 . 11750) (symbol 11742 . 11744) (symbol 11739 . 11741) (symbol 11735 . 11738) (symbol 11728 . 11734) (bol 11728 . 11728) (symbol 11725 . 11727) (symbol 11722 . 11724) (symbol 11719 . 11721) (symbol 11705 . 11718) (symbol 11694 . 11704) (symbol 11687 . 11693) (symbol 11674 . 11686) (symbol 11666 . 11673) (symbol 11661 . 11665) (symbol 11654 . 11660) (bol 11654 . 11654) (symbol 11640 . 11653) (symbol 11626 . 11639) (symbol 11617 . 11625) (symbol 11606 . 11616) (symbol 11598 . 11605) (symbol 11591 . 11597) (bol 11591 . 11591) (symbol 9573 . 9587) (symbol 9571 . 9572) (symbol 9565 . 9570) (symbol 9558 . 9564) (bol 9558 . 9558) (symbol 9543 . 9550) (punctuation 9542 . 9543) (symbol 9537 . 9542) (bol 9535 . 9535) (punctuation 9408 . 9409) (punctuation 9406 . 9407) (symbol 9404 . 9405) (bol 9402 . 9402) (symbol 9395 . 9401) (punctuation 9394 . 9395) (symbol 9389 . 9394) (bol 9387 . 9387) (punctuation 9380 . 9381) (symbol 9378 . 9379) (bol 9376 . 9376) (punctuation 9374 . 9375) (symbol 9368 . 9373) (bol 9366 . 9366) (symbol 8394 . 8407) (symbol 8383 . 8393) (symbol 8367 . 8382) (symbol 8360 . 8366) (bol 8360 . 8360) (symbol 8345 . 8359) (symbol 8330 . 8344) (symbol 8323 . 8329) (bol 8323 . 8323) (symbol 8314 . 8315) (punctuation 8312 . 8313) (punctuation 8311 . 8312) (symbol 8296 . 8310) (bol 8294 . 8294) (symbol 8261 . 8262) (punctuation 8259 . 8260) (punctuation 8258 . 8259) (symbol 8243 . 8257) (bol 8241 . 8241) (semantic-list 8000 . 8028) (punctuation 7999 . 8000) (punctuation 7997 . 7998) (punctuation 7996 . 7997) (symbol 7981 . 7995) (bol 7979 . 7979) (symbol 7235 . 7249) (symbol 7228 . 7234) (bol 7228 . 7228) (symbol 7220 . 7227) (punctuation 7218 . 7219) (punctuation 7217 . 7218) (symbol 7202 . 7216) (bol 7202 . 7202) (symbol 7190 . 7194) (punctuation 7188 . 7189) (punctuation 7187 . 7188) (symbol 7177 . 7185) (bol 7170 . 7170) (symbol 7068 . 7072) (punctuation 7066 . 7067) (punctuation 7065 . 7066) (symbol 7057 . 7064) (bol 7050 . 7050) (symbol 7017 . 7021) (punctuation 7015 . 7016) (punctuation 7014 . 7015) (symbol 7006 . 7013) (bol 6999 . 6999) (symbol 6930 . 6932) (punctuation 6928 . 6929) (punctuation 6927 . 6928) (symbol 6919 . 6926) (bol 6912 . 6912) (symbol 6845 . 6850) (punctuation 6843 . 6844) (punctuation 6842 . 6843) (symbol 6834 . 6841) (bol 6827 . 6827) (symbol 6792 . 6797) (punctuation 6790 . 6791) (punctuation 6789 . 6790) (symbol 6781 . 6788) (bol 6774 . 6774) (symbol 6703 . 6706) (punctuation 6701 . 6702) (punctuation 6700 . 6701) (symbol 6692 . 6699) (bol 6684 . 6684) (symbol 6652 . 6655) (punctuation 6650 . 6651) (punctuation 6649 . 6650) (symbol 6641 . 6648) (bol 6633 . 6633) (symbol 6482 . 6492) (punctuation 6480 . 6481) (punctuation 6479 . 6480) (symbol 6465 . 6478) (bol 6465 . 6465) (symbol 6461 . 6464) (punctuation 6459 . 6460) (punctuation 6458 . 6459) (symbol 6452 . 6456) (bol 6452 . 6452) (symbol 4795 . 4800) (symbol 4787 . 4794) (symbol 4779 . 4786) (symbol 4772 . 4778) (bol 4772 . 4772) (ENDIF 4279 . 4284) (bol 4279 . 4279) (ENDIF 4245 . 4250) (bol 4245 . 4245) (semantic-list 3762 . 3851) (punctuation 3761 . 3762) (bol 3761 . 3761) (semantic-list 3348 . 3351) (punctuation 3347 . 3348) (punctuation 3345 . 3346) (punctuation 3344 . 3345) (symbol 3313 . 3343) (symbol 3306 . 3312) (bol 3304 . 3304) (semantic-list 3256 . 3259) (punctuation 3255 . 3256) (punctuation 3253 . 3254) (punctuation 3252 . 3253) (symbol 3238 . 3251) (bol 3236 . 3236) (semantic-list 2372 . 2375) (punctuation 2371 . 2372) (punctuation 2369 . 2370) (punctuation 2368 . 2369) (symbol 2354 . 2367) (bol 2352 . 2352) (semantic-list 2298 . 2307) (punctuation 2297 . 2298) (punctuation 2295 . 2296) (punctuation 2294 . 2295) (symbol 2280 . 2293) (bol 2278 . 2278) (symbol 2070 . 2071) (punctuation 2068 . 2069) (symbol 2052 . 2067) (bol 2050 . 2050) (semantic-list 2017 . 2020) (punctuation 2016 . 2017) (punctuation 2014 . 2015) (symbol 1998 . 2013) (bol 1996 . 1996) (symbol 1579 . 1580) (punctuation 1577 . 1578) (symbol 1562 . 1576) (bol 1560 . 1560) (semantic-list 1528 . 1531) (punctuation 1527 . 1528) (punctuation 1525 . 1526) (symbol 1510 . 1524) (bol 1508 . 1508) (symbol 621 . 631) (symbol 610 . 620) (symbol 603 . 609) (bol 603 . 603) (symbol 570 . 576) (symbol 561 . 569) (bol 561 . 561))
    )
   )
  :file "!home!chz!linux-3.0.8!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
