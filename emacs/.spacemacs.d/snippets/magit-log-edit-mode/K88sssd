;; Object textmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "textmodes/"
  :tables
  (list
    (semanticdb-table "fill.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fill" customgroup (:user-visible-flag t) nil [1014 1125])
            ("fill-individual-varying-indent" variable nil nil [1127 1538])
            ("colon-double-space" variable nil nil [1540 1667])
            ("put" code nil nil [1668 1724])
            ("fill-paragraph-function" variable nil nil [1726 2136])
            ("fill-paragraph-handle-comment" variable (:default-value t) nil [2138 2253])
            ("enable-kinsoku" variable (:default-value t) nil [2255 2568])
            ("set-fill-prefix" function (:user-visible-flag t) nil [2570 3157])
            ("adaptive-fill-mode" variable (:default-value t) nil [3159 3292])
            ("adaptive-fill-regexp" variable (:default-value (purecopy "[ 	]*\\([-–!|#%;>*·•‣⁃◦]+[ 	]*\\)*")) nil [3294 4014])
            ("adaptive-fill-first-line-regexp" variable (:default-value (purecopy "\\`[ 	]*\\'")) nil [4016 4559])
            ("adaptive-fill-function" variable nil nil [4561 4790])
            ("fill-indent-according-to-mode" variable nil nil [4792 4946])
            ("current-fill-column" function nil nil [4948 5984])
            ("canonically-space-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [5986 8237])
            ("fill-common-string-prefix" function (:arguments ("s1" "s2")) nil [8239 8516])
            ("fill-match-adaptive-prefix" function nil nil [8518 8904])
            ("fill-context-prefix" function (:arguments ("from" "to" "first-line-regexp")) nil [8906 12223])
            ("fill-single-word-nobreak-p" function nil nil [12225 12752])
            ("fill-french-nobreak-p" function nil nil [12754 13451])
            ("fill-single-char-nobreak-p" function nil nil [13453 13864])
            ("fill-nobreak-predicate" variable nil nil [13866 14247])
            ("fill-nobreak-invisible" variable nil nil [14249 14394])
            ("fill-nobreak-p" function nil nil [14396 15794])
            ("fill-find-break-point-function-table" variable (:default-value (make-char-table nil)) nil [15796 15928])
            ("fill-nospace-between-words-table" variable (:default-value (make-char-table nil)) nil [15930 16058])
            ("progn" code nil nil [16060 16743])
            ("fill-find-break-point" function (:arguments ("limit")) nil [16745 17432])
            ("fill-delete-prefix" function (:arguments ("from" "to" "prefix")) nil [17434 18355])
            ("add-to-list" code nil nil [18625 18689])
            ("fill-delete-newlines" function (:arguments ("from" "to" "justify" "nosqueeze" "squeeze-after")) nil [18691 21004])
            ("fill-move-to-break-point" function (:arguments ("linebeg")) nil [21006 23371])
            ("fill-text-properties-at" function (:arguments ("pos")) nil [23442 23688])
            ("fill-newline" function nil nil [23690 25006])
            ("fill-indent-to-left-margin" function nil nil [25008 25233])
            ("fill-region-as-paragraph" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "squeeze-after"))
                nil [25235 30406])
            ("skip-line-prefix" function (:arguments ("prefix")) nil [30408 30735])
            ("fill-minibuffer-function" function (:arguments ("arg")) nil [30737 30941])
            ("fill-forward-paragraph-function" variable (:default-value (quote forward-paragraph)) nil [30943 31233])
            ("fill-forward-paragraph" function (:arguments ("arg")) nil [31235 31319])
            ("fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "region"))
                nil [31321 35111])
            ("declare-function" code nil nil [35113 35193])
            ("declare-function" code nil nil [35194 35267])
            ("fill-comment-paragraph" function (:arguments ("justify")) nil [35270 40697])
            ("fill-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "to-eop"))
                nil [40699 42875])
            ("default-justification" variable (:default-value (quote left)) nil [42879 43310])
            ("make-variable-buffer-local" code nil nil [43311 43362])
            ("current-justification" function nil nil [43364 43913])
            ("set-justification" function
               (:user-visible-flag t
                :arguments ("begin" "end" "style" "whole-par"))
                nil [43915 45690])
            ("set-justification-none" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [45692 46000])
            ("set-justification-left" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46002 46445])
            ("set-justification-right" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46447 46818])
            ("set-justification-full" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46820 47193])
            ("set-justification-center" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [47195 47491])
            ("justify-current-line" function
               (:user-visible-flag t
                :arguments ("how" "eop" "nosqueeze"))
                nil [48306 53116])
            ("unjustify-current-line" function nil nil [53118 54152])
            ("unjustify-region" function (:arguments ("begin" "end")) nil [54154 54749])
            ("fill-nonuniform-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justifyp" "citation-regexp"))
                nil [54753 55774])
            ("fill-individual-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justify" "citation-regexp"))
                nil [55776 59844])
            ("fill-individual-paragraphs-prefix" function (:arguments ("citation-regexp")) nil [59846 61235])
            ("fill-individual-paragraphs-citation" function (:arguments ("string" "citation-regexp")) nil [61237 61419]))          
      :file "fill.el.gz"
      :pointmax 61443
      :fsize 17324
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "two-column.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("two-column" customgroup (:user-visible-flag t) nil [6428 6533])
            ("2C-mode-line-format" variable (:default-value (quote ("-%*- %15b --" (-3 . "%p") "--%[(" mode-name minor-mode-alist "%n" mode-line-process ")%]%-"))) nil [6535 6778])
            ("2C-other-buffer-hook" variable (:default-value (quote text-mode)) nil [6780 6929])
            ("2C-separator" variable nil nil [6931 7094])
            ("put" code nil nil [7095 7133])
            ("2C-window-width" variable (:default-value 40) nil [7135 7329])
            ("make-variable-buffer-local" code nil nil [7330 7375])
            ("put" code nil nil [7376 7417])
            ("2C-beyond-fill-column" variable (:default-value 4) nil [7419 7657])
            ("2C-autoscroll" variable (:default-value t) nil [7659 7797])
            ("2C-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "2" (quote 2C-two-columns)) (define-key map [f2] (quote 2C-two-columns)) (define-key map "b" (quote 2C-associate-buffer)) (define-key map "s" (quote 2C-split)) map)) nil [7801 8086])
            ("fset" code nil nil [8152 8182])
            ("2C-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "1" (quote 2C-merge)) (define-key map "d" (quote 2C-dissociate)) (define-key map "o" (quote 2C-associated-buffer)) (define-key map "" (quote 2C-newline)) (define-key map "|" (quote 2C-toggle-autoscroll)) (define-key map "{" (quote 2C-shrink-window-horizontally)) (define-key map "}" (quote 2C-enlarge-window-horizontally)) map)) nil [8486 8930])
            ("setq" code nil nil [8932 9450])
            ("2C-mode" variable nil nil [9636 9705])
            ("make-variable-buffer-local" code nil nil [9706 9743])
            ("put" code nil nil [9744 9777])
            ("setq" code nil nil [9779 9843])
            ("2C-autoscroll-start" variable nil nil [9845 9877])
            ("make-variable-buffer-local" code nil nil [9878 9927])
            ("2C-other" function (:arguments ("req")) nil [10073 10522])
            ("2C-mode" function (:arguments ("other")) nil [10648 12461])
            ("2C-two-columns" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [12479 13622])
            ("2C-associate-buffer" function (:user-visible-flag t) nil [13640 14414])
            ("scroll-bar-columns" function (:prototype-flag t) nil [14416 14459])
            ("fringe" include nil nil [14481 14498])
            ("2C-split" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14544 16863])
            ("2C-dissociate" function (:user-visible-flag t) nil [16866 17708])
            ("2C-merge" function (:user-visible-flag t) nil [17798 19233])
            ("2C-associated-buffer" function (:user-visible-flag t) nil [19267 19721])
            ("2C-newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19723 19895])
            ("2C-toggle-autoscroll" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19897 20875])
            ("2C-autoscroll" function nil nil [20878 22018])
            ("2C-enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22021 22311])
            ("2C-shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22313 22465])
            ("two-column" package nil nil [22468 22489]))          
      :file "two-column.el.gz"
      :pointmax 22519
      :fsize 7820
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax '((close-paren 14498 . 14499) (symbol 14461 . 14478) (open-paren 14460 . 14461)))
    (semanticdb-table "text-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("text-mode-hook" variable nil nil [1007 1181])
            ("text-mode-variant" variable nil nil [1183 1321])
            ("text-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 34 ".   " st) (modify-syntax-entry 92 ".   " st) (modify-syntax-entry 39 "w p" st) (modify-syntax-entry 1523 "w   ") (modify-syntax-entry 1524 "w   ") (modify-syntax-entry 183 "w   ") (modify-syntax-entry 8231 "w   ") (modify-syntax-entry 65306 "w   ") st)) nil [1323 2607])
            ("text-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "	" (quote ispell-complete-word)) (define-key map [menu-bar text] (cons "Text" (make-sparse-keymap "Text"))) (bindings--define-key map [menu-bar text toggle-text-mode-auto-fill] (quote (menu-item "Auto Fill" toggle-text-mode-auto-fill :button (:toggle memq (quote turn-on-auto-fill) text-mode-hook) :help "Automatically fill text while typing in text modes (Auto Fill mode)"))) (bindings--define-key map [menu-bar text paragraph-indent-minor-mode] (quote (menu-item "Paragraph Indent" paragraph-indent-minor-mode :button (:toggle bound-and-true-p paragraph-indent-minor-mode) :help "Toggle paragraph indent minor mode"))) (bindings--define-key map [menu-bar text sep] menu-bar-separator) (bindings--define-key map [menu-bar text center-region] (quote (menu-item "Center Region" center-region :help "Center the marked region" :enable (region-active-p)))) (bindings--define-key map [menu-bar text center-paragraph] (quote (menu-item "Center Paragraph" center-paragraph :help "Center the current paragraph"))) (bindings--define-key map [menu-bar text center-line] (quote (menu-item "Center Line" center-line :help "Center the current line"))) map)) nil [2609 4160])
            ("define-derived-mode" code nil nil [4164 4716])
            ("define-derived-mode" code nil nil [4718 5292])
            ("define-minor-mode" code nil nil [5294 6477])
            ("defalias" code nil nil [6479 6520])
            ("text-mode-hook-identify" function nil nil [6622 6833])
            ("add-hook" code nil nil [6835 6886])
            ("toggle-text-mode-auto-fill" function (:user-visible-flag t) nil [6888 7595])
            ("define-key" code nil nil [7599 7651])
            ("center-paragraph" function (:user-visible-flag t) nil [7653 7953])
            ("center-region" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [7955 8379])
            ("define-key" code nil nil [8381 8428])
            ("center-line" function
               (:user-visible-flag t
                :arguments ("nlines"))
                nil [8430 9327]))          
      :file "text-mode.el.gz"
      :pointmax 9356
      :fsize 3239
      :lastmodtime '(21781 3670 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ispell.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [9327 9401])
            ("declare-function" code nil nil [9404 9459])
            ("declare-function" code nil nil [9460 9550])
            ("if" code nil nil [9552 10781])
            ("if" code nil nil [10820 11444])
            ("ispell-with-no-warnings" function (:arguments ("body")) nil [11514 11633])
            ("mail-yank-prefix" variable nil nil [11646 11671])
            ("ispell" customgroup (:user-visible-flag t) nil [11673 11764])
            ("if" code nil nil [11766 11908])
            ("defalias" code nil nil [11910 11964])
            ("ispell-highlight-p" variable (:default-value (quote block)) nil [12282 12518])
            ("ispell-lazy-highlight" variable (:default-value (boundp (quote lazy-highlight-cleanup))) nil [12520 12913])
            ("ispell-highlight-face" variable (:default-value (if ispell-lazy-highlight (quote isearch) (quote highlight))) nil [12915 13217])
            ("ispell-check-comments" variable (:default-value t) nil [13219 13580])
            ("put" code nil nil [13596 13691])
            ("ispell-query-replace-choices" variable nil nil [13693 13882])
            ("ispell-skip-tib" variable nil nil [13884 14317])
            ("ispell-tib-ref-beginning" variable (:default-value "[[<]\\.") nil [14319 14416])
            ("ispell-tib-ref-end" variable (:default-value "\\.[]>]") nil [14418 14503])
            ("ispell-keep-choices-win" variable (:default-value t) nil [14505 14689])
            ("ispell-choices-win-default-height" variable (:default-value 2) nil [14691 14869])
            ("ispell-program-name" variable (:default-value (or (executable-find "aspell") (executable-find "ispell") (executable-find "hunspell") "ispell")) nil [14871 15269])
            ("ispell-alternate-dictionary" variable (:default-value (cond ((file-readable-p "/usr/dict/web2") "/usr/dict/web2") ((file-readable-p "/usr/share/dict/web2") "/usr/share/dict/web2") ((file-readable-p "/usr/dict/words") "/usr/dict/words") ((file-readable-p "/usr/lib/dict/words") "/usr/lib/dict/words") ((file-readable-p "/usr/share/dict/words") "/usr/share/dict/words") ((file-readable-p "/usr/share/lib/dict/words") "/usr/share/lib/dict/words") ((file-readable-p "/sys/dict") "/sys/dict"))) nil [15271 15879])
            ("ispell-complete-word-dict" variable nil nil [15881 16091])
            ("ispell-message-dictionary-alist" variable nil nil [16093 16595])
            ("ispell-message-fcc-skip" variable (:default-value 50000) nil [16598 16828])
            ("ispell-grep-command" variable (:default-value (if (memq system-type (quote (windows-nt ms-dos))) "grep" "egrep")) nil [16831 17160])
            ("ispell-grep-options" variable (:default-value (if (memq system-type (quote (windows-nt ms-dos))) "-Ei" "-i")) nil [17162 17453])
            ("ispell-look-command" variable (:default-value (cond ((file-exists-p "/bin/look") "/bin/look") ((file-exists-p "/usr/local/bin/look") "/usr/local/bin/look") ((file-exists-p "/usr/bin/look") "/usr/bin/look") (t "look"))) nil [17455 17781])
            ("ispell-look-p" variable (:default-value (file-exists-p ispell-look-command)) nil [17783 17985])
            ("ispell-have-new-look" variable nil nil [17987 18125])
            ("ispell-look-options" variable (:default-value (if ispell-have-new-look "-dfr" "-df")) nil [18127 18287])
            ("ispell-use-ptys-p" variable nil nil [18289 18446])
            ("ispell-following-word" variable nil nil [18448 18641])
            ("ispell-help-in-bufferp" variable nil nil [18643 19227])
            ("ispell-quietly" variable nil nil [19229 19347])
            ("ispell-format-word-function" variable (:default-value (function upcase)) nil [19349 19570])
            ("defvaralias" code nil nil [19571 19633])
            ("ispell-use-framepop-p" variable nil nil [19635 20004])
            ("ispell-personal-dictionary" variable nil nil [20021 20409])
            ("ispell-silently-savep" variable nil nil [20411 20558])
            ("ispell-local-dictionary-overridden" variable nil nil [20560 20686])
            ("make-variable-buffer-local" code nil nil [20687 20751])
            ("ispell-local-dictionary" variable nil nil [20753 21402])
            ("put" code nil nil [21418 21487])
            ("make-variable-buffer-local" code nil nil [21489 21542])
            ("ispell-dictionary" variable nil nil [21544 21716])
            ("ispell-extra-args" variable nil nil [21718 22039])
            ("ispell-skip-html" variable (:default-value (quote use-mode-name)) nil [22043 22455])
            ("make-variable-buffer-local" code nil nil [22457 22503])
            ("ispell-local-dictionary-alist" variable nil nil [22506 23481])
            ("ispell-dictionary-base-alist" variable (:default-value (quote ((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("brasileiro" "[A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[^A-Z\301\311\315\323\332\300\310\314\322\331\303\325\307\334\302\312\324a-z\341\351\355\363\372\340\350\354\362\371\343\365\347\374\342\352\364]" "[']" nil nil nil iso-8859-1) ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("castellano" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B") "~tex" iso-8859-1) ("castellano8" "[A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[^A-Z\301\311\315\321\323\332\334a-z\341\351\355\361\363\372\374]" "[-]" nil ("-B" "-d" "castellano") "~latin1" iso-8859-1) ("czech" "[A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "[^A-Za-z\301\311\314\315\323\332\331\335\256\251\310\330\317\253\322\341\351\354\355\363\372\371\375\276\271\350\370\357\273\362]" "" nil ("-B") nil iso-8859-2) ("dansk" "[A-Z\306\330\305a-z\346\370\345]" "[^A-Z\306\330\305a-z\346\370\345]" "[']" nil ("-C") nil iso-8859-1) ("deutsch" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("deutsch8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "deutsch") "~latin1" iso-8859-1) ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil iso-8859-1) ("esperanto" "[A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[^A-Za-z\246\254\266\274\306\330\335\336\346\370\375\376]" "[-']" t ("-C") "~latin3" iso-8859-3) ("esperanto-tex" "[A-Za-z^\\]" "[^A-Za-z^\\]" "[-'`\"]" t ("-C" "-d" "esperanto") "~tex" iso-8859-3) ("finnish" "[A-Za-z\345\344\366\305\304\326]" "[^A-Za-z\345\344\366\305\304\326]" "[:]" nil ("-C") "~list" iso-8859-1) ("francais7" "[A-Za-z]" "[^A-Za-z]" "[`'^-]" t nil nil iso-8859-1) ("francais" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374]" "[-'.@]" t nil "~list" iso-8859-1) ("francais-tex" "[A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[^A-Za-z\300\302\306\307\310\311\312\313\316\317\324\331\333\334\340\342\347\350\351\352\353\356\357\364\371\373\374\\]" "[-'^`\".@]" t nil "~tex" iso-8859-1) ("german" "[a-zA-Z\"]" "[^a-zA-Z\"]" "[']" t ("-C") "~tex" iso-8859-1) ("german8" "[a-zA-Z\304\326\334\344\366\337\374]" "[^a-zA-Z\304\326\334\344\366\337\374]" "[']" t ("-C" "-d" "german") "~latin1" iso-8859-1) ("italiano" "[A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[^A-Z\300\301\310\311\314\315\322\323\331\332a-z\340\341\350\351\354\355\363\371\372]" "[-.]" nil ("-B" "-d" "italian") "~tex" iso-8859-1) ("nederlands" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("nederlands8" "[A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[^A-Za-z\300\301\302\303\304\305\307\310\311\312\313\314\315\316\317\322\323\324\325\326\331\332\333\334\340\341\342\343\344\345\347\350\351\352\353\354\355\356\357\361\362\363\364\365\366\371\372\373\374]" "[']" t ("-C") nil iso-8859-1) ("norsk" "[A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[^A-Za-z\305\306\307\310\311\322\324\330\345\346\347\350\351\362\364\370]" "[\"]" nil nil "~list" iso-8859-1) ("norsk7-tex" "[A-Za-z{}\\'^`]" "[^A-Za-z{}\\'^`]" "[\"]" nil ("-d" "norsk") "~plaintex" iso-8859-1) ("polish" "[A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[^A-Za-z\241\243\246\254\257\261\263\266\274\277\306\312\321\323\346\352\361\363]" "[.]" nil nil nil iso-8859-2) ("portugues" "[a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[^a-zA-Z\301\302\307\311\323\340\341\342\351\352\355\363\343\347\372]" "[']" t ("-C") "~latin1" iso-8859-1) ("russiannil nil nil koi8-r) ("russianwnil nil nil windows-1251) ("slovak" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B") nil iso-8859-2) ("slovenian" "[A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "[^A-Za-z\301\304\311\315\323\332\324\300\305\245\335\256\251\310\317\253\322\341\344\351\355\363\372\364\340\345\265\375\276\271\350\357\273\362]" "" nil ("-B" "-d" "slovenian") nil iso-8859-2) ("svenska" "[A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[^A-Za-z\345\344\366\351\340\374\350\346\370\347\305\304\326\311\300\334\310\306\330\307]" "[']" nil ("-C") "~list" iso-8859-1) ("hebrew" "[\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "[^\340\341\342\343\344\345\346\347\350\351\353\352\354\356\355\360\357\361\362\364\363\367\366\365\370\371\372]" "" nil ("-B") nil cp1255)))) nil [23484 32022])
            ("ispell-dictionary-alist" variable nil nil [32024 34585])
            ("ispell-really-aspell" variable nil nil [34587 34665])
            ("ispell-really-hunspell" variable nil nil [34666 34748])
            ("ispell-encoding8-command" variable nil nil [34749 35408])
            ("ispell-aspell-supports-utf8" variable nil nil [35410 35709])
            ("make-obsolete-variable" code nil nil [35711 35821])
            ("ispell-dicts-name2locale-equivs-alist" variable (:default-value (quote (("american" "en_US") ("brasileiro" "pt_BR") ("british" "en_GB") ("castellano" "es_ES") ("castellano8" "es_ES") ("czech" "cs_CZ") ("dansk" "da_DK") ("deutsch" "de_DE") ("deutsch8" "de_DE") ("english" "en_US") ("esperanto" "eo") ("esperanto-tex" "eo") ("finnish" "fi_FI") ("francais7" "fr_FR") ("francais" "fr_FR") ("francais-tex" "fr_FR") ("german" "de_DE") ("german8" "de_DE") ("italiano" "it_IT") ("nederlands" "nl_NL") ("nederlands8" "nl_NL") ("norsk" "nn_NO") ("norsk7-tex" "nn_NO") ("polish" "pl_PL") ("portugues" "pt_PT") ("russian" "ru_RU") ("russianw" "ru_RU") ("slovak" "sk_SK") ("slovenian" "sl_SI") ("svenska" "sv_SE") ("hebrew" "he_IL")))) nil [35823 36893])
            ("ispell-emacs-alpha-regexp" variable (:default-value (if (string-match "^[[:alpha:]]+$" "abcde") "[[:alpha:]]" nil)) nil [36895 37108])
            ("ispell-required-version" variable
               (:constant-flag t
                :default-value (quote (3 1 12)))
                nil [37470 37589])
            ("ispell-offset" variable (:default-value -1) nil [37590 37686])
            ("ispell-version" variable
               (:constant-flag t
                :default-value "ispell.el 3.6 - 7-Jan-2003")
                nil [37688 37742])
            ("ispell-check-version" function
               (:user-visible-flag t
                :arguments ("interactivep"))
                nil [37745 41371])
            ("ispell-call-process" function (:arguments ("args")) nil [41373 41710])
            ("ispell-call-process-region" function (:arguments ("args")) nil [41712 42070])
            ("ispell-create-debug-buffer" function (:arguments ("append")) nil [42072 42603])
            ("ispell-print-if-debug" function (:arguments ("format" "args")) nil [42605 42868])
            ("ispell-menu-map" variable nil nil [43088 43143])
            ("setq" code nil nil [43209 43235])
            ("ispell-menu-xemacs" variable nil nil [43252 43418])
            ("ispell-menu-map-needed" variable (:default-value (and (not ispell-menu-map) (not (featurep (quote xemacs))) (quote reload))) nil [43595 43756])
            ("ispell-library-directory" variable (:default-value (condition-case nil (ispell-check-version) (error nil))) nil [43758 43910])
            ("ispell-process" variable nil nil [43912 43974])
            ("ispell-async-processp" variable (:default-value (and (fboundp (quote delete-process)) (fboundp (quote process-send-string)) (fboundp (quote accept-process-output)))) nil [43976 44307])
            ("ispell-aspell-dictionary-alist" variable nil nil [44353 44473])
            ("ispell-find-aspell-dictionaries" function nil nil [44475 45613])
            ("ispell-aspell-data-dir" variable nil nil [45615 45680])
            ("ispell-aspell-dict-dir" variable nil nil [45682 45753])
            ("ispell-get-aspell-config-value" function (:arguments ("key")) nil [45755 46026])
            ("ispell-aspell-find-dictionary" function (:arguments ("dict-name")) nil [46028 48461])
            ("ispell-aspell-add-aliases" function (:arguments ("alist")) nil [48463 49661])
            ("ispell-hunspell-dict-paths-alist" variable nil nil [49709 49966])
            ("ispell-hunspell-dictionary-alist" variable nil nil [49968 50220])
            ("ispell-hunspell-fill-dictionary-entry" function (:arguments ("dict")) nil [50222 51782])
            ("ispell-parse-hunspell-affix-file" function (:arguments ("dict-key")) nil [51784 53545])
            ("ispell-find-hunspell-dictionaries" function nil nil [53547 57133])
            ("ispell-last-program-name" variable nil nil [57189 57282])
            ("ispell-initialize-spellchecker-hook" variable nil nil [57284 57827])
            ("ispell-set-spellchecker-params" function nil nil [57829 62418])
            ("ispell-valid-dictionary-list" function nil nil [62420 63646])
            ("if" code nil nil [63733 65734])
            ("if" code nil nil [65751 66516])
            ("if" code nil nil [66533 67281])
            ("if" code nil nil [67311 69154])
            ("defalias" code nil nil [69156 69367])
            ("ispell-current-dictionary" variable nil nil [69446 69692])
            ("ispell-current-personal-dictionary" variable nil nil [69694 69874])
            ("ispell-decode-string" function (:arguments ("str")) nil [69876 70434])
            ("ispell-get-decoded-string" function (:arguments ("n")) nil [70507 71147])
            ("ispell-get-casechars" function nil nil [71149 71212])
            ("ispell-get-not-casechars" function nil nil [71213 71280])
            ("ispell-get-otherchars" function nil nil [71281 71345])
            ("ispell-get-many-otherchars-p" function nil nil [71346 71528])
            ("ispell-get-ispell-args" function nil nil [71529 71705])
            ("ispell-get-extended-character-mode" function nil nil [71706 72052])
            ("ispell-get-coding-system" function nil nil [72053 72231])
            ("ispell-pdict-modified-p" variable nil nil [72234 72339])
            ("ispell-quit" variable nil nil [72546 72570])
            ("ispell-process-directory" variable nil nil [72572 72663])
            ("ispell-filter" variable nil nil [72665 72737])
            ("ispell-filter-continue" variable nil nil [72739 72823])
            ("ispell-output-buffer" variable nil nil [72825 72929])
            ("ispell-session-buffer" variable nil nil [72931 73035])
            ("ispell-cmd-args" variable nil nil [73037 73136])
            ("ispell-query-replace-marker" variable (:default-value (make-marker)) nil [73138 73231])
            ("ispell-recursive-edit-marker" variable (:default-value (make-marker)) nil [73233 73333])
            ("ispell-checking-message" variable nil nil [73335 73478])
            ("ispell-choices-buffer" variable
               (:constant-flag t
                :default-value "*Choices*")
                nil [73480 73524])
            ("ispell-overlay" variable nil nil [73526 73597])
            ("ispell-words-keyword" variable
               (:constant-flag t
                :default-value "LocalWords: ")
                nil [73637 73869])
            ("ispell-dictionary-keyword" variable
               (:constant-flag t
                :default-value "Local IspellDict: ")
                nil [73871 74175])
            ("ispell-pdict-keyword" variable
               (:constant-flag t
                :default-value "Local IspellPersDict: ")
                nil [74177 74414])
            ("ispell-parsing-keyword" variable
               (:constant-flag t
                :default-value "Local IspellParsing: ")
                nil [74416 74851])
            ("ispell-skip-region-alist" variable (:default-value (\` ((ispell-words-keyword forward-line) (ispell-dictionary-keyword forward-line) (ispell-pdict-keyword forward-line) (ispell-parsing-keyword forward-line) ((\, (purecopy "^---*BEGIN PGP [A-Z ]*--*")) \, (purecopy "^---*END PGP [A-Z ]*--*")) ((\, (purecopy "^begin [0-9][0-9][0-9] [^ 	]+$")) \, (purecopy "
end
")) ((\, (purecopy "^%!PS-Adobe-[123].0")) \, (purecopy "
%%EOF
")) ((\, (purecopy "^---* \\(Start of \\)?[Ff]orwarded [Mm]essage")) \, (purecopy "^---* End of [Ff]orwarded [Mm]essage")) ((\, (purecopy "\\(--+\\|_+\\|\\(/\\w\\|\\(\\(\\w\\|[-_]\\)+[.:@]\\)\\)\\(\\w\\|[-_]\\)*\\([.:/@]+\\(\\w\\|[-_~=?&]\\)+\\)+\\)")))))) nil [74868 76820])
            ("put" code nil nil [76821 76876])
            ("ispell-tex-skip-alists" variable (:default-value (purecopy (quote ((("\\\\addcontentsline" ispell-tex-arg-end 2) ("\\\\add\\(tocontents\\|vspace\\)" ispell-tex-arg-end) ("\\\\\\([aA]lph\\|arabic\\)" ispell-tex-arg-end) ("\\\\bibliographystyle" ispell-tex-arg-end) ("\\\\makebox" ispell-tex-arg-end 0) ("\\\\e?psfig" ispell-tex-arg-end) ("\\\\document\\(class\\|style\\)" . "\\\\begin[ 	
]*{[ 	
]*document[ 	
]*}")) (("\\(figure\\|table\\)\\*?" ispell-tex-arg-end 0) ("list" ispell-tex-arg-end 2) ("program" . "\\\\end[ 	
]*{[ 	
]*program[ 	
]*}") ("verbatim\\*?" . "\\\\end[ 	
]*{[ 	
]*verbatim\\*?[ 	
]*}")))))) nil [76894 78241])
            ("put" code nil nil [78242 78294])
            ("ispell-html-skip-alists" variable
               (:constant-flag t
                :default-value (quote (("<[cC][oO][dD][eE]\\>[^>]*>" "</[cC][oO][dD][eE]*>") ("<[sS][cC][rR][iI][pP][tT]\\>[^>]*>" "</[sS][cC][rR][iI][pP][tT]>") ("<[aA][pP][pP][lL][eE][tT]\\>[^>]*>" "</[aA][pP][pP][lL][eE][tT]>") ("<[vV][eE][rR][bB]\\>[^>]*>" "<[vV][eE][rR][bB]\\>[^>]*>") ("<[tT][tT]/" "/") ("<[^ 	
>]" ">") ("&[^ 	
;]" "[; 	
]"))))
                nil [78312 78961])
            ("put" code nil nil [78962 79016])
            ("ispell-local-pdict" variable (:default-value ispell-personal-dictionary) nil [79018 79513])
            ("make-variable-buffer-local" code nil nil [79515 79563])
            ("ispell-buffer-local-name" variable nil nil [79635 79803])
            ("ispell-buffer-session-localwords" variable nil nil [79805 79905])
            ("make-variable-buffer-local" code nil nil [79907 79969])
            ("ispell-parser" variable (:default-value (quote use-mode-name)) nil [79971 80361])
            ("ispell-region-end" variable (:default-value (make-marker)) nil [80363 80450])
            ("ispell-check-only" variable nil nil [80452 80546])
            ("ispell-accept-output" function (:arguments ("timeout-secs" "timeout-msecs")) nil [80757 81531])
            ("ispell-send-replacement" function (:arguments ("misspelled" "replacement")) nil [81533 81836])
            ("ispell-send-string" function (:arguments ("string")) nil [81839 84852])
            ("ispell-word" function
               (:user-visible-flag t
                :arguments ("following" "quietly" "continue" "region"))
                nil [84870 90700])
            ("ispell-get-word" function (:arguments ("following" "extra-otherchars")) nil [90703 93362])
            ("ispell-pdict-save" function
               (:user-visible-flag t
                :arguments ("no-query" "force-save"))
                nil [93607 94341])
            ("ispell-command-loop" function (:arguments ("miss" "guess" "word" "start" "end")) nil [94344 105223])
            ("ispell-show-choices" function (:arguments ("line" "end")) nil [105227 106713])
            ("ispell-help" function nil nil [106731 110115])
            ("define-obsolete-function-alias" code nil nil [110117 110191])
            ("ispell-lookup-words" function (:arguments ("word" "lookup-dict")) nil [110193 113278])
            ("ispell-filter" function (:arguments ("process" "output")) nil [113948 115150])
            ("ispell-highlight-spelling-error-generic" function (:arguments ("start" "end" "highlight" "refresh")) nil [115281 117002])
            ("ispell-highlight-spelling-error-xemacs" function (:arguments ("start" "end" "highlight")) nil [117005 117356])
            ("ispell-highlight-spelling-error-overlay" function (:arguments ("start" "end" "highlight")) nil [117359 118571])
            ("ispell-highlight-spelling-error" function (:arguments ("start" "end" "highlight" "refresh")) nil [118574 119001])
            ("ispell-adjusted-window-height" function (:arguments ("window")) nil [119003 119673])
            ("ispell-overlay-window" function (:arguments ("height")) nil [119675 121033])
            ("ispell-parse-output" function (:arguments ("output" "accept-list" "shift")) nil [121089 123658])
            ("ispell-process-status" function nil nil [123661 123908])
            ("ispell-start-process" function nil nil [123911 126399])
            ("ispell-init-process" function nil nil [126402 131497])
            ("ispell-kill-ispell" function
               (:user-visible-flag t
                :arguments ("no-error" "clear"))
                nil [131514 132610])
            ("ispell-change-dictionary" function
               (:user-visible-flag t
                :arguments ("dict" "arg"))
                nil [132782 134651])
            ("ispell-internal-change-dictionary" function nil nil [134653 135278])
            ("ispell-start" variable nil nil [135348 135369])
            ("ispell-end" variable nil nil [135370 135389])
            ("ispell-region" function
               (:user-visible-flag t
                :arguments ("reg-start" "reg-end" "recheckp" "shift"))
                nil [135482 141896])
            ("ispell-begin-skip-region-regexp" function nil nil [141899 143117])
            ("ispell-begin-skip-region" function (:arguments ("skip-alist")) nil [143120 143440])
            ("ispell-begin-tex-skip-regexp" function nil nil [143443 143913])
            ("ispell-skip-region-list" function nil nil [143916 144888])
            ("ispell-tex-arg-end" function (:arguments ("arg")) nil [144891 145194])
            ("ispell-ignore-fcc" function (:arguments ("start" "end")) nil [145197 146133])
            ("ispell-skip-region" function (:arguments ("key")) nil [146136 147967])
            ("ispell-get-line" function (:arguments ("start" "end" "in-comment")) nil [147970 148714])
            ("ispell-looking-at" function (:arguments ("string")) nil [148717 149020])
            ("ispell-process-line" function (:arguments ("string" "shift")) nil [149022 157110])
            ("ispell-comments-and-strings" function (:user-visible-flag t) nil [157128 157772])
            ("ispell-buffer" function (:user-visible-flag t) nil [157790 157936])
            ("ispell-buffer-with-debug" function
               (:user-visible-flag t
                :arguments ("append"))
                nil [157953 158243])
            ("ispell-continue" function (:user-visible-flag t) nil [158260 158817])
            ("ispell-horiz-scroll" function nil nil [158845 159299])
            ("ispell-complete-word" function
               (:user-visible-flag t
                :arguments ("interior-frag"))
                nil [159426 161796])
            ("ispell-complete-word-interior-frag" function (:user-visible-flag t) nil [161814 161964])
            ("ispell" function (:user-visible-flag t) nil [161982 162595])
            ("ispell-minor-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote ispell-minor-check)) (define-key map "" (quote ispell-minor-check)) map)) nil [162774 162977])
            ("define-minor-mode" code nil nil [162994 163649])
            ("ispell-minor-check" function (:user-visible-flag t) nil [163651 164221])
            ("ispell-message-text-end" variable (:default-value (mapconcat (function identity) (quote ("^-- $" "^#! /bin/[ck]?sh" "\\(\\(^cd .*
\\)?diff -c .*\\)?
\\*\\*\\* .*
--- .*
\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*" "\\(diff -u .*\\)?
--- .*
\\+\\+\\+ .*
@@ [-+][0-9]+,[0-9]+ [-+][0-9]+,[0-9]+ @@" "^current state:
==============
" "^\\(- \\)?[-=_]+\\s ?\\(cut here\\|Environment Follows\\)")) "\\|")) nil [164397 165486])
            ("put" code nil nil [165487 165541])
            ("ispell-mime-multipartp" function (:arguments ("limit")) nil [165544 166311])
            ("ispell-mime-skip-part" function (:arguments ("boundary")) nil [166314 168759])
            ("ispell-message" function (:user-visible-flag t) nil [168777 174716])
            ("ispell-non-empty-string" function (:arguments ("string")) nil [174719 174893])
            ("ispell-accept-buffer-local-defs" function nil nil [175078 175347])
            ("ispell-buffer-local-parsing" function nil nil [175350 177583])
            ("ispell-buffer-local-dict" function (:arguments ("no-reload")) nil [177626 178974])
            ("ispell-buffer-local-words" function nil nil [178977 180451])
            ("declare-function" code nil nil [180566 180615])
            ("ispell-add-per-file-word-list" function (:arguments ("word")) nil [180617 182236])
            ("add-to-list" code nil nil [182238 182301])
            ("ispell" package nil nil [182303 182320]))          
      :file "ispell.el.gz"
      :pointmax 183687
      :fsize 50842
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 9401 . 9402) (symbol 9252 . 9268) (open-paren 9251 . 9252)))
    (semanticdb-table "flyspell.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ispell" include nil nil [1390 1407])
            ("flyspell" customgroup (:user-visible-flag t) nil [1634 1765])
            ("flyspell-highlight-flag" variable (:default-value t) nil [1992 2180])
            ("flyspell-mark-duplications-flag" variable (:default-value t) nil [2182 2510])
            ("flyspell-mark-duplications-exceptions" variable (:default-value (quote ((nil "that" "had") ("\\`francais" "nous" "vous")))) nil [2512 3250])
            ("flyspell-sort-corrections" variable nil nil [3252 3423])
            ("flyspell-duplicate-distance" variable (:default-value 400000) nil [3425 4025])
            ("flyspell-delay" variable (:default-value 3) nil [4027 4170])
            ("flyspell-persistent-highlight" variable (:default-value t) nil [4172 4411])
            ("flyspell-highlight-properties" variable (:default-value t) nil [4413 4577])
            ("flyspell-default-delayed-commands" variable (:default-value (quote (self-insert-command delete-backward-char backward-or-forward-delete-char delete-char scrollbar-vertical-drag backward-delete-char-untabify))) nil [4579 4941])
            ("flyspell-delayed-commands" variable nil nil [4943 5207])
            ("flyspell-default-deplacement-commands" variable (:default-value (quote (next-line previous-line handle-switch-frame handle-select-window scroll-up scroll-down))) nil [5209 5532])
            ("flyspell-deplacement-commands" variable nil nil [5534 5821])
            ("flyspell-issue-welcome-flag" variable (:default-value t) nil [5823 5979])
            ("flyspell-issue-message-flag" variable (:default-value t) nil [5981 6126])
            ("flyspell-incorrect-hook" variable nil nil [6128 6609])
            ("flyspell-default-dictionary" variable nil nil [6611 7193])
            ("flyspell-tex-command-regexp" variable (:default-value "\\(\\(begin\\|end\\)[ 	]*{\\|\\(cite[a-z*]*\\|label\\|ref\\|eqref\\|usepackage\\|documentclass\\)[ 	]*\\(\\[[^]]*\\]\\)?{[^{}]*\\)") nil [7195 7495])
            ("flyspell-check-tex-math-command" variable nil nil [7497 7797])
            ("flyspell-dictionaries-that-consider-dash-as-word-delimiter" variable (:default-value (quote ("francais" "deutsch8" "norsk"))) nil [7799 8034])
            ("flyspell-abbrev-p" variable nil nil [8036 8179])
            ("flyspell-use-global-abbrev-table-p" variable nil nil [8181 8353])
            ("flyspell-mode-line-string" variable (:default-value " Fly") nil [8355 8587])
            ("flyspell-large-region" variable (:default-value 1000) nil [8589 9136])
            ("flyspell-insert-function" variable (:default-value (function insert)) nil [9138 9290])
            ("flyspell-before-incorrect-word-string" variable nil nil [9292 9457])
            ("flyspell-after-incorrect-word-string" variable nil nil [9459 9621])
            ("flyspell-mode-map" variable nil nil [9623 9649])
            ("flyspell-use-meta-tab" variable (:default-value t) nil [9651 9949])
            ("flyspell-auto-correct-binding" variable (:default-value [(control 59)]) nil [9951 10101])
            ("flyspell-generic-check-word-predicate" variable nil nil [10914 11201])
            ("make-variable-buffer-local" code nil nil [11202 11269])
            ("defvaralias" code nil nil [11270 11355])
            ("put" code nil nil [11432 11500])
            ("put" code nil nil [11501 11572])
            ("message-signature-separator" variable nil nil [11573 11609])
            ("mail-mode-flyspell-verify" function nil nil [11610 12466])
            ("put" code nil nil [12543 12617])
            ("texinfo-mode-flyspell-verify" function nil nil [12618 12804])
            ("put" code nil nil [12881 12947])
            ("tex-mode-flyspell-verify" function nil nil [12948 13384])
            ("put" code nil nil [13461 13529])
            ("put" code nil nil [13530 13598])
            ("put" code nil nil [13599 13667])
            ("sgml-lexical-context" function (:prototype-flag t) nil [13669 13713])
            ("sgml-mode-flyspell-verify" function nil nil [13715 14053])
            ("flyspell-prog-text-faces" variable (:default-value (quote (font-lock-string-face font-lock-comment-face font-lock-doc-face))) nil [14280 14443])
            ("flyspell-generic-progmode-verify" function nil nil [14445 14725])
            ("flyspell-prog-mode" function (:user-visible-flag t) nil [14742 14989])
            ("make-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15216 15292])
            ("overlayp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15293 15369])
            ("overlays-in" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15370 15446])
            ("delete-overlay" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15447 15523])
            ("overlays-at" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15524 15600])
            ("overlay-put" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15601 15677])
            ("overlay-get" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15678 15754])
            ("previous-overlay-change" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [15755 15831])
            ("flyspell-mouse-map" variable (:default-value (let ((map (make-sparse-keymap))) (if (featurep (quote xemacs)) (define-key map [button2] (function flyspell-correct-word)) (define-key map [down-mouse-2] (function flyspell-correct-word)) (define-key map [mouse-2] (quote undefined))) map)) nil [16058 16367])
            ("flyspell-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (if flyspell-use-meta-tab (define-key map "\211" (quote flyspell-auto-correct-word))) (define-key map flyspell-auto-correct-binding (quote flyspell-auto-correct-previous-word)) (define-key map [(control 44)] (quote flyspell-goto-next-error)) (define-key map [(control 46)] (quote flyspell-auto-correct-word)) (define-key map [3 36] (quote flyspell-correct-word-before-point)) map)) nil [16369 16877])
            ("flyspell-consider-dash-as-word-delimiter-flag" variable nil nil [16907 17036])
            ("make-variable-buffer-local" code nil nil [17037 17112])
            ("flyspell-dash-dictionary" variable nil nil [17113 17150])
            ("make-variable-buffer-local" code nil nil [17151 17205])
            ("flyspell-dash-local-dictionary" variable nil nil [17206 17249])
            ("make-variable-buffer-local" code nil nil [17250 17310])
            ("flyspell-incorrect" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "Red1")) (t :underline t :inherit error)))
                :type "face")
                nil [17537 17772])
            ("flyspell-duplicate" variable
               (:default-value (quote ((((supports :underline (:style wave))) :underline (:style wave :color "DarkOrange")) (t :underline t :inherit warning)))
                :type "face")
                nil [17774 18073])
            ("flyspell-overlay" variable nil nil [18075 18104])
            ("define-minor-mode" code nil nil [18426 19927])
            ("turn-on-flyspell" function nil nil [19944 20034])
            ("turn-off-flyspell" function nil nil [20051 20144])
            ("custom-add-option" code nil nil [20146 20199])
            ("flyspell-buffers" variable nil nil [20576 20605])
            ("flyspell-minibuffer-p" function (:arguments ("buffer")) nil [20832 20999])
            ("flyspell-last-buffer" variable nil nil [21226 21323])
            ("flyspell-accept-buffer-local-defs" function (:arguments ("force")) nil [21325 22593])
            ("flyspell-hack-local-variables-hook" function nil nil [22595 22771])
            ("flyspell-kill-ispell-hook" function nil nil [22773 22958])
            ("add-hook" code nil nil [23130 23192])
            ("flyspell-mode-on" function nil nil [23419 25610])
            ("flyspell-delay-commands" function nil nil [25837 26056])
            ("flyspell-delay-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [26283 26641])
            ("flyspell-deplacement-commands" function nil nil [26868 27117])
            ("flyspell-deplacement-command" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [27344 27672])
            ("flyspell-word-cache-start" variable nil nil [27899 27938])
            ("flyspell-word-cache-end" variable nil nil [27939 27978])
            ("flyspell-word-cache-word" variable nil nil [27979 28018])
            ("flyspell-word-cache-result" variable (:default-value (quote _)) nil [28019 28057])
            ("make-variable-buffer-local" code nil nil [28058 28113])
            ("make-variable-buffer-local" code nil nil [28114 28167])
            ("make-variable-buffer-local" code nil nil [28168 28222])
            ("make-variable-buffer-local" code nil nil [28223 28279])
            ("flyspell-pre-buffer" variable nil nil [28656 28732])
            ("flyspell-pre-point" variable nil nil [28733 28807])
            ("flyspell-pre-column" variable nil nil [28808 28883])
            ("flyspell-pre-pre-buffer" variable nil nil [28884 28920])
            ("flyspell-pre-pre-point" variable nil nil [28921 28957])
            ("make-variable-buffer-local" code nil nil [28958 29006])
            ("flyspell-previous-command" variable nil nil [29248 29340])
            ("flyspell-pre-command-hook" function (:user-visible-flag t) nil [29567 29820])
            ("flyspell-mode-off" function nil nil [30062 30714])
            ("flyspell-check-pre-word-p" function nil nil [30941 32798])
            ("flyspell-changes" variable nil nil [33175 33204])
            ("make-variable-buffer-local" code nil nil [33205 33251])
            ("flyspell-after-change-function" function (:arguments ("start" "stop" "len")) nil [33478 33649])
            ("flyspell-check-changed-word-p" function (:arguments ("start" "stop")) nil [33876 34374])
            ("flyspell-check-word-p" function nil nil [34601 35721])
            ("flyspell-debug-signal-no-check" function (:arguments ("msg" "obj")) nil [35948 36177])
            ("flyspell-debug-signal-pre-word-checked" function nil nil [36404 36862])
            ("flyspell-debug-signal-word-checked" function nil nil [37089 39494])
            ("flyspell-debug-signal-changed-checked" function nil nil [39721 39999])
            ("flyspell-post-command-hook" function (:user-visible-flag t) nil [41051 43146])
            ("flyspell-notify-misspell" function (:arguments ("word" "poss")) nil [43373 43669])
            ("flyspell-word-search-backward" function (:arguments ("word" "bound" "ignore-case")) nil [43896 44893])
            ("flyspell-word-search-forward" function (:arguments ("word" "bound")) nil [45120 45985])
            ("flyspell-word" function
               (:user-visible-flag t
                :arguments ("following" "known-misspelling"))
                nil [46212 52552])
            ("flyspell-math-tex-command-p" function nil nil [53079 53267])
            ("flyspell-tex-command-p" function (:arguments ("word")) nil [53494 53854])
            ("defalias" code nil nil [53856 53912])
            ("defalias" code nil nil [53913 53977])
            ("flyspell-get-word" function (:arguments ("following" "extra-otherchars")) nil [54204 56361])
            ("flyspell-small-region" function (:arguments ("beg" "end")) nil [56588 57315])
            ("flyspell-external-ispell-process" variable (:default-value (quote nil)) nil [57542 57629])
            ("flyspell-external-ispell-buffer" variable (:default-value (quote nil)) nil [57856 57900])
            ("flyspell-large-region-buffer" variable (:default-value (quote nil)) nil [57901 57942])
            ("flyspell-large-region-beg" variable (:default-value (point-min)) nil [57943 57989])
            ("flyspell-large-region-end" variable (:default-value (point-max)) nil [57990 58036])
            ("flyspell-external-point-words" function nil nil [58263 61909])
            ("flyspell-process-localwords" function (:arguments ("misspellings-buffer")) nil [62361 63803])
            ("flyspell-check-region-doublons" function (:arguments ("beg" "end")) nil [63980 64395])
            ("flyspell-large-region" function (:arguments ("beg" "end")) nil [64622 67319])
            ("flyspell-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [68011 68457])
            ("flyspell-buffer" function (:user-visible-flag t) nil [68699 68812])
            ("flyspell-old-buffer-error" variable nil nil [69039 69077])
            ("flyspell-old-pos-error" variable nil nil [69078 69113])
            ("flyspell-goto-next-error" function (:user-visible-flag t) nil [69340 70365])
            ("flyspell-overlay-p" function (:arguments ("o")) nil [70592 70730])
            ("flyspell-delete-region-overlays" function (:arguments ("beg" "end")) nil [71107 71495])
            ("flyspell-delete-all-overlays" function nil nil [71497 71642])
            ("flyspell-unhighlight-at" function (:arguments ("pos")) nil [71869 72275])
            ("flyspell-properties-at-p" function (:arguments ("pos")) nil [72652 73162])
            ("make-flyspell-overlay" function (:arguments ("beg" "end" "face" "mouse-face")) nil [73389 74379])
            ("flyspell-highlight-incorrect-region" function (:arguments ("beg" "end" "poss")) nil [74606 75761])
            ("flyspell-highlight-duplicate-region" function (:arguments ("beg" "end" "poss")) nil [75988 76691])
            ("flyspell-auto-correct-pos" variable nil nil [76918 76956])
            ("flyspell-auto-correct-region" variable nil nil [76957 76998])
            ("flyspell-auto-correct-ring" variable nil nil [76999 77038])
            ("flyspell-auto-correct-word" variable nil nil [77039 77078])
            ("make-variable-buffer-local" code nil nil [77079 77134])
            ("make-variable-buffer-local" code nil nil [77135 77193])
            ("make-variable-buffer-local" code nil nil [77194 77250])
            ("make-variable-buffer-local" code nil nil [77251 77307])
            ("flyspell-check-previous-highlighted-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77534 78501])
            ("flyspell-display-next-corrections" function (:arguments ("corrections")) nil [78728 79351])
            ("flyspell-abbrev-table" function nil nil [79578 79726])
            ("flyspell-define-abbrev" function (:arguments ("name" "expansion")) nil [79953 80113])
            ("flyspell-auto-correct-word" function (:user-visible-flag t) nil [80340 84236])
            ("flyspell-auto-correct-previous-pos" variable nil nil [84463 84572])
            ("flyspell-auto-correct-previous-hook" function (:user-visible-flag t) nil [84799 85196])
            ("flyspell-auto-correct-previous-word" function
               (:user-visible-flag t
                :arguments ("position"))
                nil [85423 87103])
            ("flyspell-correct-word" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [87331 87610])
            ("flyspell-correct-word-before-point" function
               (:user-visible-flag t
                :arguments ("event" "opoint"))
                nil [87612 89457])
            ("flyspell-do-correct" function (:arguments ("replace" "poss" "word" "cursor-location" "start" "end" "save")) nil [89680 91792])
            ("flyspell-ajust-cursor-point" function (:arguments ("save" "cursor-location" "old-max")) nil [92019 92336])
            ("flyspell-emacs-popup" function (:arguments ("event" "poss" "word")) nil [92563 93968])
            ("flyspell-xemacs-popup" function (:arguments ("poss" "word" "cursor-location" "start" "end" "save")) nil [94195 95923])
            ("flyspell-maybe-correct-transposition" function (:arguments ("beg" "end" "poss")) nil [96150 97091])
            ("flyspell-maybe-correct-doubling" function (:arguments ("beg" "end" "poss")) nil [97093 97932])
            ("flyspell-already-abbrevp" function (:arguments ("table" "word")) nil [98159 98275])
            ("flyspell-change-abbrev" function (:arguments ("table" "old" "new")) nil [98502 98586])
            ("flyspell" package nil nil [98588 98607]))          
      :file "flyspell.el.gz"
      :pointmax 98635
      :fsize 21095
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "dns-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("dns-mode" customgroup (:user-visible-flag t) nil [1470 1548])
            ("dns-mode-classes" variable
               (:constant-flag t
                :default-value (quote ("IN" "CS" "CH" "HS")))
                nil [1550 1644])
            ("dns-mode-types" variable
               (:constant-flag t
                :default-value (quote ("A" "NS" "MD" "MF" "CNAME" "SOA" "MB" "MG" "MR" "NULL" "WKS" "PTR" "HINFO" "MINFO" "MX" "TXT" "RP" "AFSDB" "X25" "ISDN" "RT" "NSAP" "NSAP" "SIG" "KEY" "PX" "GPOS" "AAAA" "LOC" "NXT" "EID" "NIMLOC" "SRV" "ATMA" "NAPTR" "KX" "CERT" "A6" "DNAME" "SINK" "OPT" "APL" "DS" "SSHFP" "RRSIG" "NSEC" "DNSKEY" "UINFO" "UID" "GID" "UNSPEC" "TKEY" "TSIG" "IXFR" "AXFR" "MAILB" "MAILA")))
                nil [1646 2136])
            ("dns-mode-control-entity-face" variable (:default-value (quote font-lock-keyword-face)) nil [2153 2272])
            ("dns-mode-bad-control-entity-face" variable (:default-value (quote font-lock-warning-face)) nil [2274 2407])
            ("dns-mode-type-face" variable (:default-value (quote font-lock-type-face)) nil [2409 2505])
            ("dns-mode-class-face" variable (:default-value (quote font-lock-constant-face)) nil [2507 2609])
            ("dns-mode-font-lock-keywords" variable (:default-value (\` (("^$ORIGIN" 0 (\, dns-mode-control-entity-face)) ("^$INCLUDE" 0 (\, dns-mode-control-entity-face)) ("^$[a-z0-9A-Z]+" 0 (\, dns-mode-bad-control-entity-face)) ((\, (regexp-opt dns-mode-classes)) 0 (\, dns-mode-class-face)) ((\, (regexp-opt dns-mode-types)) 0 (\, dns-mode-type-face))))) nil [2611 3030])
            ("dns-mode-soa-auto-increment-serial" variable (:default-value t) nil [3032 3525])
            ("dns-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table))) (modify-syntax-entry 59 "<   " table) (modify-syntax-entry 10 ">   " table) table)) nil [3545 3761])
            ("dns-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote dns-mode-soa-increment-serial)) map)) nil [3775 3941])
            ("dns-mode-menu" variable nil nil [3953 4021])
            ("easy-menu-define" code nil nil [4023 4154])
            ("define-derived-mode" code nil nil [4181 5007])
            ("dns-mode-soa-increment-serial" function (:user-visible-flag t) nil [5083 7088])
            ("dns-mode-soa-maybe-increment-serial" function nil nil [7090 7692])
            ("dns-mode" package nil nil [7694 7713]))          
      :file "dns-mode.el.gz"
      :pointmax 7741
      :fsize 3003
      :lastmodtime '(21710 25077 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tex-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("skeleton" include nil nil [1159 1178])
            ("cl-lib" include nil nil [1139 1156])
            ("compare-w" include nil nil [1116 1136])
            ("font-lock-comment-face" variable nil nil [1181 1212])
            ("font-lock-doc-face" variable nil nil [1213 1240])
            ("shell" include nil nil [1242 1258])
            ("compile" include nil nil [1259 1277])
            ("tex-file" customgroup (:user-visible-flag t) nil [1279 1364])
            ("tex-run" customgroup (:user-visible-flag t) nil [1366 1464])
            ("tex-view" customgroup (:user-visible-flag t) nil [1466 1556])
            ("tex-shell-file-name" variable nil nil [1573 1754])
            ("tex-directory" variable (:default-value (purecopy ".")) nil [1771 2099])
            ("tex-first-line-header-regexp" variable nil nil [2116 2481])
            ("tex-main-file" variable nil nil [2498 2775])
            ("tex-offer-save" variable (:default-value t) nil [2792 2934])
            ("tex-run-command" variable (:default-value (purecopy "tex")) nil [2951 3149])
            ("latex-run-command" variable (:default-value (purecopy "latex")) nil [3166 3372])
            ("slitex-run-command" variable (:default-value (purecopy "slitex")) nil [3389 3599])
            ("tex-start-options" variable (:default-value (purecopy "")) nil [3616 3967])
            ("tex-start-commands" variable (:default-value (purecopy "\\nonstopmode\\input")) nil [3984 4460])
            ("latex-standard-block-names" variable (:default-value (quote ("abstract" "array" "center" "description" "displaymath" "document" "enumerate" "eqnarray" "eqnarray*" "equation" "figure" "figure*" "flushleft" "flushright" "itemize" "letter" "list" "minipage" "picture" "quotation" "quote" "slide" "sloppypar" "tabbing" "table" "table*" "tabular" "tabular*" "thebibliography" "theindex*" "titlepage" "trivlist" "verbatim" "verbatim*" "verse" "math"))) nil [4462 4959])
            ("latex-block-names" variable nil nil [4976 5158])
            ("tex-bibtex-command" variable (:default-value (purecopy "bibtex")) nil [5175 5471])
            ("tex-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5488 5776])
            ("tex-alt-dvi-print-command" variable (:default-value (purecopy "lpr -d")) nil [5793 6494])
            ("tex-dvi-view-command" variable (:default-value (\` (cond ((eq window-system (quote x)) (\, (purecopy "xdvi"))) ((eq window-system (quote w32)) (\, (purecopy "yap"))) (t (\, (purecopy "dvi2tty * | cat -s")))))) nil [6511 7079])
            ("tex-show-queue-command" variable (:default-value (purecopy "lpq")) nil [7096 7310])
            ("tex-default-mode" variable (:default-value (quote latex-mode)) nil [7327 7660])
            ("tex-open-quote" variable (:default-value (purecopy "``")) nil [7677 7861])
            ("tex-close-quote" variable (:default-value (purecopy "''")) nil [7878 8064])
            ("tex-fontify-script" variable (:default-value t) nil [8066 8206])
            ("put" code nil nil [8207 8263])
            ("tex-font-script-display" variable (:default-value (quote (-0.2 0.2))) nil [8265 8720])
            ("tex-last-temp-file" variable nil nil [8722 8924])
            ("tex-command" variable (:default-value "tex") nil [8926 9286])
            ("tex-trailer" variable nil nil [9288 9389])
            ("tex-start-of-header" variable nil nil [9391 9501])
            ("tex-end-of-header" variable nil nil [9503 9609])
            ("tex-shell-cd-command" variable (:default-value "cd") nil [9611 9779])
            ("tex-zap-file" variable nil nil [9781 9947])
            ("tex-last-buffer-texed" variable nil nil [9949 10016])
            ("tex-print-file" variable nil nil [10018 10143])
            ("tex-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 37 "<" st) (modify-syntax-entry 10 ">" st) (modify-syntax-entry 12 ">" st) (modify-syntax-entry 0 "w" st) (modify-syntax-entry 39 "w" st) (modify-syntax-entry 64 "_" st) (modify-syntax-entry 42 "_" st) (modify-syntax-entry 9 " " st) (modify-syntax-entry 126 "." st) (modify-syntax-entry 36 "$$" st) (modify-syntax-entry 92 "/" st) (modify-syntax-entry 34 "." st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 95 "." st) (modify-syntax-entry 94 "." st) st)) nil [10145 10949])
            ("latex-imenu-indent-string" variable (:default-value ". ") nil [10982 11200])
            ("latex-section-alist" variable (:default-value (quote (("part" . 0) ("chapter" . 1) ("section" . 2) ("subsection" . 3) ("subsubsection" . 4) ("paragraph" . 5) ("subparagraph" . 6)))) nil [11202 11372])
            ("latex-metasection-list" variable (:default-value (quote ("documentstyle" "documentclass" "begin{document}" "end{document}" "appendix" "frontmatter" "mainmatter" "backmatter"))) nil [11374 11535])
            ("latex-imenu-create-index" function nil nil [11537 13677])
            ("latex-outline-regexp" variable (:default-value (concat "\\\\" (regexp-opt (append latex-metasection-list (mapcar (quote car) latex-section-alist)) t))) nil [13712 13852])
            ("latex-outline-level" function nil nil [13854 14004])
            ("tex-current-defun-name" function nil nil [14006 14383])
            ("tex-font-lock-keywords-1" variable
               (:constant-flag t
                :default-value (eval-when-compile (let* ((headings (regexp-opt (quote ("title" "begin" "end" "chapter" "part" "section" "subsection" "subsubsection" "paragraph" "subparagraph" "subsubparagraph" "newcommand" "renewcommand" "providecommand" "newenvironment" "renewenvironment" "newtheorem" "renewtheorem")) t)) (variables (regexp-opt (quote ("newcounter" "newcounter*" "setcounter" "addtocounter" "setlength" "addtolength" "settowidth")) t)) (includes (regexp-opt (quote ("input" "include" "includeonly" "bibliography" "epsfig" "psfig" "epsf" "nofiles" "usepackage" "documentstyle" "documentclass" "verbatiminput" "includegraphics" "includegraphics*")) t)) (verbish (regexp-opt (quote ("url" "nolinkurl" "path")) t)) (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (inbraces-re (lambda (re) (concat "\\(?:[^{}\\]\\|\\\\.\\|" re "\\)"))) (arg (concat "{\\(" (funcall inbraces-re "{[^}]*}") "+\\)"))) (\` (((\, (concat "\\$\\$?\\(?:[^$\\{}]\\|\\\\.\\|{" (funcall inbraces-re (concat "{" (funcall inbraces-re "{[^}]*}") "*}")) "*}\\)+\\$?\\$")) (0 tex-math-face)) ((\, (concat slash headings "\\*?" opt arg)) 3 font-lock-function-name-face keep) ((\, (concat slash "\\(?:provide\\|\\(?:re\\)?new\\)command\\** *\\(\\\\[A-Za-z@]+\\)")) 1 font-lock-function-name-face keep) ((\, (concat slash variables " *" arg)) 2 font-lock-variable-name-face) ((\, (concat slash includes opt arg)) 3 font-lock-builtin-face) ((\, (concat slash verbish opt arg)) 3 (quote tex-verbatim)) ("^[ 	]*\\\\def *\\\\\\(\\(\\w\\|@\\)+\\)" 1 font-lock-function-name-face))))))
                nil [16142 19364])
            ("tex-font-lock-append-prop" function (:arguments ("prop")) nil [19366 19514])
            ("tex-font-lock-keywords-2" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-1 (eval-when-compile (let* ((bold (regexp-opt (quote ("textbf" "textsc" "textup" "boldsymbol" "pmb")) t)) (italic (regexp-opt (quote ("textit" "textsl" "emph")) t)) (citations (regexp-opt (quote ("label" "ref" "pageref" "vref" "eqref" "cite" "nocite" "index" "glossary" "bibitem" "citep" "citet")) t)) (specials-1 (regexp-opt (quote ("\\" "\\*")) t)) (specials-2 (regexp-opt (quote ("linebreak" "nolinebreak" "pagebreak" "nopagebreak" "newline" "newpage" "clearpage" "cleardoublepage" "displaybreak" "allowdisplaybreaks" "enlargethispage")) t)) (general "\\([a-zA-Z@]+\\**\\|[^ 	
]\\)") (slash "\\\\") (opt " *\\(\\[[^]]*\\] *\\)*") (args "\\(\\(?:[^{}&\\]+\\|\\\\.\\|{[^}]*}\\)+\\)") (arg "{\\(\\(?:[^{}\\]+\\|\\\\.\\|{[^}]*}\\)+\\)")) (list (list (concat slash citations opt arg) 3 (quote font-lock-constant-face)) (cons (concat (regexp-opt (\` ("``" "\"<" "\"`" "<<" "«")) t) "[^'\">{]+" (regexp-opt (\` ("''" "\">" "\"'" ">>" "»")) t)) (quote font-lock-string-face)) (cons (concat slash specials-1) (quote font-lock-warning-face)) (list (concat "\\(" slash specials-2 "\\)\\([^a-zA-Z@]\\|\\'\\)") 1 (quote font-lock-warning-face)) (concat slash general) (list (concat slash bold " *" arg) 2 (quote (tex-font-lock-append-prop (quote bold))) (quote append)) (list (concat slash italic " *" arg) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(em\\|it\\|sl\\)\\>" args) 2 (quote (tex-font-lock-append-prop (quote italic))) (quote append)) (list (concat "\\\\\\(bf\\(series\\)?\\)\\>" args) 3 (quote (tex-font-lock-append-prop (quote bold))) (quote append)))))))
                nil [19516 22309])
            ("tex-font-lock-suscript" function (:arguments ("pos")) nil [22311 22834])
            ("tex-font-lock-match-suscript" function (:arguments ("limit")) nil [22836 23410])
            ("tex-font-lock-keywords-3" variable
               (:constant-flag t
                :default-value (append tex-font-lock-keywords-2 (quote ((tex-font-lock-match-suscript (1 (tex-font-lock-suscript (match-beginning 0)) append))))))
                nil [23412 23638])
            ("tex-font-lock-keywords" variable
               (:constant-flag t
                :default-value tex-font-lock-keywords-1)
                nil [23640 23749])
            ("tex-verbatim-environments" variable (:default-value (quote ("verbatim" "verbatim*"))) nil [23751 23813])
            ("put" code nil nil [23814 23921])
            ("latex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules tex-syntax-propertize-rules ("\\\\\\(?:end\\|begin\\) *\\({[^
{}]*}\\)" (1 (ignore (tex-env-mark (match-beginning 0) (match-beginning 1) (match-end 1)))))))
                nil [24182 24469])
            ("tex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules ("\\\\verb\\**\\([^a-z@*]\\)" (1 (prog1 "\"" (tex-font-lock-verb (match-beginning 0) (char-after (match-beginning 1))))))))
                nil [23944 24178])
            ("tex-env-mark" function (:arguments ("cmd" "start" "end")) nil [24472 25720])
            ("define-minor-mode" code nil nil [25722 26365])
            ("latex-env-before-change" function (:arguments ("start" "end")) nil [26367 28155])
            ("tex-font-lock-unfontify-region" function (:arguments ("beg" "end")) nil [28157 28589])
            ("tex-suscript-height-ratio" variable (:default-value 0.8) nil [28591 28879])
            ("tex-suscript-height-minimum" variable nil nil [28881 29293])
            ("tex-suscript-height" function (:arguments ("height")) nil [29295 29787])
            ("superscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [29789 29907])
            ("subscript" variable
               (:default-value (quote ((t :height tex-suscript-height)))
                :type "face")
                nil [29908 30023])
            ("tex-math" variable
               (:default-value (quote ((t :inherit font-lock-string-face)))
                :type "face")
                nil [30025 30146])
            ("define-obsolete-face-alias" code nil nil [30147 30207])
            ("tex-math-face" variable (:default-value (quote tex-math)) nil [30208 30240])
            ("tex-verbatim" variable
               (:default-value (quote ((t :family "courier")))
                :type "face")
                nil [30242 30402])
            ("define-obsolete-face-alias" code nil nil [30403 30471])
            ("tex-verbatim-face" variable (:default-value (quote tex-verbatim)) nil [30472 30512])
            ("tex-font-lock-verb" function (:arguments ("start" "delim")) nil [30514 31563])
            ("tex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [31611 31883])
            ("tex-define-common-keys" function (:arguments ("keymap")) nil [31887 33127])
            ("tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (tex-define-common-keys map) (define-key map "\"" (quote tex-insert-quote)) (define-key map "
" (quote tex-terminate-paragraph)) (define-key map "\215" (quote latex-insert-item)) (define-key map "}" (quote up-list)) (define-key map "{" (quote tex-insert-braces)) (define-key map "" (quote tex-region)) (define-key map "" (quote tex-buffer)) (define-key map "" (quote tex-file)) (define-key map "" (quote tex-compile)) (define-key map "	" (quote tex-bibtex-file)) (define-key map "" (quote latex-insert-block)) (define-key map "" (quote latex-insert-block)) (define-key map "]" (quote latex-close-block)) (define-key map "/" (quote latex-close-block)) (define-key map "" (quote latex-close-block)) (define-key map "" (quote tex-goto-last-unclosed-latex-block)) (define-key map "" (quote tex-feed-input)) (define-key map [(control return)] (quote tex-feed-input)) (define-key map [menu-bar tex tex-bibtex-file] (quote ("BibTeX File" . tex-bibtex-file))) (define-key map [menu-bar tex tex-validate-region] (quote (menu-item "Validate Region" tex-validate-region :enable mark-active))) (define-key map [menu-bar tex tex-validate-buffer] (quote ("Validate Buffer" . tex-validate-buffer))) (define-key map [menu-bar tex tex-region] (quote (menu-item "TeX Region" tex-region :enable mark-active))) (define-key map [menu-bar tex tex-buffer] (quote ("TeX Buffer" . tex-buffer))) (define-key map [menu-bar tex tex-file] (quote ("TeX File" . tex-file))) map)) nil [33129 34834])
            ("latex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) (define-key map "" (quote latex-split-block)) map)) nil [34836 35051])
            ("plain-tex-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tex-mode-map) map)) nil [35053 35225])
            ("tex-shell-map" variable (:default-value (let ((m (make-sparse-keymap))) (set-keymap-parent m shell-mode-map) (tex-define-common-keys m) m)) nil [35227 35440])
            ("tex-face-alist" variable (:default-value (quote ((bold . "{\\bf ") (italic . "{\\it ") (bold-italic . "{\\bi ") (underline . "\\underline{") (default . "{\\rm ")))) nil [35442 35665])
            ("tex-latex-face-alist" variable (:default-value (\` ((italic . "{\\em ") (\,@ tex-face-alist)))) nil [35667 35794])
            ("tex-facemenu-add-face-function" function (:arguments ("face" "end")) nil [35796 36317])
            ("tex-guess-mode" function nil nil [36417 37346])
            ("define-derived-mode" code nil nil [37601 37685])
            ("defalias" code nil nil [37977 38034])
            ("setq" code nil nil [38239 38379])
            ("tex-mode" function (:user-visible-flag t) nil [38397 38947])
            ("defalias" code nil nil [39409 39439])
            ("defalias" code nil nil [39455 39497])
            ("defalias" code nil nil [39513 39547])
            ("define-derived-mode" code nil nil [39564 41494])
            ("define-derived-mode" code nil nil [41511 44973])
            ("define-derived-mode" code nil nil [44990 46882])
            ("tex-common-initialization" function nil nil [46884 48697])
            ("tex-categorize-whitespace" function (:arguments ("backward-limit")) nil [48699 49660])
            ("tex-insert-quote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49662 51966])
            ("tex-validate-buffer" function (:user-visible-flag t) nil [51968 54707])
            ("tex-validate-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [54709 55867])
            ("tex-terminate-paragraph" function
               (:user-visible-flag t
                :arguments ("inhibit-validation"))
                nil [55869 56552])
            ("define-skeleton" code nil nil [56554 56670])
            ("latex-fill-nobreak-predicate" function nil nil [56823 57272])
            ("latex-block-default" variable (:default-value "enumerate") nil [57274 57314])
            ("latex-block-args-alist" variable (:default-value (quote (("array" nil 123 (skeleton-read "Format: ") 125) ("tabular" nil 123 (skeleton-read "Format: ") 125) ("minipage" nil 123 (skeleton-read "Size: ") 125) ("picture" nil 40 (skeleton-read "SizeX,SizeY: ") 41)))) nil [57316 57936])
            ("latex-block-body-alist" variable (:default-value (quote (("enumerate" nil (quote (latex-insert-item)) > _) ("itemize" nil (quote (latex-insert-item)) > _) ("table" nil "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))) n _) ("figure" nil > _ n "\\caption{" > (skeleton-read "Caption: ") "}" > n (quote (if (and (boundp (quote reftex-mode)) reftex-mode) (reftex-label "table"))))))) nil [57938 58612])
            ("defalias" code nil nil [58656 58703])
            ("define-skeleton" code nil nil [58704 59478])
            ("define-skeleton" code nil nil [59480 59564])
            ("latex-complete-bibtex-cache" variable nil nil [59592 59632])
            ("define-obsolete-function-alias" code nil nil [59634 59715])
            ("bibtex-reference-key" variable nil nil [59717 59746])
            ("declare-function" code nil nil [59747 59809])
            ("latex-complete-bibtex-keys" function nil nil [59811 61065])
            ("latex-complete-envnames" function nil nil [61067 61157])
            ("latex-complete-refkeys" function nil nil [61159 61278])
            ("latex-complete-alist" variable (:default-value (quote (("\\`\\\\\\(short\\)?cite\\'" . latex-complete-bibtex-keys) ("\\`\\\\\\(begin\\|end\\)\\'" . latex-complete-envnames) ("\\`\\\\[vf]?ref\\'" . latex-complete-refkeys)))) nil [61280 61527])
            ("latex-complete-data" function nil nil [61529 63029])
            ("tex-search-noncomment" function (:arguments ("body")) nil [63071 63466])
            ("tex-last-unended-begin" function nil nil [63468 63814])
            ("tex-next-unmatched-end" function nil nil [63816 64138])
            ("tex-next-unmatched-eparen" function (:arguments ("otype")) nil [64140 64847])
            ("tex-last-unended-eparen" function (:arguments ("ctype")) nil [64849 65496])
            ("tex-goto-last-unclosed-latex-block" function (:user-visible-flag t) nil [65498 65776])
            ("latex-handle-escaped-parens" variable (:default-value t) nil [65778 65816])
            ("latex-backward-sexp-1" function nil nil [65994 66847])
            ("latex-forward-sexp-1" function nil nil [67140 68207])
            ("latex-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [68209 68714])
            ("latex-syntax-after" function nil nil [68716 68883])
            ("latex-skip-close-parens" function nil nil [68885 69129])
            ("latex-down-list" function nil nil [69131 69492])
            ("defalias" code nil nil [69494 69546])
            ("define-skeleton" code nil nil [69547 69814])
            ("define-skeleton" code nil nil [69816 70300])
            ("tex-discount-args-cmds" variable
               (:constant-flag t
                :default-value (quote ("begin" "end" "input" "special" "cite" "ref" "include" "includeonly" "documentclass" "usepackage" "label")))
                nil [70302 70514])
            ("tex-count-words" function
               (:user-visible-flag t
                :arguments ("begin" "end"))
                nil [70516 71580])
            ("tex-error-parse-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()" st) (modify-syntax-entry 41 ")(" st) (modify-syntax-entry 92 "\\" st) (modify-syntax-entry 123 "_" st) (modify-syntax-entry 125 "_" st) (modify-syntax-entry 91 "_" st) (modify-syntax-entry 93 "_" st) (modify-syntax-entry 34 "_" st) st)) nil [71765 72245])
            ("tex-old-error-file-name" function nil nil [72247 73006])
            ("tex-error-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (gnu ("^l\\.\\([1-9][0-9]*\\) \\(?:\\.\\.\\.\\)?\\(.*\\)$" tex-old-error-file-name 1 nil nil nil (2 compilation-error-face)) ("^\\(?:Und\\|Ov\\)erfull \\\\[hv]box .* at lines? \\(\\([1-9][0-9]*\\)\\(?:--\\([1-9][0-9]*\\)\\)?\\)$" tex-old-error-file-name (2 . 3) nil 1 nil (1 compilation-warning-face)) ("^(Font) *\\([^ 
].* on input line \\([1-9][0-9]*\\)\\)\\.$" tex-old-error-file-name 2 nil 1 1 (2 compilation-warning-face)))))
                nil [73008 74175])
            ("define-derived-mode" code nil nil [74204 74362])
            ("tex-start-shell" function nil nil [74379 74838])
            ("tex-feed-input" function (:user-visible-flag t) nil [74840 75152])
            ("tex-display-shell" function nil nil [75154 75303])
            ("tex-shell-sentinel" function (:arguments ("proc" "msg")) nil [75305 75570])
            ("tex-set-buffer-directory" function (:arguments ("buffer" "directory")) nil [75572 75912])
            ("tex-send-command-modified-tick" variable nil nil [75914 75955])
            ("make-variable-buffer-local" code nil nil [75956 76016])
            ("tex-shell-proc" function nil nil [76018 76098])
            ("tex-shell-buf" function nil nil [76099 76159])
            ("tex-shell-buf-no-error" function nil nil [76160 76267])
            ("tex-send-command" function (:arguments ("command" "file" "background")) nil [76269 77773])
            ("tex-delete-last-temp-files" function (:arguments ("not-all")) nil [77775 78403])
            ("add-hook" code nil nil [78405 78460])
            ("tex-compile-history" variable nil nil [78535 78567])
            ("tex-input-files-re" variable (:default-value (eval-when-compile (concat "\\." (regexp-opt (quote ("tex" "texi" "texinfo" "bbl" "ind" "sty" "cls")) t) "\\'\\|\\`[^.]+\\'"))) nil [78569 78785])
            ("tex-use-reftex" variable (:default-value t) nil [78787 78923])
            ("tex-compile-commands" variable (:default-value (quote (((concat "pdf" tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.pdf") ((concat tex-command " " (if (< 0 (length tex-start-commands)) (shell-quote-argument tex-start-commands)) " %f") t "%r.dvi") ("xdvi %r &" "%r.dvi") ("\\doc-view \"%r.pdf\"" "%r.pdf") ("xpdf %r.pdf &" "%r.pdf") ("gv %r.ps &" "%r.ps") ("yap %r &" "%r.dvi") ("advi %r &" "%r.dvi") ("gv %r.pdf &" "%r.pdf") ("bibtex %r" "%r.aux" "%r.bbl") ("makeindex %r" "%r.idx" "%r.ind") ("texindex %r.??") ("dvipdfm %r" "%r.dvi" "%r.pdf") ("dvipdf %r" "%r.dvi" "%r.pdf") ("dvips -o %r.ps %r" "%r.dvi" "%r.ps") ("ps2pdf %r.ps" "%r.ps" "%r.pdf") ("lpr %r.ps" "%r.ps")))) nil [78925 80290])
            ("define-obsolete-function-alias" code nil nil [80292 80369])
            ("tex-guess-main-file" function (:arguments ("all")) nil [80371 81714])
            ("tex-main-file" function nil nil [81716 82719])
            ("tex-summarize-command" function (:arguments ("cmd")) nil [82721 82932])
            ("tex-uptodate-p" function (:arguments ("file")) nil [82934 85238])
            ("format-spec" function (:prototype-flag t) nil [85241 85278])
            ("tex-executable-cache" variable nil nil [85280 85313])
            ("tex-executable-exists-p" function (:arguments ("name")) nil [85314 85790])
            ("tex-command-executable" function (:arguments ("cmd")) nil [85792 85933])
            ("tex-command-active-p" function (:arguments ("cmd" "fspec")) nil [85935 86340])
            ("tex-cmd-bibtex-args" variable (:default-value "--min-crossref=100") nil [86342 86493])
            ("tex-format-cmd" function (:arguments ("format" "fspec")) nil [86495 87130])
            ("tex-compile-default" function (:arguments ("fspec")) nil [87132 90064])
            ("tex-cmd-doc-view" function (:arguments ("file")) nil [90066 90141])
            ("tex-compile" function
               (:user-visible-flag t
                :arguments ("dir" "cmd"))
                nil [90143 91578])
            ("tex-start-tex" function (:arguments ("command" "file" "dir")) nil [91580 92130])
            ("tex-send-tex-command" function (:arguments ("cmd" "dir")) nil [92132 92786])
            ("tex-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [92808 95495])
            ("tex-region-header" function (:arguments ("file" "beg")) nil [95497 97169])
            ("tex-buffer" function (:user-visible-flag t) nil [97171 97432])
            ("tex-file" function (:user-visible-flag t) nil [97434 98004])
            ("tex-generate-zap-file-name" function nil nil [98006 98462])
            ("tex-expand-files" function (:arguments ("s")) nil [98584 98958])
            ("tex-shell-running" function nil nil [98960 99409])
            ("tex-kill-job" function (:user-visible-flag t) nil [99411 99842])
            ("tex-recenter-output-buffer" function
               (:user-visible-flag t
                :arguments ("linenum"))
                nil [99844 100428])
            ("tex-print" function
               (:user-visible-flag t
                :arguments ("alt"))
                nil [100430 101422])
            ("tex-alt-print" function (:user-visible-flag t) nil [101424 101623])
            ("tex-view" function (:user-visible-flag t) nil [101625 102249])
            ("tex-append" function (:arguments ("file-name" "suffix")) nil [102251 103234])
            ("tex-show-print-queue" function (:user-visible-flag t) nil [103236 103540])
            ("tex-bibtex-file" function (:user-visible-flag t) nil [103542 104062])
            ("tex-indent-allhanging" variable (:default-value t) nil [104099 104131])
            ("tex-indent-arg" variable (:default-value 4) nil [104132 104157])
            ("tex-indent-basic" variable (:default-value 2) nil [104158 104185])
            ("tex-indent-item" variable (:default-value tex-indent-basic) nil [104186 104227])
            ("tex-indent-item-re" variable (:default-value "\\\\\\(bib\\)?item\\>") nil [104228 104279])
            ("latex-noindent-environments" variable (:default-value (quote ("document"))) nil [104280 104330])
            ("put" code nil nil [104331 104440])
            ("tex-latex-indent-syntax-table" variable (:default-value (let ((st (make-syntax-table tex-mode-syntax-table))) (modify-syntax-entry 36 "." st) (modify-syntax-entry 40 "." st) (modify-syntax-entry 41 "." st) st)) nil [104442 104705])
            ("latex-indent" function (:arguments ("arg")) nil [104707 105374])
            ("latex-indent-within-escaped-parens" variable nil nil [105376 105762])
            ("latex-find-indent" function (:arguments ("virtual")) nil [105764 109737])
            ("doctex-font-lock-^^A" function nil nil [109758 110512])
            ("doctex-font-lock-syntactic-face-function" function (:arguments ("state")) nil [110514 110888])
            ("doctex-syntax-propertize-rules" variable
               (:constant-flag t
                :default-value (syntax-propertize-precompile-rules latex-syntax-propertize-rules ("\\(\\^\\)\\^A" (1 (doctex-font-lock-^^A)))))
                nil [110911 111113])
            ("doctex-font-lock-keywords" variable (:default-value (append tex-font-lock-keywords (quote (("^%<[^>]*>" (0 font-lock-preprocessor-face t)))))) nil [111116 111238])
            ("define-derived-mode" code nil nil [111255 111760])
            ("run-hooks" code nil nil [111762 111793])
            ("tex-mode" package nil nil [111795 111814]))          
      :file "tex-mode.el.gz"
      :pointmax 111842
      :fsize 31381
      :lastmodtime '(21788 61018 0 0)
      :unmatched-syntax '((close-paren 111113 . 111114) (symbol 110891 . 110908) (open-paren 110890 . 110891) (close-paren 38379 . 38380) (symbol 38219 . 38236) (open-paren 38218 . 38219) (close-paren 24469 . 24470) (symbol 23924 . 23941) (open-paren 23923 . 23924) (close-paren 1178 . 1179) (symbol 1096 . 1113) (open-paren 1095 . 1096))))
  :file "!usr!share!emacs!24.5!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
