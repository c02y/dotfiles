;; Object helm-20150830.2133/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "helm-20150830.2133/"
  :tables
  (list
    (semanticdb-table "helm-files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [815 832])
            ("helm" include nil nil [833 848])
            ("helm-types" include nil nil [849 870])
            ("helm-utils" include nil nil [871 892])
            ("helm-external" include nil nil [893 917])
            ("helm-grep" include nil nil [918 938])
            ("helm-help" include nil nil [939 959])
            ("helm-locate" include nil nil [960 982])
            ("helm-bookmark" include nil nil [983 1007])
            ("helm-tags" include nil nil [1008 1028])
            ("helm-buffers" include nil nil [1029 1052])
            ("thingatpt" include nil nil [1053 1073])
            ("ffap" include nil nil [1074 1089])
            ("dired-aux" include nil nil [1090 1110])
            ("dired-x" include nil nil [1111 1129])
            ("tramp" include nil nil [1130 1146])
            ("image-dired" include nil nil [1147 1169])
            ("declare-function" code nil nil [1171 1232])
            ("declare-function" code nil nil [1233 1336])
            ("declare-function" code nil nil [1337 1411])
            ("declare-function" code nil nil [1412 1504])
            ("declare-function" code nil nil [1505 1581])
            ("declare-function" code nil nil [1582 1636])
            ("declare-function" code nil nil [1637 1726])
            ("declare-function" code nil nil [1727 1774])
            ("declare-function" code nil nil [1775 1815])
            ("declare-function" code nil nil [1816 1869])
            ("declare-function" code nil nil [1870 1921])
            ("declare-function" code nil nil [1922 1987])
            ("declare-function" code nil nil [1988 2034])
            ("declare-function" code nil nil [2035 2086])
            ("recentf-list" variable nil nil [2088 2109])
            ("helm-mm-matching-method" variable nil nil [2110 2142])
            ("define-helm-type-attribute" code nil nil [2172 2248])
            ("helm-files" customgroup (:user-visible-flag t) nil [2253 2340])
            ("helm-boring-file-regexp-list" variable (:default-value (mapcar (lambda (f) (concat (rx-to-string (replace-regexp-in-string "/$" "" f) t) "$")) completion-ignored-extensions)) nil [2342 2666])
            ("helm-for-files-preferred-list" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-files-in-current-dir helm-source-locate))) nil [2668 2973])
            ("helm-tramp-verbose" variable nil nil [2975 3206])
            ("helm-ff-auto-update-initial-value" variable nil nil [3208 3610])
            ("helm-ff-lynx-style-map" variable (:default-value t) nil [3612 3851])
            ("helm-ff-history-max-length" variable (:default-value 100) nil [3853 3992])
            ("helm-ff-smart-completion" variable (:default-value t) nil [3994 4186])
            ("helm-ff-tramp-not-fancy" variable (:default-value t) nil [4188 4385])
            ("helm-ff-exif-data-program" variable (:default-value "exiftran") nil [4387 4528])
            ("helm-ff-exif-data-program-args" variable (:default-value "-d") nil [4530 4666])
            ("helm-ff-newfile-prompt-p" variable (:default-value t) nil [4668 4827])
            ("helm-ff-avfs-directory" variable (:default-value "~/.avfs") nil [4829 5128])
            ("helm-ff-file-compressed-list" variable (:default-value (quote ("gz" "bz2" "zip" "7z"))) nil [5130 5299])
            ("helm-ff-printer-list" variable nil nil [5301 5702])
            ("helm-ff-transformer-show-only-basename" variable (:default-value t) nil [5704 5970])
            ("helm-ff-signal-error-on-dot-files" variable (:default-value t) nil [5972 6232])
            ("helm-ff-search-library-in-sexp" variable nil nil [6234 6384])
            ("helm-tooltip-hide-delay" variable (:default-value 25) nil [6386 6519])
            ("helm-ff-file-name-history-use-recentf" variable nil nil [6521 6688])
            ("helm-ff-skip-boring-files" variable nil nil [6690 6954])
            ("helm-ff-candidate-number-limit" variable (:default-value 5000) nil [6956 7132])
            ("helm-findutils-skip-boring-files" variable (:default-value t) nil [7134 7289])
            ("helm-findutils-search-full-path" variable nil nil [7291 7505])
            ("helm-files-save-history-extra-sources" variable (:default-value (quote ("Find" "Locate" "Recentf" "Files from Current Directory" "File Cache"))) nil [7507 7752])
            ("helm-find-files-before-init-hook" variable nil nil [7754 7899])
            ("helm-find-files-after-init-hook" variable nil nil [7901 8044])
            ("helm-multi-files-toggle-locate-binding" variable (:default-value "C-c p") nil [8046 8216])
            ("helm-find-files-bookmark-prefix" variable (:default-value "Helm-find-files: ") nil [8218 8374])
            ("helm-files-faces" customgroup (:user-visible-flag t) nil [8393 8528])
            ("helm-ff-prefix" variable
               (:default-value (quote ((t (:background "yellow" :foreground "black"))))
                :type "face")
                nil [8530 8703])
            ("helm-ff-executable" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [8705 8850])
            ("helm-ff-directory" variable
               (:default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))
                :type "face")
                nil [8852 9017])
            ("helm-ff-dotted-directory" variable
               (:default-value (quote ((t (:foreground "black" :background "DimGray"))))
                :type "face")
                nil [9019 9194])
            ("helm-ff-dotted-symlink-directory" variable
               (:default-value (quote ((t (:foreground "DarkOrange" :background "DimGray"))))
                :type "face")
                nil [9196 9394])
            ("helm-ff-symlink" variable
               (:default-value (quote ((t (:foreground "DarkOrange"))))
                :type "face")
                nil [9396 9535])
            ("helm-ff-invalid-symlink" variable
               (:default-value (quote ((t (:foreground "black" :background "red"))))
                :type "face")
                nil [9537 9705])
            ("helm-ff-file" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [9707 9852])
            ("helm-history-deleted" variable
               (:default-value (quote ((t (:inherit helm-ff-invalid-symlink))))
                :type "face")
                nil [9854 10013])
            ("helm-history-remote" variable
               (:default-value (quote ((t (:foreground "Indianred1"))))
                :type "face")
                nil [10015 10164])
            ("helm-find-files-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-x C-f") (quote helm-ff-run-locate)) (define-key map (kbd "C-x C-d") (quote helm-ff-run-browse-project)) (define-key map (kbd "C-x r m") (quote helm-ff-bookmark-set)) (define-key map (kbd "C-x r b") (quote helm-find-files-toggle-to-bookmark)) (define-key map (kbd "C-s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g p") (quote helm-ff-run-pdfgrep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-g a") (quote helm-ff-run-grep-ag)) (define-key map (kbd "C-c g") (quote helm-ff-run-gid)) (define-key map (kbd "M-.") (quote helm-ff-run-etags)) (define-key map (kbd "M-R") (quote helm-ff-run-rename-file)) (define-key map (kbd "M-C") (quote helm-ff-run-copy-file)) (define-key map (kbd "M-B") (quote helm-ff-run-byte-compile-file)) (define-key map (kbd "M-L") (quote helm-ff-run-load-file)) (define-key map (kbd "M-S") (quote helm-ff-run-symlink-file)) (define-key map (kbd "M-H") (quote helm-ff-run-hardlink-file)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "M-K") (quote helm-ff-run-kill-buffer-persistent)) (define-key map (kbd "C-c d") (quote helm-ff-persistent-delete)) (define-key map (kbd "M-e") (quote helm-ff-run-switch-to-eshell)) (define-key map (kbd "C-c i") (quote helm-ff-run-complete-fn-at-point)) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) (define-key map (kbd "C-c X") (quote helm-ff-run-open-file-with-default-tool)) (define-key map (kbd "M-!") (quote helm-ff-run-eshell-command-on-file)) (define-key map (kbd "M-%") (quote helm-ff-run-query-replace-on-marked)) (define-key map (kbd "C-c =") (quote helm-ff-run-ediff-file)) (define-key map (kbd "M-=") (quote helm-ff-run-ediff-merge-file)) (define-key map (kbd "M-p") (quote helm-ff-run-switch-to-history)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "M-i") (quote helm-ff-properties-persistent)) (define-key map (kbd "C-}") (quote helm-narrow-window)) (define-key map (kbd "C-{") (quote helm-enlarge-window)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c C-a") (quote helm-ff-run-gnus-attach-files)) (define-key map (kbd "C-c p") (quote helm-ff-run-print-file)) (define-key map (kbd "C-c /") (quote helm-ff-run-find-sh-command)) (define-key map (kbd "M-l") (quote helm-ff-rotate-left-persistent)) (define-key map (kbd "M-r") (quote helm-ff-rotate-right-persistent)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c r") (quote helm-ff-run-find-file-as-root)) (define-key map (kbd "C-c @") (quote helm-ff-run-insert-org-link)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) nil nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action))) (delq nil map))) nil [10227 14123])
            ("helm-read-file-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-cr-empty-string)) (define-key map (kbd "<M-RET>") (quote helm-cr-empty-string)) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-.") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) nil nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<M-left>") (quote helm-previous-source)) (define-key map (kbd "<M-right>") (quote helm-next-source))) (delq nil map))) nil [14125 15401])
            ("helm-find-files-doc-header" variable
               (:user-visible-flag t
                :default-value " (\\<helm-find-files-map>\\[helm-find-files-up-one-level]: Go up one level)")
                nil [15418 15613])
            ("helm-ff-auto-update-flag" variable nil nil [15614 15791])
            ("helm-ff-last-expanded" variable nil nil [15792 15869])
            ("helm-ff-default-directory" variable nil nil [15870 15908])
            ("helm-ff-history" variable nil nil [15909 15937])
            ("helm-ff-cand-to-mark" variable nil nil [15938 15971])
            ("helm-ff-url-regexp" variable (:default-value "\\`\\(news\\(post\\)?:\\|nntp:\\|mailto:\\|file:\\|\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\):/?/?\\).*") nil [15972 16176])
            ("helm-tramp-file-name-regexp" variable (:default-value "\\`/\\([^[/:]+\\|[^/]+]\\):") nil [16177 16243])
            ("helm-marked-buffer-name" variable (:default-value "*helm marked*") nil [16244 16292])
            ("helm-ff--auto-update-state" variable nil nil [16293 16332])
            ("helm-ff--deleting-char-backward" variable nil nil [16333 16377])
            ("helm-multi-files--toggle-locate" variable nil nil [16378 16422])
            ("helm-ff--move-to-first-real-candidate" variable (:default-value t) nil [16423 16471])
            ("helm-find-files--toggle-bookmark" variable nil nil [16472 16517])
            ("helm-find-files-actions" variable (:default-value (helm-make-actions "Find File" (quote helm-find-file-or-marked) "Find file in Dired" (quote helm-point-file-in-dired) (lambda nil (and (locate-library "elscreen") "Find file in Elscreen")) (quote helm-elscreen-find-file) "View file" (quote view-file) "Checksum File" (quote helm-ff-checksum) "Query replace fnames on marked" (quote helm-ff-query-replace-on-marked) "Query replace contents on marked" (quote helm-ff-query-replace) "Query replace regexp contents on marked" (quote helm-ff-query-replace-regexp) "Serial rename files" (quote helm-ff-serial-rename) "Serial rename by symlinking files" (quote helm-ff-serial-rename-by-symlink) "Serial rename by copying files" (quote helm-ff-serial-rename-by-copying) "Open file with default tool" (quote helm-open-file-with-default-tool) "Find file in hex dump" (quote hexl-find-file) "Browse project" (quote helm-ff-browse-project) "Complete at point `C-c i'" (quote helm-insert-file-name-completion-at-point) "Insert as org link `C-c @'" (quote helm-files-insert-as-org-link) "Find shell command `C-c /'" (quote helm-ff-find-sh-command) "Add marked files to file-cache" (quote helm-ff-cache-add-file) "Open file externally `C-c C-x, C-u to choose'" (quote helm-open-file-externally) "Grep File(s) `C-s, C-u Recurse'" (quote helm-find-files-grep) "Grep current directory with AG" (quote helm-find-files-ag) "Zgrep File(s) `M-g z, C-u Recurse'" (quote helm-ff-zgrep) "Gid" (quote helm-ff-gid) "Switch to Eshell `M-e'" (quote helm-ff-switch-to-eshell) "Etags `M-., C-u reload tag file'" (quote helm-ff-etags-select) "Eshell command on file(s) `M-!, C-u take all marked as arguments.'" (quote helm-find-files-eshell-command-on-file) "Find file as root `C-c r'" (quote helm-find-file-as-root) "Ediff File `C-='" (quote helm-find-files-ediff-files) "Ediff Merge File `C-c ='" (quote helm-find-files-ediff-merge-files) "Delete File(s) `M-D'" (quote helm-delete-marked-files) "Copy file(s) `M-C, C-u to follow'" (quote helm-find-files-copy) "Rename file(s) `M-R, C-u to follow'" (quote helm-find-files-rename) "Symlink files(s) `M-S, C-u to follow'" (quote helm-find-files-symlink) "Relsymlink file(s) `C-u to follow'" (quote helm-find-files-relsymlink) "Hardlink file(s) `M-H, C-u to follow'" (quote helm-find-files-hardlink) "Find file other window `C-c o'" (quote find-file-other-window) "Switch to history `M-p'" (quote helm-find-files-switch-to-hist) "Find file other frame `C-c C-o'" (quote find-file-other-frame) "Print File `C-c p, C-u to refresh'" (quote helm-ff-print) "Locate `C-x C-f, C-u to specify locate db'" (quote helm-ff-locate))) nil [16547 19127])
            ("helm-source-find-files" variable nil nil [19129 19241])
            ("helm-source-ffiles" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("header-name" variable (:default-value "(lambda (name) (concat name (substitute-command-keys helm-find-files-doc-header)))") nil nil)
                    ("init" variable (:default-value "(lambda nil (setq helm-ff-auto-update-flag helm-ff-auto-update-initial-value) (setq helm-ff--auto-update-state helm-ff-auto-update-flag) (helm-set-local-variable (quote bookmark-make-record-function) (function helm-ff-make-bookmark-record)))") nil nil)
                    ("candidates" variable (:default-value "(quote helm-find-files-get-candidates)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-ff-sort-candidates)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-ff-filter-candidate-one-by-one)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-find-files-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Hit1 Expand Candidate, Hit2 or (C-u) Find file") nil nil)
                    ("help-message" variable (:default-value "(quote helm-ff-help-message)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-find-files-map") nil nil)
                    ("candidate-number-limit" variable (:default-value "(quote helm-ff-candidate-number-limit)") nil nil)
                    ("action-transformer" variable (:default-value "(quote helm-find-files-action-transformer)") nil nil)
                    ("action" variable (:default-value "(quote helm-find-files-actions)") nil nil)
                    ("before-init-hook" variable (:default-value "(quote helm-find-files-before-init-hook)") nil nil)
                    ("after-init-hook" variable (:default-value "(quote helm-find-files-after-init-hook)") nil nil))                  
                :type "class")
                nil [19243 20649])
            ("helm-ff-make-bookmark-record" function nil nil [20676 20925])
            ("helm-ff-bookmark-jump" function (:arguments ("bookmark")) nil [20927 21292])
            ("helm-ff-bookmark-set" function (:user-visible-flag t) nil [21294 21591])
            ("helm-dwim-target-directory" function nil nil [21593 22288])
            ("helm-find-files-do-action" function (:arguments ("action")) nil [22290 24112])
            ("helm-find-files-copy" function (:arguments ("_candidate")) nil [24114 24230])
            ("helm-find-files-rename" function (:arguments ("_candidate")) nil [24232 24354])
            ("helm-find-files-symlink" function (:arguments ("_candidate")) nil [24356 24481])
            ("helm-find-files-relsymlink" function (:arguments ("_candidate")) nil [24483 24617])
            ("helm-find-files-hardlink" function (:arguments ("_candidate")) nil [24619 24747])
            ("helm-find-files-byte-compile" function (:arguments ("_candidate")) nil [24749 25034])
            ("helm-find-files-load-files" function (:arguments ("_candidate")) nil [25036 25250])
            ("helm-find-files-ediff-files-1" function (:arguments ("candidate" "merge")) nil [25252 26201])
            ("helm-find-files-ediff-files" function (:arguments ("candidate")) nil [26203 26294])
            ("helm-find-files-ediff-merge-files" function (:arguments ("candidate")) nil [26296 26400])
            ("helm-find-files-grep" function (:arguments ("_candidate")) nil [26402 26603])
            ("helm-find-files-ag" function (:arguments ("_candidate")) nil [26605 26689])
            ("helm-ff-zgrep" function (:arguments ("_candidate")) nil [26691 26869])
            ("helm-ff-pdfgrep" function (:arguments ("_candidate")) nil [26871 27334])
            ("helm-ff-etags-select" function (:arguments ("candidate")) nil [27336 27824])
            ("helm-find-files-switch-to-hist" function (:arguments ("_candidate")) nil [27826 27938])
            ("eshell-command-aliases-list" variable nil nil [27940 27980])
            ("helm-eshell-command-on-file-input-history" variable nil nil [27981 28035])
            ("helm-find-files-eshell-command-on-file-1" function (:arguments ("map")) nil [28036 33064])
            ("helm-find-files-eshell-command-on-file" function (:arguments ("_candidate")) nil [33066 33316])
            ("helm-ff-switch-to-eshell" function (:arguments ("_candidate")) nil [33318 33876])
            ("helm-ff-serial-rename-action" function (:arguments ("method")) nil [33878 35697])
            ("helm-ff-member-directory-p" function (:arguments ("file" "directory")) nil [35699 35965])
            ("cl-defun" code nil nil [35967 38490])
            ("helm-ff-serial-rename" function (:arguments ("_candidate")) nil [38492 38761])
            ("helm-ff-serial-rename-by-symlink" function (:arguments ("_candidate")) nil [38763 39044])
            ("helm-ff-serial-rename-by-copying" function (:arguments ("_candidate")) nil [39046 39321])
            ("helm-ff-query-replace-on-marked-1" function (:arguments ("candidates")) nil [39323 41455])
            ("helm-ff-query-replace-on-marked" function (:arguments ("_candidate")) nil [41472 41615])
            ("helm-ff-run-query-replace-on-marked" function nil nil [41659 41811])
            ("helm-ff-query-replace" function (:arguments ("_candidate")) nil [41813 42027])
            ("helm-ff-query-replace-regexp" function (:arguments ("_candidate")) nil [42029 42254])
            ("helm-ff-run-query-replace" function nil nil [42256 42388])
            ("helm-ff-run-query-replace-regexp" function nil nil [42390 42536])
            ("helm-ff-toggle-auto-update" function (:arguments ("_candidate")) nil [42538 42807])
            ("helm-ff-run-toggle-auto-update" function nil nil [42809 43028])
            ("helm-ff-delete-char-backward" function (:user-visible-flag t) nil [43030 43330])
            ("helm-ff-delete-char-backward--exit-fn" function nil nil [43332 43486])
            ("helm-ff-run-switch-to-history" function (:user-visible-flag t) nil [43488 43742])
            ("helm-ff-run-grep" function (:user-visible-flag t) nil [43744 43917])
            ("helm-ff-run-grep-ag" function nil nil [43919 44042])
            ("helm-ff-run-pdfgrep" function (:user-visible-flag t) nil [44044 44218])
            ("helm-ff-run-zgrep" function (:user-visible-flag t) nil [44220 44387])
            ("helm-ff-run-copy-file" function (:user-visible-flag t) nil [44389 44572])
            ("helm-ff-run-rename-file" function (:user-visible-flag t) nil [44574 44763])
            ("helm-ff-run-byte-compile-file" function (:user-visible-flag t) nil [44765 44972])
            ("helm-ff-run-load-file" function (:user-visible-flag t) nil [44974 45163])
            ("helm-ff-run-eshell-command-on-file" function (:user-visible-flag t) nil [45165 45397])
            ("helm-ff-run-ediff-file" function (:user-visible-flag t) nil [45399 45591])
            ("helm-ff-run-ediff-merge-file" function (:user-visible-flag t) nil [45593 45808])
            ("helm-ff-run-symlink-file" function (:user-visible-flag t) nil [45810 46002])
            ("helm-ff-run-hardlink-file" function (:user-visible-flag t) nil [46004 46199])
            ("helm-ff-run-delete-file" function (:user-visible-flag t) nil [46201 46392])
            ("helm-ff-run-complete-fn-at-point" function (:user-visible-flag t) nil [46394 46623])
            ("helm-ff-run-switch-to-eshell" function (:user-visible-flag t) nil [46625 46826])
            ("helm-ff-run-switch-other-window" function (:user-visible-flag t) nil [46828 47036])
            ("helm-ff-run-switch-other-frame" function (:user-visible-flag t) nil [47038 47243])
            ("helm-ff-run-open-file-externally" function (:user-visible-flag t) nil [47245 47463])
            ("helm-ff-run-open-file-with-default-tool" function (:user-visible-flag t) nil [47465 47697])
            ("helm-ff-locate" function (:arguments ("candidate")) nil [47699 48331])
            ("helm-ff-run-locate" function (:user-visible-flag t) nil [48333 48504])
            ("helm-files-insert-as-org-link" function (:arguments ("candidate")) nil [48506 48624])
            ("helm-ff-run-insert-org-link" function nil nil [48626 48768])
            ("helm-ff-run-find-file-as-root" function nil nil [48770 48907])
            ("helm-ff-run-gnus-attach-files" function (:user-visible-flag t) nil [48909 49121])
            ("helm-ff-run-etags" function (:user-visible-flag t) nil [49123 49306])
            ("lpr-printer-switch" variable nil nil [49308 49335])
            ("helm-ff-print" function (:arguments ("_candidate")) nil [49336 51373])
            ("helm-ff-run-print-file" function (:user-visible-flag t) nil [51375 51553])
            ("helm-ff-checksum" function (:arguments ("file")) nil [51555 51988])
            ("helm-ff-toggle-basename" function (:arguments ("_candidate")) nil [51990 52370])
            ("helm-ff-run-toggle-basename" function nil nil [52372 52519])
            ("cl-defun" code nil nil [52521 53731])
            ("helm-find-files--level-tree" variable nil nil [53733 53773])
            ("helm-find-files--level-tree-iterator" variable nil nil [53774 53823])
            ("helm-find-files-up-one-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [53824 55294])
            ("helm-find-files-down-last-level" function (:user-visible-flag t) nil [55296 55916])
            ("helm-find-files--reset-level-tree" function nil nil [55918 56052])
            ("add-hook" code nil nil [56054 56118])
            ("add-hook" code nil nil [56119 56187])
            ("add-hook" code nil nil [56188 56268])
            ("helm-ff-retrieve-last-expanded" function nil nil [56270 56932])
            ("helm-ff-move-to-first-real-candidate" function nil nil [56934 57617])
            ("add-hook" code nil nil [57618 57690])
            ("helm-ff-update-when-only-one-matched" function nil nil [57763 62033])
            ("helm-ff-auto-expand-to-home-or-root" function nil nil [62035 63805])
            ("helm-substitute-in-filename" function (:arguments ("fname")) nil [63807 64826])
            ("add-hook" code nil nil [64828 64900])
            ("add-hook" code nil nil [64901 64972])
            ("helm-point-file-in-dired" function (:arguments ("file")) nil [64974 65296])
            ("helm-create-tramp-name" function (:arguments ("fname")) nil [65298 65536])
            ("cl-defun" code nil nil [65538 66335])
            ("helm-ff-before-action-hook-fn" function nil nil [66337 66764])
            ("add-hook" code nil nil [66765 66831])
            ("cl-defun" code nil nil [66833 67049])
            ("helm-ff-set-pattern" function (:arguments ("pattern")) nil [67051 69545])
            ("helm-find-files-get-candidates" function (:arguments ("require-match")) nil [69547 74571])
            ("helm-ff-directory-files" function (:arguments ("directory" "full")) nil [74573 75893])
            ("helm-ff-handle-backslash" function (:arguments ("fname")) nil [75895 76155])
            ("helm-ff-smart-completion-p" function nil nil [76157 76289])
            ("helm-ff--transform-pattern-for-completion" function (:arguments ("pattern")) nil [76291 78743])
            ("helm-dir-is-dot" function (:arguments ("dir")) nil [78745 78828])
            ("helm-ff-save-history" function nil nil [78830 79306])
            ("add-hook" code nil nil [79307 79358])
            ("helm-files-save-file-name-history" function (:arguments ("force")) nil [79360 80235])
            ("add-hook" code nil nil [80236 80308])
            ("helm-ff-valid-symlink-p" function (:arguments ("file")) nil [80310 80581])
            ("helm-get-default-mode-for-file" function (:arguments ("filename")) nil [80583 80847])
            ("helm-ff-properties" function (:arguments ("candidate")) nil [80849 82987])
            ("helm-ff-properties-persistent" function (:user-visible-flag t) nil [82989 83240])
            ("helm-ff-persistent-delete" function (:user-visible-flag t) nil [83242 83485])
            ("helm-ff-dot-file-p" function (:arguments ("file")) nil [83487 83598])
            ("helm-ff-quick-delete" function (:arguments ("_candidate")) nil [83600 84773])
            ("helm-ff-kill-buffer-fname" function (:arguments ("candidate")) nil [84775 84992])
            ("helm-ff-kill-or-find-buffer-fname" function (:arguments ("candidate")) nil [84994 85774])
            ("helm-ff-run-kill-buffer-persistent" function (:user-visible-flag t) nil [85776 86038])
            ("helm-ff-prefix-filename" function (:arguments ("fname" "file-or-symlinkp" "new-file")) nil [86040 86996])
            ("helm-ff-score-candidate-for-pattern" function (:arguments ("str" "pattern")) nil [86998 87150])
            ("helm-ff-sort-candidates" function (:arguments ("candidates" "_source")) nil [87152 88821])
            ("helm-ff-filter-candidate-one-by-one" function (:arguments ("file")) nil [88823 92261])
            ("helm-find-files-action-transformer" function (:arguments ("actions" "candidate")) nil [92263 94221])
            ("helm-ff-goto-linum" function (:arguments ("candidate")) nil [94223 94940])
            ("helm-ff-gnus-attach-files" function (:arguments ("_candidate")) nil [94942 95172])
            ("image-dired-display-image-buffer" variable nil nil [95174 95215])
            ("helm-ff-rotate-current-image-1" function (:arguments ("file" "num-arg")) nil [95216 96078])
            ("helm-ff-rotate-image-left" function (:arguments ("candidate")) nil [96080 96249])
            ("helm-ff-rotate-image-right" function (:arguments ("candidate")) nil [96251 96418])
            ("helm-ff-rotate-left-persistent" function (:user-visible-flag t) nil [96420 96657])
            ("helm-ff-rotate-right-persistent" function (:user-visible-flag t) nil [96659 96899])
            ("helm-ff-exif-data" function (:arguments ("candidate")) nil [96901 97434])
            ("helm-find-files-persistent-action" function (:arguments ("candidate")) nil [97436 101688])
            ("helm-ff-file-compressed-p" function (:arguments ("candidate")) nil [101690 101868])
            ("helm-insert-file-name-completion-at-point" function (:arguments ("candidate")) nil [101870 103617])
            ("cl-defun" code nil nil [103619 104367])
            ("helm-find-files-1" function (:arguments ("fname" "preselect")) nil [104369 105575])
            ("helm-find-files-toggle-to-bookmark" function (:user-visible-flag t) nil [105577 106160])
            ("helm-find-files-initial-input" function (:arguments ("input")) nil [106163 106566])
            ("helm-find-files-input" function (:arguments ("file-at-pt" "thing-at-pt")) nil [106568 107951])
            ("helm-ff-find-url-at-point" function nil nil [107953 108633])
            ("helm-find-library-at-point" function nil nil [108635 109703])
            ("dired-async-mode" variable nil nil [109782 109807])
            ("cl-defun" code nil nil [109808 112887])
            ("helm-get-dest-fnames-from-list" function (:arguments ("flist" "dest-cand" "rename-dir-flag")) nil [112889 113704])
            ("helm-ff-maybe-mark-candidates" function nil nil [113706 114453])
            ("helm-file-buffers" function (:arguments ("filename")) nil [114486 114786])
            ("helm-delete-file" function (:arguments ("file" "error-if-dot-file-p" "synchro")) nil [114788 116095])
            ("helm-delete-marked-files" function (:arguments ("_ignore")) nil [116097 116785])
            ("helm-find-file-or-marked" function (:arguments ("candidate")) nil [116787 119242])
            ("helm-shadow-boring-files" function (:arguments ("files")) nil [119244 119453])
            ("helm-skip-boring-files" function (:arguments ("files")) nil [119455 119612])
            ("helm-skip-current-file" function (:arguments ("files")) nil [119614 119742])
            ("helm-w32-pathname-transformer" function (:arguments ("args")) nil [119744 120128])
            ("helm-transform-file-load-el" function (:arguments ("actions" "candidate")) nil [120130 120426])
            ("helm-transform-file-browse-url" function (:arguments ("actions" "candidate")) nil [120428 120871])
            ("helm-multi-files-toggle-to-locate" function nil nil [120873 121488])
            ("helm-files-in-all-dired-candidates" function nil nil [121548 121864])
            ("helm-files-dired-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(function helm-files-in-all-dired-candidates)") nil nil))                  
                :type "class")
                nil [121940 122072])
            ("helm-source-files-in-all-dired" variable (:default-value (helm-make-source "Files in all dired buffer." (quote helm-files-dired-source))) nil [122074 122188])
            ("file-cache-alist" variable nil nil [122213 122238])
            ("helm-file-cache" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote filecache)))") nil nil)
                    ("keymap" variable (:default-value "helm-generic-files-map") nil nil)
                    ("help-message" variable (:default-value "helm-generic-file-help-message") nil nil))                  
                :type "class")
                nil [122240 122463])
            ("helm-file-cache-get-candidates" function nil nil [122465 122699])
            ("helm-source-file-cache" variable nil nil [122701 122736])
            ("helm-file-cache-fuzzy-match" variable nil nil [122738 123153])
            ("cl-defun" code nil nil [123155 123531])
            ("helm-ff-cache-add-file" function (:arguments ("_candidate")) nil [123533 123693])
            ("helm-ff-file-cache-remove-file-1" function (:arguments ("file")) nil [123695 124087])
            ("helm-ff-file-cache-remove-file" function (:arguments ("_file")) nil [124089 124274])
            ("helm-transform-file-cache" function (:arguments ("actions" "_candidate")) nil [124276 124588])
            ("helm-source-file-name-history" variable (:default-value (helm-build-sync-source "File Name History" :candidates (quote file-name-history) :persistent-action (function ignore) :filtered-candidate-transformer (function helm-file-name-history-transformer) :action (quote helm-type-file-actions))) nil [124620 124881])
            ("helm-source--ff-file-name-history" variable nil nil [124883 125066])
            ("helm-file-name-history-transformer" function (:arguments ("candidates" "_source")) nil [125068 125435])
            ("helm-ff-file-name-history" function (:user-visible-flag t) nil [125437 126957])
            ("helm-recentf--basename-flag" variable nil nil [126983 127023])
            ("helm-recentf-pattern-transformer" function (:arguments ("pattern")) nil [127025 127537])
            ("helm-recentf-source" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote recentf)) (recentf-mode 1))") nil nil)
                    ("candidates" variable (:default-value "(lambda nil recentf-list)") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("filter-one-by-one" variable (:default-value "(lambda (c) (if (and helm-ff-transformer-show-only-basename (not (consp c))) (cons (helm-basename c) c) c))") nil nil)
                    ("keymap" variable (:default-value "helm-generic-files-map") nil nil)
                    ("help-message" variable (:default-value "helm-generic-file-help-message") nil nil)
                    ("action" variable (:default-value "(quote helm-type-file-actions)") nil nil))                  
                :type "class")
                nil [127539 128516])
            ("helm-source-recentf" variable nil nil [128518 128669])
            ("helm-recentf-fuzzy-match" variable nil nil [128671 129020])
            ("helm--browse-project-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [129198 129264])
            ("helm-browse-project-get-buffers" function (:arguments ("root-directory")) nil [129266 129503])
            ("helm-browse-project-build-buffers-source" function (:arguments ("directory")) nil [129505 129850])
            ("helm-browse-project-find-files" function (:arguments ("directory" "refresh")) nil [129852 131362])
            ("helm-browse-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [131379 132967])
            ("helm-browse-project-get--root-dir" function (:arguments ("directory")) nil [132969 133386])
            ("helm-ff-browse-project" function (:arguments ("_candidate")) nil [133388 133609])
            ("helm-ff-run-browse-project" function nil nil [133611 133745])
            ("helm-ff-gid" function (:arguments ("_candidate")) nil [133747 133854])
            ("helm-ff-run-gid" function nil nil [133856 133968])
            ("session-file-alist" variable nil nil [134125 134152])
            ("helm-source-session" variable (:default-value (helm-build-sync-source "Session" :candidates (lambda nil (cl-delete-if-not (function (lambda (f) (or (string-match helm-tramp-file-name-regexp f) (file-exists-p f)))) (mapcar (quote car) session-file-alist))) :keymap helm-generic-files-map :help-message helm-generic-file-help-message :action (quote helm-type-file-actions))) nil [134153 134673])
            ("helm-highlight-files" function (:arguments ("files")) nil [134708 136111])
            ("helm-files-in-current-dir-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(lambda nil (with-helm-current-buffer (let ((dir (helm-current-directory))) (when (file-accessible-directory-p dir) (directory-files dir t)))))") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("fuzzy-match" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-generic-files-map") nil nil)
                    ("help-message" variable (:default-value "helm-generic-file-help-message") nil nil))                  
                :type "class")
                nil [136113 136935])
            ("helm-source-files-in-current-dir" variable (:default-value (helm-make-source "Files from Current Directory" helm-files-in-current-dir-source)) nil [136937 137069])
            ("helm-source-tracker-cand-incomplete" variable nil nil [137137 137217])
            ("helm-source-tracker-transformer" function (:arguments ("candidates" "_source")) nil [137218 138527])
            ("helm-source-tracker-search" variable (:default-value (helm-build-async-source "Tracker Search" :candidates-process (lambda nil (start-process "tracker-search-process" nil "tracker-search" "--disable-color" "--limit=512" helm-pattern)) :filtered-candidate-transformer (function helm-source-tracker-transformer) :keymap helm-generic-files-map :action (quote helm-type-file-actions) :action-transformer (quote (helm-transform-file-load-el helm-transform-file-browse-url)) :requires-pattern 3)) nil [138529 139295])
            ("helm-mac-spotlight-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-async"
                :members 
                  ( ("candidates-process" variable (:default-value "(lambda nil (start-process \"mdfind-process\" nil \"mdfind\" helm-pattern))") nil nil)
                    ("requires-pattern" variable nil nil nil))                  
                :type "class")
                nil [139335 139621])
            ("helm-source-mac-spotlight" variable (:default-value (helm-make-source "mdfind" helm-mac-spotlight-source)) nil [139623 139790])
            ("helm-source-findutils" variable (:default-value (helm-build-async-source "Find" :header-name (lambda (name) (concat name " in [" (helm-default-directory) "]")) :candidates-process (quote helm-find-shell-command-fn) :filtered-candidate-transformer (quote helm-findutils-transformer) :action-transformer (quote helm-transform-file-load-el) :action (quote helm-type-file-actions) :keymap helm-generic-files-map :candidate-number-limit 9999 :requires-pattern 3)) nil [139814 140279])
            ("helm-findutils-transformer" function (:arguments ("candidates" "_source")) nil [140281 141284])
            ("helm-find--build-cmd-line" function nil nil [141286 142845])
            ("helm-find-shell-command-fn" function nil nil [142847 144210])
            ("helm-find-1" function (:arguments ("dir")) nil [144212 144480])
            ("helm-ff-find-sh-command" function (:arguments ("_candidate")) nil [144514 144644])
            ("helm-ff-run-find-sh-command" function (:user-visible-flag t) nil [144646 144849])
            ("helm-find" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [144901 145189])
            ("org-directory" variable nil nil [145191 145213])
            ("helm-find-files" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [145229 146764])
            ("helm-for-files" function (:user-visible-flag t) nil [146781 147188])
            ("helm-multi-files" function (:user-visible-flag t) nil [147205 148259])
            ("helm-recentf" function (:user-visible-flag t) nil [148276 148474])
            ("helm-files" package nil nil [148476 148497]))          
      :file "helm-files.el"
      :pointmax 148652
      :fsize 148651
      :lastmodtime '(21988 9220 437981 319000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-types.el"
      :file "helm-types.el"
      :fsize 10694
      :lastmodtime '(21988 9220 506981 319000))
    (semanticdb-table "helm-utils.el"
      :file "helm-utils.el"
      :fsize 24667
      :lastmodtime '(21988 9220 503981 319000))
    (semanticdb-table "helm-external.el"
      :file "helm-external.el"
      :fsize 9653
      :lastmodtime '(21988 9220 483981 319000))
    (semanticdb-table "helm-grep.el"
      :file "helm-grep.el"
      :fsize 58555
      :lastmodtime '(21988 9220 553981 319000))
    (semanticdb-table "helm-help.el"
      :file "helm-help.el"
      :fsize 52482
      :lastmodtime '(21988 9220 441981 319000))
    (semanticdb-table "helm-locate.el"
      :file "helm-locate.el"
      :fsize 14750
      :lastmodtime '(21988 9220 493981 319000))
    (semanticdb-table "helm-bookmark.el"
      :file "helm-bookmark.el"
      :fsize 31684
      :lastmodtime '(21988 9220 533981 319000))
    (semanticdb-table "helm-tags.el"
      :file "helm-tags.el"
      :fsize 12741
      :lastmodtime '(21988 9220 494981 319000))
    (semanticdb-table "helm-buffers.el"
      :file "helm-buffers.el"
      :fsize 35298
      :lastmodtime '(21988 9220 482981 319000)))
  :file "!home!chz!.emacs.d!elpa!helm-20150830.2133!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
