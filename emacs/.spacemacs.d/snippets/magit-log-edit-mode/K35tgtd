;; Object compat/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "compat/"
  :tables
  (list
    (semanticdb-table "queue.h"
      :major-mode 'c-mode
      :tags 
        '( ("_SYS_QUEUE_H_" variable (:constant-flag t) nil [1795 1808])
            ("_Q_INVALIDATE" variable (:constant-flag t) nil [4521 4534])
            ("SLIST_HEAD" variable (:constant-flag t) nil [4596 4606])
            ("SLIST_HEAD_INITIALIZER" variable (:constant-flag t) nil [4710 4732])
            ("SLIST_ENTRY" variable (:constant-flag t) nil [4765 4776])
            ("SLIST_FIRST" variable (:constant-flag t) nil [4912 4923])
            ("SLIST_END" variable (:constant-flag t) nil [4958 4967])
            ("SLIST_EMPTY" variable (:constant-flag t) nil [4988 4999])
            ("SLIST_NEXT" variable (:constant-flag t) nil [5053 5063])
            ("SLIST_FOREACH" variable (:constant-flag t) nil [5109 5122])
            ("SLIST_FOREACH_SAFE" variable (:constant-flag t) nil [5268 5286])
            ("SLIST_INIT" variable (:constant-flag t) nil [5478 5488])
            ("SLIST_INSERT_AFTER" variable (:constant-flag t) nil [5558 5576])
            ("SLIST_INSERT_HEAD" variable (:constant-flag t) nil [5727 5744])
            ("SLIST_REMOVE_AFTER" variable (:constant-flag t) nil [5875 5893])
            ("SLIST_REMOVE_HEAD" variable (:constant-flag t) nil [6003 6020])
            ("SLIST_REMOVE" variable (:constant-flag t) nil [6124 6136])
            ("LIST_HEAD" variable (:constant-flag t) nil [6596 6605])
            ("LIST_HEAD_INITIALIZER" variable (:constant-flag t) nil [6707 6728])
            ("LIST_ENTRY" variable (:constant-flag t) nil [6760 6770])
            ("LIST_FIRST" variable (:constant-flag t) nil [6954 6964])
            ("LIST_END" variable (:constant-flag t) nil [6999 7007])
            ("LIST_EMPTY" variable (:constant-flag t) nil [7029 7039])
            ("LIST_NEXT" variable (:constant-flag t) nil [7092 7101])
            ("LIST_FOREACH" variable (:constant-flag t) nil [7147 7159])
            ("LIST_FOREACH_SAFE" variable (:constant-flag t) nil [7301 7318])
            ("LIST_INIT" variable (:constant-flag t) nil [7494 7503])
            ("LIST_INSERT_AFTER" variable (:constant-flag t) nil [7584 7601])
            ("LIST_INSERT_BEFORE" variable (:constant-flag t) nil [7894 7912])
            ("LIST_INSERT_HEAD" variable (:constant-flag t) nil [8152 8168])
            ("LIST_REMOVE" variable (:constant-flag t) nil [8417 8428])
            ("LIST_REPLACE" variable (:constant-flag t) nil [8727 8739])
            ("SIMPLEQ_HEAD" variable (:constant-flag t) nil [9144 9156])
            ("SIMPLEQ_HEAD_INITIALIZER" variable (:constant-flag t) nil [9318 9342])
            ("SIMPLEQ_ENTRY" variable (:constant-flag t) nil [9393 9406])
            ("SIMPLEQ_FIRST" variable (:constant-flag t) nil [9535 9548])
            ("SIMPLEQ_END" variable (:constant-flag t) nil [9587 9598])
            ("SIMPLEQ_EMPTY" variable (:constant-flag t) nil [9622 9635])
            ("SIMPLEQ_NEXT" variable (:constant-flag t) nil [9697 9709])
            ("SIMPLEQ_FOREACH" variable (:constant-flag t) nil [9758 9773])
            ("SIMPLEQ_FOREACH_SAFE" variable (:constant-flag t) nil [9923 9943])
            ("SIMPLEQ_INIT" variable (:constant-flag t) nil [10133 10145])
            ("SIMPLEQ_INSERT_HEAD" variable (:constant-flag t) nil [10263 10282])
            ("SIMPLEQ_INSERT_TAIL" variable (:constant-flag t) nil [10473 10492])
            ("SIMPLEQ_INSERT_AFTER" variable (:constant-flag t) nil [10660 10680])
            ("SIMPLEQ_REMOVE_HEAD" variable (:constant-flag t) nil [10893 10912])
            ("SIMPLEQ_REMOVE_AFTER" variable (:constant-flag t) nil [11073 11093])
            ("TAILQ_HEAD" variable (:constant-flag t) nil [11317 11327])
            ("TAILQ_HEAD_INITIALIZER" variable (:constant-flag t) nil [11490 11512])
            ("TAILQ_ENTRY" variable (:constant-flag t) nil [11563 11574])
            ("TAILQ_FIRST" variable (:constant-flag t) nil [11768 11779])
            ("TAILQ_END" variable (:constant-flag t) nil [11815 11824])
            ("TAILQ_NEXT" variable (:constant-flag t) nil [11846 11856])
            ("TAILQ_LAST" variable (:constant-flag t) nil [11902 11912])
            ("TAILQ_PREV" variable (:constant-flag t) nil [12009 12019])
            ("TAILQ_EMPTY" variable (:constant-flag t) nil [12116 12127])
            ("TAILQ_FOREACH" variable (:constant-flag t) nil [12190 12203])
            ("TAILQ_FOREACH_SAFE" variable (:constant-flag t) nil [12349 12367])
            ("TAILQ_FOREACH_SAFE" variable (:constant-flag t) nil [12349 12367])
            ("TAILQ_FOREACH_REVERSE" variable (:constant-flag t) nil [12552 12573])
            ("TAILQ_FOREACH_REVERSE_SAFE" variable (:constant-flag t) nil [12744 12770])
            ("TAILQ_INIT" variable (:constant-flag t) nil [13010 13020])
            ("TAILQ_INSERT_HEAD" variable (:constant-flag t) nil [13138 13155])
            ("TAILQ_INSERT_TAIL" variable (:constant-flag t) nil [13487 13504])
            ("TAILQ_INSERT_AFTER" variable (:constant-flag t) nil [13719 13737])
            ("TAILQ_INSERT_BEFORE" variable (:constant-flag t) nil [14102 14121])
            ("TAILQ_REMOVE" variable (:constant-flag t) nil [14367 14379])
            ("TAILQ_REPLACE" variable (:constant-flag t) nil [14755 14768])
            ("CIRCLEQ_HEAD" variable (:constant-flag t) nil [15253 15265])
            ("CIRCLEQ_HEAD_INITIALIZER" variable (:constant-flag t) nil [15414 15438])
            ("CIRCLEQ_ENTRY" variable (:constant-flag t) nil [15504 15517])
            ("CIRCLEQ_FIRST" variable (:constant-flag t) nil [15699 15712])
            ("CIRCLEQ_LAST" variable (:constant-flag t) nil [15748 15760])
            ("CIRCLEQ_END" variable (:constant-flag t) nil [15795 15806])
            ("CIRCLEQ_NEXT" variable (:constant-flag t) nil [15839 15851])
            ("CIRCLEQ_PREV" variable (:constant-flag t) nil [15896 15908])
            ("CIRCLEQ_EMPTY" variable (:constant-flag t) nil [15953 15966])
            ("CIRCLEQ_FOREACH" variable (:constant-flag t) nil [16033 16048])
            ("CIRCLEQ_FOREACH_SAFE" variable (:constant-flag t) nil [16198 16218])
            ("CIRCLEQ_FOREACH_REVERSE" variable (:constant-flag t) nil [16406 16429])
            ("CIRCLEQ_FOREACH_REVERSE_SAFE" variable (:constant-flag t) nil [16578 16606])
            ("CIRCLEQ_INIT" variable (:constant-flag t) nil [16856 16868])
            ("CIRCLEQ_INSERT_AFTER" variable (:constant-flag t) nil [16997 17017])
            ("CIRCLEQ_INSERT_BEFORE" variable (:constant-flag t) nil [17370 17391])
            ("CIRCLEQ_INSERT_HEAD" variable (:constant-flag t) nil [17745 17764])
            ("CIRCLEQ_INSERT_TAIL" variable (:constant-flag t) nil [18087 18106])
            ("CIRCLEQ_REMOVE" variable (:constant-flag t) nil [18428 18442])
            ("CIRCLEQ_REPLACE" variable (:constant-flag t) nil [18971 18986]))          
      :file "queue.h"
      :pointmax 19534
      :fsize 19533
      :lastmodtime '(22126 32081 730869 56000)
      :unmatched-syntax nil
      :lexical-table 
        '(("LIST_INSERT_AFTER" (spp-arg-list ("listelm" "elm" "field") 7601 . 7622) . 
              ((DO "do" 7623 . 7625) (semantic-list "{			\\
	if (((elm)->field.le_next = (listelm)->field.le_next) != NULL)	\\
		(listelm)->field.le_next->field.le_prev =		\\
		    &(elm)->field.le_next;				\\
	(listelm)->field.le_next = (elm);				\\
	(elm)->field.le_prev = &(listelm)->field.le_next;		\\
}" 7626 . 7874) (WHILE "while" 7875 . 7880) (semantic-list "(0)" 7881 . 7884)))
          ("SIMPLEQ_FIRST" (spp-arg-list ("head") 9548 . 9554) . ((semantic-list "((head)->sqh_first)" 9559 . 9578)))
          ("TAILQ_HEAD_INITIALIZER" (spp-arg-list ("head") 11512 . 11518) . ((semantic-list "{ NULL, &(head).tqh_first }" 11526 . 11553)))
          ("CIRCLEQ_LAST" (spp-arg-list ("head") 15760 . 15766) . ((semantic-list "((head)->cqh_last)" 15768 . 15786)))
          ("CIRCLEQ_PREV" (spp-arg-list ("elm" "field") 15908 . 15920) . ((semantic-list "((elm)->field.cqe_prev)" 15921 . 15944)))
          ("SLIST_FIRST" (spp-arg-list ("head") 4923 . 4929) . ((semantic-list "((head)->slh_first)" 4930 . 4949)))
          ("TAILQ_ENTRY" (spp-arg-list ("type") 11574 . 11580) . ((STRUCT "struct" 11588 . 11594) (semantic-list "{								\\
	struct type *tqe_next;	/* next element */			\\
	struct type **tqe_prev;	/* address of previous next element */	\\
}" 11595 . 11720)))
          ("TAILQ_LAST" (spp-arg-list ("head" "headname") 11912 . 11928) . ((semantic-list "(*(((struct headname *)((head)->tqh_last))->tqh_last))" 11936 . 11990)))
          ("TAILQ_PREV" (spp-arg-list ("elm" "headname" "field") 12019 . 12041) . ((semantic-list "(*(((struct headname *)((elm)->field.tqe_prev))->tqh_last))" 12048 . 12107)))
          ("TAILQ_REPLACE" (spp-arg-list ("head" "elm" "elm2" "field") 14768 . 14792) . 
              ((DO "do" 14793 . 14795) (semantic-list "{			\\
	if (((elm2)->field.tqe_next = (elm)->field.tqe_next) != NULL)	\\
		(elm2)->field.tqe_next->field.tqe_prev =		\\
		    &(elm2)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm2)->field.tqe_next;		\\
	(elm2)->field.tqe_prev = (elm)->field.tqe_prev;			\\
	*(elm2)->field.tqe_prev = (elm2);				\\
	_Q_INVALIDATE((elm)->field.tqe_prev);				\\
	_Q_INVALIDATE((elm)->field.tqe_next);				\\
}" 14796 . 15195) (WHILE "while" 15196 . 15201) (semantic-list "(0)" 15202 . 15205)))
          ("CIRCLEQ_HEAD" (spp-arg-list ("name" "type") 15265 . 15277) . 
              ((STRUCT "struct" 15284 . 15290) (symbol "name" 15291 . 15295) (semantic-list "{								\\
	struct type *cqh_first;		/* first element */		\\
	struct type *cqh_last;		/* last element */		\\
}" 15296 . 15404)))
          ("CIRCLEQ_HEAD_INITIALIZER" (spp-arg-list ("head") 15438 . 15444) . ((semantic-list "{ CIRCLEQ_END(&head), CIRCLEQ_END(&head) }" 15452 . 15494)))
          ("CIRCLEQ_NEXT" (spp-arg-list ("elm" "field") 15851 . 15863) . ((semantic-list "((elm)->field.cqe_next)" 15864 . 15887)))
          ("CIRCLEQ_EMPTY" (spp-arg-list ("head") 15966 . 15972) . ((semantic-list "(CIRCLEQ_FIRST(head) == CIRCLEQ_END(head))" 15981 . 16023)))
          ("CIRCLEQ_FOREACH" (spp-arg-list ("var" "head" "field") 16048 . 16066) . ((FOR "for" 16073 . 16076) (semantic-list "((var) = CIRCLEQ_FIRST(head);				\\
	    (var) != CIRCLEQ_END(head);					\\
	    (var) = CIRCLEQ_NEXT(var, field))" 16076 . 16188)))
          ("CIRCLEQ_INSERT_BEFORE" (spp-arg-list ("head" "listelm" "elm" "field") 17391 . 17418) . 
              ((DO "do" 17419 . 17421) (semantic-list "{		\\
	(elm)->field.cqe_next = (listelm);				\\
	(elm)->field.cqe_prev = (listelm)->field.cqe_prev;		\\
	if ((listelm)->field.cqe_prev == CIRCLEQ_END(head))		\\
		(head)->cqh_first = (elm);				\\
	else								\\
		(listelm)->field.cqe_prev->field.cqe_next = (elm);	\\
	(listelm)->field.cqe_prev = (elm);				\\
}" 17422 . 17725) (WHILE "while" 17726 . 17731) (semantic-list "(0)" 17732 . 17735)))
          ("SLIST_INSERT_AFTER" (spp-arg-list ("slistelm" "elm" "field") 5576 . 5598) . 
              ((DO "do" 5599 . 5601) (semantic-list "{			\\
	(elm)->field.sle_next = (slistelm)->field.sle_next;		\\
	(slistelm)->field.sle_next = (elm);				\\
}" 5602 . 5707) (WHILE "while" 5708 . 5713) (semantic-list "(0)" 5714 . 5717)))
          ("SIMPLEQ_HEAD" (spp-arg-list ("name" "type") 9156 . 9168) . 
              ((STRUCT "struct" 9175 . 9181) (symbol "name" 9182 . 9186) (semantic-list "{								\\
	struct type *sqh_first;	/* first element */			\\
	struct type **sqh_last;	/* addr of last next element */		\\
}" 9187 . 9308)))
          ("SIMPLEQ_NEXT" (spp-arg-list ("elm" "field") 9709 . 9721) . ((semantic-list "((elm)->field.sqe_next)" 9725 . 9748)))
          ("SIMPLEQ_FOREACH" (spp-arg-list ("var" "head" "field") 9773 . 9791) . ((FOR "for" 9798 . 9801) (semantic-list "((var) = SIMPLEQ_FIRST(head);				\\
	    (var) != SIMPLEQ_END(head);					\\
	    (var) = SIMPLEQ_NEXT(var, field))" 9801 . 9913)))
          ("SIMPLEQ_INSERT_TAIL" (spp-arg-list ("head" "elm" "field") 10492 . 10510) . 
              ((DO "do" 10511 . 10513) (semantic-list "{			\\
	(elm)->field.sqe_next = NULL;					\\
	*(head)->sqh_last = (elm);					\\
	(head)->sqh_last = &(elm)->field.sqe_next;			\\
}" 10514 . 10640) (WHILE "while" 10641 . 10646) (semantic-list "(0)" 10647 . 10650)))
          ("SIMPLEQ_REMOVE_AFTER" (spp-arg-list ("head" "elm" "field") 11093 . 11111) . 
              ((DO "do" 11112 . 11114) (semantic-list "{			\\
	if (((elm)->field.sqe_next = (elm)->field.sqe_next->field.sqe_next) \\
	    == NULL)							\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
}" 11115 . 11263) (WHILE "while" 11264 . 11269) (semantic-list "(0)" 11270 . 11273)))
          ("TAILQ_HEAD" (spp-arg-list ("name" "type") 11327 . 11339) . 
              ((STRUCT "struct" 11347 . 11353) (symbol "name" 11354 . 11358) (semantic-list "{								\\
	struct type *tqh_first;	/* first element */			\\
	struct type **tqh_last;	/* addr of last next element */		\\
}" 11359 . 11480)))
          ("TAILQ_NEXT" (spp-arg-list ("elm" "field") 11856 . 11868) . ((semantic-list "((elm)->field.tqe_next)" 11870 . 11893)))
          ("CIRCLEQ_END" (spp-arg-list ("head") 15806 . 15812) . ((semantic-list "((void *)(head))" 15814 . 15830)))
          ("CIRCLEQ_FOREACH_SAFE" (spp-arg-list ("var" "head" "field" "tvar") 16218 . 16242) . ((FOR "for" 16248 . 16251) (semantic-list "((var) = CIRCLEQ_FIRST(head);				\\
	    (var) != CIRCLEQ_END(head) &&				\\
	    ((tvar) = CIRCLEQ_NEXT(var, field), 1);			\\
	    (var) = (tvar))" 16252 . 16396)))
          ("CIRCLEQ_REMOVE" (spp-arg-list ("head" "elm" "field") 18442 . 18460) . 
              ((DO "do" 18461 . 18463) (semantic-list "{				\\
	if ((elm)->field.cqe_next == CIRCLEQ_END(head))			\\
		(head)->cqh_last = (elm)->field.cqe_prev;		\\
	else								\\
		(elm)->field.cqe_next->field.cqe_prev =			\\
		    (elm)->field.cqe_prev;				\\
	if ((elm)->field.cqe_prev == CIRCLEQ_END(head))			\\
		(head)->cqh_first = (elm)->field.cqe_next;		\\
	else								\\
		(elm)->field.cqe_prev->field.cqe_next =			\\
		    (elm)->field.cqe_next;				\\
	_Q_INVALIDATE((elm)->field.cqe_prev);				\\
	_Q_INVALIDATE((elm)->field.cqe_next);				\\
}" 18464 . 18951) (WHILE "while" 18952 . 18957) (semantic-list "(0)" 18958 . 18961)))
          ("SLIST_REMOVE_HEAD" (spp-arg-list ("head" "field") 6020 . 6033) . 
              ((DO "do" 6034 . 6036) (semantic-list "{				\\
	(head)->slh_first = (head)->slh_first->field.sle_next;		\\
}" 6037 . 6104) (WHILE "while" 6105 . 6110) (semantic-list "(0)" 6111 . 6114)))
          ("LIST_HEAD" (spp-arg-list ("name" "type") 6605 . 6617) . 
              ((STRUCT "struct" 6625 . 6631) (symbol "name" 6632 . 6636) (semantic-list "{								\\
	struct type *lh_first;	/* first element */			\\
}" 6637 . 6697)))
          ("LIST_END" (spp-arg-list ("head") 7007 . 7013) . ((symbol "NULL" 7016 . 7020)))
          ("LIST_NEXT" (spp-arg-list ("elm" "field") 7101 . 7113) . ((semantic-list "((elm)->field.le_next)" 7115 . 7137)))
          ("SIMPLEQ_END" (spp-arg-list ("head") 9598 . 9604) . ((symbol "NULL" 9609 . 9613)))
          ("SIMPLEQ_FOREACH_SAFE" (spp-arg-list ("var" "head" "field" "tvar") 9943 . 9967) . ((FOR "for" 9973 . 9976) (semantic-list "((var) = SIMPLEQ_FIRST(head);				\\
	    (var) && ((tvar) = SIMPLEQ_NEXT(var, field), 1);		\\
	    (var) = (tvar))" 9977 . 10089)))
          ("TAILQ_END" (spp-arg-list ("head") 11824 . 11830) . ((symbol "NULL" 11833 . 11837)))
          ("TAILQ_FOREACH" (spp-arg-list ("var" "head" "field") 12203 . 12221) . ((FOR "for" 12229 . 12232) (semantic-list "((var) = TAILQ_FIRST(head);					\\
	    (var) != TAILQ_END(head);					\\
	    (var) = TAILQ_NEXT(var, field))" 12232 . 12339)))
          ("SLIST_REMOVE" (spp-arg-list ("head" "elm" "type" "field") 6136 . 6160) . 
              ((DO "do" 6161 . 6163) (semantic-list "{			\\
	if ((head)->slh_first == (elm)) {				\\
		SLIST_REMOVE_HEAD((head), field);			\\
	} else {							\\
		struct type *curelm = (head)->slh_first;		\\
									\\
		while (curelm->field.sle_next != (elm))			\\
			curelm = curelm->field.sle_next;		\\
		curelm->field.sle_next =				\\
		    curelm->field.sle_next->field.sle_next;		\\
		_Q_INVALIDATE((elm)->field.sle_next);			\\
	}								\\
}" 6164 . 6548) (WHILE "while" 6549 . 6554) (semantic-list "(0)" 6555 . 6558)))
          ("LIST_ENTRY" (spp-arg-list ("type") 6770 . 6776) . ((STRUCT "struct" 6784 . 6790) (semantic-list "{								\\
	struct type *le_next;	/* next element */			\\
	struct type **le_prev;	/* address of previous next element */	\\
}" 6791 . 6914)))
          ("SIMPLEQ_EMPTY" (spp-arg-list ("head") 9635 . 9641) . ((semantic-list "(SIMPLEQ_FIRST(head) == SIMPLEQ_END(head))" 9646 . 9688)))
          ("TAILQ_INSERT_BEFORE" (spp-arg-list ("listelm" "elm" "field") 14121 . 14142) . 
              ((DO "do" 14143 . 14145) (semantic-list "{			\\
	(elm)->field.tqe_prev = (listelm)->field.tqe_prev;		\\
	(elm)->field.tqe_next = (listelm);				\\
	*(listelm)->field.tqe_prev = (elm);				\\
	(listelm)->field.tqe_prev = &(elm)->field.tqe_next;		\\
}" 14146 . 14347) (WHILE "while" 14348 . 14353) (semantic-list "(0)" 14354 . 14357)))
          ("CIRCLEQ_FOREACH_REVERSE_SAFE" (spp-arg-list ("var" "head" "headname" "field" "tvar") 16606 . 16640) . ((FOR "for" 16644 . 16647) (semantic-list "((var) = CIRCLEQ_LAST(head, headname);			\\
	    (var) != CIRCLEQ_END(head) && 				\\
	    ((tvar) = CIRCLEQ_PREV(var, headname, field), 1);		\\
	    (var) = (tvar))" 16648 . 16810)))
          ("SLIST_HEAD" (spp-arg-list ("name" "type") 4606 . 4618) . 
              ((STRUCT "struct" 4626 . 4632) (symbol "name" 4633 . 4637) (semantic-list "{								\\
	struct type *slh_first;	/* first element */			\\
}" 4638 . 4699)))
          ("SLIST_HEAD_INITIALIZER" (spp-arg-list ("head") 4732 . 4738) . ((semantic-list "{ NULL }" 4746 . 4754)))
          ("SLIST_EMPTY" (spp-arg-list ("head") 4999 . 5005) . ((semantic-list "(SLIST_FIRST(head) == SLIST_END(head))" 5006 . 5044)))
          ("SLIST_NEXT" (spp-arg-list ("elm" "field") 5063 . 5075) . ((semantic-list "((elm)->field.sle_next)" 5076 . 5099)))
          ("LIST_REPLACE" (spp-arg-list ("elm" "elm2" "field") 8739 . 8757) . 
              ((DO "do" 8758 . 8760) (semantic-list "{				\\
	if (((elm2)->field.le_next = (elm)->field.le_next) != NULL)	\\
		(elm2)->field.le_next->field.le_prev =			\\
		    &(elm2)->field.le_next;				\\
	(elm2)->field.le_prev = (elm)->field.le_prev;			\\
	*(elm2)->field.le_prev = (elm2);				\\
	_Q_INVALIDATE((elm)->field.le_prev);				\\
	_Q_INVALIDATE((elm)->field.le_next);				\\
}" 8761 . 9088) (WHILE "while" 9089 . 9094) (semantic-list "(0)" 9095 . 9098)))
          ("TAILQ_FIRST" (spp-arg-list ("head") 11779 . 11785) . ((semantic-list "((head)->tqh_first)" 11787 . 11806)))
          ("CIRCLEQ_ENTRY" (spp-arg-list ("type") 15517 . 15523) . ((STRUCT "struct" 15531 . 15537) (semantic-list "{								\\
	struct type *cqe_next;		/* next element */		\\
	struct type *cqe_prev;		/* previous element */		\\
}" 15538 . 15648)))
          ("CIRCLEQ_INIT" (spp-arg-list ("head") 16868 . 16874) . 
              ((DO "do" 16875 . 16877) (semantic-list "{						\\
	(head)->cqh_first = CIRCLEQ_END(head);				\\
	(head)->cqh_last = CIRCLEQ_END(head);				\\
}" 16878 . 16977) (WHILE "while" 16978 . 16983) (semantic-list "(0)" 16984 . 16987)))
          ("CIRCLEQ_INSERT_AFTER" (spp-arg-list ("head" "listelm" "elm" "field") 17017 . 17044) . 
              ((DO "do" 17045 . 17047) (semantic-list "{		\\
	(elm)->field.cqe_next = (listelm)->field.cqe_next;		\\
	(elm)->field.cqe_prev = (listelm);				\\
	if ((listelm)->field.cqe_next == CIRCLEQ_END(head))		\\
		(head)->cqh_last = (elm);				\\
	else								\\
		(listelm)->field.cqe_next->field.cqe_prev = (elm);	\\
	(listelm)->field.cqe_next = (elm);				\\
}" 17048 . 17350) (WHILE "while" 17351 . 17356) (semantic-list "(0)" 17357 . 17360)))
          ("CIRCLEQ_INSERT_TAIL" (spp-arg-list ("head" "elm" "field") 18106 . 18124) . 
              ((DO "do" 18125 . 18127) (semantic-list "{			\\
	(elm)->field.cqe_next = CIRCLEQ_END(head);			\\
	(elm)->field.cqe_prev = (head)->cqh_last;			\\
	if ((head)->cqh_first == CIRCLEQ_END(head))			\\
		(head)->cqh_first = (elm);				\\
	else								\\
		(head)->cqh_last->field.cqe_next = (elm);		\\
	(head)->cqh_last = (elm);					\\
}" 18128 . 18408) (WHILE "while" 18409 . 18414) (semantic-list "(0)" 18415 . 18418)))
          ("LIST_FOREACH" (spp-arg-list ("var" "head" "field") 7159 . 7177) . ((FOR "for" 7185 . 7188) (semantic-list "((var) = LIST_FIRST(head);					\\
	    (var)!= LIST_END(head);					\\
	    (var) = LIST_NEXT(var, field))" 7188 . 7291)))
          ("LIST_INSERT_HEAD" (spp-arg-list ("head" "elm" "field") 8168 . 8186) . 
              ((DO "do" 8187 . 8189) (semantic-list "{				\\
	if (((elm)->field.le_next = (head)->lh_first) != NULL)		\\
		(head)->lh_first->field.le_prev = &(elm)->field.le_next;\\
	(head)->lh_first = (elm);					\\
	(elm)->field.le_prev = &(head)->lh_first;			\\
}" 8190 . 8397) (WHILE "while" 8398 . 8403) (semantic-list "(0)" 8404 . 8407)))
          ("SIMPLEQ_INIT" (spp-arg-list ("head") 10145 . 10151) . 
              ((DO "do" 10152 . 10154) (semantic-list "{						\\
	(head)->sqh_first = NULL;					\\
	(head)->sqh_last = &(head)->sqh_first;				\\
}" 10155 . 10243) (WHILE "while" 10244 . 10249) (semantic-list "(0)" 10250 . 10253)))
          ("SIMPLEQ_INSERT_HEAD" (spp-arg-list ("head" "elm" "field") 10282 . 10300) . 
              ((DO "do" 10301 . 10303) (semantic-list "{			\\
	if (((elm)->field.sqe_next = (head)->sqh_first) == NULL)	\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
	(head)->sqh_first = (elm);					\\
}" 10304 . 10453) (WHILE "while" 10454 . 10459) (semantic-list "(0)" 10460 . 10463)))
          ("SIMPLEQ_INSERT_AFTER" (spp-arg-list ("head" "listelm" "elm" "field") 10680 . 10707) . 
              ((DO "do" 10708 . 10710) (semantic-list "{		\\
	if (((elm)->field.sqe_next = (listelm)->field.sqe_next) == NULL)\\
		(head)->sqh_last = &(elm)->field.sqe_next;		\\
	(listelm)->field.sqe_next = (elm);				\\
}" 10711 . 10873) (WHILE "while" 10874 . 10879) (semantic-list "(0)" 10880 . 10883)))
          ("TAILQ_INIT" (spp-arg-list ("head") 13020 . 13026) . 
              ((DO "do" 13027 . 13029) (semantic-list "{						\\
	(head)->tqh_first = NULL;					\\
	(head)->tqh_last = &(head)->tqh_first;				\\
}" 13030 . 13118) (WHILE "while" 13119 . 13124) (semantic-list "(0)" 13125 . 13128)))
          ("TAILQ_INSERT_TAIL" (spp-arg-list ("head" "elm" "field") 13504 . 13522) . 
              ((DO "do" 13523 . 13525) (semantic-list "{			\\
	(elm)->field.tqe_next = NULL;					\\
	(elm)->field.tqe_prev = (head)->tqh_last;			\\
	*(head)->tqh_last = (elm);					\\
	(head)->tqh_last = &(elm)->field.tqe_next;			\\
}" 13526 . 13699) (WHILE "while" 13700 . 13705) (semantic-list "(0)" 13706 . 13709)))
          ("TAILQ_REMOVE" (spp-arg-list ("head" "elm" "field") 14379 . 14397) . 
              ((DO "do" 14398 . 14400) (semantic-list "{				\\
	if (((elm)->field.tqe_next) != NULL)				\\
		(elm)->field.tqe_next->field.tqe_prev =			\\
		    (elm)->field.tqe_prev;				\\
	else								\\
		(head)->tqh_last = (elm)->field.tqe_prev;		\\
	*(elm)->field.tqe_prev = (elm)->field.tqe_next;			\\
	_Q_INVALIDATE((elm)->field.tqe_prev);				\\
	_Q_INVALIDATE((elm)->field.tqe_next);				\\
}" 14401 . 14735) (WHILE "while" 14736 . 14741) (semantic-list "(0)" 14742 . 14745)))
          ("SLIST_END" (spp-arg-list ("head") 4967 . 4973) . ((symbol "NULL" 4975 . 4979)))
          ("LIST_FIRST" (spp-arg-list ("head") 6964 . 6970) . ((semantic-list "((head)->lh_first)" 6972 . 6990)))
          ("LIST_INIT" (spp-arg-list ("head") 7503 . 7509) . 
              ((DO "do" 7510 . 7512) (semantic-list "{						\\
	LIST_FIRST(head) = LIST_END(head);				\\
}" 7513 . 7564) (WHILE "while" 7565 . 7570) (semantic-list "(0)" 7571 . 7574)))
          ("TAILQ_FOREACH_SAFE" (spp-arg-list ("var" "head" "field" "tvar") 12367 . 12391) . ((FOR "for" 12397 . 12400) (semantic-list "((var) = TAILQ_FIRST(head);					\\
	    (var) != TAILQ_END(head) &&					\\
	    ((tvar) = TAILQ_NEXT(var, field), 1);			\\
	    (var) = (tvar))" 12401 . 12541)))
          ("SLIST_FOREACH" (spp-arg-list ("var" "head" "field") 5122 . 5140) . ((FOR "for" 5148 . 5151) (semantic-list "((var) = SLIST_FIRST(head);					\\
	    (var) != SLIST_END(head);					\\
	    (var) = SLIST_NEXT(var, field))" 5151 . 5258)))
          ("LIST_FOREACH_SAFE" (spp-arg-list ("var" "head" "field" "tvar") 7318 . 7342) . ((FOR "for" 7348 . 7351) (semantic-list "((var) = LIST_FIRST(head);				\\
	    (var) && ((tvar) = LIST_NEXT(var, field), 1);		\\
	    (var) = (tvar))" 7352 . 7458)))
          ("SIMPLEQ_HEAD_INITIALIZER" (spp-arg-list ("head") 9342 . 9348) . ((semantic-list "{ NULL, &(head).sqh_first }" 9356 . 9383)))
          ("SIMPLEQ_ENTRY" (spp-arg-list ("type") 9406 . 9412) . ((STRUCT "struct" 9420 . 9426) (semantic-list "{								\\
	struct type *sqe_next;	/* next element */			\\
}" 9427 . 9486)))
          ("TAILQ_EMPTY" (spp-arg-list ("head") 12127 . 12133) . ((semantic-list "(TAILQ_FIRST(head) == TAILQ_END(head))" 12142 . 12180)))
          ("SLIST_ENTRY" (spp-arg-list ("type") 4776 . 4782) . ((STRUCT "struct" 4790 . 4796) (semantic-list "{								\\
	struct type *sle_next;	/* next element */			\\
}" 4797 . 4856)))
          ("SLIST_INIT" (spp-arg-list ("head") 5488 . 5494) . ((semantic-list "{						\\
	SLIST_FIRST(head) = SLIST_END(head);				\\
}" 5495 . 5548)))
          ("SLIST_REMOVE_AFTER" (spp-arg-list ("elm" "field") 5893 . 5905) . 
              ((DO "do" 5906 . 5908) (semantic-list "{				\\
	(elm)->field.sle_next = (elm)->field.sle_next->field.sle_next;	\\
}" 5909 . 5983) (WHILE "while" 5984 . 5989) (semantic-list "(0)" 5990 . 5993)))
          ("TAILQ_FOREACH_REVERSE_SAFE" (spp-arg-list ("var" "head" "headname" "field" "tvar") 12770 . 12804) . ((FOR "for" 12808 . 12811) (semantic-list "((var) = TAILQ_LAST(head, headname);			\\
	    (var) != TAILQ_END(head) &&					\\
	    ((tvar) = TAILQ_PREV(var, headname, field), 1);		\\
	    (var) = (tvar))" 12812 . 12968)))
          ("CIRCLEQ_FIRST" (spp-arg-list ("head") 15712 . 15718) . ((semantic-list "((head)->cqh_first)" 15720 . 15739)))
          ("CIRCLEQ_FOREACH_REVERSE" (spp-arg-list ("var" "head" "field") 16429 . 16447) . ((FOR "for" 16453 . 16456) (semantic-list "((var) = CIRCLEQ_LAST(head);					\\
	    (var) != CIRCLEQ_END(head);					\\
	    (var) = CIRCLEQ_PREV(var, field))" 16456 . 16568)))
          ("SLIST_FOREACH_SAFE" (spp-arg-list ("var" "head" "field" "tvar") 5286 . 5310) . ((FOR "for" 5316 . 5319) (semantic-list "((var) = SLIST_FIRST(head);				\\
	    (var) && ((tvar) = SLIST_NEXT(var, field), 1);		\\
	    (var) = (tvar))" 5320 . 5428)))
          ("SIMPLEQ_REMOVE_HEAD" (spp-arg-list ("head" "field") 10912 . 10925) . 
              ((DO "do" 10926 . 10928) (semantic-list "{			\\
	if (((head)->sqh_first = (head)->sqh_first->field.sqe_next) == NULL) \\
		(head)->sqh_last = &(head)->sqh_first;			\\
}" 10929 . 11053) (WHILE "while" 11054 . 11059) (semantic-list "(0)" 11060 . 11063)))
          ("CIRCLEQ_INSERT_HEAD" (spp-arg-list ("head" "elm" "field") 17764 . 17782) . 
              ((DO "do" 17783 . 17785) (semantic-list "{			\\
	(elm)->field.cqe_next = (head)->cqh_first;			\\
	(elm)->field.cqe_prev = CIRCLEQ_END(head);			\\
	if ((head)->cqh_last == CIRCLEQ_END(head))			\\
		(head)->cqh_last = (elm);				\\
	else								\\
		(head)->cqh_first->field.cqe_prev = (elm);		\\
	(head)->cqh_first = (elm);					\\
}" 17786 . 18067) (WHILE "while" 18068 . 18073) (semantic-list "(0)" 18074 . 18077)))
          ("_SYS_QUEUE_H_")
          ("_Q_INVALIDATE" (spp-arg-list ("a") 4534 . 4537))
          ("SLIST_INSERT_HEAD" (spp-arg-list ("head" "elm" "field") 5744 . 5762) . 
              ((DO "do" 5763 . 5765) (semantic-list "{			\\
	(elm)->field.sle_next = (head)->slh_first;			\\
	(head)->slh_first = (elm);					\\
}" 5766 . 5855) (WHILE "while" 5856 . 5861) (semantic-list "(0)" 5862 . 5865)))
          ("LIST_HEAD_INITIALIZER" (spp-arg-list ("head") 6728 . 6734) . ((semantic-list "{ NULL }" 6742 . 6750)))
          ("LIST_EMPTY" (spp-arg-list ("head") 7039 . 7045) . ((semantic-list "(LIST_FIRST(head) == LIST_END(head))" 7047 . 7083)))
          ("LIST_INSERT_BEFORE" (spp-arg-list ("listelm" "elm" "field") 7912 . 7933) . 
              ((DO "do" 7934 . 7936) (semantic-list "{			\\
	(elm)->field.le_prev = (listelm)->field.le_prev;		\\
	(elm)->field.le_next = (listelm);				\\
	*(listelm)->field.le_prev = (elm);				\\
	(listelm)->field.le_prev = &(elm)->field.le_next;		\\
}" 7937 . 8132) (WHILE "while" 8133 . 8138) (semantic-list "(0)" 8139 . 8142)))
          ("LIST_REMOVE" (spp-arg-list ("elm" "field") 8428 . 8440) . 
              ((DO "do" 8441 . 8443) (semantic-list "{					\\
	if ((elm)->field.le_next != NULL)				\\
		(elm)->field.le_next->field.le_prev =			\\
		    (elm)->field.le_prev;				\\
	*(elm)->field.le_prev = (elm)->field.le_next;			\\
	_Q_INVALIDATE((elm)->field.le_prev);				\\
	_Q_INVALIDATE((elm)->field.le_next);				\\
}" 8444 . 8707) (WHILE "while" 8708 . 8713) (semantic-list "(0)" 8714 . 8717)))
          ("TAILQ_FOREACH_REVERSE" (spp-arg-list ("var" "head" "headname" "field") 12573 . 12601) . ((FOR "for" 12606 . 12609) (semantic-list "((var) = TAILQ_LAST(head, headname);				\\
	    (var) != TAILQ_END(head);					\\
	    (var) = TAILQ_PREV(var, headname, field))" 12609 . 12734)))
          ("TAILQ_INSERT_HEAD" (spp-arg-list ("head" "elm" "field") 13155 . 13173) . 
              ((DO "do" 13174 . 13176) (semantic-list "{			\\
	if (((elm)->field.tqe_next = (head)->tqh_first) != NULL)	\\
		(head)->tqh_first->field.tqe_prev =			\\
		    &(elm)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm)->field.tqe_next;		\\
	(head)->tqh_first = (elm);					\\
	(elm)->field.tqe_prev = &(head)->tqh_first;			\\
}" 13177 . 13467) (WHILE "while" 13468 . 13473) (semantic-list "(0)" 13474 . 13477)))
          ("TAILQ_INSERT_AFTER" (spp-arg-list ("head" "listelm" "elm" "field") 13737 . 13764) . 
              ((DO "do" 13765 . 13767) (semantic-list "{		\\
	if (((elm)->field.tqe_next = (listelm)->field.tqe_next) != NULL)\\
		(elm)->field.tqe_next->field.tqe_prev =			\\
		    &(elm)->field.tqe_next;				\\
	else								\\
		(head)->tqh_last = &(elm)->field.tqe_next;		\\
	(listelm)->field.tqe_next = (elm);				\\
	(elm)->field.tqe_prev = &(listelm)->field.tqe_next;		\\
}" 13768 . 14082) (WHILE "while" 14083 . 14088) (semantic-list "(0)" 14089 . 14092)))
          ("CIRCLEQ_REPLACE" (spp-arg-list ("head" "elm" "elm2" "field") 18986 . 19010) . 
              ((DO "do" 19011 . 19013) (semantic-list "{			\\
	if (((elm2)->field.cqe_next = (elm)->field.cqe_next) ==		\\
	    CIRCLEQ_END(head))						\\
		(head).cqh_last = (elm2);				\\
	else								\\
		(elm2)->field.cqe_next->field.cqe_prev = (elm2);	\\
	if (((elm2)->field.cqe_prev = (elm)->field.cqe_prev) ==		\\
	    CIRCLEQ_END(head))						\\
		(head).cqh_first = (elm2);				\\
	else								\\
		(elm2)->field.cqe_prev->field.cqe_next = (elm2);	\\
	_Q_INVALIDATE((elm)->field.cqe_prev);				\\
	_Q_INVALIDATE((elm)->field.cqe_next);				\\
}" 19014 . 19494) (WHILE "while" 19495 . 19500) (semantic-list "(0)" 19501 . 19504)))
          )
)
    (semanticdb-table "tree.h"
      :major-mode 'c-mode
      :tags 
        '( ("_SYS_TREE_H_" variable (:constant-flag t) nil [1431 1443])
            ("SPLAY_HEAD" variable (:constant-flag t) nil [2601 2611])
            ("SPLAY_INITIALIZER" variable (:constant-flag t) nil [2716 2733])
            ("SPLAY_INIT" variable (:constant-flag t) nil [2766 2776])
            ("SPLAY_ENTRY" variable (:constant-flag t) nil [2848 2859])
            ("SPLAY_LEFT" variable (:constant-flag t) nil [2998 3008])
            ("SPLAY_RIGHT" variable (:constant-flag t) nil [3052 3063])
            ("SPLAY_ROOT" variable (:constant-flag t) nil [3108 3118])
            ("SPLAY_EMPTY" variable (:constant-flag t) nil [3151 3162])
            ("SPLAY_ROTATE_RIGHT" variable (:constant-flag t) nil [3278 3296])
            ("SPLAY_ROTATE_LEFT" variable (:constant-flag t) nil [3493 3510])
            ("SPLAY_LINKLEFT" variable (:constant-flag t) nil [3705 3719])
            ("SPLAY_LINKRIGHT" variable (:constant-flag t) nil [3909 3924])
            ("SPLAY_ASSEMBLE" variable (:constant-flag t) nil [4115 4129])
            ("SPLAY_PROTOTYPE" variable (:constant-flag t) nil [4508 4523])
            ("SPLAY_GENERATE" variable (:constant-flag t) nil [5840 5854])
            ("SPLAY_NEGINF" variable (:constant-flag t) nil [9665 9677])
            ("SPLAY_INF" variable (:constant-flag t) nil [9689 9698])
            ("SPLAY_INSERT" variable (:constant-flag t) nil [9710 9722])
            ("SPLAY_REMOVE" variable (:constant-flag t) nil [9769 9781])
            ("SPLAY_FIND" variable (:constant-flag t) nil [9828 9838])
            ("SPLAY_NEXT" variable (:constant-flag t) nil [9884 9894])
            ("SPLAY_MIN" variable (:constant-flag t) nil [9940 9949])
            ("SPLAY_MAX" variable (:constant-flag t) nil [10039 10048])
            ("SPLAY_FOREACH" variable (:constant-flag t) nil [10136 10149])
            ("RB_HEAD" variable (:constant-flag t) nil [10327 10334])
            ("RB_HEAD" variable (:constant-flag t) nil [10327 10334])
            ("RB_HEAD" variable (:constant-flag t) nil [10327 10334])
            ("RB_INITIALIZER" variable (:constant-flag t) nil [10439 10453])
            ("RB_INIT" variable (:constant-flag t) nil [10486 10493])
            ("RB_INIT" variable (:constant-flag t) nil [10486 10493])
            ("RB_BLACK" variable (:constant-flag t) nil [10565 10573])
            ("RB_RED" variable (:constant-flag t) nil [10584 10590])
            ("RB_ENTRY" variable (:constant-flag t) nil [10602 10610])
            ("RB_ENTRY" variable (:constant-flag t) nil [10602 10610])
            ("RB_LEFT" variable (:constant-flag t) nil [10838 10845])
            ("RB_RIGHT" variable (:constant-flag t) nil [10889 10897])
            ("RB_PARENT" variable (:constant-flag t) nil [10942 10951])
            ("RB_COLOR" variable (:constant-flag t) nil [10997 11005])
            ("RB_ROOT" variable (:constant-flag t) nil [11050 11057])
            ("RB_EMPTY" variable (:constant-flag t) nil [11091 11099])
            ("RB_SET" variable (:constant-flag t) nil [11141 11147])
            ("RB_SET_BLACKRED" variable (:constant-flag t) nil [11332 11347])
            ("RB_AUGMENT" variable (:constant-flag t) nil [11496 11506])
            ("RB_ROTATE_LEFT" variable (:constant-flag t) nil [11542 11556])
            ("RB_ROTATE_RIGHT" variable (:constant-flag t) nil [12253 12268])
            ("RB_PROTOTYPE" variable (:constant-flag t) nil [13014 13026])
            ("RB_PROTOTYPE_STATIC" variable (:constant-flag t) nil [13112 13131])
            ("RB_PROTOTYPE_INTERNAL" variable (:constant-flag t) nil [13251 13272])
            ("RB_GENERATE" variable (:constant-flag t) nil [13980 13991])
            ("RB_GENERATE_STATIC" variable (:constant-flag t) nil [14076 14094])
            ("RB_GENERATE_INTERNAL" variable (:constant-flag t) nil [14213 14233])
            ("RB_NEGINF" variable (:constant-flag t) nil [24074 24083])
            ("RB_INF" variable (:constant-flag t) nil [24095 24101])
            ("RB_INSERT" variable (:constant-flag t) nil [24113 24122])
            ("RB_INSERT" variable (:constant-flag t) nil [24113 24122])
            ("RB_REMOVE" variable (:constant-flag t) nil [24166 24175])
            ("RB_REMOVE" variable (:constant-flag t) nil [24166 24175])
            ("RB_FIND" variable (:constant-flag t) nil [24219 24226])
            ("RB_FIND" variable (:constant-flag t) nil [24219 24226])
            ("RB_NFIND" variable (:constant-flag t) nil [24268 24276])
            ("RB_NEXT" variable (:constant-flag t) nil [24319 24326])
            ("RB_PREV" variable (:constant-flag t) nil [24365 24372])
            ("RB_MIN" variable (:constant-flag t) nil [24411 24417])
            ("RB_MAX" variable (:constant-flag t) nil [24467 24473])
            ("RB_FOREACH" variable (:constant-flag t) nil [24521 24531])
            ("RB_FOREACH_SAFE" variable (:constant-flag t) nil [24657 24672])
            ("RB_FOREACH_REVERSE" variable (:constant-flag t) nil [24815 24833])
            ("RB_FOREACH_REVERSE_SAFE" variable (:constant-flag t) nil [24958 24981]))          
      :file "tree.h"
      :pointmax 25141
      :fsize 25140
      :lastmodtime '(22126 32081 730869 56000)
      :unmatched-syntax nil
      :lexical-table 
        '(("SPLAY_ROOT" (spp-arg-list ("head") 3118 . 3124) . 
              ((semantic-list "(head)" 3126 . 3132) (punctuation "-" 3132 . 3133) (punctuation ">" 3133 . 3134) (symbol "sph_root" 3134 . 3142)))
          ("RB_BLACK" . ((number "0" 10574 . 10575)))
          ("_SYS_TREE_H_")
          ("RB_INITIALIZER" (spp-arg-list ("root") 10453 . 10459) . ((semantic-list "{ NULL }" 10468 . 10476)))
          ("RB_FIND" (spp-arg-list ("name" "x" "y") 24226 . 24238) . ((spp-symbol-merge ((symbol "name" 24239 . 24243) (symbol "_RB_FIND" 24245 . 24253)) 24239 . 24253) (semantic-list "(x, y)" 24253 . 24259)))
          ("RB_FOREACH_REVERSE_SAFE" (spp-arg-list ("x" "name" "head" "y") 24981 . 24999) . ((FOR "for" 25005 . 25008) (semantic-list "((x) = RB_MAX(name, head);					\\
	    ((x) != NULL) && ((y) = name##_RB_PREV(x), 1);		\\
	     (x) = (y))" 25009 . 25113)))
          ("SPLAY_LINKRIGHT" (spp-arg-list ("head" "tmp" "field") 3924 . 3942) . 
              ((DO "do" 3943 . 3945) (semantic-list "{				\\
	SPLAY_RIGHT(tmp, field) = (head)->sph_root;			\\
	tmp = (head)->sph_root;						\\
	(head)->sph_root = SPLAY_RIGHT((head)->sph_root, field);	\\
}" 3946 . 4095) (WHILE "while" 4096 . 4101) (semantic-list "(0)" 4102 . 4105)))
          ("SPLAY_PROTOTYPE" (spp-arg-list ("name" "type" "field" "cmp") 4523 . 4547) . 
              ((VOID "void" 4553 . 4557) (spp-symbol-merge ((symbol "name" 4558 . 4562) (symbol "_SPLAY" 4564 . 4570)) 4558 . 4570) (semantic-list "(struct name *, struct type *)" 4570 . 4600) (punctuation ";" 4600 . 4601) (VOID "void" 4606 . 4610) (spp-symbol-merge ((symbol "name" 4611 . 4615) (symbol "_SPLAY_MINMAX" 4617 . 4630)) 4611 . 4630) (semantic-list "(struct name *, int)" 4630 . 4650) (punctuation ";" 4650 . 4651) (STRUCT "struct" 4657 . 4663) (symbol "type" 4664 . 4668) (punctuation "*" 4669 . 4670) (spp-symbol-merge ((symbol "name" 4670 . 4674) (symbol "_SPLAY_INSERT" 4676 . 4689)) 4670 . 4689) (semantic-list "(struct name *, struct type *)" 4689 . 4719) (punctuation ";" 4719 . 4720) (STRUCT "struct" 4724 . 4730) (symbol "type" 4731 . 4735) (punctuation "*" 4736 . 4737) (spp-symbol-merge ((symbol "name" 4737 . 4741) (symbol "_SPLAY_REMOVE" 4743 . 4756)) 4737 . 4756) (semantic-list "(struct name *, struct type *)" 4756 . 4786) (punctuation ";" 4786 . 4787) (STATIC "static" 4853 . 4859) (symbol "__inline" 4860 . 4868) (STRUCT "struct" 4869 . 4875) (symbol "type" 4876 . 4880) (punctuation "*" 4881 . 4882) (spp-symbol-merge ((symbol "name" 4890 . 4894) (symbol "_SPLAY_FIND" 4896 . 4907)) 4890 . 4907) (semantic-list "(struct name *head, struct type *elm)" 4907 . 4944) (semantic-list "{									\\
	if (SPLAY_EMPTY(head))						\\
		return(NULL);						\\
	name##_SPLAY(head, elm);					\\
	if ((cmp)(elm, (head)->sph_root) == 0)				\\
		return (head->sph_root);				\\
	return (NULL);							\\
}" 4949 . 5149) (STATIC "static" 5171 . 5177) (symbol "__inline" 5178 . 5186) (STRUCT "struct" 5187 . 5193) (symbol "type" 5194 . 5198) (punctuation "*" 5199 . 5200) (spp-symbol-merge ((symbol "name" 5208 . 5212) (symbol "_SPLAY_NEXT" 5214 . 5225)) 5208 . 5225) (semantic-list "(struct name *head, struct type *elm)" 5225 . 5262) (semantic-list "{									\\
	name##_SPLAY(head, elm);					\\
	if (SPLAY_RIGHT(elm, field) != NULL) {				\\
		elm = SPLAY_RIGHT(elm, field);				\\
		while (SPLAY_LEFT(elm, field) != NULL) {		\\
			elm = SPLAY_LEFT(elm, field);			\\
		}							\\
	} else								\\
		elm = NULL;						\\
	return (elm);							\\
}" 5267 . 5551) (STATIC "static" 5573 . 5579) (symbol "__inline" 5580 . 5588) (STRUCT "struct" 5589 . 5595) (symbol "type" 5596 . 5600) (punctuation "*" 5601 . 5602) (spp-symbol-merge ((symbol "name" 5610 . 5614) (symbol "_SPLAY_MIN_MAX" 5616 . 5630)) 5610 . 5630) (semantic-list "(struct name *head, int val)" 5630 . 5658) (semantic-list "{									\\
	name##_SPLAY_MINMAX(head, val);					\\
        return (SPLAY_ROOT(head));					\\
}" 5663 . 5756)))
          ("SPLAY_INSERT" (spp-arg-list ("name" "x" "y") 9722 . 9734) . ((spp-symbol-merge ((symbol "name" 9735 . 9739) (symbol "_SPLAY_INSERT" 9741 . 9754)) 9735 . 9754) (semantic-list "(x, y)" 9754 . 9760)))
          ("RB_LEFT" (spp-arg-list ("elm" "field") 10845 . 10857) . 
              ((semantic-list "(elm)" 10859 . 10864) (punctuation "-" 10864 . 10865) (punctuation ">" 10865 . 10866) (symbol "field" 10866 . 10871) (punctuation "." 10871 . 10872) (symbol "rbe_left" 10872 . 10880)))
          ("RB_EMPTY" (spp-arg-list ("head") 11099 . 11105) . ((semantic-list "(RB_ROOT(head) == NULL)" 11108 . 11131)))
          ("RB_SET" (spp-arg-list ("elm" "parent" "field") 11147 . 11167) . 
              ((DO "do" 11168 . 11170) (semantic-list "{					\\
	RB_PARENT(elm, field) = parent;					\\
	RB_LEFT(elm, field) = RB_RIGHT(elm, field) = NULL;		\\
	RB_COLOR(elm, field) = RB_RED;					\\
}" 11171 . 11312) (WHILE "while" 11313 . 11318) (semantic-list "(0)" 11319 . 11322)))
          ("RB_PROTOTYPE_STATIC" (spp-arg-list ("name" "type" "field" "cmp") 13131 . 13155) . ((symbol "RB_PROTOTYPE_INTERNAL" 13161 . 13182) (semantic-list "(name, type, field, cmp, __attribute__((__unused__)) static)" 13182 . 13242)))
          ("SPLAY_INITIALIZER" (spp-arg-list ("root") 2733 . 2739) . ((semantic-list "{ NULL }" 2748 . 2756)))
          ("SPLAY_INIT" (spp-arg-list ("root") 2776 . 2782) . 
              ((DO "do" 2783 . 2785) (semantic-list "{						\\
	(root)->sph_root = NULL;					\\
}" 2786 . 2828) (WHILE "while" 2829 . 2834) (semantic-list "(0)" 2835 . 2838)))
          ("SPLAY_LINKLEFT" (spp-arg-list ("head" "tmp" "field") 3719 . 3737) . 
              ((DO "do" 3738 . 3740) (semantic-list "{				\\
	SPLAY_LEFT(tmp, field) = (head)->sph_root;			\\
	tmp = (head)->sph_root;						\\
	(head)->sph_root = SPLAY_LEFT((head)->sph_root, field);		\\
}" 3741 . 3889) (WHILE "while" 3890 . 3895) (semantic-list "(0)" 3896 . 3899)))
          ("RB_RED" . ((number "1" 10592 . 10593)))
          ("RB_PROTOTYPE" (spp-arg-list ("name" "type" "field" "cmp") 13026 . 13050) . ((symbol "RB_PROTOTYPE_INTERNAL" 13057 . 13078) (semantic-list "(name, type, field, cmp,)" 13078 . 13103)))
          ("RB_INF" . ((number "1" 24102 . 24103)))
          ("RB_FOREACH_REVERSE" (spp-arg-list ("x" "name" "head") 24833 . 24848) . ((FOR "for" 24855 . 24858) (semantic-list "((x) = RB_MAX(name, head);					\\
	     (x) != NULL;						\\
	     (x) = name##_RB_PREV(x))" 24859 . 24948)))
          ("SPLAY_FOREACH" (spp-arg-list ("x" "name" "head") 10149 . 10164) . ((FOR "for" 10172 . 10175) (semantic-list "((x) = SPLAY_MIN(name, head);				\\
	     (x) != NULL;						\\
	     (x) = SPLAY_NEXT(name, head, x))" 10176 . 10275)))
          ("RB_PARENT" (spp-arg-list ("elm" "field") 10951 . 10963) . 
              ((semantic-list "(elm)" 10965 . 10970) (punctuation "-" 10970 . 10971) (punctuation ">" 10971 . 10972) (symbol "field" 10972 . 10977) (punctuation "." 10977 . 10978) (symbol "rbe_parent" 10978 . 10988)))
          ("SPLAY_EMPTY" (spp-arg-list ("head") 3162 . 3168) . ((semantic-list "(SPLAY_ROOT(head) == NULL)" 3170 . 3196)))
          ("SPLAY_ASSEMBLE" (spp-arg-list ("head" "node" "left" "right" "field") 4129 . 4161) . 
              ((DO "do" 4162 . 4164) (semantic-list "{		\\
	SPLAY_RIGHT(left, field) = SPLAY_LEFT((head)->sph_root, field);	\\
	SPLAY_LEFT(right, field) = SPLAY_RIGHT((head)->sph_root, field);\\
	SPLAY_LEFT((head)->sph_root, field) = SPLAY_RIGHT(node, field);	\\
	SPLAY_RIGHT((head)->sph_root, field) = SPLAY_LEFT(node, field);	\\
}" 4165 . 4439) (WHILE "while" 4440 . 4445) (semantic-list "(0)" 4446 . 4449)))
          ("SPLAY_NEGINF" . ((punctuation "-" 9678 . 9679) (number "1" 9679 . 9680)))
          ("SPLAY_INF" . ((number "1" 9699 . 9700)))
          ("RB_COLOR" (spp-arg-list ("elm" "field") 11005 . 11017) . 
              ((semantic-list "(elm)" 11019 . 11024) (punctuation "-" 11024 . 11025) (punctuation ">" 11025 . 11026) (symbol "field" 11026 . 11031) (punctuation "." 11031 . 11032) (symbol "rbe_color" 11032 . 11041)))
          ("RB_PREV" (spp-arg-list ("name" "x" "y") 24372 . 24384) . ((spp-symbol-merge ((symbol "name" 24385 . 24389) (symbol "_RB_PREV" 24391 . 24399)) 24385 . 24399) (semantic-list "(y)" 24399 . 24402)))
          ("RB_MAX" (spp-arg-list ("name" "x") 24473 . 24482) . ((spp-symbol-merge ((symbol "name" 24484 . 24488) (symbol "_RB_MINMAX" 24490 . 24500)) 24484 . 24500) (semantic-list "(x, RB_INF)" 24500 . 24511)))
          ("SPLAY_FIND" (spp-arg-list ("name" "x" "y") 9838 . 9850) . ((spp-symbol-merge ((symbol "name" 9852 . 9856) (symbol "_SPLAY_FIND" 9858 . 9869)) 9852 . 9869) (semantic-list "(x, y)" 9869 . 9875)))
          ("RB_HEAD" (spp-arg-list ("name" "type") 10334 . 10346) . 
              ((STRUCT "struct" 10354 . 10360) (symbol "name" 10361 . 10365) (semantic-list "{								\\
	struct type *rbh_root; /* root of the tree */			\\
}" 10366 . 10429)))
          ("RB_RIGHT" (spp-arg-list ("elm" "field") 10897 . 10909) . 
              ((semantic-list "(elm)" 10911 . 10916) (punctuation "-" 10916 . 10917) (punctuation ">" 10917 . 10918) (symbol "field" 10918 . 10923) (punctuation "." 10923 . 10924) (symbol "rbe_right" 10924 . 10933)))
          ("RB_ROTATE_RIGHT" (spp-arg-list ("head" "elm" "tmp" "field") 12268 . 12291) . 
              ((DO "do" 12292 . 12294) (semantic-list "{			\\
	(tmp) = RB_LEFT(elm, field);					\\
	if ((RB_LEFT(elm, field) = RB_RIGHT(tmp, field))) {		\\
		RB_PARENT(RB_RIGHT(tmp, field), field) = (elm);		\\
	}								\\
	RB_AUGMENT(elm);						\\
	if ((RB_PARENT(tmp, field) = RB_PARENT(elm, field))) {		\\
		if ((elm) == RB_LEFT(RB_PARENT(elm, field), field))	\\
			RB_LEFT(RB_PARENT(elm, field), field) = (tmp);	\\
		else							\\
			RB_RIGHT(RB_PARENT(elm, field), field) = (tmp);	\\
	} else								\\
		(head)->rbh_root = (tmp);				\\
	RB_RIGHT(tmp, field) = (elm);					\\
	RB_PARENT(elm, field) = (tmp);					\\
	RB_AUGMENT(tmp);						\\
	if ((RB_PARENT(tmp, field)))					\\
		RB_AUGMENT(RB_PARENT(tmp, field));			\\
}" 12295 . 12946) (WHILE "while" 12947 . 12952) (semantic-list "(0)" 12953 . 12956)))
          ("RB_GENERATE" (spp-arg-list ("name" "type" "field" "cmp") 13991 . 14015) . ((symbol "RB_GENERATE_INTERNAL" 14022 . 14042) (semantic-list "(name, type, field, cmp,)" 14042 . 14067)))
          ("RB_INSERT" (spp-arg-list ("name" "x" "y") 24122 . 24134) . ((spp-symbol-merge ((symbol "name" 24135 . 24139) (symbol "_RB_INSERT" 24141 . 24151)) 24135 . 24151) (semantic-list "(x, y)" 24151 . 24157)))
          ("RB_NEXT" (spp-arg-list ("name" "x" "y") 24326 . 24338) . ((spp-symbol-merge ((symbol "name" 24339 . 24343) (symbol "_RB_NEXT" 24345 . 24353)) 24339 . 24353) (semantic-list "(y)" 24353 . 24356)))
          ("RB_MIN" (spp-arg-list ("name" "x") 24417 . 24426) . ((spp-symbol-merge ((symbol "name" 24428 . 24432) (symbol "_RB_MINMAX" 24434 . 24444)) 24428 . 24444) (semantic-list "(x, RB_NEGINF)" 24444 . 24458)))
          ("SPLAY_LEFT" (spp-arg-list ("elm" "field") 3008 . 3020) . 
              ((semantic-list "(elm)" 3022 . 3027) (punctuation "-" 3027 . 3028) (punctuation ">" 3028 . 3029) (symbol "field" 3029 . 3034) (punctuation "." 3034 . 3035) (symbol "spe_left" 3035 . 3043)))
          ("SPLAY_REMOVE" (spp-arg-list ("name" "x" "y") 9781 . 9793) . ((spp-symbol-merge ((symbol "name" 9794 . 9798) (symbol "_SPLAY_REMOVE" 9800 . 9813)) 9794 . 9813) (semantic-list "(x, y)" 9813 . 9819)))
          ("SPLAY_MAX" (spp-arg-list ("name" "x") 10048 . 10057) . ((semantic-list "(SPLAY_EMPTY(x) ? NULL	\\
					: name##_SPLAY_MIN_MAX(x, SPLAY_INF))" 10059 . 10126)))
          ("RB_ENTRY" (spp-arg-list ("type") 10610 . 10616) . ((STRUCT "struct" 10625 . 10631) (semantic-list "{								\\
	struct type *rbe_left;		/* left element */		\\
	struct type *rbe_right;		/* right element */		\\
	struct type *rbe_parent;	/* parent element */		\\
	int rbe_color;			/* node color */		\\
}" 10632 . 10828)))
          ("RB_SET_BLACKRED" (spp-arg-list ("black" "red" "field") 11347 . 11366) . 
              ((DO "do" 11367 . 11369) (semantic-list "{				\\
	RB_COLOR(black, field) = RB_BLACK;				\\
	RB_COLOR(red, field) = RB_RED;					\\
}" 11370 . 11457) (WHILE "while" 11458 . 11463) (semantic-list "(0)" 11464 . 11467)))
          ("RB_FOREACH" (spp-arg-list ("x" "name" "head") 24531 . 24546) . ((FOR "for" 24554 . 24557) (semantic-list "((x) = RB_MIN(name, head);					\\
	     (x) != NULL;						\\
	     (x) = name##_RB_NEXT(x))" 24558 . 24647)))
          ("RB_FOREACH_SAFE" (spp-arg-list ("x" "name" "head" "y") 24672 . 24690) . ((FOR "for" 24697 . 24700) (semantic-list "((x) = RB_MIN(name, head);					\\
	    ((x) != NULL) && ((y) = name##_RB_NEXT(x), 1);		\\
	     (x) = (y))" 24701 . 24805)))
          ("SPLAY_MIN" (spp-arg-list ("name" "x") 9949 . 9958) . ((semantic-list "(SPLAY_EMPTY(x) ? NULL	\\
					: name##_SPLAY_MIN_MAX(x, SPLAY_NEGINF))" 9960 . 10030)))
          ("RB_ROOT" (spp-arg-list ("head") 11057 . 11063) . 
              ((semantic-list "(head)" 11066 . 11072) (punctuation "-" 11072 . 11073) (punctuation ">" 11073 . 11074) (symbol "rbh_root" 11074 . 11082)))
          ("RB_AUGMENT" (spp-arg-list ("x") 11506 . 11509) . 
              ((DO "do" 11510 . 11512) (semantic-list "{}" 11513 . 11515) (WHILE "while" 11516 . 11521) (semantic-list "(0)" 11522 . 11525)))
          ("SPLAY_RIGHT" (spp-arg-list ("elm" "field") 3063 . 3075) . 
              ((semantic-list "(elm)" 3077 . 3082) (punctuation "-" 3082 . 3083) (punctuation ">" 3083 . 3084) (symbol "field" 3084 . 3089) (punctuation "." 3089 . 3090) (symbol "spe_right" 3090 . 3099)))
          ("RB_ROTATE_LEFT" (spp-arg-list ("head" "elm" "tmp" "field") 11556 . 11579) . 
              ((DO "do" 11580 . 11582) (semantic-list "{			\\
	(tmp) = RB_RIGHT(elm, field);					\\
	if ((RB_RIGHT(elm, field) = RB_LEFT(tmp, field))) {		\\
		RB_PARENT(RB_LEFT(tmp, field), field) = (elm);		\\
	}								\\
	RB_AUGMENT(elm);						\\
	if ((RB_PARENT(tmp, field) = RB_PARENT(elm, field))) {		\\
		if ((elm) == RB_LEFT(RB_PARENT(elm, field), field))	\\
			RB_LEFT(RB_PARENT(elm, field), field) = (tmp);	\\
		else							\\
			RB_RIGHT(RB_PARENT(elm, field), field) = (tmp);	\\
	} else								\\
		(head)->rbh_root = (tmp);				\\
	RB_LEFT(tmp, field) = (elm);					\\
	RB_PARENT(elm, field) = (tmp);					\\
	RB_AUGMENT(tmp);						\\
	if ((RB_PARENT(tmp, field)))					\\
		RB_AUGMENT(RB_PARENT(tmp, field));			\\
}" 11583 . 12233) (WHILE "while" 12234 . 12239) (semantic-list "(0)" 12240 . 12243)))
          ("RB_PROTOTYPE_INTERNAL" (spp-arg-list ("name" "type" "field" "cmp" "attr") 13272 . 13302) . 
              ((symbol "attr" 13306 . 13310) (VOID "void" 13311 . 13315) (spp-symbol-merge ((symbol "name" 13316 . 13320) (symbol "_RB_INSERT_COLOR" 13322 . 13338)) 13316 . 13338) (semantic-list "(struct name *, struct type *)" 13338 . 13368) (punctuation ";" 13368 . 13369) (symbol "attr" 13373 . 13377) (VOID "void" 13378 . 13382) (spp-symbol-merge ((symbol "name" 13383 . 13387) (symbol "_RB_REMOVE_COLOR" 13389 . 13405)) 13383 . 13405) (semantic-list "(struct name *, struct type *, struct type *)" 13405 . 13450) (punctuation ";" 13450 . 13451) (symbol "attr" 13453 . 13457) (STRUCT "struct" 13458 . 13464) (symbol "type" 13465 . 13469) (punctuation "*" 13470 . 13471) (spp-symbol-merge ((symbol "name" 13471 . 13475) (symbol "_RB_REMOVE" 13477 . 13487)) 13471 . 13487) (semantic-list "(struct name *, struct type *)" 13487 . 13517) (punctuation ";" 13517 . 13518) (symbol "attr" 13521 . 13525) (STRUCT "struct" 13526 . 13532) (symbol "type" 13533 . 13537) (punctuation "*" 13538 . 13539) (spp-symbol-merge ((symbol "name" 13539 . 13543) (symbol "_RB_INSERT" 13545 . 13555)) 13539 . 13555) (semantic-list "(struct name *, struct type *)" 13555 . 13585) (punctuation ";" 13585 . 13586) (symbol "attr" 13589 . 13593) (STRUCT "struct" 13594 . 13600) (symbol "type" 13601 . 13605) (punctuation "*" 13606 . 13607) (spp-symbol-merge ((symbol "name" 13607 . 13611) (symbol "_RB_FIND" 13613 . 13621)) 13607 . 13621) (semantic-list "(struct name *, struct type *)" 13621 . 13651) (punctuation ";" 13651 . 13652) (symbol "attr" 13656 . 13660) (STRUCT "struct" 13661 . 13667) (symbol "type" 13668 . 13672) (punctuation "*" 13673 . 13674) (spp-symbol-merge ((symbol "name" 13674 . 13678) (symbol "_RB_NFIND" 13680 . 13689)) 13674 . 13689) (semantic-list "(struct name *, struct type *)" 13689 . 13719) (punctuation ";" 13719 . 13720) (symbol "attr" 13723 . 13727) (STRUCT "struct" 13728 . 13734) (symbol "type" 13735 . 13739) (punctuation "*" 13740 . 13741) (spp-symbol-merge ((symbol "name" 13741 . 13745) (symbol "_RB_NEXT" 13747 . 13755)) 13741 . 13755) (semantic-list "(struct type *)" 13755 . 13770) (punctuation ";" 13770 . 13771) (symbol "attr" 13776 . 13780) (STRUCT "struct" 13781 . 13787) (symbol "type" 13788 . 13792) (punctuation "*" 13793 . 13794) (spp-symbol-merge ((symbol "name" 13794 . 13798) (symbol "_RB_PREV" 13800 . 13808)) 13794 . 13808) (semantic-list "(struct type *)" 13808 . 13823) (punctuation ";" 13823 . 13824) (symbol "attr" 13829 . 13833) (STRUCT "struct" 13834 . 13840) (symbol "type" 13841 . 13845) (punctuation "*" 13846 . 13847) (spp-symbol-merge ((symbol "name" 13847 . 13851) (symbol "_RB_MINMAX" 13853 . 13863)) 13847 . 13863) (semantic-list "(struct name *, int)" 13863 . 13883) (punctuation ";" 13883 . 13884)))
          ("RB_NEGINF" . ((punctuation "-" 24084 . 24085) (number "1" 24085 . 24086)))
          ("SPLAY_ENTRY" (spp-arg-list ("type") 2859 . 2865) . ((STRUCT "struct" 2873 . 2879) (semantic-list "{								\\
	struct type *spe_left; /* left element */			\\
	struct type *spe_right; /* right element */			\\
}" 2880 . 2988)))
          ("SPLAY_GENERATE" (spp-arg-list ("name" "type" "field" "cmp") 5854 . 5878) . 
              ((STRUCT "struct" 5884 . 5890) (symbol "type" 5891 . 5895) (punctuation "*" 5896 . 5897) (spp-symbol-merge ((symbol "name" 5907 . 5911) (symbol "_SPLAY_INSERT" 5913 . 5926)) 5907 . 5926) (semantic-list "(struct name *head, struct type *elm)" 5926 . 5963) (semantic-list "{									\\
    if (SPLAY_EMPTY(head)) {						\\
	    SPLAY_LEFT(elm, field) = SPLAY_RIGHT(elm, field) = NULL;	\\
    } else {								\\
	    int __comp;							\\
	    name##_SPLAY(head, elm);					\\
	    __comp = (cmp)(elm, (head)->sph_root);			\\
	    if(__comp < 0) {						\\
		    SPLAY_LEFT(elm, field) = SPLAY_LEFT((head)->sph_root, field);\\
		    SPLAY_RIGHT(elm, field) = (head)->sph_root;		\\
		    SPLAY_LEFT((head)->sph_root, field) = NULL;		\\
	    } else if (__comp > 0) {					\\
		    SPLAY_RIGHT(elm, field) = SPLAY_RIGHT((head)->sph_root, field);\\
		    SPLAY_LEFT(elm, field) = (head)->sph_root;		\\
		    SPLAY_RIGHT((head)->sph_root, field) = NULL;	\\
	    } else							\\
		    return ((head)->sph_root);				\\
    }									\\
    (head)->sph_root = (elm);						\\
    return (NULL);							\\
}" 5967 . 6765) (STRUCT "struct" 6787 . 6793) (symbol "type" 6794 . 6798) (punctuation "*" 6799 . 6800) (spp-symbol-merge ((symbol "name" 6810 . 6814) (symbol "_SPLAY_REMOVE" 6816 . 6829)) 6810 . 6829) (semantic-list "(struct name *head, struct type *elm)" 6829 . 6866) (semantic-list "{									\\
	struct type *__tmp;						\\
	if (SPLAY_EMPTY(head))						\\
		return (NULL);						\\
	name##_SPLAY(head, elm);					\\
	if ((cmp)(elm, (head)->sph_root) == 0) {			\\
		if (SPLAY_LEFT((head)->sph_root, field) == NULL) {	\\
			(head)->sph_root = SPLAY_RIGHT((head)->sph_root, field);\\
		} else {						\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			(head)->sph_root = SPLAY_LEFT((head)->sph_root, field);\\
			name##_SPLAY(head, elm);			\\
			SPLAY_RIGHT((head)->sph_root, field) = __tmp;	\\
		}							\\
		return (elm);						\\
	}								\\
	return (NULL);							\\
}" 6870 . 7443) (VOID "void" 7465 . 7469) (spp-symbol-merge ((symbol "name" 7480 . 7484) (symbol "_SPLAY" 7486 . 7492)) 7480 . 7492) (semantic-list "(struct name *head, struct type *elm)" 7492 . 7529) (semantic-list "{									\\
	struct type __node, *__left, *__right, *__tmp;			\\
	int __comp;							\\
\\
	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\\
	__left = __right = &__node;					\\
\\
	while ((__comp = (cmp)(elm, (head)->sph_root))) {		\\
		if (__comp < 0) {					\\
			__tmp = SPLAY_LEFT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if ((cmp)(elm, __tmp) < 0){			\\
				SPLAY_ROTATE_RIGHT(head, __tmp, field);	\\
				if (SPLAY_LEFT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKLEFT(head, __right, field);		\\
		} else if (__comp > 0) {				\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if ((cmp)(elm, __tmp) > 0){			\\
				SPLAY_ROTATE_LEFT(head, __tmp, field);	\\
				if (SPLAY_RIGHT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKRIGHT(head, __left, field);		\\
		}							\\
	}								\\
	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\\
}" 7534 . 8526) (VOID "void" 8678 . 8682) (spp-symbol-merge ((symbol "name" 8683 . 8687) (symbol "_SPLAY_MINMAX" 8689 . 8702)) 8683 . 8702) (semantic-list "(struct name *head, int __comp)" 8702 . 8733) (semantic-list "{									\\
	struct type __node, *__left, *__right, *__tmp;			\\
\\
	SPLAY_LEFT(&__node, field) = SPLAY_RIGHT(&__node, field) = NULL;\\
	__left = __right = &__node;					\\
\\
	while (1) {							\\
		if (__comp < 0) {					\\
			__tmp = SPLAY_LEFT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if (__comp < 0){				\\
				SPLAY_ROTATE_RIGHT(head, __tmp, field);	\\
				if (SPLAY_LEFT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKLEFT(head, __right, field);		\\
		} else if (__comp > 0) {				\\
			__tmp = SPLAY_RIGHT((head)->sph_root, field);	\\
			if (__tmp == NULL)				\\
				break;					\\
			if (__comp > 0) {				\\
				SPLAY_ROTATE_LEFT(head, __tmp, field);	\\
				if (SPLAY_RIGHT((head)->sph_root, field) == NULL)\\
					break;				\\
			}						\\
			SPLAY_LINKRIGHT(head, __left, field);		\\
		}							\\
	}								\\
	SPLAY_ASSEMBLE(head, &__node, __left, __right, field);		\\
}" 8736 . 9655)))
          ("RB_GENERATE_STATIC" (spp-arg-list ("name" "type" "field" "cmp") 14094 . 14118) . ((symbol "RB_GENERATE_INTERNAL" 14124 . 14144) (semantic-list "(name, type, field, cmp, __attribute__((__unused__)) static)" 14144 . 14204)))
          ("SPLAY_HEAD" (spp-arg-list ("name" "type") 2611 . 2623) . 
              ((STRUCT "struct" 2631 . 2637) (symbol "name" 2638 . 2642) (semantic-list "{								\\
	struct type *sph_root; /* root of the tree */			\\
}" 2643 . 2706)))
          ("SPLAY_ROTATE_RIGHT" (spp-arg-list ("head" "tmp" "field") 3296 . 3314) . 
              ((DO "do" 3315 . 3317) (semantic-list "{			\\
	SPLAY_LEFT((head)->sph_root, field) = SPLAY_RIGHT(tmp, field);	\\
	SPLAY_RIGHT(tmp, field) = (head)->sph_root;			\\
	(head)->sph_root = tmp;						\\
}" 3318 . 3472) (WHILE "while" 3473 . 3478) (semantic-list "(0)" 3479 . 3482)))
          ("SPLAY_ROTATE_LEFT" (spp-arg-list ("head" "tmp" "field") 3510 . 3528) . 
              ((DO "do" 3529 . 3531) (semantic-list "{			\\
	SPLAY_RIGHT((head)->sph_root, field) = SPLAY_LEFT(tmp, field);	\\
	SPLAY_LEFT(tmp, field) = (head)->sph_root;			\\
	(head)->sph_root = tmp;						\\
}" 3532 . 3685) (WHILE "while" 3686 . 3691) (semantic-list "(0)" 3692 . 3695)))
          ("SPLAY_NEXT" (spp-arg-list ("name" "x" "y") 9894 . 9906) . ((spp-symbol-merge ((symbol "name" 9908 . 9912) (symbol "_SPLAY_NEXT" 9914 . 9925)) 9908 . 9925) (semantic-list "(x, y)" 9925 . 9931)))
          ("RB_INIT" (spp-arg-list ("root") 10493 . 10499) . 
              ((DO "do" 10500 . 10502) (semantic-list "{						\\
	(root)->rbh_root = NULL;					\\
}" 10503 . 10545) (WHILE "while" 10546 . 10551) (semantic-list "(0)" 10552 . 10555)))
          ("RB_REMOVE" (spp-arg-list ("name" "x" "y") 24175 . 24187) . ((spp-symbol-merge ((symbol "name" 24188 . 24192) (symbol "_RB_REMOVE" 24194 . 24204)) 24188 . 24204) (semantic-list "(x, y)" 24204 . 24210)))
          ("RB_NFIND" (spp-arg-list ("name" "x" "y") 24276 . 24288) . ((spp-symbol-merge ((symbol "name" 24289 . 24293) (symbol "_RB_NFIND" 24295 . 24304)) 24289 . 24304) (semantic-list "(x, y)" 24304 . 24310)))
          ("RB_GENERATE_INTERNAL" (spp-arg-list ("name" "type" "field" "cmp" "attr") 14233 . 14263) . 
              ((symbol "attr" 14267 . 14271) (VOID "void" 14272 . 14276) (spp-symbol-merge ((symbol "name" 14286 . 14290) (symbol "_RB_INSERT_COLOR" 14292 . 14308)) 14286 . 14308) (semantic-list "(struct name *head, struct type *elm)" 14308 . 14345) (semantic-list "{									\\
	struct type *parent, *gparent, *tmp;				\\
	while ((parent = RB_PARENT(elm, field)) &&			\\
	    RB_COLOR(parent, field) == RB_RED) {			\\
		gparent = RB_PARENT(parent, field);			\\
		if (parent == RB_LEFT(gparent, field)) {		\\
			tmp = RB_RIGHT(gparent, field);			\\
			if (tmp && RB_COLOR(tmp, field) == RB_RED) {	\\
				RB_COLOR(tmp, field) = RB_BLACK;	\\
				RB_SET_BLACKRED(parent, gparent, field);\\
				elm = gparent;				\\
				continue;				\\
			}						\\
			if (RB_RIGHT(parent, field) == elm) {		\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				tmp = parent;				\\
				parent = elm;				\\
				elm = tmp;				\\
			}						\\
			RB_SET_BLACKRED(parent, gparent, field);	\\
			RB_ROTATE_RIGHT(head, gparent, tmp, field);	\\
		} else {						\\
			tmp = RB_LEFT(gparent, field);			\\
			if (tmp && RB_COLOR(tmp, field) == RB_RED) {	\\
				RB_COLOR(tmp, field) = RB_BLACK;	\\
				RB_SET_BLACKRED(parent, gparent, field);\\
				elm = gparent;				\\
				continue;				\\
			}						\\
			if (RB_LEFT(parent, field) == elm) {		\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				tmp = parent;				\\
				parent = elm;				\\
				elm = tmp;				\\
			}						\\
			RB_SET_BLACKRED(parent, gparent, field);	\\
			RB_ROTATE_LEFT(head, gparent, tmp, field);	\\
		}							\\
	}								\\
	RB_COLOR(head->rbh_root, field) = RB_BLACK;			\\
}" 14349 . 15662) (symbol "attr" 15684 . 15688) (VOID "void" 15689 . 15693) (spp-symbol-merge ((symbol "name" 15703 . 15707) (symbol "_RB_REMOVE_COLOR" 15709 . 15725)) 15703 . 15725) (semantic-list "(struct name *head, struct type *parent, struct type *elm)" 15725 . 15783) (semantic-list "{									\\
	struct type *tmp;						\\
	while ((elm == NULL || RB_COLOR(elm, field) == RB_BLACK) &&	\\
	    elm != RB_ROOT(head)) {					\\
		if (RB_LEFT(parent, field) == elm) {			\\
			tmp = RB_RIGHT(parent, field);			\\
			if (RB_COLOR(tmp, field) == RB_RED) {		\\
				RB_SET_BLACKRED(tmp, parent, field);	\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				tmp = RB_RIGHT(parent, field);		\\
			}						\\
			if ((RB_LEFT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) &&\\
			    (RB_RIGHT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK)) {\\
				RB_COLOR(tmp, field) = RB_RED;		\\
				elm = parent;				\\
				parent = RB_PARENT(elm, field);		\\
			} else {					\\
				if (RB_RIGHT(tmp, field) == NULL ||	\\
				    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK) {\\
					struct type *oleft;		\\
					if ((oleft = RB_LEFT(tmp, field)))\\
						RB_COLOR(oleft, field) = RB_BLACK;\\
					RB_COLOR(tmp, field) = RB_RED;	\\
					RB_ROTATE_RIGHT(head, tmp, oleft, field);\\
					tmp = RB_RIGHT(parent, field);	\\
				}					\\
				RB_COLOR(tmp, field) = RB_COLOR(parent, field);\\
				RB_COLOR(parent, field) = RB_BLACK;	\\
				if (RB_RIGHT(tmp, field))		\\
					RB_COLOR(RB_RIGHT(tmp, field), field) = RB_BLACK;\\
				RB_ROTATE_LEFT(head, parent, tmp, field);\\
				elm = RB_ROOT(head);			\\
				break;					\\
			}						\\
		} else {						\\
			tmp = RB_LEFT(parent, field);			\\
			if (RB_COLOR(tmp, field) == RB_RED) {		\\
				RB_SET_BLACKRED(tmp, parent, field);	\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				tmp = RB_LEFT(parent, field);		\\
			}						\\
			if ((RB_LEFT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) &&\\
			    (RB_RIGHT(tmp, field) == NULL ||		\\
			    RB_COLOR(RB_RIGHT(tmp, field), field) == RB_BLACK)) {\\
				RB_COLOR(tmp, field) = RB_RED;		\\
				elm = parent;				\\
				parent = RB_PARENT(elm, field);		\\
			} else {					\\
				if (RB_LEFT(tmp, field) == NULL ||	\\
				    RB_COLOR(RB_LEFT(tmp, field), field) == RB_BLACK) {\\
					struct type *oright;		\\
					if ((oright = RB_RIGHT(tmp, field)))\\
						RB_COLOR(oright, field) = RB_BLACK;\\
					RB_COLOR(tmp, field) = RB_RED;	\\
					RB_ROTATE_LEFT(head, tmp, oright, field);\\
					tmp = RB_LEFT(parent, field);	\\
				}					\\
				RB_COLOR(tmp, field) = RB_COLOR(parent, field);\\
				RB_COLOR(parent, field) = RB_BLACK;	\\
				if (RB_LEFT(tmp, field))		\\
					RB_COLOR(RB_LEFT(tmp, field), field) = RB_BLACK;\\
				RB_ROTATE_RIGHT(head, parent, tmp, field);\\
				elm = RB_ROOT(head);			\\
				break;					\\
			}						\\
		}							\\
	}								\\
	if (elm)							\\
		RB_COLOR(elm, field) = RB_BLACK;			\\
}" 15786 . 18440) (symbol "attr" 18462 . 18466) (STRUCT "struct" 18467 . 18473) (symbol "type" 18474 . 18478) (punctuation "*" 18479 . 18480) (spp-symbol-merge ((symbol "name" 18489 . 18493) (symbol "_RB_REMOVE" 18495 . 18505)) 18489 . 18505) (semantic-list "(struct name *head, struct type *elm)" 18505 . 18542) (semantic-list "{									\\
	struct type *child, *parent, *old = elm;			\\
	int color;							\\
	if (RB_LEFT(elm, field) == NULL)				\\
		child = RB_RIGHT(elm, field);				\\
	else if (RB_RIGHT(elm, field) == NULL)				\\
		child = RB_LEFT(elm, field);				\\
	else {								\\
		struct type *left;					\\
		elm = RB_RIGHT(elm, field);				\\
		while ((left = RB_LEFT(elm, field)))			\\
			elm = left;					\\
		child = RB_RIGHT(elm, field);				\\
		parent = RB_PARENT(elm, field);				\\
		color = RB_COLOR(elm, field);				\\
		if (child)						\\
			RB_PARENT(child, field) = parent;		\\
		if (parent) {						\\
			if (RB_LEFT(parent, field) == elm)		\\
				RB_LEFT(parent, field) = child;		\\
			else						\\
				RB_RIGHT(parent, field) = child;	\\
			RB_AUGMENT(parent);				\\
		} else							\\
			RB_ROOT(head) = child;				\\
		if (RB_PARENT(elm, field) == old)			\\
			parent = elm;					\\
		(elm)->field = (old)->field;				\\
		if (RB_PARENT(old, field)) {				\\
			if (RB_LEFT(RB_PARENT(old, field), field) == old)\\
				RB_LEFT(RB_PARENT(old, field), field) = elm;\\
			else						\\
				RB_RIGHT(RB_PARENT(old, field), field) = elm;\\
			RB_AUGMENT(RB_PARENT(old, field));		\\
		} else							\\
			RB_ROOT(head) = elm;				\\
		RB_PARENT(RB_LEFT(old, field), field) = elm;		\\
		if (RB_RIGHT(old, field))				\\
			RB_PARENT(RB_RIGHT(old, field), field) = elm;	\\
		if (parent) {						\\
			left = parent;					\\
			do {						\\
				RB_AUGMENT(left);			\\
			} while ((left = RB_PARENT(left, field)));	\\
		}							\\
		goto color;						\\
	}								\\
	parent = RB_PARENT(elm, field);					\\
	color = RB_COLOR(elm, field);					\\
	if (child)							\\
		RB_PARENT(child, field) = parent;			\\
	if (parent) {							\\
		if (RB_LEFT(parent, field) == elm)			\\
			RB_LEFT(parent, field) = child;			\\
		else							\\
			RB_RIGHT(parent, field) = child;		\\
		RB_AUGMENT(parent);					\\
	} else								\\
		RB_ROOT(head) = child;					\\
color:									\\
	if (color == RB_BLACK)						\\
		name##_RB_REMOVE_COLOR(head, parent, child);		\\
	return (old);							\\
}" 18547 . 20529) (symbol "attr" 20595 . 20599) (STRUCT "struct" 20600 . 20606) (symbol "type" 20607 . 20611) (punctuation "*" 20612 . 20613) (spp-symbol-merge ((symbol "name" 20622 . 20626) (symbol "_RB_INSERT" 20628 . 20638)) 20622 . 20638) (semantic-list "(struct name *head, struct type *elm)" 20638 . 20675) (semantic-list "{									\\
	struct type *tmp;						\\
	struct type *parent = NULL;					\\
	int comp = 0;							\\
	tmp = RB_ROOT(head);						\\
	while (tmp) {							\\
		parent = tmp;						\\
		comp = (cmp)(elm, parent);				\\
		if (comp < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	RB_SET(elm, parent, field);					\\
	if (parent != NULL) {						\\
		if (comp < 0)						\\
			RB_LEFT(parent, field) = elm;			\\
		else							\\
			RB_RIGHT(parent, field) = elm;			\\
		RB_AUGMENT(parent);					\\
	} else								\\
		RB_ROOT(head) = elm;					\\
	name##_RB_INSERT_COLOR(head, elm);				\\
	return (NULL);							\\
}" 20680 . 21372) (symbol "attr" 21445 . 21449) (STRUCT "struct" 21450 . 21456) (symbol "type" 21457 . 21461) (punctuation "*" 21462 . 21463) (spp-symbol-merge ((symbol "name" 21472 . 21476) (symbol "_RB_FIND" 21478 . 21486)) 21472 . 21486) (semantic-list "(struct name *head, struct type *elm)" 21486 . 21523) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	int comp;							\\
	while (tmp) {							\\
		comp = cmp(elm, tmp);					\\
		if (comp < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	return (NULL);							\\
}" 21528 . 21846) (symbol "attr" 21937 . 21941) (STRUCT "struct" 21942 . 21948) (symbol "type" 21949 . 21953) (punctuation "*" 21954 . 21955) (spp-symbol-merge ((symbol "name" 21964 . 21968) (symbol "_RB_NFIND" 21970 . 21979)) 21964 . 21979) (semantic-list "(struct name *head, struct type *elm)" 21979 . 22016) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	struct type *res = NULL;					\\
	int comp;							\\
	while (tmp) {							\\
		comp = cmp(elm, tmp);					\\
		if (comp < 0) {						\\
			res = tmp;					\\
			tmp = RB_LEFT(tmp, field);			\\
		}							\\
		else if (comp > 0)					\\
			tmp = RB_RIGHT(tmp, field);			\\
		else							\\
			return (tmp);					\\
	}								\\
	return (res);							\\
}" 22021 . 22404) (symbol "attr" 22450 . 22454) (STRUCT "struct" 22455 . 22461) (symbol "type" 22462 . 22466) (punctuation "*" 22467 . 22468) (spp-symbol-merge ((symbol "name" 22477 . 22481) (symbol "_RB_NEXT" 22483 . 22491)) 22477 . 22491) (semantic-list "(struct type *elm)" 22491 . 22509) (semantic-list "{									\\
	if (RB_RIGHT(elm, field)) {					\\
		elm = RB_RIGHT(elm, field);				\\
		while (RB_LEFT(elm, field))				\\
			elm = RB_LEFT(elm, field);			\\
	} else {							\\
		if (RB_PARENT(elm, field) &&				\\
		    (elm == RB_LEFT(RB_PARENT(elm, field), field)))	\\
			elm = RB_PARENT(elm, field);			\\
		else {							\\
			while (RB_PARENT(elm, field) &&			\\
			    (elm == RB_RIGHT(RB_PARENT(elm, field), field)))\\
				elm = RB_PARENT(elm, field);		\\
			elm = RB_PARENT(elm, field);			\\
		}							\\
	}								\\
	return (elm);							\\
}" 22516 . 23046) (symbol "attr" 23092 . 23096) (STRUCT "struct" 23097 . 23103) (symbol "type" 23104 . 23108) (punctuation "*" 23109 . 23110) (spp-symbol-merge ((symbol "name" 23119 . 23123) (symbol "_RB_PREV" 23125 . 23133)) 23119 . 23133) (semantic-list "(struct type *elm)" 23133 . 23151) (semantic-list "{									\\
	if (RB_LEFT(elm, field)) {					\\
		elm = RB_LEFT(elm, field);				\\
		while (RB_RIGHT(elm, field))				\\
			elm = RB_RIGHT(elm, field);			\\
	} else {							\\
		if (RB_PARENT(elm, field) &&				\\
		    (elm == RB_RIGHT(RB_PARENT(elm, field), field)))	\\
			elm = RB_PARENT(elm, field);			\\
		else {							\\
			while (RB_PARENT(elm, field) &&			\\
			    (elm == RB_LEFT(RB_PARENT(elm, field), field)))\\
				elm = RB_PARENT(elm, field);		\\
			elm = RB_PARENT(elm, field);			\\
		}							\\
	}								\\
	return (elm);							\\
}" 23158 . 23688) (symbol "attr" 23710 . 23714) (STRUCT "struct" 23715 . 23721) (symbol "type" 23722 . 23726) (punctuation "*" 23727 . 23728) (spp-symbol-merge ((symbol "name" 23737 . 23741) (symbol "_RB_MINMAX" 23743 . 23753)) 23737 . 23753) (semantic-list "(struct name *head, int val)" 23753 . 23781) (semantic-list "{									\\
	struct type *tmp = RB_ROOT(head);				\\
	struct type *parent = NULL;					\\
	while (tmp) {							\\
		parent = tmp;						\\
		if (val < 0)						\\
			tmp = RB_LEFT(tmp, field);			\\
		else							\\
			tmp = RB_RIGHT(tmp, field);			\\
	}								\\
	return (parent);						\\
}" 23787 . 24064)))
          )
)
    (semanticdb-table "bitstring.h"
      :major-mode 'c-mode
      :tags 
        '( ("_BITSTRING_H_" variable (:constant-flag t) nil [1885 1898])
            ("bitstr_t" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [2212 2243])
            ("_bit_byte" variable (:constant-flag t) nil [2317 2326])
            ("_bit_mask" variable (:constant-flag t) nil [2400 2409])
            ("bitstr_size" variable (:constant-flag t) nil [2513 2524])
            ("bit_alloc" variable (:constant-flag t) nil [2596 2605])
            ("bit_decl" variable (:constant-flag t) nil [2734 2742])
            ("bit_test" variable (:constant-flag t) nil [2839 2847])
            ("bit_set" variable (:constant-flag t) nil [2951 2958])
            ("bit_clear" variable (:constant-flag t) nil [3065 3074])
            ("bit_nclear" variable (:constant-flag t) nil [3191 3201])
            ("bit_nset" variable (:constant-flag t) nil [3456 3464])
            ("bit_ffc" variable (:constant-flag t) nil [3709 3716])
            ("bit_ffs" variable (:constant-flag t) nil [4023 4030]))          
      :file "bitstring.h"
      :pointmax 4319
      :fsize 4318
      :lastmodtime '(22126 32081 729869 56000)
      :unmatched-syntax nil
      :lexical-table 
        '(("bit_decl" (spp-arg-list ("name" "nbits") 2742 . 2755) . ((semantic-list "((name)[bitstr_size(nbits)])" 2759 . 2787)))
          ("bit_ffc" (spp-arg-list ("name" "nbits" "value") 3716 . 3736) . 
              ((DO "do" 3737 . 3739) (semantic-list "{ \\
	register bitstr_t *_name = name; \\
	register int _bit, _nbits = nbits, _value = -1; \\
	for (_bit = 0; _bit < _nbits; ++_bit) \\
		if (!bit_test(_name, _bit)) { \\
			_value = _bit; \\
			break; \\
		} \\
	*(value) = _value; \\
}" 3740 . 3967) (WHILE "while" 3968 . 3973) (semantic-list "(0)" 3973 . 3976)))
          ("bit_set" (spp-arg-list ("name" "bit") 2958 . 2969) . ((semantic-list "((name)[_bit_byte(bit)] |= _bit_mask(bit))" 2973 . 3015)))
          ("bit_ffs" (spp-arg-list ("name" "nbits" "value") 4030 . 4050) . 
              ((DO "do" 4051 . 4053) (semantic-list "{ \\
	register bitstr_t *_name = name; \\
	register int _bit, _nbits = nbits, _value = -1; \\
	for (_bit = 0; _bit < _nbits; ++_bit) \\
		if (bit_test(_name, _bit)) { \\
			_value = _bit; \\
			break; \\
		} \\
	*(value) = _value; \\
}" 4054 . 4280) (WHILE "while" 4281 . 4286) (semantic-list "(0)" 4286 . 4289)))
          ("_bit_byte" (spp-arg-list ("bit") 2326 . 2331) . ((semantic-list "((bit) >> 3)" 2335 . 2347)))
          ("bit_clear" (spp-arg-list ("name" "bit") 3074 . 3085) . ((semantic-list "((name)[_bit_byte(bit)] &= ~_bit_mask(bit))" 3089 . 3132)))
          ("bitstr_size" (spp-arg-list ("nbits") 2524 . 2531) . ((semantic-list "(((nbits) + 7) >> 3)" 2535 . 2555)))
          ("bit_test" (spp-arg-list ("name" "bit") 2847 . 2858) . ((semantic-list "((name)[_bit_byte(bit)] & _bit_mask(bit))" 2862 . 2903)))
          ("bit_nset" (spp-arg-list ("name" "start" "stop") 3464 . 3483) . 
              ((DO "do" 3484 . 3486) (semantic-list "{ \\
	register bitstr_t *_name = name; \\
	register int _start = start, _stop = stop; \\
	while (_start <= _stop) { \\
		bit_set(_name, _start); \\
		_start++; \\
		} \\
}" 3487 . 3651) (WHILE "while" 3652 . 3657) (semantic-list "(0)" 3657 . 3660)))
          ("_BITSTRING_H_")
          ("_bit_mask" (spp-arg-list ("bit") 2409 . 2414) . ((semantic-list "(1 << ((bit)&0x7))" 2418 . 2436)))
          ("bit_alloc" (spp-arg-list ("nbits") 2605 . 2612) . 
              ((semantic-list "(bitstr_t *)" 2616 . 2628) (symbol "calloc" 2628 . 2634) (semantic-list "((size_t)bitstr_size(nbits), sizeof(bitstr_t))" 2634 . 2680)))
          ("bit_nclear" (spp-arg-list ("name" "start" "stop") 3201 . 3220) . 
              ((DO "do" 3221 . 3223) (semantic-list "{ \\
	register bitstr_t *_name = name; \\
	register int _start = start, _stop = stop; \\
	while (_start <= _stop) { \\
		bit_clear(_name, _start); \\
		_start++; \\
		} \\
}" 3224 . 3390) (WHILE "while" 3391 . 3396) (semantic-list "(0)" 3396 . 3399)))
          )
)
    (semanticdb-table "vis.h"
      :major-mode 'c-mode
      :tags 
        '( ("_VIS_H_" variable (:constant-flag t) nil [1773 1780])
            ("VIS_OCTAL" variable (:constant-flag t) nil [1836 1845])
            ("VIS_CSTYLE" variable (:constant-flag t) nil [1887 1897])
            ("VIS_SP" variable (:constant-flag t) nil [2070 2076])
            ("VIS_TAB" variable (:constant-flag t) nil [2115 2122])
            ("VIS_NL" variable (:constant-flag t) nil [2159 2165])
            ("VIS_WHITE" variable (:constant-flag t) nil [2206 2215])
            ("VIS_SAFE" variable (:constant-flag t) nil [2252 2260])
            ("VIS_DQ" variable (:constant-flag t) nil [2312 2318])
            ("VIS_ALL" variable (:constant-flag t) nil [2371 2378])
            ("VIS_NOSLASH" variable (:constant-flag t) nil [2439 2450])
            ("VIS_GLOB" variable (:constant-flag t) nil [2491 2499])
            ("UNVIS_VALID" variable (:constant-flag t) nil [2580 2591])
            ("UNVIS_VALIDPUSH" variable (:constant-flag t) nil [2625 2640])
            ("UNVIS_NOCHAR" variable (:constant-flag t) nil [2697 2709])
            ("UNVIS_SYNBAD" variable (:constant-flag t) nil [2765 2777])
            ("UNVIS_ERROR" variable (:constant-flag t) nil [2824 2835])
            ("UNVIS_END" variable (:constant-flag t) nil [2917 2926])
            ("sys/cdefs.h" include (:system-flag t) nil [2955 2977])
            ("strnunvis" function
               (:typemodifiers ("extern" "\"C\"")
                :type ("ssize_t" type (:type "class") nil nil)
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3294 3301])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3302 3315])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3316 3323]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3276 3324])
            ("unvis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3249 3256])
                    ("" variable (:type "char") (reparse-symbol arg-sub-list) [3257 3262])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [3263 3269])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3270 3274]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3239 3275])
            ("strunvis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3216 3223])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3224 3237]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3203 3238])
            ("strvisx" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3167 3174])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3175 3188])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3189 3196])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3197 3201]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3155 3202])
            ("strnvis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3119 3126])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3127 3140])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3141 3148])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3149 3153]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3107 3154])
            ("stravis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [3078 3086])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3087 3100])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3101 3105]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3066 3106])
            ("strvis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "int"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3038 3045])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3046 3059])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3060 3064]))                  
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [3027 3065])
            ("vis" function
               (:typemodifiers ("extern" "\"C\"")
                :type "char"
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [3003 3010])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3011 3015])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3016 3020])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3021 3025]))                  
                :pointer 1
                :prototype-flag t)
                (reparse-symbol extern-c-contents) [2993 3026]))          
      :file "vis.h"
      :pointmax 3361
      :fsize 3360
      :lastmodtime '(22126 32081 731869 56000)
      :unmatched-syntax nil
      :lexical-table 
        '(("VIS_WHITE" . ((semantic-list "(VIS_SP | VIS_TAB | VIS_NL)" 2216 . 2243)))
          ("VIS_ALL" . ((number "0x400" 2380 . 2385)))
          ("UNVIS_END" . ((number "1" 2927 . 2928)))
          ("VIS_GLOB" . ((number "0x100" 2500 . 2505)))
          ("VIS_CSTYLE" . ((number "0x02" 1898 . 1902)))
          ("UNVIS_VALIDPUSH" . ((number "2" 2642 . 2643)))
          ("UNVIS_SYNBAD" . ((punctuation "-" 2778 . 2779) (number "1" 2779 . 2780)))
          ("VIS_NL" . ((number "0x10" 2167 . 2171)))
          ("VIS_NOSLASH" . ((number "0x40" 2451 . 2455)))
          ("VIS_DQ" . ((number "0x200" 2320 . 2325)))
          ("VIS_OCTAL" . ((number "0x01" 1846 . 1850)))
          ("UNVIS_VALID" . ((number "1" 2593 . 2594)))
          ("UNVIS_ERROR" . ((punctuation "-" 2836 . 2837) (number "2" 2837 . 2838)))
          ("VIS_SAFE" . ((number "0x20" 2261 . 2265)))
          ("_VIS_H_")
          ("VIS_SP" . ((number "0x04" 2078 . 2082)))
          ("VIS_TAB" . ((number "0x08" 2124 . 2128)))
          ("UNVIS_NOCHAR" . ((number "3" 2711 . 2712)))
          )
)
    (semanticdb-table "imsg.h"
      :major-mode 'c-mode
      :tags 
        '( ("tmux.h" include nil nil [998 1015])
            ("_IMSG_H_" variable (:constant-flag t) nil [1042 1050])
            ("IBUF_READ_SIZE" variable (:constant-flag t) nil [1060 1074])
            ("IMSG_HEADER_SIZE" variable (:constant-flag t) nil [1090 1106])
            ("MAX_IMSGSIZE" variable (:constant-flag t) nil [1139 1151])
            ("ibuf" type
               (:members 
                  ( ("entry" variable (:type "int") (reparse-symbol classsubparts) [1194 1200])
                    ("buf" variable
                       (:pointer 1
                        :type ("u_char" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1202 1216])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1218 1233])
                    ("max" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1235 1249])
                    ("wpos" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1251 1266])
                    ("rpos" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1268 1283])
                    ("fd" variable (:type "int") (reparse-symbol classsubparts) [1285 1295]))                  
                :type "struct")
                nil [1160 1298])
            ("msgbuf" type
               (:members 
                  ( ("bufs" variable (:type "int") (reparse-symbol classsubparts) [1337 1342])
                    ("queued" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1344 1363])
                    ("fd" variable (:type "int") (reparse-symbol classsubparts) [1365 1375]))                  
                :type "struct")
                nil [1300 1378])
            ("ibuf_read" type
               (:members 
                  ( ("buf" variable
                       (:dereference 1
                        :type ("u_char" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1400 1430])
                    ("rptr" variable
                       (:pointer 1
                        :type ("u_char" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [1432 1447])
                    ("wpos" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1449 1464]))                  
                :type "struct")
                nil [1380 1467])
            ("imsg_fd" type
               (:members 
                  ( ("entry" variable (:type "int") (reparse-symbol classsubparts) [1508 1514])
                    ("fd" variable (:type "int") (reparse-symbol classsubparts) [1516 1525]))                  
                :type "struct")
                nil [1469 1528])
            ("imsgbuf" type
               (:members 
                  ( ("fds" variable (:type "int") (reparse-symbol classsubparts) [1571 1575])
                    ("r" variable (:type ("ibuf_read" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1577 1597])
                    ("w" variable (:type ("msgbuf" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1599 1617])
                    ("fd" variable (:type "int") (reparse-symbol classsubparts) [1619 1629])
                    ("pid" variable (:type ("pid_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1631 1644]))                  
                :type "struct")
                nil [1530 1647])
            ("IMSGF_HASFD" variable (:constant-flag t) nil [1657 1668])
            ("imsg_hdr" type
               (:members 
                  ( ("type" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1691 1707])
                    ("len" variable (:type ("u_int16_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1709 1724])
                    ("flags" variable (:type ("u_int16_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1726 1743])
                    ("peerid" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1745 1763])
                    ("pid" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1765 1780]))                  
                :type "struct")
                nil [1672 1783])
            ("imsg" type
               (:members 
                  ( ("hdr" variable (:type ("imsg_hdr" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1800 1821])
                    ("fd" variable (:type "int") (reparse-symbol classsubparts) [1823 1832])
                    ("data" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [1834 1846]))                  
                :type "struct")
                nil [1785 1849])
            ("ibuf_open" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1890 1897]))                  
                :type ("ibuf" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1867 1898])
            ("ibuf_dynamic" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1925 1932])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1933 1940]))                  
                :type ("ibuf" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1899 1941])
            ("ibuf_add" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1957 1971])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [1972 1985])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1986 1993]))                  
                :type "int")
                nil [1942 1994])
            ("ibuf_reserve" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2015 2029])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2030 2037]))                  
                :type "void")
                nil [1995 2038])
            ("ibuf_seek" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2056 2070])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2071 2078])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2079 2086]))                  
                :type "void")
                nil [2039 2087])
            ("ibuf_size" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2107 2121]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [2088 2122])
            ("ibuf_left" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2142 2156]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [2123 2157])
            ("ibuf_close" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2176 2192])
                    ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2193 2207]))                  
                :type "void")
                nil [2158 2208])
            ("ibuf_write" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2226 2242]))                  
                :type "int")
                nil [2209 2243])
            ("ibuf_free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2261 2275]))                  
                :type "void")
                nil [2244 2276])
            ("msgbuf_init" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2296 2312]))                  
                :type "void")
                nil [2277 2313])
            ("msgbuf_clear" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2334 2350]))                  
                :type "void")
                nil [2314 2351])
            ("msgbuf_write" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2371 2387]))                  
                :type "int")
                nil [2352 2388])
            ("msgbuf_drain" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("msgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2409 2425])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2426 2433]))                  
                :type "void")
                nil [2389 2434])
            ("imsg_init" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2465 2482])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2483 2487]))                  
                :type "void")
                nil [2449 2488])
            ("imsg_read" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2508 2525]))                  
                :type ("ssize_t" type (:type "class") nil nil))
                nil [2489 2526])
            ("imsg_get" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2545 2562])
                    ("" variable
                       (:pointer 1
                        :type ("imsg" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2563 2577]))                  
                :type ("ssize_t" type (:type "class") nil nil))
                nil [2527 2578])
            ("imsg_compose" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2597 2614])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2615 2625])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2626 2636])
                    ("" variable (:type ("pid_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2637 2643])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2649 2653])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [2654 2667])
                    ("" variable (:type ("u_int16_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2668 2678]))                  
                :type "int")
                nil [2579 2679])
            ("imsg_composev" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2699 2716])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2717 2727])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2728 2738])
                    ("" variable (:type ("pid_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2740 2746])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2752 2756])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("iovec" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2757 2778])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [2779 2783]))                  
                :type "int")
                nil [2680 2784])
            ("imsg_create" function
               (:prototype-flag t
                :pointer 1
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2810 2827])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2828 2838])
                    ("" variable (:type ("u_int32_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2839 2849])
                    ("" variable (:type ("pid_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2850 2856])
                    ("" variable (:type ("u_int16_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2862 2872]))                  
                :type ("ibuf" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2785 2873])
            ("imsg_add" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2888 2902])
                    ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [2903 2916])
                    ("" variable (:type ("u_int16_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2917 2927]))                  
                :type "int")
                nil [2874 2928])
            ("imsg_close" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2946 2963])
                    ("" variable
                       (:pointer 1
                        :type ("ibuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2964 2978]))                  
                :type "void")
                nil [2929 2979])
            ("imsg_free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsg" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2996 3010]))                  
                :type "void")
                nil [2980 3011])
            ("imsg_flush" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3028 3045]))                  
                :type "int")
                nil [3012 3046])
            ("imsg_clear" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("imsgbuf" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3064 3081]))                  
                :type "void")
                nil [3047 3082]))          
      :file "imsg.h"
      :pointmax 3091
      :fsize 3090
      :lastmodtime '(22126 32081 730869 56000)
      :unmatched-syntax '((semantic-list 1558 . 1569) (symbol 1548 . 1558) (semantic-list 1498 . 1507) (symbol 1487 . 1498) (semantic-list 1327 . 1335) (symbol 1317 . 1327) (semantic-list 1186 . 1192) (symbol 1175 . 1186))
      :lexical-table 
        '(("IMSGF_HASFD" . ((number "1" 1669 . 1670)))
          ("_IMSG_H_")
          ("IBUF_READ_SIZE" . ((number "65535" 1076 . 1081)))
          ("MAX_IMSGSIZE" . ((number "16384" 1153 . 1158)))
          ("IMSG_HEADER_SIZE" . ((SIZEOF "sizeof" 1107 . 1113) (semantic-list "(struct imsg_hdr)" 1113 . 1130)))
          )
)
    (semanticdb-table "getopt.c"
      :major-mode 'c-mode
      :tags 
        '( ("tmux.h" include nil nil [1652 1669])
            ("stdio.h" include (:system-flag t) nil [1671 1689])
            ("stdlib.h" include (:system-flag t) nil [1690 1709])
            ("string.h" include (:system-flag t) nil [1710 1729])
            ("BSDopterr" variable
               (:default-value "1"
                :type "int")
                nil [1731 1908])
            ("BSDoptind" variable
               (:default-value "1"
                :type "int")
                nil [1731 1908])
            ("BSDoptopt" variable (:type "int") nil [1731 1908])
            ("BSDoptreset" variable (:type "int") nil [1731 1908])
            ("BSDoptarg" variable
               (:pointer 1
                :type "char")
                nil [1929 1945])
            ("BADCH" variable (:constant-flag t) nil [1994 1999])
            ("BADARG" variable (:constant-flag t) nil [2017 2023])
            ("EMSG" variable (:constant-flag t) nil [2041 2045])
            ("BSDgetopt" function
               (:arguments 
                  ( ("nargc" variable (:type "int") (reparse-symbol arg-sub-list) [2120 2130])
                    ("nargv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [2131 2150])
                    ("ostr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [2151 2168]))                  
                :type "int")
                nil [2106 3682]))          
      :file "getopt.c"
      :pointmax 3683
      :fsize 3682
      :lastmodtime '(22126 32081 730869 56000)
      :unmatched-syntax nil
      :lexical-table 
        '(("EMSG" . ((string "\"\"" 2046 . 2048)))
          ("BADCH" . ((semantic-list "(int)" 2000 . 2005) (string "'?'" 2005 . 2008)))
          ("BADARG" . ((semantic-list "(int)" 2024 . 2029) (string "':'" 2029 . 2032)))
          )
))
  :file "!home!chz!Public!tmux!compat!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
