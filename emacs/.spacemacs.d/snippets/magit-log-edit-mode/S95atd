;; Object src/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "src/"
  :tables (list 
   (semanticdb-table "uthash.h"
    :major-mode 'c-mode
    :tags 
        '( ("UTHASH_H" variable (:constant-flag t) nil [1174 1182])
            ("string.h" include (:system-flag t) nil [1184 1203])
            ("stddef.h" include (:system-flag t) nil [1226 1245])
            ("stdlib.h" include (:system-flag t) nil [1264 1283])
            ("DECLTYPE" variable (:constant-flag t) nil [2036 2044])
            ("DECLTYPE_ASSIGN" variable (:constant-flag t) nil [2446 2461])
            ("stdint.h" include (:system-flag t) nil [3000 3019])
            ("UTHASH_VERSION" variable (:constant-flag t) nil [3036 3050])
            ("uthash_fatal" variable (:constant-flag t) nil [3087 3099])
            ("uthash_malloc" variable (:constant-flag t) nil [3196 3209])
            ("uthash_free" variable (:constant-flag t) nil [3303 3314])
            ("uthash_noexpand_fyi" variable (:constant-flag t) nil [3419 3438])
            ("uthash_expand_fyi" variable (:constant-flag t) nil [3532 3549])
            ("HASH_INITIAL_NUM_BUCKETS" variable (:constant-flag t) nil [3652 3676])
            ("HASH_INITIAL_NUM_BUCKETS_LOG2" variable (:constant-flag t) nil [3732 3761])
            ("HASH_BKT_CAPACITY_THRESH" variable (:constant-flag t) nil [3812 3836])
            ("ELMT_FROM_HH" variable (:constant-flag t) nil [3954 3966])
            ("HASH_FIND" variable (:constant-flag t) nil [4026 4035])
            ("HASH_BLOOM_MAKE" variable (:constant-flag t) nil [6454 6469])
            ("HASH_BLOOM_FREE" variable (:constant-flag t) nil [6483 6498])
            ("HASH_BLOOM_ADD" variable (:constant-flag t) nil [6512 6526])
            ("HASH_BLOOM_TEST" variable (:constant-flag t) nil [6546 6561])
            ("HASH_BLOOM_BYTELEN" variable (:constant-flag t) nil [6585 6603])
            ("HASH_MAKE_TABLE" variable (:constant-flag t) nil [6622 6637])
            ("HASH_ADD" variable (:constant-flag t) nil [8045 8053])
            ("HASH_REPLACE" variable (:constant-flag t) nil [8196 8208])
            ("HASH_ADD_KEYPTR" variable (:constant-flag t) nil [8872 8887])
            ("HASH_TO_BKT" variable (:constant-flag t) nil [10793 10804])
            ("HASH_DELETE" variable (:constant-flag t) nil [11730 11741])
            ("HASH_FIND_STR" variable (:constant-flag t) nil [14538 14551])
            ("HASH_ADD_STR" variable (:constant-flag t) nil [14682 14694])
            ("HASH_REPLACE_STR" variable (:constant-flag t) nil [14825 14841])
            ("HASH_FIND_INT" variable (:constant-flag t) nil [14991 15004])
            ("HASH_ADD_INT" variable (:constant-flag t) nil [15121 15133])
            ("HASH_REPLACE_INT" variable (:constant-flag t) nil [15251 15267])
            ("HASH_FIND_PTR" variable (:constant-flag t) nil [15394 15407])
            ("HASH_ADD_PTR" variable (:constant-flag t) nil [15527 15539])
            ("HASH_REPLACE_PTR" variable (:constant-flag t) nil [15660 15676])
            ("HASH_DEL" variable (:constant-flag t) nil [15806 15814])
            ("HASH_FSCK" variable (:constant-flag t) nil [20358 20367])
            ("HASH_EMIT_KEY" variable (:constant-flag t) nil [21076 21089])
            ("HASH_FCN" variable (:constant-flag t) nil [21267 21275])
            ("HASH_BER" variable (:constant-flag t) nil [21384 21392])
            ("HASH_SAX" variable (:constant-flag t) nil [22125 22133])
            ("HASH_FNV" variable (:constant-flag t) nil [22824 22832])
            ("HASH_OAT" variable (:constant-flag t) nil [23666 23674])
            ("HASH_JEN_MIX" variable (:constant-flag t) nil [24840 24852])
            ("HASH_JEN" variable (:constant-flag t) nil [25766 25774])
            ("get16bits" variable (:constant-flag t) nil [29223 29232])
            ("HASH_SFH" variable (:constant-flag t) nil [29459 29467])
            ("HASH_KEYCMP" variable (:constant-flag t) nil [37823 37834])
            ("HASH_FIND_IN_BKT" variable (:constant-flag t) nil [37933 37949])
            ("HASH_ADD_TO_BKT" variable (:constant-flag t) nil [38897 38912])
            ("HASH_DEL_IN_BKT" variable (:constant-flag t) nil [39863 39878])
            ("HASH_EXPAND_BUCKETS" variable (:constant-flag t) nil [42140 42159])
            ("HASH_SORT" variable (:constant-flag t) nil [46173 46182])
            ("HASH_SRT" variable (:constant-flag t) nil [46229 46237])
            ("HASH_SELECT" variable (:constant-flag t) nil [53605 53616])
            ("HASH_CLEAR" variable (:constant-flag t) nil [56606 56616])
            ("HASH_OVERHEAD" variable (:constant-flag t) nil [57365 57378])
            ("HASH_ITER" variable (:constant-flag t) nil [57997 58006])
            ("HASH_COUNT" variable (:constant-flag t) nil [58277 58287])
            ("HASH_CNT" variable (:constant-flag t) nil [58320 58328])
            ("UT_hash_bucket" type
               (:typedef ("UT_hash_bucket" type (:type "struct") nil nil)
                :superclasses "UT_hash_bucket"
                :type "typedef")
                nil [58378 59347])
            ("UT_hash_bucket" type
               (:members 
                  ( ("hh_head" variable
                       (:pointer 1
                        :type ("UT_hash_handle" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [58413 58444])
                    ("count" variable (:type "unsigned int") (reparse-symbol classsubparts) [58448 58463])
                    ("expand_mult" variable (:type "unsigned int") (reparse-symbol classsubparts) [59307 59328]))                  
                :type "struct")
                nil [58378 59347])
            ("HASH_SIGNATURE" variable (:constant-flag t) nil [59431 59445])
            ("HASH_BLOOM_SIGNATURE" variable (:constant-flag t) nil [59465 59485])
            ("UT_hash_table" type
               (:typedef ("UT_hash_table" type (:type "struct") nil nil)
                :superclasses "UT_hash_table"
                :type "typedef")
                nil [59498 60971])
            ("UT_hash_table" type
               (:members 
                  ( ("buckets" variable
                       (:pointer 1
                        :type ("UT_hash_bucket" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [59532 59556])
                    ("log2_num_buckets" variable (:type "unsigned int") (reparse-symbol classsubparts) [59560 59599])
                    ("num_buckets" variable (:type "unsigned int") (reparse-symbol classsubparts) [59560 59599])
                    ("num_items" variable (:type "unsigned int") (reparse-symbol classsubparts) [59603 59622])
                    ("tail" variable
                       (:pointer 1
                        :type ("UT_hash_handle" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [59626 59654])
                    ("hho" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [59705 59719])
                    ("ideal_chain_maxlen" variable (:type "unsigned int") (reparse-symbol classsubparts) [59941 59969])
                    ("nonideal_items" variable (:type "unsigned int") (reparse-symbol classsubparts) [60213 60237])
                    ("noexpand" variable (:type "unsigned int") (reparse-symbol classsubparts) [60690 60723])
                    ("ineff_expands" variable (:type "unsigned int") (reparse-symbol classsubparts) [60690 60723])
                    ("signature" variable (:type ("uint32_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [60728 60747]))                  
                :type "struct")
                nil [59498 60971])
            ("UT_hash_handle" type
               (:typedef ("UT_hash_handle" type (:type "struct") nil nil)
                :superclasses "UT_hash_handle"
                :type "typedef")
                nil [60973 61570])
            ("UT_hash_handle" type
               (:members 
                  ( ("tbl" variable
                       (:pointer 1
                        :type ("UT_hash_table" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61008 61034])
                    ("prev" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [61038 61049])
                    ("next" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [61112 61123])
                    ("hh_prev" variable
                       (:pointer 1
                        :type ("UT_hash_handle" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61186 61217])
                    ("hh_next" variable
                       (:pointer 1
                        :type ("UT_hash_handle" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [61260 61291])
                    ("key" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [61334 61344])
                    ("keylen" variable (:type "unsigned int") (reparse-symbol classsubparts) [61408 61424])
                    ("hashv" variable (:type "unsigned int") (reparse-symbol classsubparts) [61482 61497]))                  
                :type "struct")
                nil [60973 61570]))          
    :file "uthash.h"
    :pointmax 61594
    :fsize 61593
    :lastmodtime '(21620 4517 385086 36000)
    :unmatched-syntax '((semantic-list 29202 . 29214) (symbol 29194 . 29201) (punctuation 29192 . 29193) (punctuation 29191 . 29192) (semantic-list 29176 . 29190) (symbol 29168 . 29175) (punctuation 29166 . 29167) (punctuation 29165 . 29166) (semantic-list 29154 . 29164) (symbol 29147 . 29154) (punctuation 29145 . 29146) (punctuation 29144 . 29145))
    :lexical-table 
        '(("uthash_expand_fyi" (spp-arg-list ("tbl") 3549 . 3554))
          ("HASH_MAKE_TABLE" (spp-arg-list ("hh" "head") 6637 . 6646) . 
              ((DO "do" 6697 . 6699) (semantic-list "{                                                                             \\
  (head)->hh.tbl = (UT_hash_table*)uthash_malloc(                                \\
                  sizeof(UT_hash_table));                                        \\
  if (!((head)->hh.tbl))  { uthash_fatal( \"out of memory\"); }                    \\
  memset((head)->hh.tbl, 0, sizeof(UT_hash_table));                              \\
  (head)->hh.tbl->tail = &((head)->hh);                                          \\
  (head)->hh.tbl->num_buckets = HASH_INITIAL_NUM_BUCKETS;                        \\
  (head)->hh.tbl->log2_num_buckets = HASH_INITIAL_NUM_BUCKETS_LOG2;              \\
  (head)->hh.tbl->hho = (char*)(&(head)->hh) - (char*)(head);                    \\
  (head)->hh.tbl->buckets = (UT_hash_bucket*)uthash_malloc(                      \\
          HASH_INITIAL_NUM_BUCKETS*sizeof(struct UT_hash_bucket));               \\
  if (! (head)->hh.tbl->buckets) { uthash_fatal( \"out of memory\"); }             \\
  memset((head)->hh.tbl->buckets, 0,                                             \\
          HASH_INITIAL_NUM_BUCKETS*sizeof(struct UT_hash_bucket));               \\
  HASH_BLOOM_MAKE((head)->hh.tbl);                                               \\
  (head)->hh.tbl->signature = HASH_SIGNATURE;                                    \\
}" 6700 . 8026) (WHILE "while" 8027 . 8032) (semantic-list "(0)" 8032 . 8035)))
          ("HASH_DELETE" (spp-arg-list ("hh" "head" "delptr") 11741 . 11757) . 
              ((DO "do" 11805 . 11807) (semantic-list "{                                                                             \\
    struct UT_hash_handle *_hd_hh_del;                                           \\
    if ( ((delptr)->hh.prev == NULL) && ((delptr)->hh.next == NULL) )  {         \\
        uthash_free((head)->hh.tbl->buckets,                                     \\
                    (head)->hh.tbl->num_buckets*sizeof(struct UT_hash_bucket) ); \\
        HASH_BLOOM_FREE((head)->hh.tbl);                                         \\
        uthash_free((head)->hh.tbl, sizeof(UT_hash_table));                      \\
        head = NULL;                                                             \\
    } else {                                                                     \\
        unsigned _hd_bkt;                                                        \\
        _hd_hh_del = &((delptr)->hh);                                            \\
        if ((delptr) == ELMT_FROM_HH((head)->hh.tbl,(head)->hh.tbl->tail)) {     \\
            (head)->hh.tbl->tail =                                               \\
                (UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +               \\
                (head)->hh.tbl->hho);                                            \\
        }                                                                        \\
        if ((delptr)->hh.prev) {                                                 \\
            ((UT_hash_handle*)((ptrdiff_t)((delptr)->hh.prev) +                  \\
                    (head)->hh.tbl->hho))->next = (delptr)->hh.next;             \\
        } else {                                                                 \\
            DECLTYPE_ASSIGN(head,(delptr)->hh.next);                             \\
        }                                                                        \\
        if (_hd_hh_del->next) {                                                  \\
            ((UT_hash_handle*)((ptrdiff_t)_hd_hh_del->next +                     \\
                    (head)->hh.tbl->hho))->prev =                                \\
                    _hd_hh_del->prev;                                            \\
        }                                                                        \\
        HASH_TO_BKT( _hd_hh_del->hashv, (head)->hh.tbl->num_buckets, _hd_bkt);   \\
        HASH_DEL_IN_BKT(hh,(head)->hh.tbl->buckets[_hd_bkt], _hd_hh_del);        \\
        (head)->hh.tbl->num_items--;                                             \\
    }                                                                            \\
    HASH_FSCK(hh,head);                                                          \\
}" 11808 . 14462) (WHILE "while" 14463 . 14468) (semantic-list "(0)" 14469 . 14472)))
          ("HASH_OVERHEAD" (spp-arg-list ("hh" "head") 57378 . 57387) . ((semantic-list "(size_t)" 57441 . 57449) (semantic-list "((((head)->hh.tbl->num_items   * sizeof(UT_hash_handle))   +            \\
           ((head)->hh.tbl->num_buckets * sizeof(UT_hash_bucket))   +            \\
            (sizeof(UT_hash_table))                                 +            \\
            (HASH_BLOOM_BYTELEN)))" 57449 . 57723)))
          ("uthash_free" (spp-arg-list ("ptr" "sz") 3314 . 3322) . ((symbol "free" 3323 . 3327) (semantic-list "(ptr)" 3327 . 3332)))
          ("HASH_INITIAL_NUM_BUCKETS_LOG2" . ((number "5" 3762 . 3763)))
          ("HASH_BLOOM_MAKE" (spp-arg-list ("tbl") 6469 . 6474))
          ("HASH_BLOOM_BYTELEN" . ((number "0" 6604 . 6605)))
          ("HASH_FIND_IN_BKT" (spp-arg-list ("tbl" "hh" "head" "keyptr" "keylen_in" "out") 37949 . 37983) . 
              ((DO "do" 38008 . 38010) (semantic-list "{                                                                             \\
 if (head.hh_head) DECLTYPE_ASSIGN(out,ELMT_FROM_HH(tbl,head.hh_head));          \\
 else out=NULL;                                                                  \\
 while (out) {                                                                   \\
    if ((out)->hh.keylen == keylen_in) {                                           \\
        if ((HASH_KEYCMP((out)->hh.key,keyptr,keylen_in)) == 0) break;             \\
    }                                                                            \\
    if ((out)->hh.hh_next) DECLTYPE_ASSIGN(out,ELMT_FROM_HH(tbl,(out)->hh.hh_next)); \\
    else out = NULL;                                                             \\
 }                                                                               \\
}" 38011 . 38847) (WHILE "while" 38848 . 38853) (semantic-list "(0)" 38853 . 38856)))
          ("HASH_DEL_IN_BKT" (spp-arg-list ("hh" "head" "hh_del") 39878 . 39894) . 
              ((semantic-list "(head)" 39942 . 39948) (punctuation "." 39948 . 39949) (symbol "count" 39949 . 39954) (punctuation "-" 39954 . 39955) (punctuation "-" 39955 . 39956) (punctuation ";" 39956 . 39957) (IF "if" 40025 . 40027) (semantic-list "((head).hh_head == hh_del)" 40028 . 40054) (semantic-list "{                                              \\
      (head).hh_head = hh_del->hh_next;                                          \\
    }" 40055 . 40192) (IF "if" 40274 . 40276) (semantic-list "(hh_del->hh_prev)" 40277 . 40294) (semantic-list "{                                                       \\
        hh_del->hh_prev->hh_next = hh_del->hh_next;                              \\
    }" 40295 . 40441) (IF "if" 40523 . 40525) (semantic-list "(hh_del->hh_next)" 40526 . 40543) (semantic-list "{                                                       \\
        hh_del->hh_next->hh_prev = hh_del->hh_prev;                              \\
    }" 40544 . 40690)))
          ("UTHASH_VERSION" . ((number "1.9" 3051 . 3054) (number ".9" 3054 . 3056)))
          ("HASH_JEN_MIX" (spp-arg-list ("a" "b" "c") 24852 . 24859) . 
              ((DO "do" 24915 . 24917) (semantic-list "{                                                                             \\
  a -= b; a -= c; a ^= ( c >> 13 );                                              \\
  b -= c; b -= a; b ^= ( a << 8 );                                               \\
  c -= a; c -= b; c ^= ( b >> 13 );                                              \\
  a -= b; a -= c; a ^= ( c >> 12 );                                              \\
  b -= c; b -= a; b ^= ( a << 16 );                                              \\
  c -= a; c -= b; c ^= ( b >> 5 );                                               \\
  a -= b; a -= c; a ^= ( c >> 3 );                                               \\
  b -= c; b -= a; b ^= ( a << 10 );                                              \\
  c -= a; c -= b; c ^= ( b >> 15 );                                              \\
}" 24918 . 25746) (WHILE "while" 25747 . 25752) (semantic-list "(0)" 25753 . 25756)))
          ("uthash_noexpand_fyi" (spp-arg-list ("tbl") 3438 . 3443))
          ("HASH_BKT_CAPACITY_THRESH" . ((number "10" 3837 . 3839)))
          ("HASH_ITER" (spp-arg-list ("hh" "head" "el" "tmp") 58006 . 58022) . ((FOR "for" 58072 . 58075) (semantic-list "((el)=(head),(tmp)=DECLTYPE(el)((head)?(head)->hh.next:NULL);                 \\
  el; (el)=(tmp),(tmp)=DECLTYPE(el)((tmp)?(tmp)->hh.next:NULL))" 58075 . 58218)))
          ("DECLTYPE" (spp-arg-list ("x") 2044 . 2047) . ((semantic-list "(__typeof(x))" 2048 . 2061)))
          ("HASH_INITIAL_NUM_BUCKETS" . ((number "32" 3677 . 3679)))
          ("HASH_BLOOM_ADD" (spp-arg-list ("tbl" "hashv") 6526 . 6537))
          ("HASH_FIND_INT" (spp-arg-list ("head" "findint" "out") 15004 . 15022) . ((symbol "HASH_FIND" 15070 . 15079) (semantic-list "(hh,head,findint,sizeof(int),out)" 15079 . 15112)))
          ("HASH_FSCK" (spp-arg-list ("hh" "head") 20367 . 20376))
          ("HASH_EMIT_KEY" (spp-arg-list ("hh" "head" "keyptr" "fieldlen") 21089 . 21114))
          ("DECLTYPE_ASSIGN" (spp-arg-list ("dst" "src") 2461 . 2470) . 
              ((DO "do" 2521 . 2523) (semantic-list "{                                                                             \\
  (dst) = DECLTYPE(dst)(src);                                                    \\
}" 2524 . 2688) (WHILE "while" 2689 . 2694) (semantic-list "(0)" 2694 . 2697)))
          ("HASH_FIND" (spp-arg-list ("hh" "head" "keyptr" "keylen" "out") 4035 . 4062) . 
              ((DO "do" 4101 . 4103) (semantic-list "{                                                                             \\
  out=NULL;                                                                      \\
  if (head) {                                                                    \\
     unsigned _hf_bkt,_hf_hashv;                                                 \\
     HASH_FCN(keyptr,keylen, (head)->hh.tbl->num_buckets, _hf_hashv, _hf_bkt);   \\
     if (HASH_BLOOM_TEST((head)->hh.tbl, _hf_hashv)) {                           \\
       HASH_FIND_IN_BKT((head)->hh.tbl, hh, (head)->hh.tbl->buckets[ _hf_bkt ],  \\
                        keyptr,keylen,out);                                      \\
     }                                                                           \\
  }                                                                              \\
}" 4104 . 4932) (WHILE "while" 4933 . 4938) (semantic-list "(0)" 4939 . 4942)))
          ("HASH_BLOOM_TEST" (spp-arg-list ("tbl" "hashv") 6561 . 6572) . ((semantic-list "(1)" 6573 . 6576)))
          ("HASH_FIND_PTR" (spp-arg-list ("head" "findptr" "out") 15407 . 15425) . ((symbol "HASH_FIND" 15473 . 15482) (semantic-list "(hh,head,findptr,sizeof(void *),out)" 15482 . 15518)))
          ("HASH_DEL" (spp-arg-list ("head" "delptr") 15814 . 15827) . ((symbol "HASH_DELETE" 15885 . 15896) (semantic-list "(hh,head,delptr)" 15896 . 15912)))
          ("HASH_SRT" (spp-arg-list ("hh" "head" "cmpfcn") 46237 . 46253) . 
              ((DO "do" 46304 . 46306) (semantic-list "{                                                                             \\
  unsigned _hs_i;                                                                \\
  unsigned _hs_looping,_hs_nmerges,_hs_insize,_hs_psize,_hs_qsize;               \\
  struct UT_hash_handle *_hs_p, *_hs_q, *_hs_e, *_hs_list, *_hs_tail;            \\
  if (head) {                                                                    \\
      _hs_insize = 1;                                                            \\
      _hs_looping = 1;                                                           \\
      _hs_list = &((head)->hh);                                                  \\
      while (_hs_looping) {                                                      \\
          _hs_p = _hs_list;                                                      \\
          _hs_list = NULL;                                                       \\
          _hs_tail = NULL;                                                       \\
          _hs_nmerges = 0;                                                       \\
          while (_hs_p) {                                                        \\
              _hs_nmerges++;                                                     \\
              _hs_q = _hs_p;                                                     \\
              _hs_psize = 0;                                                     \\
              for ( _hs_i = 0; _hs_i  < _hs_insize; _hs_i++ ) {                  \\
                  _hs_psize++;                                                   \\
                  _hs_q = (UT_hash_handle*)((_hs_q->next) ?                      \\
                          ((void*)((char*)(_hs_q->next) +                        \\
                          (head)->hh.tbl->hho)) : NULL);                         \\
                  if (! (_hs_q) ) break;                                         \\
              }                                                                  \\
              _hs_qsize = _hs_insize;                                            \\
              while ((_hs_psize > 0) || ((_hs_qsize > 0) && _hs_q )) {           \\
                  if (_hs_psize == 0) {                                          \\
                      _hs_e = _hs_q;                                             \\
                      _hs_q = (UT_hash_handle*)((_hs_q->next) ?                  \\
                              ((void*)((char*)(_hs_q->next) +                    \\
                              (head)->hh.tbl->hho)) : NULL);                     \\
                      _hs_qsize--;                                               \\
                  } else if ( (_hs_qsize == 0) || !(_hs_q) ) {                   \\
                      _hs_e = _hs_p;                                             \\
                      if (_hs_p){                                                \\
                        _hs_p = (UT_hash_handle*)((_hs_p->next) ?                \\
                                ((void*)((char*)(_hs_p->next) +                  \\
                                (head)->hh.tbl->hho)) : NULL);                   \\
                       }                                                         \\
                      _hs_psize--;                                               \\
                  } else if ((                                                   \\
                      cmpfcn(DECLTYPE(head)(ELMT_FROM_HH((head)->hh.tbl,_hs_p)), \\
                             DECLTYPE(head)(ELMT_FROM_HH((head)->hh.tbl,_hs_q))) \\
                             ) <= 0) {                                           \\
                      _hs_e = _hs_p;                                             \\
                      if (_hs_p){                                                \\
                        _hs_p = (UT_hash_handle*)((_hs_p->next) ?                \\
                               ((void*)((char*)(_hs_p->next) +                   \\
                               (head)->hh.tbl->hho)) : NULL);                    \\
                       }                                                         \\
                      _hs_psize--;                                               \\
                  } else {                                                       \\
                      _hs_e = _hs_q;                                             \\
                      _hs_q = (UT_hash_handle*)((_hs_q->next) ?                  \\
                              ((void*)((char*)(_hs_q->next) +                    \\
                              (head)->hh.tbl->hho)) : NULL);                     \\
                      _hs_qsize--;                                               \\
                  }                                                              \\
                  if ( _hs_tail ) {                                              \\
                      _hs_tail->next = ((_hs_e) ?                                \\
                            ELMT_FROM_HH((head)->hh.tbl,_hs_e) : NULL);          \\
                  } else {                                                       \\
                      _hs_list = _hs_e;                                          \\
                  }                                                              \\
                  if (_hs_e) {                                                   \\
                  _hs_e->prev = ((_hs_tail) ?                                    \\
                     ELMT_FROM_HH((head)->hh.tbl,_hs_tail) : NULL);              \\
                  }                                                              \\
                  _hs_tail = _hs_e;                                              \\
              }                                                                  \\
              _hs_p = _hs_q;                                                     \\
          }                                                                      \\
          if (_hs_tail){                                                         \\
            _hs_tail->next = NULL;                                               \\
          }                                                                      \\
          if ( _hs_nmerges <= 1 ) {                                              \\
              _hs_looping=0;                                                     \\
              (head)->hh.tbl->tail = _hs_tail;                                   \\
              DECLTYPE_ASSIGN(head,ELMT_FROM_HH((head)->hh.tbl, _hs_list));      \\
          }                                                                      \\
          _hs_insize *= 2;                                                       \\
      }                                                                          \\
      HASH_FSCK(hh,head);                                                        \\
 }                                                                               \\
}" 46307 . 53277) (WHILE "while" 53278 . 53283) (semantic-list "(0)" 53284 . 53287)))
          ("HASH_CLEAR" (spp-arg-list ("hh" "head") 56616 . 56625) . 
              ((DO "do" 56681 . 56683) (semantic-list "{                                                                             \\
  if (head) {                                                                    \\
    uthash_free((head)->hh.tbl->buckets,                                         \\
                (head)->hh.tbl->num_buckets*sizeof(struct UT_hash_bucket));      \\
    HASH_BLOOM_FREE((head)->hh.tbl);                                             \\
    uthash_free((head)->hh.tbl, sizeof(UT_hash_table));                          \\
    (head)=NULL;                                                                 \\
  }                                                                              \\
}" 56684 . 57346) (WHILE "while" 57347 . 57352) (semantic-list "(0)" 57352 . 57355)))
          ("HASH_CNT" (spp-arg-list ("hh" "head") 58328 . 58337) . ((semantic-list "((head)?((head)->hh.tbl->num_items):0)" 58338 . 58376)))
          ("HASH_ADD" (spp-arg-list ("hh" "head" "fieldname" "keylen_in" "add") 8053 . 8086) . ((symbol "HASH_ADD_KEYPTR" 8128 . 8143) (semantic-list "(hh,head,&((add)->fieldname),keylen_in,add)" 8143 . 8186)))
          ("HASH_FIND_STR" (spp-arg-list ("head" "findstr" "out") 14551 . 14569) . ((symbol "HASH_FIND" 14617 . 14626) (semantic-list "(hh,head,findstr,(unsigned)strlen(findstr),out)" 14626 . 14673)))
          ("HASH_REPLACE_INT" (spp-arg-list ("head" "intfield" "add" "replaced") 15267 . 15295) . ((symbol "HASH_REPLACE" 15330 . 15342) (semantic-list "(hh,head,intfield,sizeof(int),add,replaced)" 15342 . 15385)))
          ("HASH_FCN" . ((symbol "HASH_JEN" 21276 . 21284)))
          ("HASH_BER" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 21392 . 21423) . 
              ((DO "do" 21459 . 21461) (semantic-list "{                                                                             \\
  unsigned _hb_keylen=keylen;                                                    \\
  char *_hb_key=(char*)(key);                                                    \\
  (hashv) = 0;                                                                   \\
  while (_hb_keylen--)  { (hashv) = (((hashv) << 5) + (hashv)) + *_hb_key++; }   \\
  bkt = (hashv) & (num_bkts-1);                                                  \\
}" 21462 . 21958) (WHILE "while" 21959 . 21964) (semantic-list "(0)" 21965 . 21968)))
          ("HASH_EXPAND_BUCKETS" (spp-arg-list ("tbl") 42159 . 42164) . 
              ((DO "do" 42215 . 42217) (semantic-list "{                                                                             \\
    unsigned _he_bkt;                                                            \\
    unsigned _he_bkt_i;                                                          \\
    struct UT_hash_handle *_he_thh, *_he_hh_nxt;                                 \\
    UT_hash_bucket *_he_new_buckets, *_he_newbkt;                                \\
    _he_new_buckets = (UT_hash_bucket*)uthash_malloc(                            \\
             2 * tbl->num_buckets * sizeof(struct UT_hash_bucket));              \\
    if (!_he_new_buckets) { uthash_fatal( \"out of memory\"); }                    \\
    memset(_he_new_buckets, 0,                                                   \\
            2 * tbl->num_buckets * sizeof(struct UT_hash_bucket));               \\
    tbl->ideal_chain_maxlen =                                                    \\
       (tbl->num_items >> (tbl->log2_num_buckets+1)) +                           \\
       ((tbl->num_items & ((tbl->num_buckets*2)-1)) ? 1 : 0);                    \\
    tbl->nonideal_items = 0;                                                     \\
    for(_he_bkt_i = 0; _he_bkt_i < tbl->num_buckets; _he_bkt_i++)                \\
    {                                                                            \\
        _he_thh = tbl->buckets[ _he_bkt_i ].hh_head;                             \\
        while (_he_thh) {                                                        \\
           _he_hh_nxt = _he_thh->hh_next;                                        \\
           HASH_TO_BKT( _he_thh->hashv, tbl->num_buckets*2, _he_bkt);            \\
           _he_newbkt = &(_he_new_buckets[ _he_bkt ]);                           \\
           if (++(_he_newbkt->count) > tbl->ideal_chain_maxlen) {                \\
             tbl->nonideal_items++;                                              \\
             _he_newbkt->expand_mult = _he_newbkt->count /                       \\
                                        tbl->ideal_chain_maxlen;                 \\
           }                                                                     \\
           _he_thh->hh_prev = NULL;                                              \\
           _he_thh->hh_next = _he_newbkt->hh_head;                               \\
           if (_he_newbkt->hh_head) _he_newbkt->hh_head->hh_prev =               \\
                _he_thh;                                                         \\
           _he_newbkt->hh_head = _he_thh;                                        \\
           _he_thh = _he_hh_nxt;                                                 \\
        }                                                                        \\
    }                                                                            \\
    uthash_free( tbl->buckets, tbl->num_buckets*sizeof(struct UT_hash_bucket) ); \\
    tbl->num_buckets *= 2;                                                       \\
    tbl->log2_num_buckets++;                                                     \\
    tbl->buckets = _he_new_buckets;                                              \\
    tbl->ineff_expands = (tbl->nonideal_items > (tbl->num_items >> 1)) ?         \\
        (tbl->ineff_expands+1) : 0;                                              \\
    if (tbl->ineff_expands > 1) {                                                \\
        tbl->noexpand=1;                                                         \\
        uthash_noexpand_fyi(tbl);                                                \\
    }                                                                            \\
    uthash_expand_fyi(tbl);                                                      \\
}" 42218 . 45951) (WHILE "while" 45952 . 45957) (semantic-list "(0)" 45957 . 45960)))
          ("UTHASH_H")
          ("HASH_ADD_KEYPTR" (spp-arg-list ("hh" "head" "keyptr" "keylen_in" "add") 8887 . 8917) . 
              ((DO "do" 8947 . 8949) (semantic-list "{                                                                             \\
 unsigned _ha_bkt;                                                               \\
 (add)->hh.next = NULL;                                                          \\
 (add)->hh.key = (char*)(keyptr);                                                \\
 (add)->hh.keylen = (unsigned)(keylen_in);                                       \\
 if (!(head)) {                                                                  \\
    head = (add);                                                                \\
    (head)->hh.prev = NULL;                                                      \\
    HASH_MAKE_TABLE(hh,head);                                                    \\
 } else {                                                                        \\
    (head)->hh.tbl->tail->next = (add);                                          \\
    (add)->hh.prev = ELMT_FROM_HH((head)->hh.tbl, (head)->hh.tbl->tail);         \\
    (head)->hh.tbl->tail = &((add)->hh);                                         \\
 }                                                                               \\
 (head)->hh.tbl->num_items++;                                                    \\
 (add)->hh.tbl = (head)->hh.tbl;                                                 \\
 HASH_FCN(keyptr,keylen_in, (head)->hh.tbl->num_buckets,                         \\
         (add)->hh.hashv, _ha_bkt);                                              \\
 HASH_ADD_TO_BKT((head)->hh.tbl->buckets[_ha_bkt],&(add)->hh);                   \\
 HASH_BLOOM_ADD((head)->hh.tbl,(add)->hh.hashv);                                 \\
 HASH_EMIT_KEY(hh,head,keyptr,keylen_in);                                        \\
 HASH_FSCK(hh,head);                                                             \\
}" 8950 . 10774) (WHILE "while" 10775 . 10780) (semantic-list "(0)" 10780 . 10783)))
          ("HASH_ADD_INT" (spp-arg-list ("head" "intfield" "add") 15133 . 15152) . ((symbol "HASH_ADD" 15200 . 15208) (semantic-list "(hh,head,intfield,sizeof(int),add)" 15208 . 15242)))
          ("HASH_REPLACE_PTR" (spp-arg-list ("head" "ptrfield" "add" "replaced") 15676 . 15704) . ((symbol "HASH_REPLACE" 15739 . 15751) (semantic-list "(hh,head,ptrfield,sizeof(void *),add,replaced)" 15751 . 15797)))
          ("ELMT_FROM_HH" (spp-arg-list ("tbl" "hhp") 3966 . 3975) . ((semantic-list "((void*)(((char*)(hhp)) - ((tbl)->hho)))" 3976 . 4016)))
          ("HASH_REPLACE" (spp-arg-list ("hh" "head" "fieldname" "keylen_in" "add" "replaced") 8208 . 8250) . 
              ((DO "do" 8271 . 8273) (semantic-list "{                                                                             \\
  replaced=NULL;                                                                 \\
  HASH_FIND(hh,head,&((add)->fieldname),keylen_in,replaced);                     \\
  if (replaced!=NULL) {                                                          \\
     HASH_DELETE(hh,head,replaced);                                              \\
  };                                                                             \\
  HASH_ADD(hh,head,fieldname,keylen_in,add);                                     \\
}" 8274 . 8853) (WHILE "while" 8854 . 8859) (semantic-list "(0)" 8859 . 8862)))
          ("HASH_REPLACE_STR" (spp-arg-list ("head" "strfield" "add" "replaced") 14841 . 14869) . ((symbol "HASH_REPLACE" 14904 . 14916) (semantic-list "(hh,head,strfield[0],(unsigned)strlen(add->strfield),add,replaced)" 14916 . 14982)))
          ("HASH_ADD_PTR" (spp-arg-list ("head" "ptrfield" "add") 15539 . 15558) . ((symbol "HASH_ADD" 15606 . 15614) (semantic-list "(hh,head,ptrfield,sizeof(void *),add)" 15614 . 15651)))
          ("HASH_FNV" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 22832 . 22863) . 
              ((DO "do" 22899 . 22901) (semantic-list "{                                                                             \\
  unsigned _fn_i;                                                                \\
  char *_hf_key=(char*)(key);                                                    \\
  hashv = 2166136261UL;                                                          \\
  for(_fn_i=0; _fn_i < keylen; _fn_i++) {                                        \\
      hashv = hashv ^ _hf_key[_fn_i];                                            \\
      hashv = hashv * 16777619;                                                  \\
  }                                                                              \\
  bkt = hashv & (num_bkts-1);                                                    \\
}" 22902 . 23647) (WHILE "while" 23648 . 23653) (semantic-list "(0)" 23653 . 23656)))
          ("HASH_SELECT" (spp-arg-list ("hh_dst" "dst" "hh_src" "src" "cond") 53616 . 53648) . 
              ((DO "do" 53680 . 53682) (semantic-list "{                                                                             \\
  unsigned _src_bkt, _dst_bkt;                                                   \\
  void *_last_elt=NULL, *_elt;                                                   \\
  UT_hash_handle *_src_hh, *_dst_hh, *_last_elt_hh=NULL;                         \\
  ptrdiff_t _dst_hho = ((char*)(&(dst)->hh_dst) - (char*)(dst));                 \\
  if (src) {                                                                     \\
    for(_src_bkt=0; _src_bkt < (src)->hh_src.tbl->num_buckets; _src_bkt++) {     \\
      for(_src_hh = (src)->hh_src.tbl->buckets[_src_bkt].hh_head;                \\
          _src_hh;                                                               \\
          _src_hh = _src_hh->hh_next) {                                          \\
          _elt = ELMT_FROM_HH((src)->hh_src.tbl, _src_hh);                       \\
          if (cond(_elt)) {                                                      \\
            _dst_hh = (UT_hash_handle*)(((char*)_elt) + _dst_hho);               \\
            _dst_hh->key = _src_hh->key;                                         \\
            _dst_hh->keylen = _src_hh->keylen;                                   \\
            _dst_hh->hashv = _src_hh->hashv;                                     \\
            _dst_hh->prev = _last_elt;                                           \\
            _dst_hh->next = NULL;                                                \\
            if (_last_elt_hh) { _last_elt_hh->next = _elt; }                     \\
            if (!dst) {                                                          \\
              DECLTYPE_ASSIGN(dst,_elt);                                         \\
              HASH_MAKE_TABLE(hh_dst,dst);                                       \\
            } else {                                                             \\
              _dst_hh->tbl = (dst)->hh_dst.tbl;                                  \\
            }                                                                    \\
            HASH_TO_BKT(_dst_hh->hashv, _dst_hh->tbl->num_buckets, _dst_bkt);    \\
            HASH_ADD_TO_BKT(_dst_hh->tbl->buckets[_dst_bkt],_dst_hh);            \\
            (dst)->hh_dst.tbl->num_items++;                                      \\
            _last_elt = _elt;                                                    \\
            _last_elt_hh = _dst_hh;                                              \\
          }                                                                      \\
      }                                                                          \\
    }                                                                            \\
  }                                                                              \\
  HASH_FSCK(hh_dst,dst);                                                         \\
}" 53683 . 56586) (WHILE "while" 56587 . 56592) (semantic-list "(0)" 56593 . 56596)))
          ("HASH_ADD_STR" (spp-arg-list ("head" "strfield" "add") 14694 . 14713) . ((symbol "HASH_ADD" 14761 . 14769) (semantic-list "(hh,head,strfield[0],strlen(add->strfield),add)" 14769 . 14816)))
          ("HASH_OAT" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 23674 . 23705) . 
              ((DO "do" 23741 . 23743) (semantic-list "{                                                                             \\
  unsigned _ho_i;                                                                \\
  char *_ho_key=(char*)(key);                                                    \\
  hashv = 0;                                                                     \\
  for(_ho_i=0; _ho_i < keylen; _ho_i++) {                                        \\
      hashv += _ho_key[_ho_i];                                                   \\
      hashv += (hashv << 10);                                                    \\
      hashv ^= (hashv >> 6);                                                     \\
  }                                                                              \\
  hashv += (hashv << 3);                                                         \\
  hashv ^= (hashv >> 11);                                                        \\
  hashv += (hashv << 15);                                                        \\
  bkt = hashv & (num_bkts-1);                                                    \\
}" 23744 . 24821) (WHILE "while" 24822 . 24827) (semantic-list "(0)" 24827 . 24830)))
          ("HASH_JEN" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 25774 . 25805) . 
              ((DO "do" 25841 . 25843) (semantic-list "{                                                                             \\
  unsigned _hj_i,_hj_j,_hj_k;                                                    \\
  unsigned char *_hj_key=(unsigned char*)(key);                                  \\
  hashv = 0xfeedbeef;                                                            \\
  _hj_i = _hj_j = 0x9e3779b9;                                                    \\
  _hj_k = (unsigned)(keylen);                                                    \\
  while (_hj_k >= 12) {                                                          \\
    _hj_i +=    (_hj_key[0] + ( (unsigned)_hj_key[1] << 8 )                      \\
        + ( (unsigned)_hj_key[2] << 16 )                                         \\
        + ( (unsigned)_hj_key[3] << 24 ) );                                      \\
    _hj_j +=    (_hj_key[4] + ( (unsigned)_hj_key[5] << 8 )                      \\
        + ( (unsigned)_hj_key[6] << 16 )                                         \\
        + ( (unsigned)_hj_key[7] << 24 ) );                                      \\
    hashv += (_hj_key[8] + ( (unsigned)_hj_key[9] << 8 )                         \\
        + ( (unsigned)_hj_key[10] << 16 )                                        \\
        + ( (unsigned)_hj_key[11] << 24 ) );                                     \\
                                                                                 \\
     HASH_JEN_MIX(_hj_i, _hj_j, hashv);                                          \\
                                                                                 \\
     _hj_key += 12;                                                              \\
     _hj_k -= 12;                                                                \\
  }                                                                              \\
  hashv += keylen;                                                               \\
  switch ( _hj_k ) {                                                             \\
     case 11: hashv += ( (unsigned)_hj_key[10] << 24 );                          \\
     case 10: hashv += ( (unsigned)_hj_key[9] << 16 );                           \\
     case 9:  hashv += ( (unsigned)_hj_key[8] << 8 );                            \\
     case 8:  _hj_j += ( (unsigned)_hj_key[7] << 24 );                           \\
     case 7:  _hj_j += ( (unsigned)_hj_key[6] << 16 );                           \\
     case 6:  _hj_j += ( (unsigned)_hj_key[5] << 8 );                            \\
     case 5:  _hj_j += _hj_key[4];                                               \\
     case 4:  _hj_i += ( (unsigned)_hj_key[3] << 24 );                           \\
     case 3:  _hj_i += ( (unsigned)_hj_key[2] << 16 );                           \\
     case 2:  _hj_i += ( (unsigned)_hj_key[1] << 8 );                            \\
     case 1:  _hj_i += _hj_key[0];                                               \\
  }                                                                              \\
  HASH_JEN_MIX(_hj_i, _hj_j, hashv);                                             \\
  bkt = hashv & (num_bkts-1);                                                    \\
}" 25844 . 28996) (WHILE "while" 28997 . 29002) (semantic-list "(0)" 29002 . 29005)))
          ("get16bits" (spp-arg-list ("d") 29232 . 29235) . ((semantic-list "(*((const uint16_t *) (d)))" 29236 . 29263)))
          ("HASH_SFH" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 29467 . 29498) . 
              ((DO "do" 29534 . 29536) (semantic-list "{                                                                             \\
  unsigned char *_sfh_key=(unsigned char*)(key);                                 \\
  uint32_t _sfh_tmp, _sfh_len = keylen;                                          \\
                                                                                 \\
  int _sfh_rem = _sfh_len & 3;                                                   \\
  _sfh_len >>= 2;                                                                \\
  hashv = 0xcafebabe;                                                            \\
                                                                                 \\
  /* Main loop */                                                                \\
  for (;_sfh_len > 0; _sfh_len--) {                                              \\
    hashv    += get16bits (_sfh_key);                                            \\
    _sfh_tmp       = (uint32_t)(get16bits (_sfh_key+2)) << 11  ^ hashv;          \\
    hashv     = (hashv << 16) ^ _sfh_tmp;                                        \\
    _sfh_key += 2*sizeof (uint16_t);                                             \\
    hashv    += hashv >> 11;                                                     \\
  }                                                                              \\
                                                                                 \\
  /* Handle end cases */                                                         \\
  switch (_sfh_rem) {                                                            \\
    case 3: hashv += get16bits (_sfh_key);                                       \\
            hashv ^= hashv << 16;                                                \\
            hashv ^= (uint32_t)(_sfh_key[sizeof (uint16_t)] << 18);              \\
            hashv += hashv >> 11;                                                \\
            break;                                                               \\
    case 2: hashv += get16bits (_sfh_key);                                       \\
            hashv ^= hashv << 11;                                                \\
            hashv += hashv >> 17;                                                \\
            break;                                                               \\
    case 1: hashv += *_sfh_key;                                                  \\
            hashv ^= hashv << 10;                                                \\
            hashv += hashv >> 1;                                                 \\
  }                                                                              \\
                                                                                 \\
    /* Force \"avalanching\" of final 127 bits */                                  \\
    hashv ^= hashv << 3;                                                         \\
    hashv += hashv >> 5;                                                         \\
    hashv ^= hashv << 4;                                                         \\
    hashv += hashv >> 17;                                                        \\
    hashv ^= hashv << 25;                                                        \\
    hashv += hashv >> 6;                                                         \\
    bkt = hashv & (num_bkts-1);                                                  \\
}" 29537 . 32938) (WHILE "while" 32939 . 32944) (semantic-list "(0)" 32944 . 32947)))
          ("HASH_KEYCMP" (spp-arg-list ("a" "b" "len") 37834 . 37843) . ((symbol "memcmp" 37844 . 37850) (semantic-list "(a,b,len)" 37850 . 37859)))
          ("HASH_SORT" (spp-arg-list ("head" "cmpfcn") 46182 . 46195) . ((symbol "HASH_SRT" 46196 . 46204) (semantic-list "(hh,head,cmpfcn)" 46204 . 46220)))
          ("uthash_fatal" (spp-arg-list ("msg") 3099 . 3104) . ((symbol "exit" 3105 . 3109) (semantic-list "(-1)" 3109 . 3113)))
          ("HASH_SAX" (spp-arg-list ("key" "keylen" "num_bkts" "hashv" "bkt") 22133 . 22164) . 
              ((DO "do" 22200 . 22202) (semantic-list "{                                                                             \\
  unsigned _sx_i;                                                                \\
  char *_hs_key=(char*)(key);                                                    \\
  hashv = 0;                                                                     \\
  for(_sx_i=0; _sx_i < keylen; _sx_i++)                                          \\
      hashv ^= (hashv << 5) + (hashv >> 2) + _hs_key[_sx_i];                     \\
  bkt = hashv & (num_bkts-1);                                                    \\
}" 22203 . 22782) (WHILE "while" 22783 . 22788) (semantic-list "(0)" 22789 . 22792)))
          ("HASH_SIGNATURE" . ((number "0xa0111fe1" 59446 . 59456)))
          ("HASH_TO_BKT" (spp-arg-list ("hashv" "num_bkts" "bkt") 10804 . 10828) . 
              ((DO "do" 10868 . 10870) (semantic-list "{                                                                             \\
  bkt = ((hashv) & ((num_bkts) - 1));                                            \\
}" 10871 . 11035) (WHILE "while" 11036 . 11041) (semantic-list "(0)" 11041 . 11044)))
          ("HASH_COUNT" (spp-arg-list ("head") 58287 . 58293) . ((symbol "HASH_CNT" 58294 . 58302) (semantic-list "(hh,head)" 58302 . 58311)))
          ("HASH_BLOOM_SIGNATURE" . ((number "0xb12220f2" 59486 . 59496)))
          ("uthash_malloc" (spp-arg-list ("sz") 3209 . 3213) . ((symbol "malloc" 3214 . 3220) (semantic-list "(sz)" 3220 . 3224)))
          ("HASH_BLOOM_FREE" (spp-arg-list ("tbl") 6498 . 6503))
          ("HASH_ADD_TO_BKT" (spp-arg-list ("head" "addhh") 38912 . 38924) . 
              ((DO "do" 38972 . 38974) (semantic-list "{                                                                             \\
 head.count++;                                                                   \\
 (addhh)->hh_next = head.hh_head;                                                \\
 (addhh)->hh_prev = NULL;                                                        \\
 if (head.hh_head) { (head).hh_head->hh_prev = (addhh); }                        \\
 (head).hh_head=addhh;                                                           \\
 if (head.count >= ((head.expand_mult+1) * HASH_BKT_CAPACITY_THRESH)             \\
     && (addhh)->tbl->noexpand != 1) {                                           \\
       HASH_EXPAND_BUCKETS((addhh)->tbl);                                        \\
 }                                                                               \\
}" 38975 . 39803) (WHILE "while" 39804 . 39809) (semantic-list "(0)" 39809 . 39812)))
          )

    )
   )
  :file "!home!chz!Projects!CWork!uthash!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
