;; Object python2.7/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.7/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("sys" include nil nil [1169 1186])
            ("errno" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9693])
            ("__all__" code nil nil [9694 9716])
            ("try" code nil nil [9758 9810])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9821 9825])
                    ("args" variable nil (reparse-symbol function_parameters) [9827 9832]))                  )
                nil [9811 9980])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9992 9996])
                    ("args" variable nil (reparse-symbol function_parameters) [9998 10003]))                  )
                nil [9981 10207])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10219 10223])
                    ("args" variable nil (reparse-symbol function_parameters) [10225 10230]))                  )
                nil [10208 10416])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10429 10433])
                    ("args" variable nil (reparse-symbol function_parameters) [10435 10440]))                  )
                nil [10417 10686])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10698 10702])
                    ("args" variable nil (reparse-symbol function_parameters) [10704 10708]))                  )
                nil [10687 10939])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10952 10956])
                    ("args" variable nil (reparse-symbol function_parameters) [10958 10962])
                    ("env" variable nil (reparse-symbol function_parameters) [10964 10967]))                  )
                nil [10940 11234])
            ("__all__" code nil nil [11235 11307])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11322 11326])
                ("args" variable nil (reparse-symbol function_parameters) [11328 11332])
                ("env" variable nil (reparse-symbol function_parameters) [11334 11337]))              ) nil [11309 12177])
            ("try" code nil nil [12239 16448])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16460 16463])
                    ("default" variable nil (reparse-symbol function_parameters) [16465 16472]))                  )
                nil [16449 16656])
            ("__all__" code nil nil [16656 16680])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16694 16698]))              ) nil [16682 16730])
            ("if" code nil nil [16774 19677])
            ("if" code nil nil [19678 20675])
            ("if" code nil nil [20677 21783])
            ("if" code nil nil [21817 25083])
            ("copy_reg" include nil nil [25084 25112])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25136 25139])
                ("dict" variable nil (reparse-symbol function_parameters) [25141 25145]))              ) nil [25114 25182])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25207 25209]))              ) nil [25183 25284])
            ("try" code nil nil [25285 25419])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25445 25448])
                ("dict" variable nil (reparse-symbol function_parameters) [25450 25454]))              ) nil [25420 25494])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25522 25524]))              ) nil [25495 25602])
            ("try" code nil nil [25603 25770]))          
      :file "os.py"
      :pointmax 25770
      :fsize 25914
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "threading.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("collections" include nil nil [190 229])
            ("time" include nil nil [230 277])
            ("traceback" include nil nil [278 325])
            ("__all__" variable nil nil [906 1168])
            ("_start_new_thread" variable nil nil [1170 1213])
            ("_allocate_lock" variable nil nil [1214 1251])
            ("_get_ident" variable nil nil [1252 1281])
            ("ThreadError" variable nil nil [1282 1308])
            ("del" code nil nil [1309 1319])
            ("warnings" code nil nil [1434 1565])
            ("_VERBOSE" variable nil nil [1848 1864])
            ("if" code nil nil [1866 2789])
            ("_profile_hook" variable nil nil [2829 2849])
            ("_trace_hook" variable nil nil [2850 2868])
            ("setprofile" function
               (:documentation "Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [2885 2889]))                  )
                nil [2870 3137])
            ("settrace" function
               (:documentation "Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [3151 3155]))                  )
                nil [3138 3395])
            ("Lock" variable nil nil [3423 3444])
            ("RLock" function
               (:documentation "Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3456 3461])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3463 3471]))                  )
                nil [3446 3826])
            ("_RLock" type
               (:documentation "A reentrant lock must be released by the thread that acquired it. Once a
       thread has acquired a reentrant lock, the same thread may acquire it
       again without blocking; the thread must release it once for each time it
       has acquired it.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [4166 4198])
                            ("self" variable nil (reparse-symbol indented_block_body) [4207 4238])
                            ("self" variable nil (reparse-symbol indented_block_body) [4247 4266])
                            ("self" variable nil (reparse-symbol indented_block_body) [4275 4291]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4137 4141])
                            ("verbose" variable nil (reparse-symbol function_parameters) [4143 4150]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4124 4292])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4310 4314]))                          )
                        (reparse-symbol indented_block_body) [4297 4547])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4564 4568])
                            ("blocking" variable nil (reparse-symbol function_parameters) [4570 4578]))                          
                        :documentation "Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        ")
                        (reparse-symbol indented_block_body) [4552 6182])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [6187 6206])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6224 6228]))                          
                        :documentation "Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        ")
                        (reparse-symbol indented_block_body) [6212 7309])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7327 7331])
                            ("t" variable nil (reparse-symbol function_parameters) [7333 7334])
                            ("v" variable nil (reparse-symbol function_parameters) [7336 7337])
                            ("tb" variable nil (reparse-symbol function_parameters) [7339 7341]))                          )
                        (reparse-symbol indented_block_body) [7314 7367])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7445 7449])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [7451 7462]))                          )
                        (reparse-symbol indented_block_body) [7424 7665])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7688 7692]))                          )
                        (reparse-symbol indented_block_body) [7670 7940])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7959 7963]))                          )
                        (reparse-symbol indented_block_body) [7945 8010]))                  
                :type "class")
                nil [3827 8010])
            ("Condition" function
               (:documentation "Factory function that returns a new condition variable object.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [8026 8031])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [8033 8041]))                  )
                nil [8012 8475])
            ("_Condition" type
               (:documentation "Condition variables allow one or more threads to wait until they are
       notified by another thread.
    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [8681 8713])
                            ("if" code nil (reparse-symbol indented_block_body) [8722 8766])
                            ("self" variable nil (reparse-symbol indented_block_body) [8774 8792])
                            ("self" variable nil (reparse-symbol indented_block_body) [8861 8888])
                            ("self" variable nil (reparse-symbol indented_block_body) [8897 8924])
                            ("try" code nil (reparse-symbol indented_block_body) [9148 9253])
                            ("try" code nil (reparse-symbol indented_block_body) [9261 9372])
                            ("try" code nil (reparse-symbol indented_block_body) [9380 9477])
                            ("self" variable nil (reparse-symbol indented_block_body) [9485 9504]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8641 8645])
                            ("lock" variable nil (reparse-symbol function_parameters) [8647 8651])
                            ("verbose" variable nil (reparse-symbol function_parameters) [8658 8665]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8628 9505])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9524 9528]))                          )
                        (reparse-symbol indented_block_body) [9510 9570])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9588 9592])
                            ("args" variable nil (reparse-symbol function_parameters) [9594 9599]))                          )
                        (reparse-symbol indented_block_body) [9575 9645])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9663 9667]))                          )
                        (reparse-symbol indented_block_body) [9650 9744])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9767 9771]))                          )
                        (reparse-symbol indented_block_body) [9749 9833])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9859 9863])
                            ("x" variable nil (reparse-symbol function_parameters) [9865 9866]))                          )
                        (reparse-symbol indented_block_body) [9838 9930])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9949 9953]))                          )
                        (reparse-symbol indented_block_body) [9935 10219])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10233 10237])
                            ("timeout" variable nil (reparse-symbol function_parameters) [10239 10246])
                            ("balancing" variable nil (reparse-symbol function_parameters) [10253 10262]))                          
                        :documentation "Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notifyAll() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        ")
                        (reparse-symbol indented_block_body) [10224 13309])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13325 13329])
                            ("n" variable nil (reparse-symbol function_parameters) [13331 13332]))                          
                        :documentation "Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        ")
                        (reparse-symbol indented_block_body) [13314 14255])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14274 14278]))                          
                        :documentation "Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        ")
                        (reparse-symbol indented_block_body) [14260 14512])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [14517 14539]))                  
                :type "class")
                nil [8476 14540])
            ("Semaphore" function
               (:documentation "A factory function that returns a new semaphore.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [14556 14561])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14563 14571]))                  )
                nil [14542 14959])
            ("_Semaphore" type
               (:documentation "Semaphores manage a counter representing the number of release() calls
       minus the number of acquire() calls, plus an initial value. The acquire()
       method blocks if necessary until it can return without making the counter
       negative. If not given, value defaults to 1.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [15423 15506])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [15514 15546])
                            ("self" variable nil (reparse-symbol indented_block_body) [15555 15586])
                            ("self" variable nil (reparse-symbol indented_block_body) [15595 15615]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15385 15389])
                            ("value" variable nil (reparse-symbol function_parameters) [15391 15396])
                            ("verbose" variable nil (reparse-symbol function_parameters) [15400 15407]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15372 15616])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15633 15637])
                            ("blocking" variable nil (reparse-symbol function_parameters) [15639 15647]))                          
                        :documentation "Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        ")
                        (reparse-symbol indented_block_body) [15621 17283])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [17288 17307])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17325 17329]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        ")
                        (reparse-symbol indented_block_body) [17313 17795])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17813 17817])
                            ("t" variable nil (reparse-symbol function_parameters) [17819 17820])
                            ("v" variable nil (reparse-symbol function_parameters) [17822 17823])
                            ("tb" variable nil (reparse-symbol function_parameters) [17825 17827]))                          )
                        (reparse-symbol indented_block_body) [17800 17853]))                  
                :type "class")
                nil [14960 17853])
            ("BoundedSemaphore" function
               (:documentation "A factory function that returns a new bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [17876 17881])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [17883 17891]))                  )
                nil [17855 18657])
            ("_BoundedSemaphore" type
               (:documentation "A bounded semaphore checks to make sure its current value doesn't exceed
       its initial value. If it does, ValueError is raised. In most situations
       semaphores are used to guard resources with limited capacity.
    "
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [18987 19028])
                            ("self" variable nil (reparse-symbol indented_block_body) [19037 19064]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18949 18953])
                            ("value" variable nil (reparse-symbol function_parameters) [18955 18960])
                            ("verbose" variable nil (reparse-symbol function_parameters) [18964 18971]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [18936 19065])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19082 19086]))                          
                        :documentation "Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        ")
                        (reparse-symbol indented_block_body) [19070 19578]))                  
                :type "class")
                nil [18658 19578])
            ("Event" function
               (:documentation "A factory function that returns a new event.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [19590 19595])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [19597 19605]))                  )
                nil [19580 19877])
            ("_Event" type
               (:documentation "A factory function that returns a new event object. An event manages a
       flag that can be set to true with the set() method and reset to false
       with the clear() method. The wait() method blocks until the flag is true.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [20253 20285])
                            ("self" variable nil (reparse-symbol indented_block_body) [20294 20325])
                            ("self" variable nil (reparse-symbol indented_block_body) [20334 20353]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20224 20228])
                            ("verbose" variable nil (reparse-symbol function_parameters) [20230 20237]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [20211 20354])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20385 20389]))                          )
                        (reparse-symbol indented_block_body) [20359 20499])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20514 20518]))                          )
                        (reparse-symbol indented_block_body) [20504 20612])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [20617 20631])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20645 20649]))                          
                        :documentation "Set the internal flag to true.

        All threads waiting for the flag to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        ")
                        (reparse-symbol indented_block_body) [20637 21018])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21033 21037]))                          
                        :documentation "Reset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        ")
                        (reparse-symbol indented_block_body) [21023 21351])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21365 21369])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21371 21378])
                            ("balancing" variable nil (reparse-symbol function_parameters) [21385 21394]))                          
                        :documentation "Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        ")
                        (reparse-symbol indented_block_body) [21356 22211]))                  
                :type "class")
                nil [19878 22211])
            ("_counter" variable nil nil [22250 22262])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [22276 22284]))              ) nil [22263 22378])
            ("_active_limbo_lock" variable nil nil [22410 22447])
            ("_active" variable nil nil [22448 22460])
            ("_limbo" variable nil nil [22498 22509])
            ("Thread" type
               (:documentation "A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion.

    "
                :superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [22690 22711])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [22962 22988])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [23091 23119])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

\"\"\"" code nil (reparse-symbol indented_block_body) [23242 24083])
                            ("assert" code nil (reparse-symbol indented_block_body) [24092 24151])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [24160 24192])
                            ("if" code nil (reparse-symbol indented_block_body) [24201 24244])
                            ("self" variable nil (reparse-symbol indented_block_body) [24252 24274])
                            ("self" variable nil (reparse-symbol indented_block_body) [24283 24320])
                            ("self" variable nil (reparse-symbol indented_block_body) [24329 24347])
                            ("self" variable nil (reparse-symbol indented_block_body) [24356 24378])
                            ("self" variable nil (reparse-symbol indented_block_body) [24387 24423])
                            ("self" variable nil (reparse-symbol indented_block_body) [24432 24451])
                            ("self" variable nil (reparse-symbol indented_block_body) [24460 24484])
                            ("self" variable nil (reparse-symbol indented_block_body) [24493 24515])
                            ("self" variable nil (reparse-symbol indented_block_body) [24524 24556])
                            ("self" variable nil (reparse-symbol indented_block_body) [24565 24590])
                            ("self" variable nil (reparse-symbol indented_block_body) [24717 24744]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23138 23142])
                            ("group" variable nil (reparse-symbol function_parameters) [23144 23149])
                            ("target" variable nil (reparse-symbol function_parameters) [23156 23162])
                            ("name" variable nil (reparse-symbol function_parameters) [23169 23173])
                            ("args" variable nil (reparse-symbol function_parameters) [23197 23201])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23206 23212])
                            ("verbose" variable nil (reparse-symbol function_parameters) [23219 23226]))                          
                        :documentation "This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form \"Thread-N\" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

"
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23125 24745])
                    ("_reset_internal_locks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24776 24780]))                          )
                        (reparse-symbol indented_block_body) [24750 25095])
                    ("_block" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25125 25129]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [25100 25189])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25210 25214]))                          )
                        (reparse-symbol indented_block_body) [25194 25309])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25327 25331]))                          )
                        (reparse-symbol indented_block_body) [25314 25775])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25790 25794]))                          
                        :documentation "Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        ")
                        (reparse-symbol indented_block_body) [25780 26670])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26683 26687]))                          
                        :documentation "Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        ")
                        (reparse-symbol indented_block_body) [26675 27371])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27392 27396]))                          )
                        (reparse-symbol indented_block_body) [27376 28375])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28395 28399]))                          )
                        (reparse-symbol indented_block_body) [28380 28438])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28465 28469]))                          )
                        (reparse-symbol indented_block_body) [28443 31818])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31834 31838]))                          )
                        (reparse-symbol indented_block_body) [31823 32161])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32179 32183]))                          )
                        (reparse-symbol indented_block_body) [32166 33980])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33994 33998])
                            ("timeout" variable nil (reparse-symbol function_parameters) [34000 34007])
                            ("balancing" variable nil (reparse-symbol function_parameters) [34014 34023]))                          
                        :documentation "Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        isAlive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        ")
                        (reparse-symbol indented_block_body) [33985 36341])
                    ("name" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36369 36373]))                          
                        :documentation "A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        ")
                        (reparse-symbol indented_block_body) [36346 36668])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36699 36703])
                            ("name" variable nil (reparse-symbol function_parameters) [36705 36709]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [36673 36810])
                    ("ident" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36839 36843]))                          
                        :documentation "Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the thread.get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        ")
                        (reparse-symbol indented_block_body) [36815 37270])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37287 37291]))                          
                        :documentation "Return whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        ")
                        (reparse-symbol indented_block_body) [37275 37683])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [37688 37706])
                    ("daemon" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37737 37741]))                          
                        :documentation "A boolean value indicating whether this thread is a daemon thread (True) or not (False).

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        ")
                        (reparse-symbol indented_block_body) [37712 38332])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38367 38371])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38373 38381]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [38337 38630])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38648 38652]))                          )
                        (reparse-symbol indented_block_body) [38635 38682])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38701 38705])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [38707 38715]))                          )
                        (reparse-symbol indented_block_body) [38687 38749])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38766 38770]))                          )
                        (reparse-symbol indented_block_body) [38754 38798])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38815 38819])
                            ("name" variable nil (reparse-symbol function_parameters) [38821 38825]))                          )
                        (reparse-symbol indented_block_body) [38803 38853]))                  
                :type "class")
                nil [22538 38853])
            ("Timer" function
               (:documentation "Factory function to create a Timer object.

    Timers call a function after a specified number of seconds:

        t = Timer(30.0, f, args=[], kwargs={})
        t.start()
        t.cancel()     # stop the timer's action if it's still waiting

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [38925 38930])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [38932 38940]))                  )
                nil [38915 39239])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

            t = Timer(30.0, f, args=[], kwargs={})
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [39553 39574])
                            ("self" variable nil (reparse-symbol indented_block_body) [39583 39607])
                            ("self" variable nil (reparse-symbol indented_block_body) [39616 39640])
                            ("self" variable nil (reparse-symbol indented_block_body) [39649 39665])
                            ("self" variable nil (reparse-symbol indented_block_body) [39674 39694])
                            ("self" variable nil (reparse-symbol indented_block_body) [39703 39726]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39498 39502])
                            ("interval" variable nil (reparse-symbol function_parameters) [39504 39512])
                            ("function" variable nil (reparse-symbol function_parameters) [39514 39522])
                            ("args" variable nil (reparse-symbol function_parameters) [39524 39528])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [39533 39539]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39485 39727])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39743 39747]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [39732 39833])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39846 39850]))                          )
                        (reparse-symbol indented_block_body) [39838 40015]))                  
                :type "class")
                nil [39240 40015])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [40181 40221])
                            ("self" code nil (reparse-symbol indented_block_body) [40230 40257])
                            ("self" code nil (reparse-symbol indented_block_body) [40266 40283])
                            ("with" code nil (reparse-symbol indented_block_body) [40292 40358]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40166 40170]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40153 40358])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40379 40383]))                          )
                        (reparse-symbol indented_block_body) [40363 40407])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40426 40430]))                          )
                        (reparse-symbol indented_block_body) [40412 40785]))                  
                :type "class")
                nil [40121 40785])
            ("_pickSomeNonDaemonThread" function nil nil [40786 40923])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [41422 41470])
                            ("del" code nil (reparse-symbol indented_block_body) [41690 41713])
                            ("self" code nil (reparse-symbol indented_block_body) [41723 41750])
                            ("self" code nil (reparse-symbol indented_block_body) [41759 41776])
                            ("with" code nil (reparse-symbol indented_block_body) [41785 41851]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41407 41411]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41394 41851])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41872 41876]))                          )
                        (reparse-symbol indented_block_body) [41856 41899])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41913 41917])
                            ("timeout" variable nil (reparse-symbol function_parameters) [41919 41926])
                            ("balancing" variable nil (reparse-symbol function_parameters) [41933 41942]))                          )
                        (reparse-symbol indented_block_body) [41904 42001]))                  
                :type "class")
                nil [41361 42001])
            ("currentThread" function (:documentation "Return the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    ") nil [42027 42467])
            ("current_thread" variable nil nil [42468 42498])
            ("activeCount" function (:documentation "Return the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    ") nil [42500 42747])
            ("active_count" variable nil nil [42748 42774])
            ("_enumerate" function nil nil [42776 42908])
            ("enumerate" function (:documentation "Return a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    ") nil [42909 43269])
            ("thread" include nil nil [43270 43299])
            ("_shutdown" variable nil nil [43415 43450])
            ("try" code nil nil [43549 43652])
            ("_after_fork" function nil nil [43654 45038])
            ("_test" function nil nil [45058 47285])
            ("if" code nil nil [47286 47325]))          
      :file "threading.py"
      :pointmax 47325
      :fsize 47403
      :lastmodtime '(21600 29985 0 0)
      :unmatched-syntax '((INDENT_BLOCK 31467 . 31502) (NEWLINE 31251 . 31252) (COLON 31250 . 31251) (FINALLY 31243 . 31250)))
    (semanticdb-table "warnings.py"
      :file "warnings.py"
      :fsize 14044
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "collections.py"
      :file "collections.py"
      :fsize 26142
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "traceback.py"
      :file "traceback.py"
      :fsize 11285
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163])
            ("total_ordering" function
               (:documentation "Class decorator that fills in missing ordering methods"
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2183 2186]))                  )
                nil [2164 3689])
            ("cmp_to_key" function
               (:documentation "Convert a cmp= function into a key= function"
                :arguments 
                  ( ("mycmp" variable nil (reparse-symbol function_parameters) [3705 3710]))                  )
                nil [3690 4479]))          
      :file "functools.py"
      :pointmax 4479
      :fsize 4478
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "contextlib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Utilities for with-statement contexts.  See PEP 343.\"\"\"" code nil nil [1 59])
            ("sys" include nil nil [61 71])
            ("functools" include nil nil [72 99])
            ("warnings" include nil nil [100 125])
            ("__all__" variable nil nil [127 176])
            ("GeneratorContextManager" type
               (:documentation "Helper for @contextmanager decorator."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [303 317]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [283 287])
                            ("gen" variable nil (reparse-symbol function_parameters) [289 292]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [270 318])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [337 341]))                          )
                        (reparse-symbol indented_block_body) [323 479])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [497 501])
                            ("type" variable nil (reparse-symbol function_parameters) [503 507])
                            ("value" variable nil (reparse-symbol function_parameters) [509 514])
                            ("traceback" variable nil (reparse-symbol function_parameters) [516 525]))                          )
                        (reparse-symbol indented_block_body) [484 1916]))                  
                :type "class")
                nil [178 1916])
            ("contextmanager" function
               (:documentation "@contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>

    "
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [1937 1941]))                  )
                nil [1918 2557])
            ("nested" function
               (:documentation "Combine multiple context managers into a single nested context manager.

   This function has been deprecated in favour of the multiple manager form
   of the with statement.

   The one advantage of this function over the multiple manager form of the
   with statement is that argument unpacking allows it to be
   used with a variable number of context managers as follows:

      with nested(*managers):
          do_something()

    "
                :arguments 
                  ( ("managers" variable nil (reparse-symbol function_parameters) [2586 2595]))                  
                :decorators 
                  ( ("contextmanager" function (:type "decorator") nil nil))                  )
                nil [2559 3912])
            ("closing" type
               (:documentation "Context to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4293 4311]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4271 4275])
                            ("thing" variable nil (reparse-symbol function_parameters) [4277 4282]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4258 4312])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4330 4334]))                          )
                        (reparse-symbol indented_block_body) [4316 4363])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4380 4384])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [4386 4395]))                          )
                        (reparse-symbol indented_block_body) [4367 4425]))                  
                :type "class")
                nil [3914 4425]))          
      :file "contextlib.py"
      :pointmax 4425
      :fsize 4424
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax '((INDENT_BLOCK 3452 . 3912) (NEWLINE 3451 . 3452) (COLON 3450 . 3451) (FINALLY 3443 . 3450)))
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "pkgutil.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Utilities to support packages.\"\"\"" code nil nil [1 37])
            ("os" include nil nil [173 182])
            ("sys" include nil nil [183 193])
            ("imp" include nil nil [194 204])
            ("os.path" include nil nil [205 219])
            ("types" include nil nil [220 248])
            ("__all__" variable nil nil [250 439])
            ("read_code" function (:arguments 
              ( ("stream" variable nil (reparse-symbol function_parameters) [455 461]))              ) nil [441 737])
            ("simplegeneric" function
               (:documentation "Make a trivial single-dispatch generic function"
                :arguments 
                  ( ("func" variable nil (reparse-symbol function_parameters) [757 761]))                  )
                nil [739 1881])
            ("walk_packages" function
               (:documentation "Yields (module_loader, name, ispkg) for all modules recursively
    on path, or, if path is None, all accessible modules.

    'path' should be either None or a list of paths to look for
    modules in.

    'prefix' is a string to output on the front of every module name
    on output.

    Note that this function must import all *packages* (NOT all
    modules!) on the given path, in order to access the __path__
    attribute to find submodules.

    'onerror' is a function which gets called with one argument (the
    name of the package which was being imported) if any exception
    occurs while trying to import a package.  If no onerror function is
    supplied, ImportErrors are caught and ignored, while all other
    exceptions are propagated, terminating the search.

    Examples:

    # list all modules python can access
    walk_packages()

    # list all submodules of ctypes
    walk_packages(ctypes.__path__, ctypes.__name__+'.')
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [1901 1905])
                    ("prefix" variable nil (reparse-symbol function_parameters) [1912 1918])
                    ("onerror" variable nil (reparse-symbol function_parameters) [1923 1930]))                  )
                nil [1883 3729])
            ("iter_modules" function
               (:documentation "Yields (module_loader, name, ispkg) for all submodules on path,
    or, if path is None, all top-level modules on sys.path.

    'path' should be either None or a list of paths to look for
    modules in.

    'prefix' is a string to output on the front of every module name
    on output.
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [3748 3752])
                    ("prefix" variable nil (reparse-symbol function_parameters) [3759 3765]))                  )
                nil [3731 4399])
            ("iter_importer_modules" function (:arguments 
              ( ("importer" variable nil (reparse-symbol function_parameters) [4443 4451])
                ("prefix" variable nil (reparse-symbol function_parameters) [4453 4459]))              ) nil [4417 4570])
            ("iter_importer_modules" variable nil nil [4571 4631])
            ("ImpImporter" type
               (:documentation "PEP 302 Importer that wraps Python's \"classic\" import algorithm

    ImpImporter(dirname) produces a PEP 302 importer that searches that
    directory.  ImpImporter(None) produces a PEP 302 importer that searches
    the current sys.path, plus any modules that are frozen or built-in.

    Note that ImpImporter does not currently support being used by placement
    on sys.meta_path.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5097 5113]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5071 5075])
                            ("path" variable nil (reparse-symbol function_parameters) [5077 5081]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5058 5114])
                    ("find_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5135 5139])
                            ("fullname" variable nil (reparse-symbol function_parameters) [5141 5149])
                            ("path" variable nil (reparse-symbol function_parameters) [5151 5155]))                          )
                        (reparse-symbol indented_block_body) [5119 5664])
                    ("iter_modules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5686 5690])
                            ("prefix" variable nil (reparse-symbol function_parameters) [5692 5698]))                          )
                        (reparse-symbol indented_block_body) [5669 7023]))                  
                :type "class")
                nil [4634 7023])
            ("ImpLoader" type
               (:documentation "PEP 302 Loader that wraps Python's \"classic\" import algorithm
    "
                :members 
                  ( ("code" variable nil (reparse-symbol indented_block_body) [7123 7143])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7208 7224])
                            ("self" variable nil (reparse-symbol indented_block_body) [7233 7257])
                            ("self" variable nil (reparse-symbol indented_block_body) [7266 7290])
                            ("self" variable nil (reparse-symbol indented_block_body) [7299 7313]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7162 7166])
                            ("fullname" variable nil (reparse-symbol function_parameters) [7168 7176])
                            ("file" variable nil (reparse-symbol function_parameters) [7178 7182])
                            ("filename" variable nil (reparse-symbol function_parameters) [7184 7192])
                            ("etc" variable nil (reparse-symbol function_parameters) [7194 7197]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7149 7314])
                    ("load_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7335 7339])
                            ("fullname" variable nil (reparse-symbol function_parameters) [7341 7349]))                          )
                        (reparse-symbol indented_block_body) [7319 7715])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7733 7737])
                            ("pathname" variable nil (reparse-symbol function_parameters) [7739 7747]))                          )
                        (reparse-symbol indented_block_body) [7720 7793])
                    ("_reopen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7810 7814]))                          )
                        (reparse-symbol indented_block_body) [7798 8108])
                    ("_fix_name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8127 8131])
                            ("fullname" variable nil (reparse-symbol function_parameters) [8133 8141]))                          )
                        (reparse-symbol indented_block_body) [8113 8413])
                    ("is_package" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8433 8437])
                            ("fullname" variable nil (reparse-symbol function_parameters) [8439 8447]))                          )
                        (reparse-symbol indented_block_body) [8418 8540])
                    ("get_code" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8558 8562])
                            ("fullname" variable nil (reparse-symbol function_parameters) [8564 8572]))                          )
                        (reparse-symbol indented_block_body) [8545 9190])
                    ("get_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9210 9214])
                            ("fullname" variable nil (reparse-symbol function_parameters) [9216 9224]))                          )
                        (reparse-symbol indented_block_body) [9195 9913])
                    ("_get_delegate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9937 9941]))                          )
                        (reparse-symbol indented_block_body) [9919 10010])
                    ("get_filename" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10032 10036])
                            ("fullname" variable nil (reparse-symbol function_parameters) [10038 10046]))                          )
                        (reparse-symbol indented_block_body) [10015 10359]))                  
                :type "class")
                nil [7025 10359])
            ("try" code nil nil [10361 11428])
            ("get_importer" function
               (:documentation "Retrieve a PEP 302 importer for the given path item

    The returned importer is cached in sys.path_importer_cache
    if it was newly created by a path hook.

    If there is no importer, a wrapper around the basic import
    machinery is returned. This wrapper is never inserted into
    the importer cache (None is inserted instead).

    The cache (or part of it) can be cleared manually if a
    rescan of sys.path_hooks is necessary.
    "
                :arguments 
                  ( ("path_item" variable nil (reparse-symbol function_parameters) [11447 11456]))                  )
                nil [11430 12447])
            ("iter_importers" function
               (:documentation "Yield PEP 302 importers for the given module name

    If fullname contains a '.', the importers will be for the package
    containing fullname, otherwise they will be importers for sys.meta_path,
    sys.path, and Python's \"classic\" import machinery, in that order.  If
    the named module is in a package, that package is imported as a side
    effect of invoking this function.

    Non PEP 302 mechanisms (e.g. the Windows registry) used by the
    standard import machinery to find files in alternative locations
    are partially supported, but are searched AFTER sys.path. Normally,
    these locations are searched BEFORE sys.path, preventing sys.path
    entries from shadowing them.

    For this to cause a visible difference in behaviour, there must
    be a module or package name that is accessible via both sys.path
    and one of the non PEP 302 file system mechanisms. In this case,
    the emulation will find the former version, while the builtin
    import mechanism will find the latter.

    Items of the following types can be affected by this discrepancy:
        imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY
    "
                :arguments 
                  ( ("fullname" variable nil (reparse-symbol function_parameters) [12468 12476]))                  )
                nil [12449 14212])
            ("get_loader" function
               (:documentation "Get a PEP 302 \"loader\" object for module_or_name

    If the module or package is accessible via the normal import
    mechanism, a wrapper around the relevant part of that machinery
    is returned.  Returns None if the module cannot be found or imported.
    If the named module is not already imported, its containing package
    (if any) is imported, in order to establish the package __path__.

    This function uses iter_importers(), and is thus subject to the same
    limitations regarding platform-specific special import locations such
    as the Windows registry.
    "
                :arguments 
                  ( ("module_or_name" variable nil (reparse-symbol function_parameters) [14228 14242]))                  )
                nil [14213 15228])
            ("find_loader" function
               (:documentation "Find a PEP 302 \"loader\" object for fullname

    If fullname contains dots, path must be the containing package's __path__.
    Returns None if the module cannot be found or imported. This function uses
    iter_importers(), and is thus subject to the same limitations regarding
    platform-specific special import locations such as the Windows registry.
    "
                :arguments 
                  ( ("fullname" variable nil (reparse-symbol function_parameters) [15245 15253]))                  )
                nil [15229 15795])
            ("extend_path" function
               (:documentation "Extend a package's path.

    Intended use is to place the following code in a package's __init__.py:

        from pkgutil import extend_path
        __path__ = extend_path(__path__, __name__)

    This will add to the package's __path__ all subdirectories of
    directories on sys.path named after the package.  This is useful
    if one wants to distribute different parts of a single logical
    package as multiple directories.

    It also looks for *.pkg files beginning where * matches the name
    argument.  This feature is similar to *.pth files (see site.py),
    except that it doesn't special-case lines starting with 'import'.
    A *.pkg file is trusted at face value: apart from checking for
    duplicates, all entries found in a *.pkg file are added to the
    path, regardless of whether they are exist the filesystem.  (This
    is a feature.)

    If the input path is not a list (as is the case for frozen
    packages) it is returned unchanged.  The input path is not
    modified; an extended copy is returned.  Items are only appended
    to the copy at the end.

    It is assumed that sys.path is a sequence.  Items of sys.path that
    are not (unicode or 8-bit) strings referring to existing
    directories are ignored.  Unicode items of sys.path that cause
    errors when used as filenames may cause this function to raise an
    exception (in line with os.path.isdir() behavior).
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [15813 15817])
                    ("name" variable nil (reparse-symbol function_parameters) [15819 15823]))                  )
                nil [15797 18837])
            ("get_data" function
               (:documentation "Get a resource from a package.

    This is a wrapper round the PEP 302 loader get_data API. The package
    argument should be the name of a package, in standard module format
    (foo.bar). The resource argument should be in the form of a relative
    filename, using '/' as the path separator. The parent directory name '..'
    is not allowed, and nor is a rooted name (starting with a '/').

    The function returns a binary string, which is the contents of the
    specified resource.

    For packages located in the filesystem, which have already been imported,
    this is the rough equivalent of

        d = os.path.dirname(sys.modules[package].__file__)
        data = open(os.path.join(d, resource), 'rb').read()

    If the package cannot be located or loaded, or it uses a PEP 302 loader
    which does not support get_data(), then None is returned.
    "
                :arguments 
                  ( ("package" variable nil (reparse-symbol function_parameters) [18851 18858])
                    ("resource" variable nil (reparse-symbol function_parameters) [18860 18868]))                  )
                nil [18838 20347]))          
      :file "pkgutil.py"
      :pointmax 20347
      :fsize 20346
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("CodeType" variable nil nil [1118 1147])
            ("_g" function nil nil [1149 1171])
            ("GeneratorType" variable nil nil [1171 1197])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1220 1224]))                          )
                        (reparse-symbol indented_block_body) [1213 1232]))                  
                :type "class")
                nil [1199 1232])
            ("ClassType" variable nil nil [1232 1252])
            ("UnboundMethodType" variable nil nil [1253 1284])
            ("_x" variable nil nil [1314 1323])
            ("InstanceType" variable nil nil [1324 1347])
            ("MethodType" variable nil nil [1348 1372])
            ("BuiltinFunctionType" variable nil nil [1374 1405])
            ("BuiltinMethodType" variable nil nil [1406 1441])
            ("ModuleType" variable nil nil [1477 1499])
            ("FileType" variable nil nil [1500 1515])
            ("XRangeType" variable nil nil [1516 1535])
            ("try" code nil nil [1537 1681])
            ("SliceType" variable nil nil [1682 1699])
            ("EllipsisType" variable nil nil [1700 1729])
            ("DictProxyType" variable nil nil [1731 1770])
            ("NotImplementedType" variable nil nil [1771 1812])
            ("GetSetDescriptorType" variable nil nil [1866 1917])
            ("MemberDescriptorType" variable nil nil [1918 1972])
            ("del" code nil nil [1974 1997]))          
      :file "types.py"
      :pointmax 2041
      :fsize 2040
      :lastmodtime '(21600 29985 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "posixpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("sys" include nil nil [506 516])
            ("stat" include nil nil [517 528])
            ("genericpath" include nil nil [529 547])
            ("warnings" include nil nil [548 563])
            ("genericpath" include nil nil [564 589])
            ("try" code nil nil [591 777])
            ("__all__" variable nil nil [778 1266])
            ("curdir" variable nil nil [1328 1340])
            ("pardir" variable nil nil [1341 1354])
            ("extsep" variable nil nil [1355 1367])
            ("sep" variable nil nil [1368 1377])
            ("pathsep" variable nil nil [1378 1391])
            ("defpath" variable nil nil [1392 1418])
            ("altsep" variable nil nil [1419 1432])
            ("devnull" variable nil nil [1433 1454])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1734 1735]))                  )
                nil [1721 1816])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1915 1916]))                  )
                nil [1905 1990])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [2141 2142])
                    ("p" variable nil (reparse-symbol function_parameters) [2144 2146]))                  )
                nil [2132 2598])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2854 2855]))                  )
                nil [2844 3145])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3366 3367]))              ) nil [3353 3427])
            ("splitext" variable nil nil [3427 3475])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3630 3631]))                  )
                nil [3615 3736])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3821 3822]))                  )
                nil [3808 3919])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [4002 4003]))                  )
                nil [3990 4191])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4307 4311]))                  )
                nil [4296 4496])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4567 4571]))                  )
                nil [4555 4742])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4812 4814])
                    ("f2" variable nil (reparse-symbol function_parameters) [4816 4818]))                  )
                nil [4799 4959])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [5080 5083])
                    ("fp2" variable nil (reparse-symbol function_parameters) [5085 5088]))                  )
                nil [5063 5234])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5338 5340])
                    ("s2" variable nil (reparse-symbol function_parameters) [5342 5344]))                  )
                nil [5325 5485])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5603 5607]))                  )
                nil [5591 6180])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6578 6581])
                    ("func" variable nil (reparse-symbol function_parameters) [6583 6587])
                    ("arg" variable nil (reparse-symbol function_parameters) [6589 6592]))                  )
                nil [6569 7880])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8371 8375]))                  )
                nil [8356 9013])
            ("_varprog" variable nil nil [9174 9189])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9206 9210]))                  )
                nil [9191 9910])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10098 10102]))                  )
                nil [10085 11053])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11067 11071]))                  )
                nil [11055 11304])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11406 11414]))                  )
                nil [11393 11608])
            ("_joinrealpath" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [11726 11730])
                ("rest" variable nil (reparse-symbol function_parameters) [11732 11736])
                ("seen" variable nil (reparse-symbol function_parameters) [11738 11742]))              ) nil [11708 13015])
            ("supports_unicode_filenames" variable nil nil [13017 13072])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [13086 13090])
                    ("start" variable nil (reparse-symbol function_parameters) [13092 13097]))                  )
                nil [13074 13592]))          
      :file "posixpath.py"
      :pointmax 13592
      :fsize 14088
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax '((NAME 10212 . 10217) (IF 10238 . 10240) (ELSE 10268 . 10272)))
    (semanticdb-table "stat.py"
      :file "stat.py"
      :fsize 1842
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "genericpath.py"
      :file "genericpath.py"
      :fsize 3014
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "mimetypes.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Guess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=1) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=1) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles (on Windows, the
  default values are taken from the registry)
read_mime_types(file) -- parse one file, return a dictionary or None
\"\"\"" code nil nil [1 749])
            ("os" include nil nil [751 760])
            ("sys" include nil nil [761 771])
            ("posixpath" include nil nil [772 788])
            ("urllib" include nil nil [789 802])
            ("try" code nil nil [803 866])
            ("__all__" variable nil nil [867 979])
            ("knownfiles" variable nil nil [981 1466])
            ("inited" variable nil nil [1468 1482])
            ("_db" variable nil nil [1483 1493])
            ("MimeTypes" type
               (:documentation "MIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1815 1849])
                            ("self" variable nil (reparse-symbol indented_block_body) [1857 1898])
                            ("self" variable nil (reparse-symbol indented_block_body) [1907 1942])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1976])
                            ("self" variable nil (reparse-symbol indented_block_body) [2017 2046])
                            ("for" code nil (reparse-symbol indented_block_body) [2055 2136])
                            ("for" code nil (reparse-symbol indented_block_body) [2144 2229])
                            ("for" code nil (reparse-symbol indented_block_body) [2237 2296]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1773 1777])
                            ("filenames" variable nil (reparse-symbol function_parameters) [1779 1788])
                            ("strict" variable nil (reparse-symbol function_parameters) [1793 1799]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1760 2296])
                    ("add_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2314 2318])
                            ("type" variable nil (reparse-symbol function_parameters) [2320 2324])
                            ("ext" variable nil (reparse-symbol function_parameters) [2326 2329])
                            ("strict" variable nil (reparse-symbol function_parameters) [2331 2337]))                          
                        :documentation "Add a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [2301 2916])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2936 2940])
                            ("url" variable nil (reparse-symbol function_parameters) [2942 2945])
                            ("strict" variable nil (reparse-symbol function_parameters) [2947 2953]))                          
                        :documentation "Guess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [2921 5472])
                    ("guess_all_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5502 5506])
                            ("type" variable nil (reparse-symbol function_parameters) [5508 5512])
                            ("strict" variable nil (reparse-symbol function_parameters) [5514 5520]))                          
                        :documentation "Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [5477 6296])
                    ("guess_extension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("type" variable nil (reparse-symbol function_parameters) [6327 6331])
                            ("strict" variable nil (reparse-symbol function_parameters) [6333 6339]))                          
                        :documentation "Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [6301 7026])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7040 7044])
                            ("filename" variable nil (reparse-symbol function_parameters) [7046 7054])
                            ("strict" variable nil (reparse-symbol function_parameters) [7056 7062]))                          
                        :documentation "
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7031 7371])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7387 7391])
                            ("fp" variable nil (reparse-symbol function_parameters) [7393 7395])
                            ("strict" variable nil (reparse-symbol function_parameters) [7397 7403]))                          
                        :documentation "
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7376 8077])
                    ("read_windows_registry" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8108 8112])
                            ("strict" variable nil (reparse-symbol function_parameters) [8114 8120]))                          
                        :documentation "
        Load the MIME types database from Windows registry.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [8082 9698]))                  
                :type "class")
                nil [1496 9698])
            ("guess_type" function
               (:documentation "Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to \".tar.gz\".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [9715 9718])
                    ("strict" variable nil (reparse-symbol function_parameters) [9720 9726]))                  )
                nil [9700 10585])
            ("guess_all_extensions" function
               (:documentation "Guess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [10612 10616])
                    ("strict" variable nil (reparse-symbol function_parameters) [10618 10624]))                  )
                nil [10587 11237])
            ("guess_extension" function
               (:documentation "Guess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11258 11262])
                    ("strict" variable nil (reparse-symbol function_parameters) [11264 11270]))                  )
                nil [11238 11852])
            ("add_type" function
               (:documentation "Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [11866 11870])
                    ("ext" variable nil (reparse-symbol function_parameters) [11872 11875])
                    ("strict" variable nil (reparse-symbol function_parameters) [11877 11883]))                  )
                nil [11853 12341])
            ("init" function (:arguments 
              ( ("files" variable nil (reparse-symbol function_parameters) [12352 12357]))              ) nil [12343 12959])
            ("read_mime_types" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [12981 12985]))              ) nil [12961 13134])
            ("_default_mime_types" function nil nil [13136 19361])
            ("_default_mime_types" code nil nil [19363 19384])
            ("if" code nil nil [19387 20704]))          
      :file "mimetypes.py"
      :pointmax 20704
      :fsize 20709
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "urllib.py"
      :file "urllib.py"
      :fsize 58211
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "io.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an IOError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is a in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
\"\"\"" code nil nil [1 1479])
            ("__author__" variable nil nil [1523 1860])
            ("__all__" variable nil nil [1862 2180])
            ("_io" include nil nil [2183 2193])
            ("abc" include nil nil [2194 2204])
            ("" code nil nil [2222 2472])
            ("OpenWrapper" variable nil nil [2474 2496])
            ("SEEK_SET" variable nil nil [2542 2554])
            ("SEEK_CUR" variable nil nil [2555 2567])
            ("SEEK_END" variable nil nil [2568 2580])
            ("IOBase" type
               (:superclasses ("_io._IOBase")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2757 2784]))                  
                :type "class")
                nil [2726 2785])
            ("RawIOBase" type
               (:superclasses ("_io._RawIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2831 2835]))                  
                :type "class")
                nil [2786 2836])
            ("BufferedIOBase" type
               (:superclasses ("_io._BufferedIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2892 2896]))                  
                :type "class")
                nil [2837 2897])
            ("TextIOBase" type
               (:superclasses ("_io._TextIOBase" "IOBase")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2945 2949]))                  
                :type "class")
                nil [2898 2950])
            ("RawIOBase" code nil nil [2951 2977])
            ("for" code nil nil [2979 3116])
            ("for" code nil nil [3117 3188])
            ("del" code nil nil [3188 3197]))          
      :file "io.py"
      :pointmax 3198
      :fsize 3321
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("types" include nil nil [161 173])
            ("_weakrefset" include nil nil [175 206])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [238 253])
            ("_InstanceType" variable nil nil [253 279])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [301 308]))                  )
                nil [282 876])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1742 1769]))                  
                :type "class")
                nil [878 1770])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2614 2643])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2661 2665])
                        ("name" variable nil (reparse-symbol function_parameters) [2667 2671])
                        ("bases" variable nil (reparse-symbol function_parameters) [2673 2678])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2680 2689]))                      ) (reparse-symbol indented_block_body) [2649 3526])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3544 3547])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3549 3557]))                          )
                        (reparse-symbol indented_block_body) [3531 4266])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4290 4293])
                            ("file" variable nil (reparse-symbol function_parameters) [4295 4299]))                          )
                        (reparse-symbol indented_block_body) [4271 4698])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4725 4728])
                            ("instance" variable nil (reparse-symbol function_parameters) [4730 4738]))                          )
                        (reparse-symbol indented_block_body) [4703 5559])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5586 5589])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5591 5599]))                          )
                        (reparse-symbol indented_block_body) [5564 7146]))                  
                :type "class")
                nil [1772 7146]))          
      :file "abc.py"
      :pointmax 7146
      :fsize 7145
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "uuid.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"UUID objects (universally unique identifiers) according to RFC 4122.

This module provides immutable UUID objects (class UUID) and the functions
uuid1(), uuid3(), uuid4(), uuid5() for generating version 1, 3, 4, and 5
UUIDs as specified in RFC 4122.

If all you want is a unique ID, you should probably call uuid1() or uuid4().
Note that uuid1() may compromise privacy since it creates a UUID containing
the computer's network address.  uuid4() creates a random UUID.

Typical usage:

    >>> import uuid

    # make a UUID based on the host ID and current time
    >>> uuid.uuid1()
    UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')

    # make a UUID using an MD5 hash of a namespace UUID and a name
    >>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
    UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')

    # make a random UUID
    >>> uuid.uuid4()
    UUID('16fd2706-8baf-433b-82eb-8c7fada847da')

    # make a UUID using a SHA-1 hash of a namespace UUID and a name
    >>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
    UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')

    # make a UUID from a string of hex digits (braces and hyphens ignored)
    >>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')

    # convert a UUID to a string of hex digits in standard form
    >>> str(x)
    '00010203-0405-0607-0809-0a0b0c0d0e0f'

    # get the raw 16 bytes of the UUID
    >>> x.bytes
    '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t\\n\\x0b\\x0c\\r\\x0e\\x0f'

    # make a UUID from a 16-byte string
    >>> uuid.UUID(bytes=x.bytes)
    UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')
\"\"\"" code nil nil [1 1584])
            ("__author__" variable nil nil [1586 1628])
            ("RESERVED_NCS, RFC_4122, RESERVED_MICROSOFT, RESERVED_FUTURE" code nil nil [1630 1834])
            ("UUID" type
               (:documentation "Instances of the UUID class represent UUIDs as specified in RFC 4122.
    UUID objects are immutable, hashable, and usable as dictionary keys.
    Converting a UUID to a string with str() yields something in the form
    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts
    five possible forms: a similar string of hexadecimal digits, or a tuple
    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and
    48-bit values respectively) as an argument named 'fields', or a string
    of 16 bytes (with all the integer fields in big-endian order) as an
    argument named 'bytes', or a string of 16 bytes (with the first three
    fields in little-endian order) as an argument named 'bytes_le', or a
    single 128-bit integer as an argument named 'int'.

    UUIDs have these read-only attributes:

        bytes       the UUID as a 16-byte string (containing the six
                    integer fields in big-endian byte order)

        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,
                    and time_hi_version in little-endian byte order)

        fields      a tuple of the six integer fields of the UUID,
                    which are also available as six individual attributes
                    and two derived attributes:

            time_low                the first 32 bits of the UUID
            time_mid                the next 16 bits of the UUID
            time_hi_version         the next 16 bits of the UUID
            clock_seq_hi_variant    the next 8 bits of the UUID
            clock_seq_low           the next 8 bits of the UUID
            node                    the last 48 bits of the UUID

            time                    the 60-bit timestamp
            clock_seq               the 14-bit sequence number

        hex         the UUID as a 32-character hexadecimal string

        int         the UUID as a 128-bit integer

        urn         the UUID as a URN as specified in RFC 4122

        variant     the UUID variant (one of the constants RESERVED_NCS,
                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)

        version     the UUID version number (1 through 5, meaningful only
                    when the variant is RFC_4122)
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("r\"\"\"Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:

        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\\x12\\x34\\x56\\x78'*4)
        UUID(bytes_le='\\x78\\x56\\x34\\x12\\x34\\x12\\x78\\x56' +
                      '\\x12\\x34\\x56\\x78\\x12\\x34\\x56\\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)

        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        \"\"\"" code nil (reparse-symbol indented_block_body) [4263 5659])
                            ("if" code nil (reparse-symbol indented_block_body) [5669 5806])
                            ("if" code nil (reparse-symbol indented_block_body) [5814 6084])
                            ("if" code nil (reparse-symbol indented_block_body) [6092 6411])
                            ("if" code nil (reparse-symbol indented_block_body) [6419 6605])
                            ("if" code nil (reparse-symbol indented_block_body) [6613 7795])
                            ("if" code nil (reparse-symbol indented_block_body) [7803 7941])
                            ("if" code nil (reparse-symbol indented_block_body) [7949 8290])
                            ("self" variable nil (reparse-symbol indented_block_body) [8298 8324]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4151 4155])
                            ("hex" variable nil (reparse-symbol function_parameters) [4157 4160])
                            ("bytes" variable nil (reparse-symbol function_parameters) [4167 4172])
                            ("bytes_le" variable nil (reparse-symbol function_parameters) [4179 4187])
                            ("fields" variable nil (reparse-symbol function_parameters) [4194 4200])
                            ("int" variable nil (reparse-symbol function_parameters) [4230 4233])
                            ("version" variable nil (reparse-symbol function_parameters) [4240 4247]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4138 8325])
                    ("__cmp__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8342 8346])
                            ("other" variable nil (reparse-symbol function_parameters) [8348 8353]))                          )
                        (reparse-symbol indented_block_body) [8330 8466])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8484 8488]))                          )
                        (reparse-symbol indented_block_body) [8471 8521])
                    ("__int__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8538 8542]))                          )
                        (reparse-symbol indented_block_body) [8526 8569])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8587 8591]))                          )
                        (reparse-symbol indented_block_body) [8574 8632])
                    ("__setattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8653 8657])
                            ("name" variable nil (reparse-symbol function_parameters) [8659 8663])
                            ("value" variable nil (reparse-symbol function_parameters) [8665 8670]))                          )
                        (reparse-symbol indented_block_body) [8637 8727])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8744 8748]))                          )
                        (reparse-symbol indented_block_body) [8732 8886])
                    ("get_bytes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8905 8909]))                          )
                        (reparse-symbol indented_block_body) [8891 9051])
                    ("bytes" variable nil (reparse-symbol indented_block_body) [9056 9083])
                    ("get_bytes_le" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9106 9110]))                          )
                        (reparse-symbol indented_block_body) [9089 9271])
                    ("bytes_le" variable nil (reparse-symbol indented_block_body) [9276 9309])
                    ("get_fields" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9330 9334]))                          )
                        (reparse-symbol indented_block_body) [9315 9479])
                    ("fields" variable nil (reparse-symbol indented_block_body) [9484 9513])
                    ("get_time_low" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9536 9540]))                          )
                        (reparse-symbol indented_block_body) [9519 9574])
                    ("time_low" variable nil (reparse-symbol indented_block_body) [9579 9612])
                    ("get_time_mid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9635 9639]))                          )
                        (reparse-symbol indented_block_body) [9618 9684])
                    ("time_mid" variable nil (reparse-symbol indented_block_body) [9689 9722])
                    ("get_time_hi_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9752 9756]))                          )
                        (reparse-symbol indented_block_body) [9728 9801])
                    ("time_hi_version" variable nil (reparse-symbol indented_block_body) [9806 9853])
                    ("get_clock_seq_hi_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9888 9892]))                          )
                        (reparse-symbol indented_block_body) [9859 9935])
                    ("clock_seq_hi_variant" variable nil (reparse-symbol indented_block_body) [9940 9997])
                    ("get_clock_seq_low" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10025 10029]))                          )
                        (reparse-symbol indented_block_body) [10003 10072])
                    ("clock_seq_low" variable nil (reparse-symbol indented_block_body) [10077 10120])
                    ("get_time" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10139 10143]))                          )
                        (reparse-symbol indented_block_body) [10126 10262])
                    ("time" variable nil (reparse-symbol indented_block_body) [10267 10292])
                    ("get_clock_seq" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10316 10320]))                          )
                        (reparse-symbol indented_block_body) [10298 10421])
                    ("clock_seq" variable nil (reparse-symbol indented_block_body) [10426 10461])
                    ("get_node" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10480 10484]))                          )
                        (reparse-symbol indented_block_body) [10467 10528])
                    ("node" variable nil (reparse-symbol indented_block_body) [10533 10558])
                    ("get_hex" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10576 10580]))                          )
                        (reparse-symbol indented_block_body) [10564 10617])
                    ("hex" variable nil (reparse-symbol indented_block_body) [10622 10645])
                    ("get_urn" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10663 10667]))                          )
                        (reparse-symbol indented_block_body) [10651 10709])
                    ("urn" variable nil (reparse-symbol indented_block_body) [10714 10737])
                    ("get_variant" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10759 10763]))                          )
                        (reparse-symbol indented_block_body) [10743 11046])
                    ("variant" variable nil (reparse-symbol indented_block_body) [11051 11082])
                    ("get_version" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11104 11108]))                          )
                        (reparse-symbol indented_block_body) [11088 11263])
                    ("version" variable nil (reparse-symbol indented_block_body) [11268 11299]))                  
                :type "class")
                nil [1836 11300])
            ("_find_mac" function (:arguments 
              ( ("command" variable nil (reparse-symbol function_parameters) [11315 11322])
                ("args" variable nil (reparse-symbol function_parameters) [11324 11328])
                ("hw_identifiers" variable nil (reparse-symbol function_parameters) [11330 11344])
                ("get_index" variable nil (reparse-symbol function_parameters) [11346 11355]))              ) nil [11301 12109])
            ("_ifconfig_getnode" function (:documentation "Get the hardware address on Unix by running ifconfig.") nil [12110 12811])
            ("_ipconfig_getnode" function (:documentation "Get the hardware address on Windows by running ipconfig.exe.") nil [12812 13641])
            ("_netbios_getnode" function (:documentation "Get the hardware address on Windows using NetBIOS calls.
    See http://support.microsoft.com/kb/118623 for details.") nil [13642 14688])
            ("_uuid_generate_random" variable nil nil [14841 14905])
            ("try" code nil nil [14906 16749])
            ("_unixdll_getnode" function (:documentation "Get the hardware address on Unix using ctypes.") nil [16750 16950])
            ("_windll_getnode" function (:documentation "Get the hardware address on Windows using ctypes.") nil [16951 17158])
            ("_random_getnode" function (:documentation "Get a random node ID, with eighth bit set as suggested by RFC 4122.") nil [17159 17335])
            ("_node" variable nil nil [17336 17348])
            ("getnode" function (:documentation "Get the hardware address as a 48-bit positive integer.

    The first time this runs, it may launch a separate program, which could
    be quite slow.  If all attempts to obtain the hardware address fail, we
    choose a random 48-bit number with its eighth bit set to 1 as recommended
    in RFC 4122.
    ") nil [17350 18117])
            ("_last_timestamp" variable nil nil [18118 18140])
            ("uuid1" function
               (:documentation "Generate a UUID from a host ID, sequence number, and the current time.
    If 'node' is not given, getnode() is used to obtain the hardware
    address.  If 'clock_seq' is given, it is used as the sequence number;
    otherwise a random 14-bit sequence number is chosen."
                :arguments 
                  ( ("node" variable nil (reparse-symbol function_parameters) [18152 18156])
                    ("clock_seq" variable nil (reparse-symbol function_parameters) [18163 18172]))                  )
                nil [18142 19761])
            ("uuid3" function
               (:documentation "Generate a UUID from the MD5 hash of a namespace UUID and a name."
                :arguments 
                  ( ("namespace" variable nil (reparse-symbol function_parameters) [19772 19781])
                    ("name" variable nil (reparse-symbol function_parameters) [19783 19787]))                  )
                nil [19762 19986])
            ("uuid4" function (:documentation "Generate a random UUID.") nil [19987 20552])
            ("uuid5" function
               (:documentation "Generate a UUID from the SHA-1 hash of a namespace UUID and a name."
                :arguments 
                  ( ("namespace" variable nil (reparse-symbol function_parameters) [20563 20572])
                    ("name" variable nil (reparse-symbol function_parameters) [20574 20578]))                  )
                nil [20553 20781])
            ("NAMESPACE_DNS" variable nil nil [20851 20911])
            ("NAMESPACE_URL" variable nil nil [20912 20972])
            ("NAMESPACE_OID" variable nil nil [20973 21033])
            ("NAMESPACE_X500" variable nil nil [21034 21095]))          
      :file "uuid.py"
      :pointmax 21096
      :fsize 21828
      :lastmodtime '(21600 29985 0 0)
      :unmatched-syntax '((INDENT_BLOCK 13616 . 13641) (NEWLINE 13615 . 13616) (COLON 13614 . 13615) (FINALLY 13607 . 13614)))
    (semanticdb-table "hashlib.py"
      :major-mode 'python-mode
      :tags 
        '( ("__doc__" variable nil nil [122 2946])
            ("__always_supported" variable nil nil [3058 3134])
            ("algorithms" variable nil nil [3136 3167])
            ("__all__" code nil nil [3169 3221])
            ("__get_openssl_constructor" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [3254 3258]))              ) nil [3224 3828])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.
    Override 'usedforsecurity' to False when using for non-security purposes in
    a FIPS environment
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3844 3848])
                    ("string" variable nil (reparse-symbol function_parameters) [3850 3856])
                    ("usedforsecurity" variable nil (reparse-symbol function_parameters) [3861 3876]))                  )
                nil [3829 4227])
            ("try" code nil nil [4228 4387])
            ("for" code nil nil [4388 4715])
            ("del" code nil nil [4735 4782])
            ("del" code nil nil [4783 4824]))          
      :file "hashlib.py"
      :pointmax 4825
      :fsize 7231
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "base64.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [25 78])
            ("re" include nil nil [210 219])
            ("struct" include nil nil [220 233])
            ("binascii" include nil nil [234 249])
            ("__all__" variable nil nil [252 826])
            ("_translation" variable nil nil [828 873])
            ("EMPTYSTRING" variable nil nil [874 890])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [908 909])
                ("altchars" variable nil (reparse-symbol function_parameters) [911 919]))              ) nil [893 1067])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1127 1128])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1130 1138]))                  )
                nil [1113 1721])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1737 1738])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1740 1748]))                  )
                nil [1723 2433])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2458 2459]))                  )
                nil [2435 2618])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2642 2643]))                  )
                nil [2619 2939])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2962 2963]))                  )
                nil [2940 3192])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3215 3216]))                  )
                nil [3193 3584])
            ("_b32alphabet" variable nil nil [3638 3975])
            ("_b32tab" variable nil nil [3977 4007])
            ("_b32tab" code nil nil [4008 4022])
            ("_b32tab" variable nil nil [4023 4056])
            ("_b32rev" variable nil nil [4057 4120])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4137 4138]))                  )
                nil [4123 5900])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5916 5917])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5919 5927])
                    ("map01" variable nil (reparse-symbol function_parameters) [5935 5940]))                  )
                nil [5902 8386])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8560 8561]))                  )
                nil [8546 8713])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8729 8730])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8732 8740]))                  )
                nil [8715 9291])
            ("MAXLINESIZE" variable nil nil [9454 9470])
            ("MAXBINSIZE" code nil nil [9492 9523])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9536 9541])
                    ("output" variable nil (reparse-symbol function_parameters) [9543 9549]))                  )
                nil [9525 9876])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9889 9894])
                    ("output" variable nil (reparse-symbol function_parameters) [9896 9902]))                  )
                nil [9878 10079])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10098 10099]))                  )
                nil [10081 10339])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10358 10359]))                  )
                nil [10341 10423])
            ("test" function (:documentation "Small test program") nil [10452 11193])
            ("test1" function nil nil [11195 11318])
            ("if" code nil nil [11320 11358]))          
      :file "base64.py"
      :pointmax 11358
      :fsize 11357
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "re.py"
      :file "re.py"
      :fsize 13070
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "struct.py"
      :file "struct.py"
      :fsize 82
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "glob.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Filename globbing utility.\"\"\"" code nil nil [1 33])
            ("sys" include nil nil [35 45])
            ("os" include nil nil [46 55])
            ("re" include nil nil [56 65])
            ("fnmatch" include nil nil [66 80])
            ("try" code nil nil [82 268])
            ("__all__" variable nil nil [269 296])
            ("glob" function
               (:documentation "Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [307 315]))                  )
                nil [298 622])
            ("iglob" function
               (:documentation "Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    "
                :arguments 
                  ( ("pathname" variable nil (reparse-symbol function_parameters) [633 641]))                  )
                nil [623 1738])
            ("glob1" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [1973 1980])
                ("pattern" variable nil (reparse-symbol function_parameters) [1982 1989]))              ) nil [1963 2447])
            ("glob0" function (:arguments 
              ( ("dirname" variable nil (reparse-symbol function_parameters) [2458 2465])
                ("basename" variable nil (reparse-symbol function_parameters) [2467 2475]))              ) nil [2448 2829])
            ("magic_check" variable nil nil [2831 2864])
            ("has_magic" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [2880 2881]))              ) nil [2866 2929]))          
      :file "glob.py"
      :pointmax 2929
      :fsize 2928
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "fnmatch.py"
      :file "fnmatch.py"
      :fsize 3239
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "atexit.py"
      :file "atexit.py"
      :fsize 1705
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "gettext.py"
      :file "gettext.py"
      :fsize 19937
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "textwrap.py"
      :file "textwrap.py"
      :fsize 17037
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "weakref.py"
      :file "weakref.py"
      :fsize 12961
      :lastmodtime '(21600 29985 0 0))
    (semanticdb-table "_weakrefset.py"
      :major-mode 'python-mode
      :tags 
        '( ("_weakref" include nil nil [145 169])
            ("__all__" variable nil nil [171 192])
            ("_IterationGuard" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [543 582]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [483 487])
                            ("weakcontainer" variable nil (reparse-symbol function_parameters) [489 502]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [470 583])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [602 606]))                          )
                        (reparse-symbol indented_block_body) [588 723])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [741 745])
                            ("e" variable nil (reparse-symbol function_parameters) [747 748])
                            ("t" variable nil (reparse-symbol function_parameters) [750 751])
                            ("b" variable nil (reparse-symbol function_parameters) [753 754]))                          )
                        (reparse-symbol indented_block_body) [728 931]))                  
                :type "class")
                nil [195 931])
            ("WeakSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [999 1016])
                            ("_remove" function (:arguments 
                              ( ("item" variable nil (reparse-symbol function_parameters) [1037 1041])
                                ("selfref" variable nil (reparse-symbol function_parameters) [1043 1050]))                              ) (reparse-symbol indented_block_body) [1025 1283])
                            ("self" variable nil (reparse-symbol indented_block_body) [1291 1313])
                            ("self" variable nil (reparse-symbol indented_block_body) [1361 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1397 1420])
                            ("if" code nil (reparse-symbol indented_block_body) [1429 1480]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [973 977])
                            ("data" variable nil (reparse-symbol function_parameters) [979 983]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [960 1480])
                    ("_commit_removals" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1506 1510]))                          )
                        (reparse-symbol indented_block_body) [1485 1630])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1648 1652]))                          )
                        (reparse-symbol indented_block_body) [1635 1830])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1847 1851]))                          )
                        (reparse-symbol indented_block_body) [1835 1914])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1936 1940])
                            ("item" variable nil (reparse-symbol function_parameters) [1942 1946]))                          )
                        (reparse-symbol indented_block_body) [1919 2071])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2091 2095]))                          )
                        (reparse-symbol indented_block_body) [2076 2194])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [2199 2214])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2228 2232])
                            ("item" variable nil (reparse-symbol function_parameters) [2234 2238]))                          )
                        (reparse-symbol indented_block_body) [2220 2359])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2374 2378]))                          )
                        (reparse-symbol indented_block_body) [2364 2478])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2492 2496]))                          )
                        (reparse-symbol indented_block_body) [2483 2535])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2548 2552]))                          )
                        (reparse-symbol indented_block_body) [2540 2881])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2897 2901])
                            ("item" variable nil (reparse-symbol function_parameters) [2903 2907]))                          )
                        (reparse-symbol indented_block_body) [2886 3017])
                    ("discard" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3034 3038])
                            ("item" variable nil (reparse-symbol function_parameters) [3040 3044]))                          )
                        (reparse-symbol indented_block_body) [3022 3155])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3171 3175])
                            ("other" variable nil (reparse-symbol function_parameters) [3177 3182]))                          )
                        (reparse-symbol indented_block_body) [3160 3316])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3333 3337])
                            ("other" variable nil (reparse-symbol function_parameters) [3339 3344]))                          )
                        (reparse-symbol indented_block_body) [3321 3394])
                    ("difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3414 3418])
                            ("other" variable nil (reparse-symbol function_parameters) [3420 3425]))                          )
                        (reparse-symbol indented_block_body) [3399 3519])
                    ("__sub__" variable nil (reparse-symbol indented_block_body) [3523 3543])
                    ("difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3571 3575])
                            ("other" variable nil (reparse-symbol function_parameters) [3577 3582]))                          )
                        (reparse-symbol indented_block_body) [3549 3614])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3631 3635])
                            ("other" variable nil (reparse-symbol function_parameters) [3637 3642]))                          )
                        (reparse-symbol indented_block_body) [3618 3875])
                    ("intersection" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3897 3901])
                            ("other" variable nil (reparse-symbol function_parameters) [3903 3908]))                          )
                        (reparse-symbol indented_block_body) [3880 3981])
                    ("__and__" variable nil (reparse-symbol indented_block_body) [3985 4007])
                    ("intersection_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4037 4041])
                            ("other" variable nil (reparse-symbol function_parameters) [4043 4048]))                          )
                        (reparse-symbol indented_block_body) [4013 4080])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4097 4101])
                            ("other" variable nil (reparse-symbol function_parameters) [4103 4108]))                          )
                        (reparse-symbol indented_block_body) [4084 4269])
                    ("issubset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4287 4291])
                            ("other" variable nil (reparse-symbol function_parameters) [4293 4298]))                          )
                        (reparse-symbol indented_block_body) [4274 4364])
                    ("__le__" variable nil (reparse-symbol indented_block_body) [4368 4385])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4402 4406])
                            ("other" variable nil (reparse-symbol function_parameters) [4408 4413]))                          )
                        (reparse-symbol indented_block_body) [4391 4476])
                    ("issuperset" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4496 4500])
                            ("other" variable nil (reparse-symbol function_parameters) [4502 4507]))                          )
                        (reparse-symbol indented_block_body) [4481 4575])
                    ("__ge__" variable nil (reparse-symbol indented_block_body) [4579 4598])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4615 4619])
                            ("other" variable nil (reparse-symbol function_parameters) [4621 4626]))                          )
                        (reparse-symbol indented_block_body) [4604 4689])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4705 4709])
                            ("other" variable nil (reparse-symbol function_parameters) [4711 4716]))                          )
                        (reparse-symbol indented_block_body) [4694 4864])
                    ("symmetric_difference" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4894 4898])
                            ("other" variable nil (reparse-symbol function_parameters) [4900 4905]))                          )
                        (reparse-symbol indented_block_body) [4869 5009])
                    ("__xor__" variable nil (reparse-symbol indented_block_body) [5013 5043])
                    ("symmetric_difference_update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5081 5085])
                            ("other" variable nil (reparse-symbol function_parameters) [5087 5092]))                          )
                        (reparse-symbol indented_block_body) [5049 5124])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5141 5145])
                            ("other" variable nil (reparse-symbol function_parameters) [5147 5152]))                          )
                        (reparse-symbol indented_block_body) [5128 5409])
                    ("union" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5424 5428])
                            ("other" variable nil (reparse-symbol function_parameters) [5430 5435]))                          )
                        (reparse-symbol indented_block_body) [5414 5505])
                    ("__or__" variable nil (reparse-symbol indented_block_body) [5509 5523])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5544 5548])
                            ("other" variable nil (reparse-symbol function_parameters) [5550 5555]))                          )
                        (reparse-symbol indented_block_body) [5529 5608]))                  
                :type "class")
                nil [933 5608]))          
      :file "_weakrefset.py"
      :pointmax 5608
      :fsize 5911
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "getpass.py"
      :major-mode 'python-mode
      :tags nil
      :file "getpass.py"
      :pointmax 5564
      :fsize 5563
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "copy.py"
      :file "copy.py"
      :fsize 11519
      :lastmodtime '(21600 29984 0 0))
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("hashlib" include nil nil [1490 1516])
            ("__all__" variable nil nil [1518 1902])
            ("NV_MAGICCONST" code nil nil [1904 1945])
            ("TWOPI" code nil nil [1946 1961])
            ("LOG4" variable nil nil [1962 1978])
            ("SG_MAGICCONST" code nil nil [1979 2010])
            ("BPF" variable nil nil [2011 2019])
            ("RECIP_BPF" variable nil nil [2055 2074])
            ("_random" include nil nil [2257 2271])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3037 3048])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3122 3229])
                            ("self" code nil (reparse-symbol indented_block_body) [3239 3251])
                            ("self" variable nil (reparse-symbol indented_block_body) [3260 3282]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3099 3103])
                            ("x" variable nil (reparse-symbol function_parameters) [3105 3106]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3086 3283])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3297 3301])
                            ("a" variable nil (reparse-symbol function_parameters) [3303 3304]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3288 4001])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4019 4023]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [4006 4175])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4193 4197])
                            ("state" variable nil (reparse-symbol function_parameters) [4199 4204]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4180 5242])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5261 5265])
                            ("n" variable nil (reparse-symbol function_parameters) [5267 5268]))                          
                        :documentation "Change the internal state to one that is likely far away
        from the current state.  This method will not be in Py3.x,
        so it is better to simply reseed.
        ")
                        (reparse-symbol indented_block_body) [5247 5808])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6032 6036]))                          )
                        (reparse-symbol indented_block_body) [6015 6083])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6105 6109])
                            ("state" variable nil (reparse-symbol function_parameters) [6111 6116]))                          )
                        (reparse-symbol indented_block_body) [6088 6162])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6182 6186]))                          )
                        (reparse-symbol indented_block_body) [6167 6240])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6321 6325])
                            ("start" variable nil (reparse-symbol function_parameters) [6327 6332])
                            ("stop" variable nil (reparse-symbol function_parameters) [6334 6338])
                            ("step" variable nil (reparse-symbol function_parameters) [6345 6349])
                            ("_int" variable nil (reparse-symbol function_parameters) [6353 6357])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [6363 6372]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        ")
                        (reparse-symbol indented_block_body) [6307 8894])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8911 8915])
                            ("a" variable nil (reparse-symbol function_parameters) [8917 8918])
                            ("b" variable nil (reparse-symbol function_parameters) [8920 8921]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8899 9052])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9072 9076])
                            ("n" variable nil (reparse-symbol function_parameters) [9078 9079])
                            ("_log" variable nil (reparse-symbol function_parameters) [9081 9085])
                            ("_int" variable nil (reparse-symbol function_parameters) [9092 9096])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [9102 9111])
                            ("_Method" variable nil (reparse-symbol function_parameters) [9140 9147])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [9161 9175]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [9057 10214])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10293 10297])
                            ("seq" variable nil (reparse-symbol function_parameters) [10299 10302]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [10282 10457])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10474 10478])
                            ("x" variable nil (reparse-symbol function_parameters) [10480 10481])
                            ("random" variable nil (reparse-symbol function_parameters) [10483 10489]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.

        ")
                        (reparse-symbol indented_block_body) [10462 10998])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11014 11018])
                            ("population" variable nil (reparse-symbol function_parameters) [11020 11030])
                            ("k" variable nil (reparse-symbol function_parameters) [11032 11033]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [11003 13833])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13988 13992])
                            ("a" variable nil (reparse-symbol function_parameters) [13994 13995])
                            ("b" variable nil (reparse-symbol function_parameters) [13997 13998]))                          )
                        (reparse-symbol indented_block_body) [13976 14125])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14202 14206])
                            ("low" variable nil (reparse-symbol function_parameters) [14208 14211])
                            ("high" variable nil (reparse-symbol function_parameters) [14217 14221])
                            ("mode" variable nil (reparse-symbol function_parameters) [14227 14231]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14187 14790])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14879 14883])
                            ("mu" variable nil (reparse-symbol function_parameters) [14885 14887])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14889 14894]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14861 15554])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15647 15651])
                            ("mu" variable nil (reparse-symbol function_parameters) [15653 15655])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15657 15662]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15628 15982])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16074 16078])
                            ("lambd" variable nil (reparse-symbol function_parameters) [16080 16085]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [16058 16699])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16793 16797])
                            ("mu" variable nil (reparse-symbol function_parameters) [16799 16801])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16803 16808]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16773 18163])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18250 18254])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18256 18261])
                            ("beta" variable nil (reparse-symbol function_parameters) [18263 18267]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        ")
                        (reparse-symbol indented_block_body) [18233 20457])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20545 20549])
                            ("mu" variable nil (reparse-symbol function_parameters) [20551 20553])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20555 20560]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20535 21871])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22367 22371])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22373 22378])
                            ("beta" variable nil (reparse-symbol function_parameters) [22380 22384]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [22351 22842])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22918 22922])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22924 22929]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22900 23094])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23172 23176])
                            ("alpha" variable nil (reparse-symbol function_parameters) [23178 23183])
                            ("beta" variable nil (reparse-symbol function_parameters) [23185 23189]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [23153 23441]))                  
                :type "class")
                nil [2273 23441])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23534 23545])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23592 23596])
                            ("a" variable nil (reparse-symbol function_parameters) [23598 23599]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23583 24607])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24623 24627]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24612 25679])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25697 25701]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25684 25833])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25851 25855])
                            ("state" variable nil (reparse-symbol function_parameters) [25857 25862]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25838 26244])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26263 26267])
                            ("n" variable nil (reparse-symbol function_parameters) [26269 26270]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [26249 27012])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27030 27034])
                            ("x" variable nil (reparse-symbol function_parameters) [27036 27037])
                            ("y" variable nil (reparse-symbol function_parameters) [27041 27042])
                            ("z" variable nil (reparse-symbol function_parameters) [27046 27047]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [27017 27816])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27832 27836])
                            ("a" variable nil (reparse-symbol function_parameters) [27838 27839]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27821 28520]))                  
                :type "class")
                nil [23501 28520])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28868 28872]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28857 29007])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29028 29032])
                            ("k" variable nil (reparse-symbol function_parameters) [29034 29035]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [29012 29487])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29502 29506])
                            ("args" variable nil (reparse-symbol function_parameters) [29508 29513])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29515 29521]))                          )
                        (reparse-symbol indented_block_body) [29492 29615])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29619 29643])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29669 29673])
                            ("args" variable nil (reparse-symbol function_parameters) [29675 29680])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29682 29688]))                          )
                        (reparse-symbol indented_block_body) [29649 29847])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29851 29888]))                  
                :type "class")
                nil [28592 29889])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29969 29970])
                ("func" variable nil (reparse-symbol function_parameters) [29972 29976])
                ("args" variable nil (reparse-symbol function_parameters) [29978 29982]))              ) nil [29949 30503])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30515 30516]))              ) nil [30505 31303])
            ("_inst" variable nil nil [31635 31651])
            ("seed" variable nil nil [31652 31669])
            ("random" variable nil nil [31670 31691])
            ("uniform" variable nil nil [31692 31715])
            ("triangular" variable nil nil [31716 31745])
            ("randint" variable nil nil [31746 31769])
            ("choice" variable nil nil [31770 31791])
            ("randrange" variable nil nil [31792 31819])
            ("sample" variable nil nil [31820 31841])
            ("shuffle" variable nil nil [31842 31865])
            ("normalvariate" variable nil nil [31866 31901])
            ("lognormvariate" variable nil nil [31902 31939])
            ("expovariate" variable nil nil [31940 31971])
            ("vonmisesvariate" variable nil nil [31972 32011])
            ("gammavariate" variable nil nil [32012 32045])
            ("gauss" variable nil nil [32046 32065])
            ("betavariate" variable nil nil [32066 32097])
            ("paretovariate" variable nil nil [32098 32133])
            ("weibullvariate" variable nil nil [32134 32171])
            ("getstate" variable nil nil [32172 32197])
            ("setstate" variable nil nil [32198 32223])
            ("jumpahead" variable nil nil [32224 32251])
            ("getrandbits" variable nil nil [32252 32283])
            ("if" code nil nil [32285 32324]))          
      :file "random.py"
      :pointmax 32324
      :fsize 32323
      :lastmodtime '(21600 29984 0 0)
      :unmatched-syntax '((NAME 14525 . 14526) (IF 14533 . 14535) (ELSE 14549 . 14553) (NAME 14525 . 14526) (IF 14533 . 14535) (ELSE 14549 . 14553))))
  :file "!usr!lib!python2.7!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
