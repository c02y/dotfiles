;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11075])
            ("ignore-errors" function (:arguments ("body")) nil [11077 11384])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11415 11563])
            ("error" function (:arguments ("args")) nil [11620 12006])
            ("user-error" function (:arguments ("format" "args")) nil [12008 12534])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12536 13448])
            ("frame-configuration-p" function (:arguments ("object")) nil [13562 13817])
            ("caar" function (:arguments ("x")) nil [13842 13913])
            ("cadr" function (:arguments ("x")) nil [13915 13986])
            ("cdar" function (:arguments ("x")) nil [13988 14059])
            ("cddr" function (:arguments ("x")) nil [14061 14132])
            ("last" function (:arguments ("list" "n")) nil [14134 14551])
            ("butlast" function (:arguments ("list" "n")) nil [14553 14781])
            ("nbutlast" function (:arguments ("list" "n")) nil [14783 15060])
            ("delete-dups" function (:arguments ("list")) nil [15062 15415])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15492 15960])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [15962 17779])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [17781 18530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18570 19370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19372 19694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19696 19964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [19966 20401])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20403 20887])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [20889 21382])
            ("remove" function (:arguments ("elt" "seq")) nil [21384 21737])
            ("remq" function (:arguments ("elt" "list")) nil [21739 22070])
            ("kbd" function (:arguments ("keys")) nil [22095 22405])
            ("put" code nil nil [22406 22424])
            ("undefined" function (:user-visible-flag t) nil [22426 22881])
            ("put" code nil nil [22976 23011])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23013 23577])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [23579 24231])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24233 26294])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26296 26976])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [26978 27448])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [27502 28102])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28104 28570])
            ("keymap-canonicalize" function (:arguments ("map")) nil [28572 30441])
            ("put" code nil nil [30443 30500])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [30502 30877])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30908 31654])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31656 32460])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32462 32658])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32660 32889])
            ("key-substitution-in-progress" variable nil nil [32945 33038])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33040 34424])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [34426 36091])
            ("global-map" variable nil nil [36240 36414])
            ("esc-map" variable nil nil [36416 36556])
            ("ctl-x-map" variable nil nil [36558 36693])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [36695 36773])
            ("defalias" code nil nil [36774 36812])
            ("define-key" code nil nil [36813 36855])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [36857 36929])
            ("defalias" code nil nil [36930 36968])
            ("define-key" code nil nil [36969 37011])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37051 37106])
            ("listify-key-sequence" function (:arguments ("key")) nil [37108 37346])
            ("eventp" function (:arguments ("obj")) nil [37348 37549])
            ("event-modifiers" function (:arguments ("event")) nil [37551 38845])
            ("event-basic-type" function (:arguments ("event")) nil [38847 39615])
            ("mouse-movement-p" function (:arguments ("object")) nil [39617 39750])
            ("mouse-event-p" function (:arguments ("object")) nil [39752 39970])
            ("event-start" function (:arguments ("event")) nil [39972 41132])
            ("event-end" function (:arguments ("event")) nil [41134 41452])
            ("event-click-count" function (:arguments ("event")) nil [41454 41664])
            ("posnp" function (:arguments ("obj")) nil [41721 42021])
            ("posn-window" function (:arguments ("position")) nil [42055 42237])
            ("posn-area" function (:arguments ("position")) nil [42239 42563])
            ("posn-point" function (:arguments ("position")) nil [42565 43031])
            ("posn-set-point" function (:arguments ("position")) nil [43033 43353])
            ("posn-x-y" function (:arguments ("position")) nil [43355 43608])
            ("declare-function" code nil nil [43610 43676])
            ("posn-col-row" function (:arguments ("position")) nil [43678 45154])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45156 45746])
            ("posn-timestamp" function (:arguments ("position")) nil [45748 45936])
            ("posn-string" function (:arguments ("position")) nil [45938 46297])
            ("posn-image" function (:arguments ("position")) nil [46299 46539])
            ("posn-object" function (:arguments ("position")) nil [46541 46910])
            ("posn-object-x-y" function (:arguments ("position")) nil [46912 47199])
            ("posn-object-width-height" function (:arguments ("position")) nil [47201 47461])
            ("define-obsolete-function-alias" code nil nil [47504 47569])
            ("define-obsolete-function-alias" code nil nil [47570 47643])
            ("define-obsolete-function-alias" code nil nil [47644 47708])
            ("define-obsolete-function-alias" code nil nil [47709 47780])
            ("define-obsolete-function-alias" code nil nil [47781 47854])
            ("define-obsolete-function-alias" code nil nil [47855 47927])
            ("make-obsolete" code nil nil [47929 47995])
            ("make-obsolete" code nil nil [47996 48045])
            ("insert-string" function (:arguments ("args")) nil [48047 48365])
            ("makehash" function (:arguments ("test")) nil [48367 48487])
            ("log10" function (:arguments ("x")) nil [48489 48598])
            ("defalias" code nil nil [48646 48680])
            ("make-obsolete" code nil nil [48681 48735])
            ("defalias" code nil nil [48736 48772])
            ("make-obsolete" code nil nil [48773 48829])
            ("make-obsolete" code nil nil [48830 48937])
            ("set-advertised-calling-convention" code nil nil [48938 49039])
            ("set-advertised-calling-convention" code nil nil [49040 49108])
            ("set-advertised-calling-convention" code nil nil [49109 49194])
            ("set-advertised-calling-convention" code nil nil [49195 49264])
            ("set-advertised-calling-convention" code nil nil [49265 49334])
            ("make-obsolete-variable" code nil nil [49739 49814])
            ("make-obsolete-variable" code nil nil [49815 49894])
            ("make-obsolete-variable" code nil nil [49895 49962])
            ("make-obsolete-variable" code nil nil [49963 50028])
            ("make-obsolete-variable" code nil nil [50029 50090])
            ("make-obsolete-variable" code nil nil [50091 50162])
            ("make-obsolete-variable" code nil nil [50163 50228])
            ("make-obsolete-variable" code nil nil [50229 50290])
            ("make-obsolete-variable" code nil nil [50291 50366])
            ("make-obsolete-variable" code nil nil [50367 50444])
            ("make-obsolete-variable" code nil nil [50445 50524])
            ("make-obsolete-variable" code nil nil [50525 50602])
            ("make-obsolete-variable" code nil nil [50603 50682])
            ("make-obsolete-variable" code nil nil [50683 50772])
            ("make-obsolete-variable" code nil nil [50773 50848])
            ("make-obsolete-variable" code nil nil [50849 50930])
            ("make-obsolete-variable" code nil nil [50931 51014])
            ("make-obsolete-variable" code nil nil [51015 51110])
            ("make-obsolete-variable" code nil nil [51111 51198])
            ("make-obsolete-variable" code nil nil [51199 51280])
            ("make-obsolete-variable" code nil nil [51281 51368])
            ("make-obsolete-variable" code nil nil [51369 51460])
            ("make-obsolete-variable" code nil nil [51461 51526])
            ("make-obsolete-variable" code nil nil [51527 51592])
            ("make-obsolete-variable" code nil nil [51593 51696])
            ("make-obsolete-variable" code nil nil [51697 51790])
            ("make-obsolete-variable" code nil nil [51791 51854])
            ("make-obsolete-variable" code nil nil [51855 51995])
            ("make-obsolete-variable" code nil nil [51997 52061])
            ("make-obsolete-variable" code nil nil [52062 52145])
            ("make-obsolete-variable" code nil nil [52146 52218])
            ("make-obsolete-variable" code nil nil [52219 52295])
            ("make-obsolete" code nil nil [52296 52352])
            ("make-obsolete" code nil nil [52353 52413])
            ("make-obsolete" code nil nil [52415 52469])
            ("make-obsolete" code nil nil [52470 52526])
            ("define-obsolete-variable-alias" code nil nil [52565 52652])
            ("define-obsolete-variable-alias" code nil nil [52654 52747])
            ("define-obsolete-variable-alias" code nil nil [52748 52841])
            ("make-obsolete-variable" code nil nil [53087 53151])
            ("defvaralias" code nil nil [53153 53210])
            ("defalias" code nil nil [53283 53327])
            ("defalias" code nil nil [53328 53372])
            ("defalias" code nil nil [53373 53406])
            ("defalias" code nil nil [53407 53440])
            ("defalias" code nil nil [53441 53476])
            ("defalias" code nil nil [53477 53503])
            ("defalias" code nil nil [53504 53530])
            ("defalias" code nil nil [53531 53553])
            ("defalias" code nil nil [53579 53618])
            ("defalias" code nil nil [53619 53673])
            ("defalias" code nil nil [53674 53744])
            ("defalias" code nil nil [53745 53817])
            ("defalias" code nil nil [53818 53861])
            ("defalias" code nil nil [53862 53906])
            ("defalias" code nil nil [53907 53940])
            ("defalias" code nil nil [53941 53974])
            ("defalias" code nil nil [54006 54049])
            ("defalias" code nil nil [54050 54099])
            ("defalias" code nil nil [54101 54154])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54193 56322])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [56324 57992])
            ("letrec" function (:arguments ("binders" "body")) nil [57994 58623])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [58625 61678])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [61680 65027])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65030 66349])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [66351 67563])
            ("delay-mode-hooks" variable nil nil [67585 67679])
            ("delayed-mode-hooks" variable nil nil [67680 67761])
            ("make-variable-buffer-local" code nil nil [67762 67810])
            ("put" code nil nil [67811 67853])
            ("change-major-mode-after-body-hook" variable nil nil [67855 67969])
            ("after-change-major-mode-hook" variable nil nil [67971 68073])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68075 68958])
            ("delay-mode-hooks" function (:arguments ("body")) nil [68960 69361])
            ("derived-mode-p" function (:arguments ("modes")) nil [69422 69735])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [69926 70119])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70121 72806])
            ("autoloadp" function (:arguments ("object")) nil [72828 72930])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [73414 74621])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [74623 76029])
            ("process-lines" function (:arguments ("program" "args")) nil [76054 76659])
            ("process-live-p" function (:arguments ("process")) nil [76661 76974])
            ("make-obsolete" code nil nil [76994 77119])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77120 77464])
            ("process-kill-buffer-query-function" function nil nil [77466 77885])
            ("add-hook" code nil nil [77887 77962])
            ("process-get" function (:arguments ("process" "propname")) nil [77993 78205])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78207 78446])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [78486 78536])
            ("read-key-delay" variable (:default-value 0.01) nil [78538 78566])
            ("read-key" function (:arguments ("prompt")) nil [78615 81321])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [81323 81660])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [81662 84434])
            ("read-number" function (:arguments ("prompt" "default")) nil [84436 85506])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [85508 87247])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87249 89598])
            ("declare-function" code nil nil [89638 89717])
            ("y-or-n-p" function (:arguments ("prompt")) nil [89719 93197])
            ("atomic-change-group" function (:arguments ("body")) nil [93228 94434])
            ("prepare-change-group" function (:arguments ("buffer")) nil [94436 95912])
            ("activate-change-group" function (:arguments ("handle")) nil [95914 96152])
            ("accept-change-group" function (:arguments ("handle")) nil [96154 96445])
            ("cancel-change-group" function (:arguments ("handle")) nil [96447 97618])
            ("define-obsolete-function-alias" code nil nil [97676 97758])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [97760 99260])
            ("copy-overlay" function (:arguments ("o")) nil [99289 99863])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [99865 100873])
            ("suspend-hook" variable nil nil [100895 100979])
            ("suspend-resume-hook" variable nil nil [100981 101079])
            ("temp-buffer-show-hook" variable nil nil [101081 101297])
            ("temp-buffer-setup-hook" variable nil nil [101299 101530])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [101532 101907])
            ("buffer-narrowed-p" function nil nil [101940 102074])
            ("find-tag-default-bounds" function nil nil [102076 103079])
            ("find-tag-default" function nil nil [103081 103347])
            ("find-tag-default-as-regexp" function nil nil [103349 103784])
            ("find-tag-default-as-symbol-regexp" function nil nil [103786 104345])
            ("play-sound" function (:arguments ("sound")) nil [104347 105166])
            ("declare-function" code nil nil [105168 105224])
            ("shell-quote-argument" function (:arguments ("argument")) nil [105226 107371])
            ("string-or-null-p" function (:arguments ("object")) nil [107373 107510])
            ("booleanp" function (:arguments ("object")) nil [107512 107670])
            ("special-form-p" function (:arguments ("object")) nil [107672 107917])
            ("macrop" function (:arguments ("object")) nil [107919 108151])
            ("field-at-pos" function (:arguments ("pos")) nil [108153 108423])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [108425 108788])
            ("defalias" code nil nil [108790 109143])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109145 109955])
            ("yank-handled-properties" variable nil nil [110062 110094])
            ("yank-excluded-properties" variable nil nil [110095 110128])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110130 110919])
            ("yank-undo-function" variable nil nil [110921 110948])
            ("insert-for-yank" function (:arguments ("string")) nil [110950 111309])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111311 113661])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [113663 114148])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114150 114836])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [114838 115150])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115289 115727])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [115765 116678])
            ("set-advertised-calling-convention" code nil nil [116679 116808])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116810 117229])
            ("set-advertised-calling-convention" code nil nil [117230 117364])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117366 118811])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [118813 119257])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [119312 119700])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [119702 120222])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [120224 120784])
            ("with-selected-window" function (:arguments ("window" "body")) nil [120786 121924])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [121926 122667])
            ("save-window-excursion" function (:arguments ("body")) nil [122669 123488])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [123490 124885])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [124938 127391])
            ("with-temp-file" function (:arguments ("file" "body")) nil [127393 128088])
            ("with-temp-message" function (:arguments ("message" "body")) nil [128090 129017])
            ("with-temp-buffer" function (:arguments ("body")) nil [129019 129578])
            ("with-silent-modifications" function (:arguments ("body")) nil [129580 130778])
            ("with-output-to-string" function (:arguments ("body")) nil [130780 131225])
            ("with-local-quit" function (:arguments ("body")) nil [131227 131982])
            ("while-no-input" function (:arguments ("body")) nil [131984 132484])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [132486 133039])
            ("define-obsolete-function-alias" code nil nil [133041 133136])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133138 134075])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134077 134772])
            ("with-case-table" function (:arguments ("table" "body")) nil [134774 135295])
            ("save-match-data-internal" variable nil nil [135328 135361])
            ("save-match-data" function (:arguments ("body")) nil [135619 136299])
            ("match-string" function (:arguments ("num" "string")) nil [136301 136946])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [136948 137672])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [137675 138324])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [138327 139512])
            ("looking-at-p" function (:arguments ("regexp")) nil [139514 139692])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [139694 139914])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [139916 141826])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [141848 142201])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [142463 145579])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [145581 146142])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [146144 146780])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [146814 147218])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [147220 149799])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [149802 150101])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [150103 150512])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [150514 151297])
            ("load-history-regexp" function (:arguments ("file")) nil [151337 151973])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [151975 152411])
            ("put" code nil nil [152413 152459])
            ("eval-after-load" function (:arguments ("file" "form")) nil [152460 156341])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [156343 156623])
            ("after-load-functions" variable nil nil [156625 156798])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [156800 158339])
            ("eval-next-after-load" function (:arguments ("file")) nil [158341 158641])
            ("display-delayed-warnings" function nil nil [158645 158912])
            ("collapse-delayed-warnings" function nil nil [158914 159593])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [159723 160063])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [160065 160320])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [160349 160692])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [160694 160918])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [160942 161578])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [161580 161900])
            ("syntax-after" function (:arguments ("pos")) nil [161902 162275])
            ("syntax-class" function (:arguments ("syntax")) nil [162277 162629])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [162676 163259])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163274 163823])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163844 164326])
            ("text-clone--maintaining" variable nil nil [164348 164384])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [164386 166452])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [166454 168702])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [168810 170388])
            ("called-interactively-p-functions" variable nil nil [170391 170808])
            ("internal--call-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote call-interactively)))
                nil [170810 170887])
            ("called-interactively-p" function (:arguments ("kind")) nil [170889 174986])
            ("interactive-p" function nil nil [174988 175998])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [176000 176345])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [176347 176655])
            ("define-obsolete-function-alias" code nil nil [176657 176744])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [176746 179049])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [179632 180399])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [180401 182246])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [182248 182747])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [182749 182866])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [182868 184574])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [184576 184731])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [184733 185837])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [185874 186033])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [186036 187531])
            ("version-to-list" function (:arguments ("ver")) nil [187534 189938])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [189941 190772])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [190775 191574])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [191577 192362])
            ("version-list-not-zero" function (:arguments ("lst")) nil [192364 192674])
            ("version<" function (:arguments ("v1" "v2")) nil [192677 193181])
            ("version<=" function (:arguments ("v1" "v2")) nil [193183 193701])
            ("version=" function (:arguments ("v1" "v2")) nil [193703 194197])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [194211 194273])
            ("when" code nil nil [194435 194560])
            ("unmsys--file-name" function (:arguments ("file")) nil [194693 195180]))          
      :file "subr.el.gz"
      :pointmax 195205
      :fsize 58196
      :lastmodtime '(21513 8534 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "simple.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" code nil nil [1032 1094])
            ("declare-function" code nil nil [1095 1135])
            ("compilation-current-error" variable nil nil [1157 1191])
            ("compilation-context-lines" variable nil nil [1192 1226])
            ("idle-update-delay" variable (:default-value 0.5) nil [1228 1525])
            ("killing" customgroup (:user-visible-flag t) nil [1527 1601])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1603 1705])
            ("next-error" customgroup (:user-visible-flag t) nil [1742 1843])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1845 1976])
            ("next-error-highlight" variable (:default-value 0.5) nil [1978 2733])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2735 3428])
            ("next-error-recenter" variable nil nil [3430 3792])
            ("next-error-hook" variable nil nil [3794 3935])
            ("next-error-highlight-timer" variable nil nil [3937 3976])
            ("next-error-overlay-arrow-position" variable nil nil [3978 4024])
            ("put" code nil nil [4025 4103])
            ("add-to-list" code nil nil [4104 4181])
            ("next-error-last-buffer" variable nil nil [4183 4410])
            ("next-error-function" variable nil nil [4412 4870])
            ("make-variable-buffer-local" code nil nil [4871 4920])
            ("next-error-move-function" variable nil nil [4922 5235])
            ("make-variable-buffer-local" code nil nil [5236 5290])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5292 6335])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6337 8619])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8621 10390])
            ("next-error-internal" function nil nil [10392 10813])
            ("defalias" code nil nil [10815 10854])
            ("defalias" code nil nil [10855 10889])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10891 11208])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11210 11478])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11480 11932])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11934 12312])
            ("next-error-follow-last-line" variable nil nil [12383 12423])
            ("define-minor-mode" code nil nil [12425 13133])
            ("next-error-follow-mode-post-command-hook" function nil nil [13249 13582])
            ("fundamental-mode" function (:user-visible-flag t) nil [13591 13800])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13878 14362])
            ("put" code nil nil [14364 14404])
            ("define-derived-mode" code nil nil [14405 14550])
            ("self-insert-uses-region-functions" variable nil nil [14583 14956])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [14958 15091])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15093 17992])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [17994 18342])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18344 19056])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19058 19859])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19861 20574])
            ("defalias" code nil nil [20576 20618])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20637 22064])
            ("delete-trailing-lines" variable (:default-value t) nil [22066 22352])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22354 24160])
            ("newline-and-indent" function (:user-visible-flag t) nil [24162 24595])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24597 25823])
            ("read-quoted-char-radix" variable (:default-value 8) nil [25825 26046])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26048 28588])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28590 30619])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30621 30814])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30816 31015])
            ("back-to-indentation" function (:user-visible-flag t) nil [31017 31307])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31309 31648])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [31650 32088])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32090 32339])
            ("cycle-spacing--context" variable nil nil [32341 32578])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "single-shot"))
                nil [32580 34735])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [34738 35639])
            ("put" code nil nil [35640 35730])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35732 36957])
            ("put" code nil nil [36958 37037])
            ("delete-active-region" variable (:default-value t) nil [37039 37576])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (if (eq delete (quote delete-only)) (delete-region (region-beginning) (region-end)) (filter-buffer-substring (region-beginning) (region-end) delete))))) nil [37578 38121])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [38123 39542])
            ("put" code nil nil [39543 39601])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [39603 40528])
            ("put" code nil nil [40529 40586])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [40588 40992])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [41036 43269])
            ("put" code nil nil [43270 43318])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [43320 44002])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [44004 44788])
            ("count-words--buffer-message" function nil nil [44790 44943])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [44945 45270])
            ("define-obsolete-function-alias" code nil nil [45272 45351])
            ("what-line" function (:user-visible-flag t) nil [45353 45704])
            ("count-lines" function (:arguments ("start" "end")) nil [45706 46543])
            ("line-number-at-pos" function (:arguments ("pos")) nil [46545 47005])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [47007 51344])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [51409 51724])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [51726 52249])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [52251 52708])
            ("minibuffer-completing-symbol" variable nil nil [52710 52813])
            ("make-obsolete-variable" code nil nil [52814 52884])
            ("minibuffer-default" variable nil nil [52886 53079])
            ("eval-expression-print-level" variable (:default-value 4) nil [53081 53311])
            ("eval-expression-print-length" variable (:default-value 12) nil [53313 53546])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [53548 53757])
            ("eval-expression-print-format" function (:arguments ("value")) nil [53759 54403])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [54405 54519])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [54521 54999])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [55129 57403])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [57405 58332])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58334 60381])
            ("repeat-complex-command--called-interactively-skip" function (:arguments ("i" "_frame1" "frame2")) nil [60383 60600])
            ("extended-command-history" variable nil nil [60602 60639])
            ("read-extended-command" function nil nil [60641 62165])
            ("suggest-key-bindings" variable (:default-value t) nil [62167 62533])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [62535 65005])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [65007 67392])
            ("minibuffer-history" variable nil nil [67395 67648])
            ("minibuffer-history-sexp-flag" variable nil nil [67649 67964])
            ("setq" code nil nil [67965 68019])
            ("setq" code nil nil [68020 68058])
            ("minibuffer-history-search-history" variable nil nil [68084 68130])
            ("minibuffer-text-before-history" variable nil nil [68132 68332])
            ("add-hook" code nil nil [68334 68398])
            ("minibuffer-history-initialize" function nil nil [68400 68484])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [68486 68648])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [68650 69040])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69042 71886])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [71888 72942])
            ("minibuffer-temporary-goal-position" variable nil nil [72944 72991])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [72993 73633])
            ("minibuffer-default-add-done" variable nil nil [73635 73958])
            ("make-variable-buffer-local" code nil nil [73960 74017])
            ("minibuffer-default-add-completions" function nil nil [74019 74473])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [74475 76667])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76669 76920])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76922 77180])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77182 77838])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77840 78125])
            ("minibuffer-prompt-width" function nil nil [78184 78473])
            ("add-hook" code nil nil [78506 78573])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [78575 78626])
            ("make-variable-buffer-local" code nil nil [78627 78699])
            ("minibuffer-history-isearch-setup" function nil nil [78701 79341])
            ("minibuffer-history-isearch-end" function nil nil [79343 79573])
            ("minibuffer-history-isearch-search" function nil nil [79575 81480])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [81482 82879])
            ("minibuffer-history-isearch-wrap" function nil nil [82881 83498])
            ("minibuffer-history-isearch-push-state" function nil nil [83500 83831])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [83833 84045])
            ("define-obsolete-function-alias" code nil nil [84123 84185])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [84187 84430])
            ("undo-in-region" variable nil nil [84432 84536])
            ("undo-no-redo" variable nil nil [84538 84613])
            ("pending-undo-list" variable nil nil [84615 84766])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84768 89389])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [89391 89672])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89674 89936])
            ("undo-in-progress" variable nil nil [89938 90069])
            ("undo-more" function (:arguments ("n")) nil [90071 90766])
            ("primitive-undo" function (:arguments ("n" "list")) nil [90768 97168])
            ("undo-copy-list" function (:arguments ("list")) nil [97193 97291])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [97293 97402])
            ("undo-start" function (:arguments ("beg" "end")) nil [97404 97992])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [97994 101571])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [101573 102612])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [102614 103122])
            ("undo-delta" function (:arguments ("undo-elt")) nil [103293 103626])
            ("undo-ask-before-discard" variable nil nil [103628 104394])
            ("undo-extra-outer-limit" variable nil nil [104396 104672])
            ("make-variable-buffer-local" code nil nil [104673 104725])
            ("setq" code nil nil [105010 105069])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [105070 106759])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [106762 108140])
            ("shell-command-history" variable nil nil [108142 108332])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [108334 108448])
            ("shell-command-default-error-buffer" variable nil nil [108450 108765])
            ("declare-function" code nil nil [108767 108833])
            ("declare-function" code nil nil [108834 108920])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [108922 109626])
            ("declare-function" code nil nil [109628 109679])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [109681 109926])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [109928 110557])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [110559 111812])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [111814 113119])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [113121 121083])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [121085 123508])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [123604 123815])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [123817 131073])
            ("shell-command-to-string" function (:arguments ("command")) nil [131075 131335])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [131337 132787])
            ("process-file-side-effects" variable (:default-value t) nil [132789 133215])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [133217 134102])
            ("tabulated-list-format" variable nil nil [134124 134154])
            ("tabulated-list-entries" variable nil nil [134155 134186])
            ("tabulated-list-sort-key" variable nil nil [134187 134219])
            ("declare-function" code nil nil [134220 134286])
            ("declare-function" code nil nil [134287 134386])
            ("process-menu-query-only" variable nil nil [134388 134424])
            ("define-derived-mode" code nil nil [134426 134922])
            ("list-processes--refresh" function nil nil [134924 136552])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [136554 136651])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [136653 137616])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [137619 139235])
            ("universal-argument--mode" function nil nil [139237 139317])
            ("universal-argument" function (:user-visible-flag t) nil [139319 140028])
            ("universal-argument-more" function (:arguments ("arg")) nil [140030 140468])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140470 140810])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140812 141546])
            ("filter-buffer-substring-functions" variable nil nil [141550 141667])
            ("make-obsolete-variable" code nil nil [141668 141792])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [141794 142200])
            ("buffer-substring-filters" variable nil nil [142202 142683])
            ("make-obsolete-variable" code nil nil [142684 142799])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [142801 143657])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [143659 144488])
            ("interprogram-cut-function" variable nil nil [144532 145069])
            ("interprogram-paste-function" variable nil nil [145071 146492])
            ("kill-ring" variable nil nil [146533 146988])
            ("kill-ring-max" variable (:default-value 60) nil [146990 147125])
            ("kill-ring-yank-pointer" variable nil nil [147127 147228])
            ("save-interprogram-paste-before-kill" variable nil nil [147230 147732])
            ("kill-do-not-save-duplicates" variable nil nil [147734 147963])
            ("kill-new" function (:arguments ("string" "replace")) nil [147965 149991])
            ("kill-append" function (:arguments ("string" "before-p")) nil [149993 150407])
            ("yank-pop-change-selection" variable nil nil [150409 150757])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [150759 152417])
            ("kill-read-only-ok" variable nil nil [152468 152604])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [152606 155329])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [155523 156423])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [156425 157481])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [157483 159059])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [159061 159881])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [159897 160722])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [160795 161258])
            ("yank-window-start" variable nil nil [161260 161290])
            ("yank-undo-function" variable nil nil [161291 161622])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161624 163354])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163356 164803])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164805 164995])
            ("kill-forward-chars" function (:arguments ("arg")) nil [165060 165205])
            ("kill-backward-chars" function (:arguments ("arg")) nil [165254 165400])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [165402 165877])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [165879 167231])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [167233 167850])
            ("kill-whole-line" variable nil nil [167887 168032])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168034 170250])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170252 171881])
            ("forward-visible-line" function (:arguments ("arg")) nil [171883 174373])
            ("end-of-visible-line" function nil nil [174375 175141])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [175144 175769])
            ("put" code nil nil [175770 175833])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [175835 176735])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [176737 177279])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177281 177850])
            ("define-error" code nil nil [177853 177922])
            ("activate-mark-hook" variable nil nil [177924 178113])
            ("deactivate-mark-hook" variable nil nil [178115 178193])
            ("mark" function (:arguments ("force")) nil [178195 178819])
            ("declare-function" code nil nil [178853 178952])
            ("declare-function" code nil nil [178953 179053])
            ("deactivate-mark" function (:arguments ("force")) nil [179055 180934])
            ("activate-mark" function (:arguments ("no-tmm")) nil [180936 181321])
            ("set-mark" function (:arguments ("pos")) nil [181323 182547])
            ("use-empty-active-region" variable nil nil [182549 183045])
            ("use-region-p" function nil nil [183047 183653])
            ("region-active-p" function nil nil [183655 184316])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [184319 184425])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [184427 185298])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [185300 185980])
            ("redisplay--update-region-highlights" function (:arguments ("windows")) nil [185982 186717])
            ("add-function" code nil nil [186719 186816])
            ("defvar-local" code nil nil [186819 186918])
            ("put" code nil nil [186919 186954])
            ("mark-ring-max" variable (:default-value 16) nil [186956 187101])
            ("global-mark-ring" variable nil nil [187103 187187])
            ("global-mark-ring-max" variable (:default-value 16) nil [187189 187350])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [187352 187660])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [187662 188073])
            ("set-mark-command-repeat-pop" variable nil nil [188075 188534])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188536 190878])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [190880 192434])
            ("pop-mark" function nil nil [192436 192855])
            ("define-obsolete-function-alias" code nil nil [192857 192946])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [192947 193831])
            ("shift-select-mode" variable (:default-value t) nil [193833 194405])
            ("handle-shift-selection" function nil nil [194407 195576])
            ("define-minor-mode" code nil nil [195578 196898])
            ("widen-automatically" variable (:default-value t) nil [196900 197234])
            ("non-essential" variable nil nil [197236 197634])
            ("pop-global-mark" function (:user-visible-flag t) nil [197636 198451])
            ("next-line-add-newlines" variable nil nil [198454 198628])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [198630 200886])
            ("put" code nil nil [200887 200935])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [200937 202671])
            ("put" code nil nil [202672 202768])
            ("track-eol" variable nil nil [202770 203108])
            ("goal-column" variable nil nil [203110 203377])
            ("make-variable-buffer-local" code nil nil [203378 203419])
            ("temporary-goal-column" variable nil nil [203421 203938])
            ("line-move-ignore-invisible" variable (:default-value t) nil [203940 204598])
            ("line-move-visual" variable (:default-value t) nil [204600 205176])
            ("declare-function" code nil nil [205213 205273])
            ("default-font-height" function nil nil [205275 205792])
            ("default-line-height" function nil nil [205794 206256])
            ("window-screen-lines" function nil nil [206258 206828])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [206875 210648])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [210972 212935])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [213083 215246])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [215400 220073])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [220075 223213])
            ("line-move-to-column" function (:arguments ("col")) nil [223215 224594])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [224596 225951])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225953 227485])
            ("put" code nil nil [227615 227649])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227651 228652])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [228720 229284])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [229286 229877])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [229879 231294])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [231296 231665])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [231667 232046])
            ("visual-line" customgroup (:user-visible-flag t) nil [232048 232149])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [232151 232639])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [232641 233828])
            ("visual-line--saved-state" variable nil nil [233830 233867])
            ("define-minor-mode" code nil nil [233869 235510])
            ("turn-on-visual-line-mode" function nil nil [235512 235570])
            ("define-globalized-minor-mode" code nil nil [235572 235670])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [235674 236108])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236110 236554])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236556 238027])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238029 238636])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [238787 239985])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [239987 240991])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [240994 241246])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [241248 242000])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242002 242214])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242216 242407])
            ("current-word" function (:arguments ("strict" "really-word")) nil [242409 243889])
            ("fill-prefix" variable nil nil [243892 244058])
            ("make-variable-buffer-local" code nil nil [244059 244100])
            ("put" code nil nil [244101 244158])
            ("auto-fill-inhibit-regexp" variable nil nil [244160 244326])
            ("do-auto-fill" function nil nil [244328 247628])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [247630 247956])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [247958 249065])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [249067 249223])
            ("put" code nil nil [249225 249287])
            ("put" code nil nil [249461 249513])
            ("define-minor-mode" code nil nil [249515 250260])
            ("auto-fill-function" function nil nil [250327 250434])
            ("turn-on-auto-fill" function nil nil [250436 250529])
            ("turn-off-auto-fill" function nil nil [250531 250627])
            ("custom-add-option" code nil nil [250629 250683])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [250685 251523])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [251526 252316])
            ("defvaralias" code nil nil [252318 252376])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [252378 253158])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253160 253704])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [253706 253823])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [253824 253951])
            ("define-minor-mode" code nil nil [253953 254686])
            ("define-minor-mode" code nil nil [254688 255616])
            ("define-minor-mode" code nil nil [255618 256094])
            ("define-minor-mode" code nil nil [256096 256400])
            ("define-minor-mode" code nil nil [256402 256710])
            ("define-minor-mode" code nil nil [256712 257708])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [257711 257842])
            ("blink-matching-paren" variable (:default-value t) nil [257844 258178])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [258180 258579])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [258581 258906])
            ("blink-matching-delay" variable (:default-value 1) nil [258908 259044])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [259046 259314])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [259316 260301])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [260303 260669])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [260671 260881])
            ("blink-matching-open" function (:user-visible-flag t) nil [260883 265310])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [265312 265501])
            ("blink-paren-post-self-insert-function" function nil nil [265503 266030])
            ("put" code nil nil [266032 266090])
            ("add-hook" code nil nil [266092 266471])
            ("keyboard-quit" function (:user-visible-flag t) nil [266649 267297])
            ("buffer-quit-function" variable nil nil [267299 267549])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [267551 268377])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [268379 268774])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [268778 269295])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [269297 270841])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [270843 271168])
            ("rfc822-goto-eoh" function nil nil [271170 271574])
            ("mail-encode-mml" variable nil nil [271616 271755])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [271757 274443])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [274445 274836])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [274838 275226])
            ("set-variable-value-history" variable nil nil [275230 275415])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [275417 278256])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [278311 278848])
            ("put" code nil nil [278916 278964])
            ("completion-reference-buffer" variable nil nil [278966 279195])
            ("completion-no-auto-exit" variable nil nil [279197 279378])
            ("completion-base-position" variable nil nil [279380 279750])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [279752 280051])
            ("completion-base-size" variable nil nil [280053 280508])
            ("make-obsolete-variable" code nil nil [280509 280588])
            ("delete-completion-window" function (:user-visible-flag t) nil [280590 280964])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [280966 281097])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281099 282349])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [282351 284310])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [284394 285232])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [285234 285426])
            ("choose-completion-string-functions" variable nil nil [285428 286067])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [286069 289479])
            ("define-derived-mode" code nil nil [289481 289853])
            ("completion-list-mode-finish" function nil nil [289855 290051])
            ("add-hook" code nil nil [290053 290115])
            ("completion-show-help" variable (:default-value t) nil [290179 290330])
            ("completion-setup-function" function nil nil [290461 292476])
            ("add-hook" code nil nil [292478 292538])
            ("define-key" code nil nil [292540 292615])
            ("define-key" code nil nil [292616 292691])
            ("switch-to-completions" function (:user-visible-flag t) nil [292693 293234])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [293396 293639])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [293640 293893])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [293894 294147])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [294148 294401])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [294402 294659])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [294660 294908])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [294910 295974])
            ("define-key" code nil nil [295976 296047])
            ("define-key" code nil nil [296048 296119])
            ("define-key" code nil nil [296120 296190])
            ("define-key" code nil nil [296191 296260])
            ("define-key" code nil nil [296261 296332])
            ("define-key" code nil nil [296333 296406])
            ("mapc" code nil nil [296696 297291])
            ("clone-buffer-hook" variable nil nil [297343 297444])
            ("clone-indirect-buffer-hook" variable nil nil [297446 297565])
            ("clone-process" function (:arguments ("process" "newname")) nil [297567 299076])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [299179 302142])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [302145 303737])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [303740 304223])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [304271 305811])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [305813 306888])
            ("define-minor-mode" code nil nil [306890 310385])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [310388 310511])
            ("define-minor-mode" code nil nil [310513 311666])
            ("define-minor-mode" code nil nil [311668 312438])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [312441 312624])
            ("define-derived-mode" code nil nil [312626 312742])
            ("messages-buffer" function nil nil [312744 313031])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [313990 315418])
            ("bad-package-check" function (:arguments ("package")) nil [315420 315925])
            ("dolist" code nil nil [315927 316049])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [316702 319236])
            ("iswitchb-mode" variable nil nil [319315 319604])
            ("custom-autoload" code nil nil [319606 319653])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [319655 320027])
            ("make-obsolete" code nil nil [320029 320127])
            ("simple" package nil nil [320131 320148]))          
      :file "simple.el.gz"
      :pointmax 320174
      :fsize 87540
      :lastmodtime '(21495 26428 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "kmacro.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("kmacro" customgroup (:user-visible-flag t) nil [4576 4824])
            ("kmacro-call-mouse-event" variable (:default-value (quote S-mouse-3)) nil [4826 5000])
            ("kmacro-ring-max" variable (:default-value 8) nil [5002 5126])
            ("kmacro-execute-before-append" variable (:default-value t) nil [5129 5634])
            ("kmacro-repeat-no-prefix" variable (:default-value t) nil [5637 5788])
            ("kmacro-call-repeat-key" variable (:default-value t) nil [5790 6066])
            ("kmacro-call-repeat-with-arg" variable nil nil [6068 6219])
            ("kmacro-step-edit-mini-window-height" variable (:default-value 0.75) nil [6221 6375])
            ("kmacro-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "s" (quote kmacro-start-macro)) (define-key map "" (quote kmacro-start-macro)) (define-key map "" (quote kmacro-end-or-call-macro-repeat)) (define-key map "r" (quote apply-macro-to-region-lines)) (define-key map "q" (quote kbd-macro-query)) (define-key map "" (quote kmacro-cycle-ring-next)) (define-key map "" (quote kmacro-cycle-ring-previous)) (define-key map "" (quote kmacro-view-macro-repeat)) (define-key map "" (quote kmacro-delete-ring-head)) (define-key map "" (quote kmacro-swap-ring)) (define-key map "" (quote kmacro-call-ring-2nd-repeat)) (define-key map "" (quote kmacro-set-format)) (define-key map "" (quote kmacro-set-counter)) (define-key map "	" (quote kmacro-insert-counter)) (define-key map "" (quote kmacro-add-counter)) (define-key map "" (quote kmacro-edit-macro-repeat)) (define-key map "" (quote kmacro-edit-macro)) (define-key map "e" (quote edit-kbd-macro)) (define-key map "l" (quote kmacro-edit-lossage)) (define-key map " " (quote kmacro-step-edit-macro)) (define-key map "b" (quote kmacro-bind-to-key)) (define-key map "n" (quote kmacro-name-last-macro)) (define-key map "x" (quote kmacro-to-register)) map)) nil [6388 7799])
            ("defalias" code nil nil [7800 7839])
            ("if" code nil nil [8359 8462])
            ("kmacro-keyboard-quit" function nil nil [8496 8649])
            ("kmacro-counter" variable nil nil [8680 8741])
            ("kmacro-default-counter-format" variable (:default-value "%d") nil [8743 8786])
            ("kmacro-counter-format" variable (:default-value "%d") nil [8788 8866])
            ("kmacro-counter-format-start" variable (:default-value kmacro-counter-format) nil [8868 8972])
            ("kmacro-counter-value-start" variable (:default-value kmacro-counter) nil [8974 9071])
            ("kmacro-last-counter" variable nil nil [9073 9143])
            ("kmacro-initial-counter-value" variable nil nil [9145 9255])
            ("kmacro-insert-counter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9258 9827])
            ("kmacro-set-format" function
               (:user-visible-flag t
                :arguments ("format"))
                nil [9830 10194])
            ("kmacro-display-counter" function (:arguments ("value")) nil [10197 10415])
            ("kmacro-set-counter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10418 11004])
            ("kmacro-add-counter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11007 11613])
            ("kmacro-loop-setup-function" function nil nil [11616 12076])
            ("kmacro-ring" variable nil nil [12104 12404])
            ("kmacro-view-last-item" variable nil nil [12476 12510])
            ("kmacro-view-item-no" variable nil nil [12511 12541])
            ("kmacro-ring-head" function nil nil [12544 12712])
            ("kmacro-push-ring" function (:arguments ("elt")) nil [12715 12953])
            ("kmacro-split-ring-element" function (:arguments ("elt")) nil [12956 13098])
            ("kmacro-pop-ring1" function (:arguments ("raw")) nil [13101 13380])
            ("kmacro-pop-ring" function (:arguments ("raw")) nil [13383 13572])
            ("kmacro-ring-empty-p" function (:arguments ("none")) nil [13575 14027])
            ("kmacro-display" function (:arguments ("macro" "trunc" "descr" "empty")) nil [14030 14716])
            ("kmacro-repeat-on-last-key" function (:arguments ("keys")) nil [14719 15551])
            ("kmacro-get-repeat-prefix" function nil nil [15554 15708])
            ("kmacro-exec-ring-item" function (:arguments ("item" "arg")) nil [15726 16111])
            ("kmacro-call-ring-2nd" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16114 16300])
            ("kmacro-call-ring-2nd-repeat" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16303 16657])
            ("put" code nil nil [16659 16714])
            ("kmacro-view-ring-2nd" function (:user-visible-flag t) nil [16717 16911])
            ("kmacro-cycle-ring-next" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16914 17465])
            ("put" code nil nil [17467 17517])
            ("kmacro-cycle-ring-previous" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [17520 18034])
            ("put" code nil nil [18036 18090])
            ("kmacro-swap-ring" function (:user-visible-flag t) nil [18093 18350])
            ("kmacro-delete-ring-head" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [18353 18689])
            ("put" code nil nil [18691 18742])
            ("kmacro-start-macro" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18787 20653])
            ("kmacro-end-macro" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20671 21604])
            ("kmacro-call-macro" function
               (:user-visible-flag t
                :arguments ("arg" "no-repeat" "end-macro" "macro"))
                nil [21622 23782])
            ("kmacro-start-macro-or-insert-counter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [23837 24696])
            ("kmacro-end-or-call-macro" function
               (:user-visible-flag t
                :arguments ("arg" "no-repeat"))
                nil [24714 25375])
            ("kmacro-end-or-call-macro-repeat" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25378 25650])
            ("put" code nil nil [25652 25711])
            ("kmacro-end-and-call-macro" function
               (:user-visible-flag t
                :arguments ("arg" "no-repeat"))
                nil [25729 26200])
            ("kmacro-end-call-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [26218 26522])
            ("kmacro-lambda-form" function (:arguments ("mac" "counter" "format")) nil [27109 27394])
            ("kmacro-extract-lambda" function (:arguments ("mac")) nil [27396 27801])
            ("kmacro-bind-to-key" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [27804 29391])
            ("kmacro-name-last-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [29394 30178])
            ("kmacro-execute-from-register" function (:arguments ("k")) nil [30181 30272])
            ("kmacro-to-register" function
               (:user-visible-flag t
                :arguments ("r"))
                nil [30274 30849])
            ("kmacro-view-macro" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [30852 31880])
            ("kmacro-view-macro-repeat" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31882 32373])
            ("put" code nil nil [32375 32427])
            ("kmacro-edit-macro-repeat" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32430 32556])
            ("put" code nil nil [32558 32610])
            ("kmacro-edit-macro" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32613 32771])
            ("kmacro-edit-lossage" function (:user-visible-flag t) nil [32774 32925])
            ("kmacro-step-edit-active" variable nil nil [32972 33004])
            ("kmacro-step-edit-new-macro" variable nil nil [33031 33066])
            ("kmacro-step-edit-inserting" variable nil nil [33095 33130])
            ("kmacro-step-edit-appending" variable nil nil [33158 33193])
            ("kmacro-step-edit-replace" variable nil nil [33223 33256])
            ("kmacro-step-edit-prefix-index" variable nil nil [33294 33332])
            ("kmacro-step-edit-key-index" variable nil nil [33368 33403])
            ("kmacro-step-edit-action" variable nil nil [33433 33465])
            ("kmacro-step-edit-help" variable nil nil [33517 33547])
            ("kmacro-step-edit-num-input-keys" variable nil nil [33587 33627])
            ("kmacro-step-edit-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map query-replace-map) (define-key map "	" (quote act-repeat)) (define-key map [tab] (quote act-repeat)) (define-key map "" (quote skip-rest)) (define-key map "c" (quote automatic)) (define-key map "f" (quote skip-keep)) (define-key map "q" (quote quit)) (define-key map "d" (quote skip)) (define-key map "" (quote skip)) (define-key map "i" (quote insert)) (define-key map "I" (quote insert-1)) (define-key map "r" (quote replace)) (define-key map "R" (quote replace-1)) (define-key map "a" (quote append)) (define-key map "A" (quote append-end)) map)) nil [33669 34813])
            ("kmacro-step-edit-prefix-commands" variable (:default-value (quote (universal-argument universal-argument-more universal-argument-minus digit-argument negative-argument))) nil [34815 35037])
            ("kmacro-step-edit-prompt" function (:arguments ("macro" "index")) nil [35039 37096])
            ("kmacro-step-edit-query" function nil nil [37098 42160])
            ("kmacro-step-edit-insert" function nil nil [42162 44628])
            ("kmacro-step-edit-pre-command" function nil nil [44630 45602])
            ("kmacro-step-edit-minibuf-setup" function nil nil [45604 45813])
            ("kmacro-step-edit-post-command" function nil nil [45815 46186])
            ("kmacro-step-edit-macro" function (:user-visible-flag t) nil [46189 47302])
            ("kmacro" package nil nil [47304 47321]))          
      :file "kmacro.el.gz"
      :pointmax 47347
      :fsize 11919
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "comint.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4857 4872])
            ("ansi-color" include nil nil [4873 4894])
            ("regexp-opt" include nil nil [4895 4916])
            ("comint" customgroup (:user-visible-flag t) nil [6628 6720])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6722 6808])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6945 7467])
            ("comint-prompt-read-only" variable nil nil [7469 8475])
            ("comint-delimiter-argument-list" variable nil nil [8477 8907])
            ("comint-input-autoexpand" variable nil nil [8909 9462])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9464 9576])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9578 9702])
            ("comint-input-ignoredups" variable nil nil [9704 9922])
            ("comint-input-ring-file-name" variable nil nil [9924 10298])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10300 10734])
            ("comint-move-point-for-output" variable nil nil [10736 11461])
            ("defvaralias" code nil nil [11463 11541])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [11543 12206])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12208 12493])
            ("comint-input-ring-size" variable (:default-value 500) nil [12495 12638])
            ("comint-input-ring-separator" variable (:default-value "
") nil [12640 12733])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [12735 12855])
            ("comint-process-echoes" variable nil nil [12857 13113])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "[sudo]" "Repeat" "Bad")) t) " +\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?\\(?: for [^:\357\274\232\341\237\226]+\\)?[:\357\274\232\341\237\226]\\s *\\'")) nil [13705 14334])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [14375 14859])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [14861 15148])
            ("comint-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [15150 15451])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [15453 15626])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [15643 16311])
            ("comint-input-sender-no-newline" variable nil nil [16313 16434])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [16436 16881])
            ("comint-eol-on-send" variable (:default-value t) nil [16883 17040])
            ("define-obsolete-variable-alias" code nil nil [17042 17153])
            ("comint-use-prompt-regexp" variable nil nil [17329 17713])
            ("comint-mode-hook" variable nil nil [17715 17866])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [17868 18266])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-forward-char)) (define-key map [kp-delete] (quote delete-forward-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [18268 24325])
            ("comint-ptyp" variable (:default-value t) nil [24361 24512])
            ("comint-input-ring" variable nil nil [24514 24544])
            ("comint-last-input-start" variable nil nil [24545 24581])
            ("comint-last-input-end" variable nil nil [24582 24616])
            ("comint-last-output-start" variable nil nil [24617 24654])
            ("comint-input-ring-index" variable nil nil [24655 24734])
            ("comint-matching-input-from-input-string" variable nil nil [24735 24836])
            ("comint-save-input-ring-index" variable nil nil [24837 24987])
            ("comint-accum-marker" variable nil nil [24989 25141])
            ("comint-stored-incomplete-input" variable nil nil [25143 25224])
            ("put" code nil nil [25226 25305])
            ("put" code nil nil [25306 25349])
            ("put" code nil nil [25350 25399])
            ("put" code nil nil [25400 25454])
            ("put" code nil nil [25455 25504])
            ("put" code nil nil [25505 25560])
            ("put" code nil nil [25561 25617])
            ("put" code nil nil [25618 25677])
            ("put" code nil nil [25678 25736])
            ("put" code nil nil [25737 25791])
            ("put" code nil nil [25792 25851])
            ("put" code nil nil [25852 25889])
            ("put" code nil nil [25891 25930])
            ("define-derived-mode" code nil nil [25932 30682])
            ("comint-check-proc" function (:arguments ("buffer")) nil [30684 31003])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31020 32345])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [32362 33144])
            ("comint-run" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [33161 33672])
            ("put" code nil nil [33673 33721])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [33723 35587])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [35690 37721])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [37723 39527])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [40659 43360])
            ("comint-write-input-ring" function nil nil [43362 44598])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [44601 44652])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [44654 45439])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [45441 46777])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [46780 47341])
            ("comint-search-arg" function (:arguments ("arg")) nil [47343 47765])
            ("comint-restore-input" function (:user-visible-flag t) nil [47767 48078])
            ("comint-search-start" function (:arguments ("arg")) nil [48080 48561])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [48595 48892])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [48894 49381])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49383 49511])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [49513 49810])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [49812 51012])
            ("comint-delete-input" function nil nil [51014 51299])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [51301 52263])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52265 52658])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [52660 53523])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53525 53893])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [53896 54912])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [54914 55931])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [55934 60166])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60169 60436])
            ("comint-history-isearch" variable nil nil [60475 61177])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [61179 61368])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [61370 61585])
            ("defvar-local" code nil nil [61587 61644])
            ("comint-history-isearch-setup" function nil nil [61646 62448])
            ("comint-history-isearch-end" function nil nil [62450 62944])
            ("comint-goto-input" function (:arguments ("pos")) nil [62946 63531])
            ("comint-history-isearch-search" function nil nil [63533 65886])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [65888 67506])
            ("comint-history-isearch-wrap" function nil nil [67508 68097])
            ("comint-history-isearch-push-state" function nil nil [68099 68413])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [68415 68615])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [68619 68946])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [68948 69213])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [69215 69990])
            ("comint-delim-arg" function (:arguments ("arg")) nil [69992 71008])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [71010 73471])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [73506 74176])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [74178 82227])
            ("comint-preoutput-filter-functions" variable nil nil [82229 82877])
            ("comint-inhibit-carriage-motion" variable nil nil [82879 83039])
            ("comint-last-prompt" variable nil nil [83041 83237])
            ("comint-snapshot-last-prompt" function nil nil [83239 83771])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [83773 86023])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [86166 90082])
            ("comint-preinput-scroll-to-bottom" function nil nil [90084 91185])
            ("follow-mode" variable nil nil [91187 91207])
            ("declare-function" code nil nil [91208 91285])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [91287 92237])
            ("comint-adjust-window-point" function (:arguments ("window" "process")) nil [92240 92911])
            ("comint-adjust-point" function (:arguments ("selected")) nil [92947 93583])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [93585 94024])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [94026 94555])
            ("defalias" code nil nil [94556 94607])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [94609 94781])
            ("comint-get-old-input-default" function nil nil [94783 95501])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [95503 95897])
            ("comint-skip-prompt" function nil nil [95899 96183])
            ("comint-after-pmark-p" function nil nil [96185 96386])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [96388 96963])
            ("comint-line-beginning-position" function nil nil [96965 97915])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [97917 98446])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [98470 98546])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [98738 99583])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [99585 100167])
            ("comint-send-string" function (:arguments ("process" "string")) nil [100206 100565])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [100567 100932])
            ("comint-delete-output" function (:user-visible-flag t) nil [100961 101605])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [101607 102708])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [102845 103087])
            ("comint-show-output" function (:user-visible-flag t) nil [103089 103603])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [103606 103867])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [103869 104091])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [104093 104315])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [104317 104794])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [104796 104996])
            ("comint-skip-input" function nil nil [104998 105491])
            ("comint-kill-input" function (:user-visible-flag t) nil [105493 105748])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [105750 106128])
            ("comint-send-eof" function (:user-visible-flag t) nil [106130 106268])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [106271 107353])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [107356 107829])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [107832 109007])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [109010 109330])
            ("defvar-local" code nil nil [109397 109462])
            ("defvar-local" code nil nil [109463 109524])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [109610 111649])
            ("comint-update-fence" function nil nil [111714 113131])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [113133 113805])
            ("comint-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [113807 115387])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [116871 118586])
            ("comint-check-source" function (:arguments ("fname")) nil [118589 119208])
            ("comint-extract-string" function nil nil [119210 119520])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [119522 121020])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [122143 123179])
            ("comint-completion-autolist" variable nil nil [124173 124376])
            ("comint-completion-addsuffix" variable (:default-value t) nil [124378 124921])
            ("comint-completion-recexact" variable nil nil [124923 125200])
            ("comint-completion-fignore" variable nil nil [125202 125496])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [125513 125733])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [125735 126092])
            ("comint-file-name-quote-list" variable nil nil [126094 126241])
            ("comint-directory" function (:arguments ("directory")) nil [126244 126478])
            ("comint-word" function (:arguments ("word-chars")) nil [126481 127524])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [127526 128148])
            ("comint--match-partial-filename" function nil nil [128150 128314])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [128316 129609])
            ("comint--unquote-argument" function (:arguments ("str")) nil [129611 129696])
            ("define-obsolete-function-alias" code nil nil [129697 129798])
            ("comint-match-partial-filename" function nil nil [129800 130085])
            ("comint-quote-filename" function (:arguments ("filename")) nil [130087 130555])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [130557 130829])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [130831 131013])
            ("comint-completion-at-point" function nil nil [131015 131124])
            ("define-obsolete-function-alias" code nil nil [131126 131215])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [131217 132148])
            ("comint-filename-completion" function nil nil [132150 132325])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [132327 133036])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [133038 133215])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [133216 133393])
            ("comint--complete-file-name-data" function nil nil [133395 134693])
            ("comint-dynamic-complete-as-filename" function nil nil [134695 135030])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [135032 135635])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [135638 137906])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [137908 138405])
            ("comint-displayed-dynamic-completions" variable nil nil [138617 138666])
            ("comint-dynamic-list-completions-config" variable nil nil [138668 138719])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [138721 141746])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [141749 142198])
            ("comint-accumulate" function (:user-visible-flag t) nil [142200 142716])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [142718 143148])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [143150 143905])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [143907 144179])
            ("comint-redirect-verbose" variable nil nil [146427 146628])
            ("comint-redirect-filter-functions" variable nil nil [146689 147332])
            ("comint-redirect-output-buffer" variable nil nil [147357 147453])
            ("comint-redirect-finished-regexp" variable nil nil [147455 147716])
            ("comint-redirect-insert-matching-regexp" variable nil nil [147718 148035])
            ("comint-redirect-echo-input" variable nil nil [148037 148152])
            ("comint-redirect-completed" variable nil nil [148154 148256])
            ("comint-redirect-original-mode-line-process" variable nil nil [148258 148360])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [148362 148863])
            ("comint-redirect-subvert-readonly" variable nil nil [148865 149171])
            ("comint-redirect-previous-input-string" variable nil nil [149173 149372])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [149510 150677])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [150679 151200])
            ("defalias" code nil nil [151301 151372])
            ("comint-redirect-filter" function (:arguments ("orig-filter" "process" "input-string")) nil [151374 152043])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [152046 154605])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [154622 155167])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [155184 156681])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [156698 157045])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [157062 158160])
            ("comint" package nil nil [161689 161706]))          
      :file "comint.el.gz"
      :pointmax 161732
      :fsize 43754
      :lastmodtime '(21341 23900 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "menu-bar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1056 1091])
            ("cua-enable-cua-keys" variable nil nil [1135 1163])
            ("or" code nil nil [1277 1387])
            ("setq" code nil nil [1541 1581])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1709 1772])
            ("define-obsolete-variable-alias" code nil nil [1840 1922])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1923 8903])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8905 9235])
            ("menu-bar-last-search-type" variable nil nil [9267 9375])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9377 9773])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9775 10175])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10177 10490])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10492 10817])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10819 11158])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11160 11511])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11558 12375])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12377 14841])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [14873 15864])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] menu-bar-separator) (bindings--define-key menu [apropos-tags] (quote (menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [next-tag-otherw] (quote (menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window"))) (bindings--define-key menu [next-tag] (quote (menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name"))) (bindings--define-key menu [find-tag-otherw] (quote (menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [find-tag] (quote (menu-item "Find Tag..." find-tag :help "Find definition of function or variable"))) (bindings--define-key menu [separator-tags] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [15910 18081])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18084 18138])
            ("fset" code nil nil [18139 18181])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (quote (menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18183 22315])
            ("menu-bar-next-tag-other-window" function (:user-visible-flag t) nil [22317 22465])
            ("menu-bar-next-tag" function (:user-visible-flag t) nil [22467 22589])
            ("define-obsolete-function-alias" code nil nil [22591 22673])
            ("put" code nil nil [22817 22905])
            ("put" code nil nil [22906 22963])
            ("put" code nil nil [22964 23154])
            ("clipboard-yank" function (:user-visible-flag t) nil [23156 23323])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23325 23542])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23544 23749])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23751 24374])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24406 26671])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26744 27195])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27197 28405])
            ("menu-set-font" function (:user-visible-flag t) nil [28453 28682])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28684 30769])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [30878 31058])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [31060 31285])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [31287 31498])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [31500 31685])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [31687 31869])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [31871 32041])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [32043 34455])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [34457 34608])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [34610 34796])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [34798 34995])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [34997 35192])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [35194 35365])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [35367 37391])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [37393 37549])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [37551 37704])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [37706 37829])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [37831 39029])
            ("menu-bar-frame-for-menubar" function nil nil [39031 39214])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [39216 39336])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [39338 39486])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [39487 39639])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [39640 39801])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [39802 39966])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [39967 40125])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [40126 40293])
            ("when" code nil nil [40295 43074])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [43076 46723])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [46725 48822])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case for Search" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [48824 54259])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [land] (quote (menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [54290 56378])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [56380 58721])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [58723 58850])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [58852 62913])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [62942 65782])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [65784 65907])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [65909 66045])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [66047 66186])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66188 66359])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66361 66542])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [66544 68765])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [68767 70041])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [70043 70191])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [70193 73940])
            ("bindings--define-key" code nil nil [73942 74029])
            ("bindings--define-key" code nil nil [74030 74124])
            ("bindings--define-key" code nil nil [74125 74218])
            ("bindings--define-key" code nil nil [74219 74303])
            ("bindings--define-key" code nil nil [74304 74388])
            ("bindings--define-key" code nil nil [74389 74489])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [74491 74795])
            ("menu-bar-non-minibuffer-window-p" function nil nil [74797 75158])
            ("kill-this-buffer" function (:user-visible-flag t) nil [75160 75592])
            ("kill-this-buffer-enabled-p" function nil nil [75594 76062])
            ("put" code nil nil [76064 76125])
            ("delete-frame-enabled-p" function nil nil [76200 76485])
            ("yank-menu-length" variable (:default-value 20) nil [76487 76598])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [76600 77591])
            ("put" code nil nil [77593 77639])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [77640 77880])
            ("buffers-menu-max-size" variable (:default-value 10) nil [77902 78246])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [78248 78597])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [78599 79343])
            ("buffers-menu-show-status" variable (:default-value t) nil [79345 79718])
            ("list-buffers-directory" variable nil nil [79720 79829])
            ("make-variable-buffer-local" code nil nil [79830 79882])
            ("menu-bar-select-buffer" function nil nil [79884 79973])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [79975 80086])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [80088 80958])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [81027 81077])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [81079 81267])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [81269 85434])
            ("add-hook" code nil nil [85436 85493])
            ("menu-bar-update-buffers" code nil nil [85495 85520])
            ("dolist" code nil nil [86143 86439])
            ("let" code nil nil [86441 86930])
            ("let" code nil nil [86932 88001])
            ("define-minor-mode" code nil nil [88004 89363])
            ("put" code nil nil [89807 89848])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89850 90256])
            ("declare-function" code nil nil [90258 90323])
            ("declare-function" code nil nil [90324 90393])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [90395 93446])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [93448 94160])
            ("tty-menu-open-use-tmm" variable nil nil [94162 94623])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [94625 94776])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [94778 96229])
            ("global-set-key" code nil nil [96231 96268])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [96270 99815])
            ("menu-bar" package nil nil [99817 99836]))          
      :file "menu-bar.el.gz"
      :pointmax 99864
      :fsize 21844
      :lastmodtime '(21391 16284 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2498])
            ("make-backup-files" variable (:default-value t) nil [2500 3423])
            ("backup-inhibited" variable nil nil [3524 3716])
            ("put" code nil nil [3717 3759])
            ("backup-by-copying" variable nil nil [3761 3939])
            ("backup-by-copying-when-linked" variable nil nil [3941 4234])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4236 4724])
            ("put" code nil nil [4725 4782])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4784 5407])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5409 5628])
            ("buffer-offer-save" variable nil nil [5630 5849])
            ("make-variable-buffer-local" code nil nil [5850 5897])
            ("put" code nil nil [5898 5941])
            ("find-file-existing-other-name" variable (:default-value t) nil [5943 6236])
            ("find-file-visit-truename" variable nil nil [6238 6610])
            ("put" code nil nil [6611 6673])
            ("revert-without-query" variable nil nil [6675 7040])
            ("buffer-file-number" variable nil nil [7042 7311])
            ("make-variable-buffer-local" code nil nil [7312 7360])
            ("put" code nil nil [7361 7405])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7407 7552])
            ("buffer-file-read-only" variable nil nil [7554 7644])
            ("make-variable-buffer-local" code nil nil [7645 7696])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7698 8142])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8210 8279])
            ("declare-function" code nil nil [8281 8331])
            ("declare-function" code nil nil [8332 8381])
            ("declare-function" code nil nil [8382 8468])
            ("declare-function" code nil nil [8469 8536])
            ("declare-function" code nil nil [8537 8609])
            ("declare-function" code nil nil [8610 8666])
            ("declare-function" code nil nil [8667 8726])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8728 9401])
            ("file-precious-flag" variable nil nil [9403 10243])
            ("break-hardlink-on-save" variable nil nil [10245 11000])
            ("version-control" variable nil nil [11002 11372])
            ("put" code nil nil [11373 11469])
            ("dired-kept-versions" variable (:default-value 2) nil [11471 11611])
            ("delete-old-versions" variable nil nil [11613 11879])
            ("kept-old-versions" variable (:default-value 2) nil [11881 12020])
            ("put" code nil nil [12021 12076])
            ("kept-new-versions" variable (:default-value 2) nil [12078 12255])
            ("put" code nil nil [12256 12311])
            ("require-final-newline" variable nil nil [12313 13084])
            ("mode-require-final-newline" variable (:default-value t) nil [13086 14221])
            ("auto-save-default" variable (:default-value t) nil [14223 14365])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14367 15795])
            ("save-abbrevs" variable (:default-value t) nil [15797 16008])
            ("find-file-run-dired" variable (:default-value t) nil [16010 16207])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16209 16537])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16598 16926])
            ("define-obsolete-variable-alias" code nil nil [17034 17135])
            ("find-file-not-found-functions" variable nil nil [17136 17437])
            ("define-obsolete-variable-alias" code nil nil [17535 17607])
            ("find-file-hook" variable nil nil [17608 17885])
            ("define-obsolete-variable-alias" code nil nil [17887 17966])
            ("write-file-functions" variable nil nil [17967 18748])
            ("put" code nil nil [18749 18795])
            ("local-write-file-hooks" variable nil nil [18797 18832])
            ("make-variable-buffer-local" code nil nil [18833 18885])
            ("put" code nil nil [18886 18934])
            ("make-obsolete-variable" code nil nil [18935 19012])
            ("define-obsolete-variable-alias" code nil nil [19014 19105])
            ("write-contents-functions" variable nil nil [19106 19862])
            ("make-variable-buffer-local" code nil nil [19863 19917])
            ("enable-local-variables" variable (:default-value t) nil [19919 21171])
            ("enable-dir-local-variables" variable (:default-value t) nil [21173 21394])
            ("local-enable-local-variables" variable (:default-value t) nil [22757 23142])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23144 23535])
            ("or" code nil nil [23600 23663])
            ("or" code nil nil [23664 23731])
            ("or" code nil nil [23732 23799])
            ("view-read-only" variable nil nil [23801 24151])
            ("file-name-history" variable nil nil [24153 24336])
            ("put" code nil nil [24339 24393])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24394 25000])
            ("declare-function" code nil nil [25002 25074])
            ("declare-function" code nil nil [25075 25147])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25149 26402])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26404 27525])
            ("pwd" function (:user-visible-flag t) nil [27529 27648])
            ("cd-path" variable nil nil [27650 27780])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27782 28401])
            ("cd-absolute" function (:arguments ("dir")) nil [28403 29308])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29310 31200])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [31202 31529])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31531 32910])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32912 35874])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35876 36284])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [36286 36890])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38443 40632])
            ("user-emacs-directory-warning" variable (:default-value t) nil [40634 40836])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [40838 42652])
            ("executable-find" function (:arguments ("command")) nil [42655 42963])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [42965 43562])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [43564 45318])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [45617 46336])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [46338 47563])
            ("file-local-copy" function (:arguments ("file")) nil [47565 47954])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [47956 52847])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [52849 54252])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [54384 55501])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [55503 57094])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [57096 59333])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [59336 59949])
            ("confirm-nonexistent-file-or-buffer" function nil nil [59951 60392])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [60394 61220])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [61222 61336])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61338 62583])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62585 63515])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63517 64441])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [64443 64878])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [64880 65307])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65309 65690])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65692 66143])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66145 66591])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66593 67542])
            ("kill-buffer-hook" variable nil nil [67603 67843])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67845 70814])
            ("create-file-buffer" function (:arguments ("filename")) nil [70939 71619])
            ("generate-new-buffer" function (:arguments ("name")) nil [71621 71826])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [71828 71980])
            ("make-obsolete-variable" code nil nil [71981 72058])
            ("abbreviated-home-dir" variable nil nil [72060 72167])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [72169 74520])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [74522 76449])
            ("find-file-wildcards" variable (:default-value t) nil [76452 76699])
            ("find-file-suppress-same-file-warnings" variable nil nil [76701 77027])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [77029 77308])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [77310 77797])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [77799 84785])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [84787 87281])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [87284 88236])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [88238 88935])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [88937 89358])
            ("put" code nil nil [89359 89437])
            ("find-file-literally" variable nil nil [89439 89646])
            ("put" code nil nil [89647 89692])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [89694 90788])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [90791 94131])
            ("report-errors" function (:arguments ("format" "body")) nil [94133 94613])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [94615 96224])
            ("auto-mode-case-fold" variable (:default-value t) nil [96226 96664])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [96666 108054])
            ("put" code nil nil [108055 108101])
            ("conf-mode-maybe" function nil nil [108103 108353])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [108355 109729])
            ("define-obsolete-variable-alias" code nil nil [109731 109844])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [110043 110903])
            ("define-obsolete-variable-alias" code nil nil [110905 111015])
            ("inhibit-local-variables-suffixes" variable nil nil [111017 111293])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [111365 111471])
            ("inhibit-local-variables-p" function nil nil [111473 112283])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [112285 112803])
            ("magic-mode-alist" variable nil nil [112805 113339])
            ("put" code nil nil [113340 113387])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [113389 114930])
            ("put" code nil nil [114931 114987])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [114989 115131])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [115133 121561])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [121814 122221])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [122223 122489])
            ("set-auto-mode-1" function nil nil [122491 123996])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [124034 124240])
            ("put" code nil nil [124241 124295])
            ("hack-local-variables-hook" variable nil nil [124297 124530])
            ("safe-local-variable-values" variable nil nil [124532 124792])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [124794 125456])
            ("mapc" code nil nil [125484 126101])
            ("dolist" code nil nil [126743 127431])
            ("put" code nil nil [127433 127547])
            ("put" code nil nil [127549 127595])
            ("file-local-variables-alist" variable nil nil [127597 127952])
            ("make-variable-buffer-local" code nil nil [127953 128009])
            ("put" code nil nil [128010 128062])
            ("dir-local-variables-alist" variable nil nil [128064 128446])
            ("make-variable-buffer-local" code nil nil [128447 128502])
            ("before-hack-local-variables-hook" variable nil nil [128504 128922])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [128924 131794])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [131796 131883])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [131885 134339])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [134341 136827])
            ("hack-local-variables--warned-lexical" variable nil nil [136888 136937])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [136939 142855])
            ("hack-local-variables-apply" function nil nil [142857 143658])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [143660 144348])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [144350 145253])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [145255 145359])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [145361 145549])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [145551 147371])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [147373 147750])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [147752 148665])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [148731 148846])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [148848 149424])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [149426 149559])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [149561 150206])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [150208 152219])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [152221 152985])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [152987 154450])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [154452 154634])
            ("dir-locals-find-file" function (:arguments ("file")) nil [154636 157700])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [157702 158545])
            ("enable-remote-dir-locals" variable nil nil [158547 158713])
            ("hack-dir-local-variables--warned-coding" variable nil nil [158715 158767])
            ("hack-dir-local-variables" function nil nil [158769 160427])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [160429 160735])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [160739 161176])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [161178 166155])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [166157 168182])
            ("file-extended-attributes" function (:arguments ("filename")) nil [168185 168499])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [168501 168930])
            ("backup-buffer" function nil nil [168933 172958])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [172960 174230])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [174232 174525])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [174527 175226])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [175228 177095])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [177097 177792])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [177794 178611])
            ("file-name-base" function (:arguments ("filename")) nil [178613 178857])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [178859 179607])
            ("backup-directory-alist" variable nil nil [179609 180646])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [180648 181940])
            ("make-backup-file-name" function (:arguments ("file")) nil [181942 182255])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [182257 183007])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [183009 185116])
            ("backup-file-name-p" function (:arguments ("file")) nil [185118 185379])
            ("backup-extract-version-start" variable nil nil [185381 185418])
            ("backup-extract-version" function (:arguments ("fn")) nil [185593 186045])
            ("find-backup-file-name" function (:arguments ("fn")) nil [186047 188186])
            ("file-nlinks" function (:arguments ("filename")) nil [188188 188305])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [190281 193182])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193185 195587])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [195589 196160])
            ("auto-save-hook" variable nil nil [196162 196234])
            ("before-save-hook" variable nil nil [196236 196406])
            ("after-save-hook" variable nil nil [196408 196599])
            ("save-buffer-coding-system" variable nil nil [196601 196973])
            ("make-variable-buffer-local" code nil nil [196975 197030])
            ("put" code nil nil [197031 197082])
            ("basic-save-buffer" function (:user-visible-flag t) nil [197084 201251])
            ("basic-save-buffer-1" function nil nil [201533 201836])
            ("basic-save-buffer-2" function nil nil [201925 206549])
            ("declare-function" code nil nil [206551 206637])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [206639 207805])
            ("put" code nil nil [207806 207867])
            ("buffer-save-without-query" variable nil nil [207869 207985])
            ("make-variable-buffer-local" code nil nil [207986 208041])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [208043 211501])
            ("clear-visited-file-modtime" function nil nil [211504 211695])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211697 212148])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [212150 212436])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [212438 212834])
            ("put" code nil nil [212835 212893])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [212895 213506])
            ("file-newest-backup" function (:arguments ("filename")) nil [213508 214431])
            ("rename-uniquely" function (:user-visible-flag t) nil [214433 215449])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [215451 217023])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [217025 217171])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [217173 219634])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [219636 220196])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [220198 221136])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [221138 224325])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [224373 224935])
            ("put" code nil nil [224939 224987])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [224988 225440])
            ("put" code nil nil [225442 225511])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [225512 225984])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [225986 226498])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [226500 227415])
            ("before-revert-hook" variable nil nil [227417 227620])
            ("after-revert-hook" variable nil nil [227622 227977])
            ("revert-buffer-in-progress-p" variable nil nil [227979 228093])
            ("revert-buffer-internal-hook" variable nil nil [228095 228131])
            ("revert-buffer-preserve-modes" variable nil nil [228321 228358])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [228360 230572])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [230574 233929])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [233931 236131])
            ("recover-this-file" function (:user-visible-flag t) nil [236133 236284])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [236286 238369])
            ("recover-session" function (:user-visible-flag t) nil [238371 239964])
            ("recover-session-finish" function (:user-visible-flag t) nil [239966 242369])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [242371 242622])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [242624 243227])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [243229 243757])
            ("rename-auto-save-file" function nil nil [243761 244325])
            ("make-auto-save-file-name" function nil nil [244327 248556])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [248558 248786])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [248789 250972])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [250975 251136])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [251138 251304])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [251306 253027])
            ("files" package nil nil [253101 253137])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [253139 254485])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [254487 256315])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [256318 256445])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [256447 256984])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [256986 257173])
            ("get-free-disk-space" function (:arguments ("dir")) nil [257175 258926])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [258998 261387])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [261389 261434])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [262508 272639])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [272641 273207])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [273209 273693])
            ("kill-emacs-query-functions" variable nil nil [273695 274001])
            ("confirm-kill-emacs" variable nil nil [274003 274443])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274445 276092])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [276094 276582])
            ("setq" code nil nil [276692 276813])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [277014 279638])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [279681 280148])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [280150 280999])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [281001 282155])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [282157 283224])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [283226 284291])
            ("define-obsolete-variable-alias" code nil nil [284293 284375])
            ("trash-directory" variable nil nil [284399 284802])
            ("trash--hexify-table" variable nil nil [284804 284832])
            ("declare-function" code nil nil [284834 284900])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [284902 290322])
            ("define-key" code nil nil [290326 290366])
            ("define-key" code nil nil [290367 290417])
            ("define-key" code nil nil [290418 290468])
            ("define-key" code nil nil [290469 290511])
            ("define-key" code nil nil [290512 290557])
            ("define-key" code nil nil [290558 290599])
            ("define-key" code nil nil [290600 290639])
            ("define-key" code nil nil [290640 290678])
            ("define-key" code nil nil [290679 290724])
            ("define-key" code nil nil [290725 290782])
            ("define-key" code nil nil [290783 290828])
            ("define-key" code nil nil [290830 290882])
            ("define-key" code nil nil [290883 290945])
            ("define-key" code nil nil [290946 291001])
            ("define-key" code nil nil [291002 291061])
            ("define-key" code nil nil [291062 291109])
            ("define-key" code nil nil [291111 291169])
            ("define-key" code nil nil [291170 291221])
            ("define-key" code nil nil [291222 291276])
            ("define-key" code nil nil [291277 291338])
            ("define-key" code nil nil [291339 291398]))          
      :file "files.el.gz"
      :pointmax 291423
      :fsize 84300
      :lastmodtime '(21480 3289 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tabify.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("untabify" function
               (:user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [1041 2078])
            ("tabify-regexp" variable (:default-value " [ 	]+") nil [2080 2320])
            ("tabify" function
               (:user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [2337 4171])
            ("tabify" package nil nil [4173 4190]))          
      :file "tabify.el.gz"
      :pointmax 4216
      :fsize 1619
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.4!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
