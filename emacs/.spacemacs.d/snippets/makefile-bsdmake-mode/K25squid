;; Object progmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "progmodes/"
  :tables
  (list
    (semanticdb-table "cc-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [3171 3246])
            ("let" code nil nil [3270 3485])
            ("cc-require" code nil nil [3488 3509])
            ("cc-require" code nil nil [3510 3531])
            ("cc-require-when-compile" code nil nil [3532 3567])
            ("cc-require" code nil nil [3568 3591])
            ("cc-require" code nil nil [3592 3615])
            ("cc-require" code nil nil [3616 3637])
            ("cc-require" code nil nil [3638 3660])
            ("cc-require" code nil nil [3661 3683])
            ("cc-require" code nil nil [3684 3706])
            ("cc-bytecomp-defvar" code nil nil [3733 3785])
            ("cc-bytecomp-defun" code nil nil [3794 3828])
            ("cc-bytecomp-defvar" code nil nil [3922 3961])
            ("cc-bytecomp-defvar" code nil nil [3962 4011])
            ("cc-external-require" code nil nil [4137 4168])
            ("subword-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4263 4352])
            ("cc-fonts" include nil nil [4544 4563])
            ("c-leave-cc-mode-mode" function nil nil [5577 5641])
            ("c-init-language-vars-for" function (:arguments ("mode")) nil [5643 6432])
            ("c-initialize-cc-mode" function (:arguments ("new-style-init")) nil [6449 7937])
            ("c-mode-base-map" variable nil nil [7963 8038])
            ("c-make-inherited-keymap" function nil nil [8040 8623])
            ("c-define-abbrev-table" function (:arguments ("name" "defs" "doc")) nil [8625 9431])
            ("put" code nil nil [9432 9484])
            ("c-bind-special-erase-keys" function nil nil [9486 10050])
            ("if" code nil nil [10052 16617])
            ("cc-bytecomp-defvar" code nil nil [16694 16728])
            ("c-mode-menu" function (:arguments ("modestr")) nil [16730 17094])
            ("defalias" code nil nil [17353 17527])
            ("c-unfind-enclosing-token" function (:arguments ("pos")) nil [18037 18523])
            ("c-unfind-coalesced-tokens" function (:arguments ("beg" "end")) nil [18525 19330])
            ("c-maybe-stale-found-type" variable nil nil [20104 20141])
            ("make-variable-buffer-local" code nil nil [20142 20196])
            ("c-basic-common-init" function (:arguments ("mode" "default-style")) nil [20198 26297])
            ("c-setup-doc-comment-style" function nil nil [26390 26678])
            ("c-new-BEG" variable nil nil [26929 26949])
            ("make-variable-buffer-local" code nil nil [26950 26989])
            ("c-new-END" variable nil nil [26990 27010])
            ("make-variable-buffer-local" code nil nil [27011 27050])
            ("c-common-init" function (:arguments ("mode")) nil [27052 28739])
            ("c-count-cfss" function (:arguments ("lv-alist")) nil [28741 29106])
            ("c-before-hack-hook" function nil nil [29108 30508])
            ("c-remove-any-local-eval-or-mode-variables" function nil nil [30510 32202])
            ("c-postprocess-file-styles" function nil nil [32204 34096])
            ("if" code nil nil [34098 34281])
            ("c-run-mode-hooks" function (:arguments ("hooks")) nil [34283 34595])
            ("c-old-BOM" variable nil nil [34885 34905])
            ("make-variable-buffer-local" code nil nil [34906 34945])
            ("c-old-EOM" variable nil nil [34946 34966])
            ("make-variable-buffer-local" code nil nil [34967 35006])
            ("c-extend-region-for-CPP" function (:arguments ("beg" "end")) nil [35008 35820])
            ("c-extend-font-lock-region-for-macros" function (:arguments ("begg" "endd" "old-len")) nil [35822 36948])
            ("c-neutralize-CPP-line" function (:arguments ("beg" "end")) nil [36950 37832])
            ("c-neutralize-syntax-in-and-mark-CPP" function (:arguments ("begg" "endd" "old-len")) nil [37834 40916])
            ("c-before-change" function (:arguments ("beg" "end")) nil [40918 44424])
            ("c-in-after-change-fontification" variable nil nil [44426 44470])
            ("make-variable-buffer-local" code nil nil [44471 44532])
            ("c-after-change" function (:arguments ("beg" "end" "old-len")) nil [44630 46959])
            ("c-set-fl-decl-start" function (:arguments ("pos")) nil [46961 48556])
            ("c-change-set-fl-decl-start" function (:arguments ("_beg" "_end" "_old-len")) nil [48582 48977])
            ("c-context-set-fl-decl-start" function (:arguments ("beg" "end")) nil [48979 49255])
            ("c-font-lock-fontify-region" function (:arguments ("beg" "end" "verbose")) nil [49257 50383])
            ("c-after-font-lock-init" function nil nil [50385 50668])
            ("c-font-lock-init" function nil nil [50670 51681])
            ("c-extend-after-change-region" function (:arguments ("_beg" "_end" "_old-len")) nil [51683 52258])
            ("c-electric-indent-mode-hook" function nil nil [52324 52755])
            ("c-electric-indent-local-mode-hook" function nil nil [52757 53047])
            ("c-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c))) nil [53069 53192])
            ("c-define-abbrev-table" code nil nil [53194 53394])
            ("c-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [53396 53598])
            ("easy-menu-define" code nil nil [53601 53701])
            ("define-derived-mode" code nil nil [55289 56304])
            ("c++-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c++))) nil [56328 56457])
            ("c-define-abbrev-table" code nil nil [56459 56718])
            ("c++-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) (define-key map ":" (quote c-scope-operator)) (define-key map "<" (quote c-electric-lt-gt)) (define-key map ">" (quote c-electric-lt-gt)) map)) nil [56720 57077])
            ("easy-menu-define" code nil nil [57079 57189])
            ("define-derived-mode" code nil nil [57206 58236])
            ("objc-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table objc))) nil [58268 58400])
            ("c-define-abbrev-table" code nil nil [58402 58608])
            ("objc-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [58610 58827])
            ("easy-menu-define" code nil nil [58829 58944])
            ("define-derived-mode" code nil nil [59033 60080])
            ("java-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table java))) nil [60105 60237])
            ("c-define-abbrev-table" code nil nil [60239 60559])
            ("java-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [60561 60723])
            ("c-Java-defun-prompt-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(\\(\\(public\\|protected\\|private\\|const\\|abstract\\|synchronized\\|final\\|static\\|threadsafe\\|transient\\|native\\|volatile\\)\\s-+\\)*\\(\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*[][_$.a-zA-Z0-9]+\\|[[a-zA-Z]\\)\\s-*\\)\\s-+\\)\\)?\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*\\s-+\\)\\s-*\\)?\\([_a-zA-Z][^][ 	:;.,{}()=]*\\|\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)\\)\\s-*\\(([^);{}]*)\\)?\\([] 	]*\\)\\(\\s-*\\<throws\\>\\s-*\\(\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)[, 	
]*\\)+\\)?\\s-*")
                nil [60980 61500])
            ("easy-menu-define" code nil nil [61502 61617])
            ("define-derived-mode" code nil nil [61709 62673])
            ("idl-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table idl))) nil [62714 62843])
            ("c-define-abbrev-table" code nil nil [62845 62944])
            ("idl-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [62946 63105])
            ("easy-menu-define" code nil nil [63107 63217])
            ("define-derived-mode" code nil nil [63307 64274])
            ("pike-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table pike))) nil [64299 64431])
            ("c-define-abbrev-table" code nil nil [64433 64639])
            ("pike-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [64641 64827])
            ("easy-menu-define" code nil nil [64829 64944])
            ("define-derived-mode" code nil nil [65144 66116])
            ("c-define-abbrev-table" code nil nil [66508 66712])
            ("awk-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "#" (quote self-insert-command)) (define-key map "/" (quote self-insert-command)) (define-key map "*" (quote self-insert-command)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "\341" (quote c-beginning-of-statement)) (define-key map "\345" (quote c-end-of-statement)) (define-key map "\201" (quote c-awk-beginning-of-defun)) (define-key map "\205" (quote c-awk-end-of-defun)) map)) nil [66714 67408])
            ("easy-menu-define" code nil nil [67410 67520])
            ("awk-mode-syntax-table" variable nil nil [67560 67590])
            ("declare-function" code nil nil [67591 67643])
            ("define-derived-mode" code nil nil [67660 68800])
            ("c-mode-help-address" variable
               (:constant-flag t
                :default-value "bug-cc-mode@gnu.org")
                nil [68822 68917])
            ("c-version" function (:user-visible-flag t) nil [68919 69088])
            ("define-obsolete-variable-alias" code nil nil [69090 69186])
            ("c-prepare-bug-report-hook" variable nil nil [69187 69225])
            ("reporter-prompt-for-summary-p" variable nil nil [69266 69304])
            ("reporter-dont-compact-list" variable nil nil [69305 69340])
            ("c-submit-bug-report" function (:user-visible-flag t) nil [69342 71339])
            ("cc-provide" code nil nil [71343 71364]))          
      :file "cc-mode.el.gz"
      :pointmax 71391
      :fsize 20367
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax '((close-paren 3485 . 3486) (symbol 3250 . 3267) (open-paren 3249 . 3250) (close-paren 3246 . 3247) (symbol 3152 . 3168) (open-paren 3151 . 3152)))
    (semanticdb-table "make-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("add-log" include nil nil [3486 3504])
            ("dabbrev" include nil nil [3465 3483])
            ("imenu" include nil nil [3446 3462])
            ("makefile" customgroup (:user-visible-flag t) nil [3661 3837])
            ("makefile-space" variable
               (:default-value (quote ((((class color)) (:background "hotpink")) (t (:reverse-video t))))
                :type "face")
                nil [3839 4024])
            ("define-obsolete-face-alias" code nil nil [4025 4097])
            ("makefile-targets" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [4099 4373])
            ("makefile-shell" variable (:type "face") nil [4375 4693])
            ("makefile-makepp-perl" variable
               (:default-value (quote ((((class color) (background light)) (:background "LightBlue1")) (((class color) (background dark)) (:background "DarkBlue")) (t (:reverse-video t))))
                :type "face")
                nil [4695 5013])
            ("makefile-browser-buffer-name" variable (:default-value "*Macros and Targets*") nil [5015 5163])
            ("makefile-target-colon" variable (:default-value ":") nil [5165 5351])
            ("makefile-macro-assign" variable (:default-value " = ") nil [5353 5723])
            ("makefile-electric-keys" variable nil nil [5725 5882])
            ("makefile-use-curly-braces-for-macros-p" variable nil nil [5884 6143])
            ("makefile-tab-after-target-colon" variable (:default-value t) nil [6145 6327])
            ("makefile-browser-leftmost-column" variable (:default-value 10) nil [6329 6476])
            ("makefile-browser-cursor-column" variable (:default-value 10) nil [6478 6639])
            ("makefile-backslash-column" variable (:default-value 48) nil [6641 6786])
            ("makefile-backslash-align" variable (:default-value t) nil [6788 6930])
            ("makefile-browser-selected-mark" variable (:default-value "+  ") nil [6932 7081])
            ("makefile-browser-unselected-mark" variable (:default-value "   ") nil [7083 7236])
            ("makefile-browser-auto-advance-after-selection-p" variable (:default-value t) nil [7238 7412])
            ("makefile-pickup-everything-picks-up-filenames-p" variable nil nil [7414 7682])
            ("makefile-cleanup-continuations" variable nil nil [7684 8083])
            ("makefile-mode-hook" variable nil nil [8085 8192])
            ("makefile-browser-hook" variable (:default-value (quote nil)) nil [8194 8228])
            ("makefile-special-targets-list" variable (:default-value (quote ("DEFAULT" "DONE" "ERROR" "EXPORT" "FAILED" "GROUPEPILOG" "GROUPPROLOG" "IGNORE" "IMPORT" "INCLUDE" "INCLUDEDIRS" "INIT" "KEEP_STATE" "MAKEFILES" "MAKE_VERSION" "NO_PARALLEL" "PARALLEL" "PHONY" "PRECIOUS" "REMOVE" "SCCS_GET" "SILENT" "SOURCE" "SUFFIXES" "WAIT" "c.o" "C.o" "m.o" "el.elc" "y.c" "s.o"))) nil [8281 8976])
            ("put" code nil nil [8977 9037])
            ("makefile-runtime-macros-list" variable (:default-value (quote (("@") ("&") (">") ("<") ("*") ("^") ("+") ("?") ("%") ("$")))) nil [9039 9436])
            ("makefile-dependency-regex" variable (:default-value "^\\(\\(?:\\$\\(?:[({]\\(?:\\$\\(?:[({]\\(?:\\$\\(?:[^({]\\|.[^
$#})]+?[})]\\)\\|[^
$#)}]\\)+?[})]\\|[^({]\\)\\|[^
$#)}]\\)+?[})]\\|[^({]\\)\\|[^
$#:=]\\)+?\\)\\(:\\)\\(?:[ 	]*$\\|[^=
]\\(?:[^#
]*?;[ 	]*\\(.+\\)\\)?\\)") nil [9620 9998])
            ("makefile-bsdmake-dependency-regex" variable
               (:constant-flag t
                :default-value (progn (string-match (regexp-quote "\\(:\\)") makefile-dependency-regex) (replace-match "\\([:!]\\)" t t makefile-dependency-regex)))
                nil [10000 10240])
            ("makefile-dependency-skip" variable (:default-value "^:") nil [10242 10346])
            ("makefile-rule-action-regex" variable (:default-value "^	[ 	]*\\(?:\\([-@]+\\)[ 	]*\\)\\(.*\\(?:\\\\
.*\\)*\\)") nil [10348 10512])
            ("makefile-makepp-rule-action-regex" variable
               (:constant-flag t
                :default-value "^	[ 	]*\\(\\(?:\\(?:noecho\\|ignore[-_]error\\|[-@]+\\)[ 	]*\\)*\\)\\(\\(&\\S +\\)?\\(?:.*\\\\
\\)*.*\\)")
                nil [10514 10831])
            ("makefile-bsdmake-rule-action-regex" variable
               (:constant-flag t
                :default-value (replace-regexp-in-string "-@" "-+@" makefile-rule-action-regex))
                nil [10833 11014])
            ("makefile-macroassign-regex" variable
               (:constant-flag t
                :default-value "\\(?:^\\|^export\\|^override\\|:\\|: *override\\) *\\([^ 
	][^:#= 	
]*\\)[ 	]*\\(?:!=\\|[*:+]?[:?]?=\\)")
                nil [11205 11740])
            ("makefile-var-use-regex" variable
               (:constant-flag t
                :default-value "[^$]\\$[({]\\([-a-zA-Z0-9_.]+\\|[@%<?^+*][FD]?\\)")
                nil [11742 11881])
            ("makefile-ignored-files-in-pickup-regex" variable
               (:constant-flag t
                :default-value "\\(^\\..*\\)\\|\\(.*~$\\)\\|\\(.*,v$\\)\\|\\(\\.[chy]\\)")
                nil [11883 12063])
            ("makefile-space" variable (:default-value (quote makefile-space)) nil [12065 12171])
            ("makefile-statements" variable
               (:constant-flag t
                :default-value (quote ("include")))
                nil [12320 12413])
            ("makefile-automake-statements" variable
               (:constant-flag t
                :default-value (\` ("if" "else" "endif" (\,@ makefile-statements))))
                nil [12415 12546])
            ("makefile-gmake-statements" variable
               (:constant-flag t
                :default-value (\` ("-sinclude" "sinclude" "ifdef" "ifndef" "ifeq" "ifneq" "-include" "define" "endef" "export" "override define" "override" "unexport" "vpath" (\,@ (cdr makefile-automake-statements)))))
                nil [12548 12861])
            ("makefile-makepp-statements" variable
               (:constant-flag t
                :default-value (\` (t "ifperl" "ifmakeperl" "ifsys" "ifnsys" "iftrue" "ifntrue" "and ifdef" "and ifndef" "and ifeq" "and ifneq" "and ifperl" "and ifmakeperl" "and ifsys" "and ifnsys" "and iftrue" "and ifntrue" "else ifdef" "else ifndef" "else ifeq" "else ifneq" "else ifperl" "else ifmakeperl" "else ifsys" "else ifnsys" "else iftrue" "else ifntrue" "or ifdef" "or ifndef" "or ifeq" "or ifneq" "or ifperl" "or ifmakeperl" "or ifsys" "or ifnsys" "or iftrue" "or ifntrue" "autoload" "build-cache" "build-check" "enddef" "export define" "global" "global build-cache" "global build-check" "global define" "global signature" "global override signature" "load-makefile" "make" "makeperl" "makesub" "no-implicit-load" "perl" "perl-begin" "perl-end" "prebuild" "override export" "override global" "register-parser" "register-command-parser" "register-input-suffix" "register-scanner" "repository" "runtime" "signature" "sub" (\,@ (nthcdr 2 makefile-gmake-statements)))))
                nil [12863 14053])
            ("makefile-bsdmake-statements" variable
               (:constant-flag t
                :default-value (\` (".elif" ".elifdef" ".elifmake" ".elifndef" ".elifnmake" ".else" ".endfor" ".endif" ".for" ".if" ".ifdef" ".ifmake" ".ifndef" ".ifnmake" ".undef")))
                nil [14055 14292])
            ("makefile-make-font-lock-keywords" function (:arguments ("var" "keywords" "space" "negation" "fl-keywords")) nil [14294 16497])
            ("makefile-font-lock-keywords" variable
               (:constant-flag t
                :default-value (makefile-make-font-lock-keywords makefile-var-use-regex makefile-statements t))
                nil [16499 16628])
            ("makefile-automake-font-lock-keywords" variable
               (:constant-flag t
                :default-value (makefile-make-font-lock-keywords makefile-var-use-regex makefile-automake-statements t))
                nil [16630 16777])
            ("makefile-gmake-font-lock-keywords" variable
               (:constant-flag t
                :default-value (makefile-make-font-lock-keywords makefile-var-use-regex makefile-gmake-statements t "^\\(?: [ 	]*\\)?if\\(n\\)\\(?:def\\|eq\\)\\>" (quote ("[^$]\\(\\$[({][@%*][DF][})]\\)" 1 (quote makefile-targets) append)) (quote ("[^$]\\$[({]\\([-a-zA-Z0-9_.]+\\s \\)" 1 font-lock-function-name-face prepend)) (quote ("[^$]\\$\\([({]\\)shell[ 	]+" makefile-match-function-end nil nil (1 (quote makefile-shell) prepend t)))))
                nil [16779 17317])
            ("makefile-makepp-font-lock-keywords" variable
               (:constant-flag t
                :default-value (makefile-make-font-lock-keywords makefile-var-use-regex makefile-makepp-statements nil "^\\(?: [ 	]*\\)?\\(?:and[ 	]+\\|else[ 	]+\\|or[ 	]+\\)?if\\(n\\)\\(?:def\\|eq\\|sys\\|true\\)\\>" (quote ("[^$]\\(\\$[({]\\(?:output\\|stem\\|target\\)s?\\_>.*?[})]\\)" 1 (quote makefile-targets) append)) (quote ("\\(:\\s *\\)\\(build_c\\(?:ache\\|heck\\)\\|env\\(?:ironment\\)?\\|foreach\\|signature\\|scanner\\|quickscan\\|smartscan\\)\\>\\([^:
]*\\)" (1 font-lock-type-face t) (2 font-lock-keyword-face t) (3 font-lock-variable-name-face t))) (quote ("[^$]\\$\\(?:((?\\|{{?\\|\\[\\[?\\)\\([-a-zA-Z0-9_.]+\\s \\)" 1 font-lock-function-name-face prepend)) (quote ("[^$]\\$\\(((?\\|{{?\\|\\[\\[?\\)shell\\(?:[-_]\\(?:global[-_]\\)?once\\)?[ 	]+" makefile-match-function-end nil nil (1 (quote makefile-shell) prepend t))) (quote ("[^$]\\$\\(((?\\|{{?\\|\\[\\[?\\)makeperl[ 	]+" makefile-match-function-end nil nil (1 (quote makefile-makepp-perl) prepend t))) (quote ("[^$]\\$\\(((?\\|{{?\\)perl[ 	]+" makefile-match-function-end nil nil (1 (quote makefile-makepp-perl) t t))) (quote ("ifmakeperl\\s +\\(.*\\)" 1 (quote makefile-makepp-perl) prepend)) (quote ("ifperl\\s +\\(.*\\)" 1 (quote makefile-makepp-perl) t)) (quote ("\\<make\\(?:perl\\|sub\\s +\\S +\\)\\s *
?\\s *{\\(?:{\\s *
?\\(\\(?:.*
\\)+?\\)\\s *}\\|\\s *\\(\\(?:.*?\\|
?\\(?:.*
\\)+?\\)\\)\\)}" (1 (quote makefile-makepp-perl) prepend t) (2 (quote makefile-makepp-perl) prepend t))) (quote ("\\<\\(?:perl\\|sub\\s +\\S +\\)\\s *
?\\s *{\\(?:{\\s *
?\\(\\(?:.*
\\)+?\\)\\s *}\\|\\s *\\(\\(?:.*?\\|
?\\(?:.*
\\)+?\\)\\)\\)}" (1 (quote makefile-makepp-perl) t t) (2 (quote makefile-makepp-perl) t t))) (quote ("perl[-_]begin\\s *\\(?:\\s #.*\\)?
\\(\\(?:.*
\\)+?\\)\\s *perl[-_]end\\>" 1 (quote makefile-makepp-perl) t))))
                nil [17319 19621])
            ("makefile-bsdmake-font-lock-keywords" variable
               (:constant-flag t
                :default-value (makefile-make-font-lock-keywords makefile-var-use-regex makefile-bsdmake-statements t "^\\(?: [ 	]*\\)?\\.\\(?:el\\)?if\\(n?\\)\\(?:def\\|make\\)?\\>[ 	]*\\(!?\\)" (quote ("^[ 	]*\\.for[ 	].+[ 	]\\(in\\)\\>" 1 font-lock-keyword-face))))
                nil [19623 19972])
            ("makefile-imake-font-lock-keywords" variable
               (:constant-flag t
                :default-value (append (makefile-make-font-lock-keywords makefile-var-use-regex makefile-statements t nil (quote ("^XCOMM.*$" . font-lock-comment-face)) (quote ("XVAR\\(?:use\\|def\\)[0-9]" 0 font-lock-keyword-face prepend)) (quote ("@@" . font-lock-preprocessor-face))) cpp-font-lock-keywords))
                nil [19974 20318])
            ("makefile-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("[^|&;<>()`\\\"' 	
]\\(#+\\)" (1 "_")) ("\\\\
" (0 "."))))
                nil [20321 20856])
            ("makefile-imenu-generic-expression" variable (:default-value (\` (("Dependencies" makefile-previous-dependency 1) ("Macro Assignment" (\, makefile-macroassign-regex) 1)))) nil [20858 21089])
            ("makefile-brave-make" variable (:default-value "make") nil [21989 22187])
            ("makefile-query-one-target-method-function" variable (:default-value (quote makefile-query-by-make-minus-q)) nil [22189 22847])
            ("defvaralias" code nil nil [22848 22940])
            ("makefile-up-to-date-buffer-name" variable (:default-value "*Makefile Up-to-date overview*") nil [22942 23097])
            ("define-abbrev-table" code nil nil [23168 23265])
            ("makefile-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (opt-map (make-sparse-keymap))) (define-key map ":" (quote makefile-insert-target-ref)) (if makefile-electric-keys (progn (define-key map "$" (quote makefile-insert-macro-ref)) (define-key map ":" (quote makefile-electric-colon)) (define-key map "=" (quote makefile-electric-equal)) (define-key map "." (quote makefile-electric-dot)))) (define-key map "" (quote makefile-pickup-filenames-as-targets)) (define-key map "" (quote makefile-switch-to-browser)) (define-key map "" (quote comment-region)) (define-key map "" (quote makefile-pickup-everything)) (define-key map "" (quote makefile-create-up-to-date-overview)) (define-key map "	" (quote makefile-insert-gmake-function)) (define-key map "" (quote makefile-backslash-region)) (define-key map "" (quote makefile-automake-mode)) (define-key map "" (quote makefile-bsdmake-mode)) (define-key map "" (quote makefile-gmake-mode)) (define-key map "	" (quote makefile-imake-mode)) (define-key map "" (quote makefile-mode)) (define-key map "" (quote makefile-makepp-mode)) (define-key map "\360" (quote makefile-previous-dependency)) (define-key map "\356" (quote makefile-next-dependency)) (define-key map "	" (quote completion-at-point)) (define-key map [menu-bar makefile-mode] (cons "Makefile" (make-sparse-keymap "Makefile"))) (define-key map [menu-bar makefile-mode makefile-type] (cons "Switch Makefile Type" opt-map)) (define-key opt-map [makefile-makepp-mode] (quote (menu-item "Makepp" makefile-makepp-mode :help "An adapted `makefile-mode' that knows about makepp" :button (:radio eq major-mode (quote makefile-makepp-mode))))) (define-key opt-map [makefile-imake-mode] (quote (menu-item "Imake" makefile-imake-mode :help "An adapted `makefile-mode' that knows about imake" :button (:radio eq major-mode (quote makefile-imake-mode))))) (define-key opt-map [makefile-mode] (quote (menu-item "Classic" makefile-mode :help "`makefile-mode' with no special functionality" :button (:radio eq major-mode (quote makefile-mode))))) (define-key opt-map [makefile-bsdmake-mode] (quote (menu-item "BSD" makefile-bsdmake-mode :help "An adapted `makefile-mode' that knows about BSD make" :button (:radio eq major-mode (quote makefile-bsdmake-mode))))) (define-key opt-map [makefile-automake-mode] (quote (menu-item "Automake" makefile-automake-mode :help "An adapted `makefile-mode' that knows about automake" :button (:radio eq major-mode (quote makefile-automake-mode))))) (define-key opt-map [makefile-gmake-mode] (quote (menu-item "GNU make" makefile-gmake-mode :help "An adapted `makefile-mode' that knows about GNU make" :button (:radio eq major-mode (quote makefile-gmake-mode))))) (define-key map [menu-bar makefile-mode browse] (quote (menu-item "Pop up Makefile Browser" makefile-switch-to-browser :help "Pop up Makefile Browser"))) (define-key map [menu-bar makefile-mode overview] (quote (menu-item "Up To Date Overview" makefile-create-up-to-date-overview :help "Create a buffer containing an overview of the state of all known targets"))) (define-key map [menu-bar makefile-mode separator1] (quote ("----"))) (define-key map [menu-bar makefile-mode pickup-file] (quote (menu-item "Pick File Name as Target" makefile-pickup-filenames-as-targets :help "Scan the current directory for filenames to use as targets"))) (define-key map [menu-bar makefile-mode function] (quote (menu-item "Insert GNU make function" makefile-insert-gmake-function :help "Insert a GNU make function call"))) (define-key map [menu-bar makefile-mode pickup] (quote (menu-item "Find Targets and Macros" makefile-pickup-everything :help "Notice names of all macros and targets in Makefile"))) (define-key map [menu-bar makefile-mode complete] (quote (menu-item "Complete Target or Macro" completion-at-point :help "Perform completion on Makefile construct preceding point"))) (define-key map [menu-bar makefile-mode backslash] (quote (menu-item "Backslash Region" makefile-backslash-region :help "Insert, align, or delete end-of-line backslashes on the lines in the region"))) (define-key map [menu-bar makefile-mode separator] (quote ("----"))) (define-key map [menu-bar makefile-mode prev] (quote (menu-item "Move to Previous Dependency" makefile-previous-dependency :help "Move point to the beginning of the previous dependency line"))) (define-key map [menu-bar makefile-mode next] (quote (menu-item "Move to Next Dependency" makefile-next-dependency :help "Move point to the beginning of the next dependency line"))) map)) nil [23267 28204])
            ("makefile-browser-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "n" (quote makefile-browser-next-line)) (define-key map "" (quote makefile-browser-next-line)) (define-key map "p" (quote makefile-browser-previous-line)) (define-key map "" (quote makefile-browser-previous-line)) (define-key map " " (quote makefile-browser-toggle)) (define-key map "i" (quote makefile-browser-insert-selection)) (define-key map "I" (quote makefile-browser-insert-selection-and-quit)) (define-key map "" (quote makefile-browser-insert-continuation)) (define-key map "q" (quote makefile-browser-quit)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) map)) nil [28207 28997])
            ("makefile-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 40 "()    " st) (modify-syntax-entry 41 ")(    " st) (modify-syntax-entry 91 "(]    " st) (modify-syntax-entry 93 ")[    " st) (modify-syntax-entry 123 "(}    " st) (modify-syntax-entry 125 "){    " st) (modify-syntax-entry 39 "\"    " st) (modify-syntax-entry 96 "\"    " st) (modify-syntax-entry 35 "<     " st) (modify-syntax-entry 10 ">     " st) (modify-syntax-entry 61 "." st) st)) nil [29000 29575])
            ("makefile-imake-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table makefile-mode-syntax-table))) (modify-syntax-entry 47 ". 14" st) (modify-syntax-entry 42 ". 23" st) (modify-syntax-entry 35 "'" st) (modify-syntax-entry 10 ". b" st) st)) nil [29577 29847])
            ("makefile-target-table" variable nil nil [30053 30140])
            ("put" code nil nil [30141 30193])
            ("makefile-macro-table" variable nil nil [30195 30280])
            ("put" code nil nil [30281 30332])
            ("makefile-browser-client" variable (:default-value "A buffer in Makefile mode that is currently using the browser.") nil [30334 30433])
            ("makefile-browser-selection-vector" variable nil nil [30435 30481])
            ("makefile-has-prereqs" variable nil nil [30482 30515])
            ("makefile-need-target-pickup" variable (:default-value t) nil [30516 30554])
            ("makefile-need-macro-pickup" variable (:default-value t) nil [30555 30592])
            ("makefile-mode-hook" variable (:default-value (quote nil)) nil [30594 30625])
            ("makefile-gnumake-functions-alist" variable
               (:constant-flag t
                :default-value (quote (("subst" "From" "To" "In") ("patsubst" "Pattern" "Replacement" "In") ("strip" "Text") ("findstring" "Find what" "In") ("filter" "Pattern" "Text") ("filter-out" "Pattern" "Text") ("sort" "List") ("dir" "Names") ("notdir" "Names") ("suffix" "Names") ("basename" "Names") ("addprefix" "Prefix" "Names") ("addsuffix" "Suffix" "Names") ("join" "List 1" "List 2") ("word" "Index" "Text") ("words" "Text") ("firstword" "Text") ("wildcard" "Pattern") ("foreach" "Variable" "List" "Text") ("origin" "Variable") ("shell" "Command"))))
                nil [30753 31478])
            ("define-derived-mode" code nil nil [31657 36679])
            ("define-derived-mode" code nil nil [36755 36981])
            ("define-derived-mode" code nil nil [36998 37215])
            ("define-derived-mode" code nil nil [37232 37654])
            ("define-derived-mode" code nil nil [37671 38093])
            ("define-derived-mode" code nil nil [38110 38427])
            ("makefile-next-dependency" function (:user-visible-flag t) nil [38450 38723])
            ("makefile-previous-dependency" function (:user-visible-flag t) nil [38725 39347])
            ("makefile-electric-dot" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [39380 39657])
            ("makefile-insert-special-target" function (:user-visible-flag t) nil [39659 40071])
            ("makefile-electric-equal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [40073 40380])
            ("makefile-insert-macro" function
               (:user-visible-flag t
                :arguments ("macro-name"))
                nil [40382 40716])
            ("makefile-insert-macro-ref" function
               (:user-visible-flag t
                :arguments ("macro-name"))
                nil [40718 41027])
            ("makefile-insert-target" function
               (:user-visible-flag t
                :arguments ("target-name"))
                nil [41029 41412])
            ("makefile-insert-target-ref" function
               (:user-visible-flag t
                :arguments ("target-name"))
                nil [41414 41758])
            ("makefile-electric-colon" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41760 42025])
            ("makefile-pickup-targets" function (:user-visible-flag t) nil [42221 43083])
            ("makefile-pickup-macros" function (:user-visible-flag t) nil [43085 43777])
            ("makefile-pickup-everything" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [43779 44183])
            ("makefile-pickup-filenames-as-targets" function (:user-visible-flag t) nil [44185 44743])
            ("makefile-completions-at-point" function nil nil [44765 46006])
            ("define-obsolete-function-alias" code nil nil [46008 46087])
            ("makefile-backslash-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "delete-flag"))
                nil [46140 48190])
            ("makefile-append-backslash" function (:arguments ("column")) nil [48192 48552])
            ("makefile-delete-backslash" function nil nil [48554 48767])
            ("makefile-fill-paragraph" function (:arguments ("_justify")) nil [48784 51348])
            ("makefile-browser-format-target-line" function (:arguments ("target" "selected")) nil [51502 51776])
            ("makefile-browser-format-macro-line" function (:arguments ("macro" "selected")) nil [51778 52045])
            ("makefile-browser-fill" function (:arguments ("targets" "macros")) nil [52047 52668])
            ("makefile-browser-next-line" function (:user-visible-flag t) nil [52717 52941])
            ("makefile-browser-previous-line" function (:user-visible-flag t) nil [52943 53177])
            ("makefile-browser-quit" function (:user-visible-flag t) nil [53240 53540])
            ("makefile-browser-toggle" function (:user-visible-flag t) nil [53586 54696])
            ("makefile-browser-insert-continuation" function (:user-visible-flag t) nil [54752 55261])
            ("makefile-browser-insert-selection" function (:user-visible-flag t) nil [55263 55686])
            ("makefile-browser-insert-selection-and-quit" function nil nil [55688 55821])
            ("makefile-browser-send-this-line-item" function nil nil [55823 56246])
            ("makefile-browser-start-interaction" function nil nil [56248 56360])
            ("makefile-browse" function (:arguments ("targets" "macros")) nil [56362 56904])
            ("makefile-switch-to-browser" function nil nil [56906 57164])
            ("makefile-create-up-to-date-overview" function (:user-visible-flag t) nil [57331 59208])
            ("makefile-save-temporary" function nil nil [59210 59437])
            ("makefile-generate-temporary-filename" function nil nil [59464 59923])
            ("makefile-query-targets" function (:arguments ("filename" "target-table" "prereq-list")) nil [59925 60708])
            ("makefile-query-by-make-minus-q" function (:arguments ("target" "filename")) nil [60732 60895])
            ("makefile-cleanup-continuations" function nil nil [61056 61349])
            ("makefile-warn-suspicious-lines" function nil nil [61512 61853])
            ("makefile-warn-continuations" function nil nil [61855 62152])
            ("makefile-insert-gmake-function" function (:user-visible-flag t) nil [62317 62942])
            ("makefile-prompt-for-gmake-funargs" function (:arguments ("function-name" "prompt-list")) nil [62944 63164])
            ("makefile-match-function-end" function (:arguments ("_end")) nil [63322 63860])
            ("makefile-match-dependency" function (:arguments ("bound")) nil [63862 65032])
            ("makefile-match-action" function (:arguments ("bound")) nil [65034 65234])
            ("makefile-do-macro-insertion" function (:arguments ("macro-name")) nil [65236 65490])
            ("makefile-remember-target" function (:arguments ("target-name" "has-prereqs")) nil [65492 65930])
            ("makefile-remember-macro" function (:arguments ("macro-name")) nil [65932 66229])
            ("makefile-forward-after-target-colon" function nil nil [66231 66498])
            ("makefile-browser-on-macro-line-p" function nil nil [66500 66700])
            ("makefile-browser-this-line-target-name" function nil nil [66702 66933])
            ("makefile-browser-this-line-macro-name" function nil nil [66935 67249])
            ("makefile-format-macro-ref" function (:arguments ("macro-name")) nil [67251 67622])
            ("makefile-browser-get-state-for-line" function (:arguments ("n")) nil [67624 67721])
            ("makefile-browser-set-state-for-line" function (:arguments ("n" "to-state")) nil [67723 67838])
            ("makefile-browser-toggle-state-for-line" function (:arguments ("n")) nil [67840 67978])
            ("makefile-last-line-p" function nil nil [67980 68049])
            ("makefile-first-line-p" function nil nil [68051 68127])
            ("makefile-add-log-defun" function nil nil [68179 69072])
            ("make-mode" package nil nil [69074 69094]))          
      :file "make-mode.el.gz"
      :pointmax 69123
      :fsize 18067
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax '((close-paren 3504 . 3505) (symbol 3426 . 3443) (open-paren 3425 . 3426)))
    (semanticdb-table "gud.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("comint" include nil nil [1729 1746])
            ("gdb-active-process" variable nil nil [1748 1775])
            ("gdb-define-alist" variable nil nil [1776 1801])
            ("gdb-macro-info" variable nil nil [1802 1825])
            ("gdb-show-changed-values" variable nil nil [1826 1858])
            ("gdb-source-window" variable nil nil [1859 1885])
            ("gdb-var-list" variable nil nil [1886 1907])
            ("hl-line-mode" variable nil nil [1908 1929])
            ("hl-line-sticky-flag" variable nil nil [1930 1958])
            ("gud" customgroup (:user-visible-flag t) nil [2096 2275])
            ("gud-key-prefix" variable (:default-value "") nil [2278 2402])
            ("global-set-key" code nil nil [2404 2465])
            ("gud-marker-filter" variable nil nil [2537 2567])
            ("put" code nil nil [2568 2611])
            ("gud-find-file" variable nil nil [2612 2638])
            ("put" code nil nil [2639 2678])
            ("gud-marker-filter" function (:arguments ("args")) nil [2680 2751])
            ("gud-minor-mode" variable nil nil [2753 2780])
            ("put" code nil nil [2781 2821])
            ("gud-comint-buffer" variable nil nil [2823 2853])
            ("gud-keep-buffer" variable nil nil [2855 2883])
            ("gud-symbol" function (:arguments ("sym" "soft" "minor-mode")) nil [2885 3318])
            ("gud-val" function (:arguments ("sym" "minor-mode")) nil [3320 3508])
            ("gud-running" variable nil nil [3510 3619])
            ("gud-target-name" variable (:default-value "--unknown--") nil [3621 3728])
            ("gud-goto-info" function (:user-visible-flag t) nil [3772 3984])
            ("gud-tool-bar-item-visible-no-fringe" function nil nil [3986 4257])
            ("declare-function" code nil nil [4259 4313])
            ("gud-stop-subjob" function nil nil [4315 4708])
            ("easy-mmode-defmap" code nil nil [4710 8063])
            ("easy-mmode-defmap" code nil nil [8065 9866])
            ("let" code nil nil [9868 10036])
            ("gud-mode-map" variable (:default-value (make-sparse-keymap)) nil [10038 10165])
            ("gud-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (x (quote ((gud-break . "gud/break") (gud-remove . "gud/remove") (gud-print . "gud/print") (gud-pstar . "gud/pstar") (gud-pp . "gud/pp") (gud-watch . "gud/watch") (gud-run . "gud/run") (gud-go . "gud/go") (gud-stop-subjob . "gud/stop") (gud-cont . "gud/cont") (gud-until . "gud/until") (gud-next . "gud/next") (gud-step . "gud/step") (gud-finish . "gud/finish") (gud-nexti . "gud/nexti") (gud-stepi . "gud/stepi") (gud-up . "gud/up") (gud-down . "gud/down") (gud-goto-info . "info"))) map) (tool-bar-local-item-from-menu (car x) (cdr x) map gud-minor-mode-map)))) nil [10167 10871])
            ("gud-file-name" function (:arguments ("f")) nil [10873 11626])
            ("declare-function" code nil nil [11628 11682])
            ("gud-find-file" function (:arguments ("file")) nil [11684 12598])
            ("gud-def" function (:arguments ("func" "cmd" "key" "doc")) nil [13168 14558])
            ("gud-last-frame" variable nil nil [14778 14805])
            ("gud-last-last-frame" variable nil nil [14975 15007])
            ("dframe" include nil nil [16119 16136])
            ("gud-last-speedbar-stackframe" variable nil nil [16173 16343])
            ("gud-speedbar-key-map" variable nil nil [16345 16428])
            ("declare-function" code nil nil [16489 16548])
            ("gud-speedbar-item-info" function nil nil [16550 16824])
            ("declare-function" code nil nil [16826 16891])
            ("declare-function" code nil nil [16892 16960])
            ("speedbar-mode-functions-list" variable nil nil [16961 16998])
            ("gud-install-speedbar-variables" function nil nil [17000 17852])
            ("gud-speedbar-menu-items" variable (:default-value (quote (["Jump to stack frame" speedbar-edit-line :visible (not (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)))] ["Edit value" speedbar-edit-line :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Delete expression" gdb-var-delete :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ["Auto raise frame" gdb-speedbar-auto-raise :style toggle :selected gdb-speedbar-auto-raise :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi))] ("Output Format" :visible (eq (buffer-local-value (quote gud-minor-mode) gud-comint-buffer) (quote gdbmi)) ["Binary" (gdb-var-set-format "binary") t] ["Natural" (gdb-var-set-format "natural") t] ["Hexadecimal" (gdb-var-set-format "hexadecimal") t])))) nil [17854 18791])
            ("if" code nil nil [18842 18969])
            ("gud-expansion-speedbar-buttons" function (:arguments ("_directory" "_zero")) nil [18971 19191])
            ("declare-function" code nil nil [19193 19313])
            ("declare-function" code nil nil [19314 19413])
            ("declare-function" code nil nil [19414 19522])
            ("gud-speedbar-buttons" function (:arguments ("buffer")) nil [19524 23249])
            ("gud-gdb-history" variable nil nil [23389 23417])
            ("gud-gud-gdb-command-name" variable (:default-value "gdb --fullname") nil [23419 23635])
            ("gud-gdb-marker-regexp" variable (:default-value (concat "\\(.:?[^" ":" "
]*\\)" ":" "\\([0-9]*\\)" ":" ".*
")) nil [23637 23884])
            ("gud-marker-acc" variable nil nil [24230 24256])
            ("make-variable-buffer-local" code nil nil [24257 24301])
            ("gud-gdb-marker-filter" function (:arguments ("string")) nil [24303 26226])
            ("easy-mmode-defmap" code nil nil [26228 26413])
            ("gud-query-cmdline" function (:arguments ("minor-mode" "init")) nil [26415 27108])
            ("gdb-first-prompt" variable (:default-value t) nil [27110 27137])
            ("gud-filter-pending-text" variable nil nil [27139 27253])
            ("gud-gdb-completion-function" variable nil nil [27457 27713])
            ("declare-function" code nil nil [27752 27802])
            ("gud-gdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [27893 30395])
            ("gud-gdb-fetch-lines-in-progress" variable nil nil [30461 30501])
            ("gud-gdb-fetch-lines-string" variable nil nil [30580 30615])
            ("gud-gdb-fetch-lines-break" variable nil nil [30676 30710])
            ("gud-gdb-fetched-lines" variable nil nil [30773 30803])
            ("gud-gdb-completions" function (:arguments ("context" "command")) nil [30805 31476])
            ("gud-gdb-completions-1" function (:arguments ("complete-list")) nil [31536 32370])
            ("gud-gdb-completion-at-point" function nil nil [32372 33382])
            ("gud-gdb-fetch-lines-filter" function (:arguments ("string")) nil [33821 34505])
            ("declare-function" code nil nil [34656 34730])
            ("declare-function" code nil nil [34731 34798])
            ("gud-gdb-goto-stackframe" function (:arguments ("_text" "token" "_indent")) nil [34800 35021])
            ("gud-gdb-fetched-stack-frame" variable nil nil [35023 35106])
            ("gud-gdb-get-stackframe" function (:arguments ("buffer")) nil [35108 36221])
            ("gud-gdb-run-command-fetch-lines" function (:arguments ("command" "buffer" "skip")) nil [36351 37268])
            ("gud-sdb-history" variable nil nil [37408 37436])
            ("gud-sdb-needs-tags" variable (:default-value (not (file-exists-p "/var"))) nil [37438 37566])
            ("gud-sdb-lastfile" variable nil nil [37568 37597])
            ("gud-sdb-marker-filter" function (:arguments ("string")) nil [37599 39214])
            ("gud-sdb-find-file" function (:arguments ("f")) nil [39216 39316])
            ("sdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [39333 40678])
            ("gud-dbx-history" variable nil nil [40817 40845])
            ("gud-dbx-directories" variable nil nil [40847 41235])
            ("gud-dbx-massage-args" function (:arguments ("_file" "args")) nil [41237 41511])
            ("gud-dbx-marker-filter" function (:arguments ("string")) nil [41513 42593])
            ("gud-mips-p" variable (:default-value (or (string-match "^mips-[^-]*-ultrix" system-configuration) (string-match "^mips-[^-]*-riscos" system-configuration) (string-match "^mips-[^-]*-osf1" system-configuration) (string-match "^alpha[^-]*-[^-]*-osf" system-configuration))) nil [42744 43172])
            ("gud-dbx-command-name" variable (:default-value (concat "dbx" (if gud-mips-p " -emacs"))) nil [43174 43246])
            ("gud-mipsdbx-marker-filter" function (:arguments ("string")) nil [43386 45043])
            ("gud-irix-p" variable (:default-value (and (string-match "^mips-[^-]*-irix" system-configuration) (not (string-match "irix[6-9]\\.[1-9]" system-configuration)))) nil [46035 46353])
            ("gud-dbx-use-stopformat-p" variable (:default-value (string-match "irix[6-9]\\.[1-9]" system-configuration)) nil [46354 46600])
            ("gud-irixdbx-marker-filter" function (:arguments ("string")) nil [47846 49562])
            ("gud-dguxdbx-marker-filter" function (:arguments ("string")) nil [50189 51223])
            ("dbx" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [51240 53860])
            ("gud-xdb-history" variable nil nil [54021 54049])
            ("gud-xdb-directories" variable nil nil [54051 54439])
            ("gud-xdb-massage-args" function (:arguments ("_file" "args")) nil [54441 54715])
            ("gud-xdb-marker-filter" function (:arguments ("string")) nil [54792 55526])
            ("xdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [55543 56955])
            ("gud-perldb-history" variable nil nil [57100 57131])
            ("gud-perldb-massage-args" function (:arguments ("_file" "args")) nil [57133 58444])
            ("gud-perldb-marker-filter" function (:arguments ("string")) nil [58790 61284])
            ("gud-perldb-command-name" variable (:default-value "perl -d") nil [61286 61422])
            ("perldb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [61439 62802])
            ("gud-pdb-history" variable nil nil [62959 62987])
            ("gud-pdb-marker-regexp" variable (:default-value "^> \\([-a-zA-Z0-9_/.:\\]*\\|<string>\\)(\\([0-9]+\\))\\([a-zA-Z0-9_]*\\|\\?\\|<module>\\)()\\(->[^
]*\\)?[
]") nil [63122 63271])
            ("gud-pdb-marker-regexp-file-group" variable (:default-value 1) nil [63273 63316])
            ("gud-pdb-marker-regexp-line-group" variable (:default-value 2) nil [63317 63360])
            ("gud-pdb-marker-regexp-fnname-group" variable (:default-value 3) nil [63361 63406])
            ("gud-pdb-marker-regexp-start" variable (:default-value "^> ") nil [63408 63450])
            ("gud-pdb-marker-filter" function (:arguments ("string")) nil [63796 65606])
            ("gud-pdb-command-name" variable (:default-value "pdb") nil [65608 65794])
            ("pdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [65811 67126])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [70484 70597])
            ("gud-jdb-use-classpath" variable (:default-value t) nil [70599 71313])
            ("gud-jdb-classpath" variable nil nil [71315 72254])
            ("gud-jdb-sourcepath" variable nil nil [72256 72477])
            ("gud-marker-acc-max-length" variable (:default-value 4000) nil [72479 72723])
            ("gud-jdb-history" variable nil nil [72725 72798])
            ("gud-jdb-directories" variable (:default-value (list ".")) nil [72842 73424])
            ("gud-jdb-source-files" variable nil nil [73426 73521])
            ("gud-jdb-class-source-alist" variable nil nil [73624 73733])
            ("gud-jdb-analysis-buffer" variable nil nil [73790 73826])
            ("gud-jdb-classpath-string" variable nil nil [73828 73903])
            ("gud-jdb-build-source-files-list" function (:arguments ("path" "extn")) nil [73905 74274])
            ("gud-jdb-skip-whitespace" function nil nil [74307 74378])
            ("gud-jdb-skip-single-line-comment" function nil nil [74429 74488])
            ("gud-jdb-skip-traditional-or-documentation-comment" function nil nil [74548 74871])
            ("gud-jdb-skip-whitespace-and-comments" function nil nil [74952 75298])
            ("gud-jdb-skip-id-ish-thing" function nil nil [75460 75538])
            ("gud-jdb-skip-string-literal" function nil nil [75577 75782])
            ("gud-jdb-skip-character-literal" function nil nil [75824 76029])
            ("gud-jdb-skip-block" function nil nil [76209 77470])
            ("gud-jdb-analyze-source" function (:arguments ("buf" "file")) nil [77662 79862])
            ("gud-jdb-build-class-source-alist-for-file" function (:arguments ("file")) nil [79864 80023])
            ("gud-jdb-build-class-source-alist" function (:arguments ("sources")) nil [80183 80495])
            ("gud-jdb-massage-args" function (:arguments ("_file" "args")) nil [80597 82260])
            ("gud-jdb-find-source-file" function (:arguments ("p")) nil [82464 82545])
            ("gud-jdb-lowest-stack-level" variable (:default-value 999) nil [82604 82643])
            ("gud-jdb-find-source-using-classpath" function (:arguments ("p")) nil [82645 83572])
            ("gud-jdb-find-source" function (:arguments ("_string")) nil [83574 83821])
            ("gud-jdb-parse-classpath-string" function (:arguments ("string")) nil [83823 84143])
            ("gud-jdb-marker-filter" function (:arguments ("string")) nil [84254 88385])
            ("gud-jdb-command-name" variable (:default-value "jdb") nil [88387 88465])
            ("jdb" function
               (:user-visible-flag t
                :arguments ("command-line"))
                nil [88482 91688])
            ("gud-delete-prompt-marker" variable nil nil [93664 93701])
            ("put" code nil nil [93705 93741])
            ("define-derived-mode" code nil nil [93743 96618])
            ("gud-chdir-before-run" variable (:default-value t) nil [96620 96744])
            ("declare-function" code nil nil [96746 96804])
            ("declare-function" code nil nil [96805 96882])
            ("gud-common-init" function (:arguments ("command-line" "massage-args" "marker-filter" "find-file")) nil [97124 100080])
            ("gud-set-buffer" function nil nil [100082 100189])
            ("gud-filter-defer-flag" variable nil nil [100191 100338])
            ("gud-filter" function (:arguments ("proc" "string")) nil [100516 102811])
            ("gud-minor-mode-type" variable nil nil [102813 102845])
            ("gud-overlay-arrow-position" variable nil nil [102846 102885])
            ("add-to-list" code nil nil [102886 102956])
            ("declare-function" code nil nil [102958 102998])
            ("declare-function" code nil nil [102999 103073])
            ("speedbar-previously-used-expansion-list-name" variable nil nil [103074 103127])
            ("gud-sentinel" function (:arguments ("proc" "msg")) nil [103129 104749])
            ("gud-kill-buffer-hook" function nil nil [104751 104980])
            ("gud-reset" function nil nil [104982 105205])
            ("gud-display-frame" function (:user-visible-flag t) nil [105207 105575])
            ("declare-function" code nil nil [105577 105634])
            ("declare-function" code nil nil [105635 105692])
            ("declare-function" code nil nil [105693 105756])
            ("gud-display-line" function (:arguments ("true-file" "line")) nil [106160 107522])
            ("gud-format-command" function (:arguments ("str" "arg")) nil [107771 109482])
            ("gud-read-address" function nil nil [109484 110095])
            ("gud-call" function (:arguments ("fmt" "arg")) nil [110097 110251])
            ("gud-basic-call" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [110253 111177])
            ("gud-refresh" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [111179 111398])
            ("gud-find-expr-function" variable (:default-value (quote gud-find-c-expr)) nil [111570 111618])
            ("gud-find-expr" function (:arguments ("args")) nil [111620 112353])
            ("gud-find-c-expr" function (:user-visible-flag t) nil [112515 113377])
            ("gud-innermost-expr" function nil nil [113379 113964])
            ("gud-backward-sexp" function nil nil [113966 114105])
            ("gud-forward-sexp" function nil nil [114107 114242])
            ("gud-prev-expr" function nil nil [114244 114696])
            ("gud-next-expr" function nil nil [114698 115153])
            ("gud-expr-compound-sep" function (:arguments ("span-start" "span-end")) nil [115155 115918])
            ("gud-expr-compound" function (:arguments ("first" "second")) nil [115920 116886])
            ("declare-function" code nil nil [116889 116943])
            ("declare-function" code nil nil [116944 116998])
            ("gud-find-class" function (:arguments ("f" "_line")) nil [117000 121376])
            ("gdb-script-mode-syntax-table" variable (:default-value (let ((st (make-syntax-table))) (modify-syntax-entry 39 "\"" st) (modify-syntax-entry 35 "<" st) (modify-syntax-entry 10 ">" st) st)) nil [121594 121783])
            ("gdb-script-font-lock-keywords" variable (:default-value (quote (("^define\\s-+\\(\\(\\w\\|\\s_\\)+\\)" (1 font-lock-function-name-face)) ("\\$\\(\\w+\\)" (1 font-lock-variable-name-face)) ("^\\s-*\\(\\w\\(\\w\\|\\s_\\)*\\)" (1 font-lock-keyword-face))))) nil [121785 122024])
            ("gdb-script-syntax-propertize-function" variable
               (:constant-flag t
                :default-value (syntax-propertize-rules ("^document\\s-.*\\(
\\)" (1 "< b")) ("^end\\(\\>\\)" (1 (ignore (when (and (> (match-beginning 0) (point-min)) (eq 1 (nth 7 (save-excursion (syntax-ppss (1- (match-beginning 0))))))) (put-text-property (1- (match-beginning 0)) (match-beginning 0) (quote syntax-table) (eval-when-compile (string-to-syntax "> b"))) (put-text-property (1- (match-beginning 0)) (match-end 0) (quote syntax-multiline) t)))))))
                nil [122026 123343])
            ("gdb-script-font-lock-syntactic-face" function (:arguments ("state")) nil [123345 123514])
            ("gdb-script-basic-indent" variable (:default-value 2) nil [123516 123550])
            ("gdb-script-skip-to-head" function nil nil [123552 123822])
            ("gdb-script-calculate-indentation" function nil nil [123824 124373])
            ("gdb-script-indent-line" function (:user-visible-flag t) nil [124375 124997])
            ("gdb-script-beginning-of-defun" function nil nil [125028 125338])
            ("gdb-script-end-of-defun" function nil nil [125369 125592])
            ("define-derived-mode" code nil nil [125609 126669])
            ("tooltip-mode" variable nil nil [126722 126743])
            ("define-minor-mode" code nil nil [126760 128312])
            ("define-obsolete-variable-alias" code nil nil [128314 128423])
            ("gud-tooltip-modes" variable (:default-value (quote (gud-mode c-mode c++-mode fortran-mode python-mode))) nil [128425 128610])
            ("define-obsolete-variable-alias" code nil nil [128612 128725])
            ("gud-tooltip-display" variable (:default-value (quote ((eq (tooltip-event-buffer gud-tooltip-event) (marker-buffer gud-overlay-arrow-position))))) nil [128727 129090])
            ("gud-tooltip-echo-area" variable nil nil [129092 129236])
            ("make-obsolete-variable" code nil nil [129238 129331])
            ("gud-tooltip-change-major-mode" function nil nil [129366 129557])
            ("gud-tooltip-activate-mouse-motions-if-enabled" function nil nil [129559 130006])
            ("gud-tooltip-mouse-motions-active" variable nil nil [130008 130129])
            ("gud-tooltip-activate-mouse-motions" function (:arguments ("activatep")) nil [130453 130930])
            ("tooltip-last-mouse-motion-event" variable nil nil [130932 130972])
            ("declare-function" code nil nil [130973 131038])
            ("declare-function" code nil nil [131039 131096])
            ("gud-tooltip-mouse-motion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [131098 131373])
            ("gud-tooltip-dereference" variable nil nil [131395 131547])
            ("gud-tooltip-event" variable nil nil [131549 131701])
            ("gud-tooltip-dereference" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [131703 132110])
            ("define-obsolete-function-alias" code nil nil [132112 132240])
            ("tooltip-use-echo-area" variable nil nil [132241 132271])
            ("declare-function" code nil nil [132272 132344])
            ("declare-function" code nil nil [132345 132411])
            ("gud-tooltip-process-output" function (:arguments ("process" "output")) nil [132735 133066])
            ("gud-tooltip-print-command" function (:arguments ("expr")) nil [133068 133359])
            ("declare-function" code nil nil [133361 133434])
            ("declare-function" code nil nil [133435 133493])
            ("declare-function" code nil nil [133494 133551])
            ("gud-tooltip-tips" function (:arguments ("event")) nil [133553 135889])
            ("gud" package nil nil [135891 135905]))          
      :file "gud.el.gz"
      :pointmax 135928
      :fsize 36744
      :lastmodtime '(21513 8534 0 0)
      :unmatched-syntax '((close-paren 16136 . 16137) (symbol 16101 . 16118) (open-paren 16100 . 16101))))
  :file "!usr!share!emacs!24.4!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
