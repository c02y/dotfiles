;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "simple.el.gz"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("declare-function" code nil nil [988 1050])
            ("declare-function" code nil nil [1051 1091])
            ("compilation-current-error" variable nil nil [1113 1147])
            ("compilation-context-lines" variable nil nil [1148 1182])
            ("idle-update-delay" variable (:default-value 0.5) nil [1184 1481])
            ("killing" customgroup (:user-visible-flag t) nil [1483 1557])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1559 1661])
            ("next-error" customgroup (:user-visible-flag t) nil [1698 1799])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1801 1932])
            ("next-error-highlight" variable (:default-value 0.5) nil [1934 2689])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2691 3384])
            ("next-error-recenter" variable nil nil [3386 3748])
            ("next-error-hook" variable nil nil [3750 3891])
            ("next-error-highlight-timer" variable nil nil [3893 3932])
            ("next-error-overlay-arrow-position" variable nil nil [3934 3980])
            ("put" code nil nil [3981 4059])
            ("add-to-list" code nil nil [4060 4137])
            ("next-error-last-buffer" variable nil nil [4139 4366])
            ("next-error-function" variable nil nil [4368 4826])
            ("make-variable-buffer-local" code nil nil [4827 4876])
            ("next-error-move-function" variable nil nil [4878 5191])
            ("make-variable-buffer-local" code nil nil [5192 5246])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5248 6291])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6293 8575])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8577 10346])
            ("next-error-internal" function nil nil [10348 10769])
            ("defalias" code nil nil [10771 10810])
            ("defalias" code nil nil [10811 10845])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10847 11164])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11166 11434])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11436 11888])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11890 12268])
            ("next-error-follow-last-line" variable nil nil [12339 12379])
            ("define-minor-mode" code nil nil [12381 13089])
            ("next-error-follow-mode-post-command-hook" function nil nil [13205 13538])
            ("fundamental-mode" function (:user-visible-flag t) nil [13547 13811])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13889 14322])
            ("put" code nil nil [14324 14364])
            ("define-derived-mode" code nil nil [14365 14510])
            ("prog-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [134217745] (quote prog-indent-sexp)) map)) nil [14572 14728])
            ("prog-indent-sexp" function (:user-visible-flag t) nil [14730 14928])
            ("define-derived-mode" code nil nil [14930 15298])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15331 15464])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15466 17714])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [17716 18064])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18066 18778])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18780 19581])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19583 20296])
            ("defalias" code nil nil [20298 20340])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20359 21786])
            ("delete-trailing-lines" variable (:default-value t) nil [21788 22074])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22076 23882])
            ("newline-and-indent" function (:user-visible-flag t) nil [23884 24311])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24313 25539])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25541 27454])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27456 27649])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27651 27850])
            ("back-to-indentation" function (:user-visible-flag t) nil [27852 28142])
            ("fixup-whitespace" function (:user-visible-flag t) nil [28144 28483])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [28485 28923])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28925 29553])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29556 30457])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30459 31626])
            ("delete-active-region" variable (:default-value t) nil [31628 32165])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [32167 33565])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [33567 34475])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [34477 34881])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [34925 37158])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [37160 37842])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [37844 38628])
            ("count-words--buffer-message" function nil nil [38630 38783])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [38785 39110])
            ("define-obsolete-function-alias" code nil nil [39112 39191])
            ("what-line" function (:user-visible-flag t) nil [39193 39544])
            ("count-lines" function (:arguments ("start" "end")) nil [39546 40383])
            ("line-number-at-pos" function (:arguments ("pos")) nil [40385 40845])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [40847 45184])
            ("let" code nil nil [45249 45550])
            ("minibuffer-completing-symbol" variable nil nil [45552 45655])
            ("make-obsolete-variable" code nil nil [45656 45726])
            ("minibuffer-default" variable nil nil [45728 45921])
            ("eval-expression-print-level" variable (:default-value 4) nil [45923 46153])
            ("eval-expression-print-length" variable (:default-value 12) nil [46155 46388])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [46390 46599])
            ("eval-expression-print-format" function (:arguments ("value")) nil [46601 47415])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("eval-expression-arg" "eval-expression-insert-value"))
                nil [47545 49427])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [49429 50356])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50358 51936])
            ("read-extended-command" function nil nil [51938 53462])
            ("suggest-key-bindings" variable (:default-value t) nil [53464 53830])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [53832 56300])
            ("minibuffer-history" variable nil nil [56303 56556])
            ("minibuffer-history-sexp-flag" variable nil nil [56557 56872])
            ("setq" code nil nil [56873 56927])
            ("setq" code nil nil [56928 56966])
            ("minibuffer-history-search-history" variable nil nil [56992 57038])
            ("minibuffer-text-before-history" variable nil nil [57040 57240])
            ("add-hook" code nil nil [57242 57306])
            ("minibuffer-history-initialize" function nil nil [57308 57392])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [57394 57556])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [57558 57948])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [57950 60794])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [60796 61850])
            ("minibuffer-temporary-goal-position" variable nil nil [61852 61899])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [61901 62541])
            ("minibuffer-default-add-done" variable nil nil [62543 62866])
            ("make-variable-buffer-local" code nil nil [62868 62925])
            ("minibuffer-default-add-completions" function nil nil [62927 63381])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [63383 65575])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [65577 65828])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [65830 66088])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66090 66746])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [66748 67033])
            ("minibuffer-prompt-width" function nil nil [67092 67381])
            ("add-hook" code nil nil [67414 67481])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [67483 67534])
            ("make-variable-buffer-local" code nil nil [67535 67607])
            ("minibuffer-history-isearch-setup" function nil nil [67609 68249])
            ("minibuffer-history-isearch-end" function nil nil [68251 68481])
            ("minibuffer-history-isearch-search" function nil nil [68483 70388])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [70390 71774])
            ("minibuffer-history-isearch-wrap" function nil nil [71776 72393])
            ("minibuffer-history-isearch-push-state" function nil nil [72395 72705])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [72707 72919])
            ("define-obsolete-function-alias" code nil nil [72997 73059])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [73061 73304])
            ("undo-in-region" variable nil nil [73306 73410])
            ("undo-no-redo" variable nil nil [73412 73487])
            ("pending-undo-list" variable nil nil [73489 73640])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73642 78050])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [78052 78333])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78335 78597])
            ("undo-in-progress" variable nil nil [78599 78730])
            ("undo-more" function (:arguments ("n")) nil [78732 79427])
            ("undo-copy-list" function (:arguments ("list")) nil [79452 79550])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [79552 79661])
            ("undo-start" function (:arguments ("beg" "end")) nil [79663 80251])
            ("undo-adjusted-markers" variable nil nil [80253 80283])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [80285 83001])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [83003 84176])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [84178 84686])
            ("undo-delta" function (:arguments ("undo-elt")) nil [84857 85190])
            ("undo-ask-before-discard" variable nil nil [85192 85958])
            ("undo-extra-outer-limit" variable nil nil [85960 86236])
            ("make-variable-buffer-local" code nil nil [86237 86289])
            ("setq" code nil nil [86574 86633])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [86634 88323])
            ("shell-command-history" variable nil nil [88326 88516])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [88518 88632])
            ("shell-command-default-error-buffer" variable nil nil [88634 88949])
            ("declare-function" code nil nil [88951 89017])
            ("declare-function" code nil nil [89018 89104])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [89106 89810])
            ("declare-function" code nil nil [89812 89863])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [89865 90110])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [90112 90741])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [90743 91996])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [91998 92954])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [92956 100889])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [100891 103314])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [103410 103621])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [103623 110810])
            ("shell-command-to-string" function (:arguments ("command")) nil [110812 111072])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [111074 112524])
            ("process-file-side-effects" variable (:default-value t) nil [112526 112952])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [112954 113839])
            ("tabulated-list-format" variable nil nil [113861 113891])
            ("tabulated-list-entries" variable nil nil [113892 113923])
            ("tabulated-list-sort-key" variable nil nil [113924 113956])
            ("declare-function" code nil nil [113957 114023])
            ("declare-function" code nil nil [114024 114123])
            ("process-menu-query-only" variable nil nil [114125 114161])
            ("define-derived-mode" code nil nil [114163 114659])
            ("list-processes--refresh" function nil nil [114661 116289])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [116291 116388])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [116390 117183])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [t] (quote universal-argument-other-key)) (define-key map (vector meta-prefix-char t) (quote universal-argument-other-key)) (define-key map [switch-frame] nil) (define-key map [21] (quote universal-argument-more)) (define-key map [45] (quote universal-argument-minus)) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] (quote universal-argument-minus)) map)) nil [117186 118520])
            ("universal-argument-num-events" variable nil nil [118522 118761])
            ("saved-overriding-map" variable (:default-value t) nil [118763 118932])
            ("save&set-overriding-map" function (:arguments ("map")) nil [118934 119163])
            ("restore-overriding-map" function nil nil [119165 119354])
            ("universal-argument" function (:user-visible-flag t) nil [119356 120155])
            ("universal-argument-more" function (:arguments ("arg")) nil [120296 120596])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [120598 121022])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [121024 121740])
            ("universal-argument-minus" function (:arguments ("arg")) nil [121860 122009])
            ("universal-argument-other-key" function (:arguments ("arg")) nil [122109 122447])
            ("filter-buffer-substring-functions" variable nil nil [122451 123536])
            ("buffer-substring-filters" variable nil nil [123538 124189])
            ("make-obsolete-variable" code nil nil [124190 124306])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [124308 125529])
            ("interprogram-cut-function" variable nil nil [125573 126110])
            ("interprogram-paste-function" variable nil nil [126112 127533])
            ("kill-ring" variable nil nil [127574 128029])
            ("kill-ring-max" variable (:default-value 60) nil [128031 128166])
            ("kill-ring-yank-pointer" variable nil nil [128168 128269])
            ("save-interprogram-paste-before-kill" variable nil nil [128271 128773])
            ("kill-do-not-save-duplicates" variable nil nil [128775 129004])
            ("kill-new" function (:arguments ("string" "replace" "yank-handler")) nil [129006 131290])
            ("set-advertised-calling-convention" code nil nil [131291 131372])
            ("kill-append" function (:arguments ("string" "before-p" "yank-handler")) nil [131374 131840])
            ("set-advertised-calling-convention" code nil nil [131841 131915])
            ("yank-pop-change-selection" variable nil nil [131917 132265])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [132267 133925])
            ("kill-read-only-ok" variable nil nil [133976 134112])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "yank-handler"))
                nil [134114 136579])
            ("set-advertised-calling-convention" code nil nil [136580 136646])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [136840 137346])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [137348 138079])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [138081 139657])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [139659 140088])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [140104 140840])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [140913 141376])
            ("yank-window-start" variable nil nil [141378 141408])
            ("yank-undo-function" variable nil nil [141409 141740])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141742 143472])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [143474 144921])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [144923 145113])
            ("kill-forward-chars" function (:arguments ("arg")) nil [145178 145323])
            ("kill-backward-chars" function (:arguments ("arg")) nil [145372 145518])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [145520 145995])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [145997 147349])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [147351 147968])
            ("kill-whole-line" variable nil nil [148005 148150])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [148152 150361])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [150363 151993])
            ("forward-visible-line" function (:arguments ("arg")) nil [151995 154485])
            ("end-of-visible-line" function nil nil [154487 155253])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [155256 155917])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [155919 156819])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [156821 157363])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [157365 157934])
            ("put" code nil nil [157937 157998])
            ("put" code nil nil [157999 158074])
            ("activate-mark-hook" variable nil nil [158076 158265])
            ("deactivate-mark-hook" variable nil nil [158267 158345])
            ("mark" function (:arguments ("force")) nil [158347 158971])
            ("deactivate-mark" function (:arguments ("force")) nil [158973 160933])
            ("activate-mark" function nil nil [160935 161099])
            ("set-mark" function (:arguments ("pos")) nil [161101 162198])
            ("use-empty-active-region" variable nil nil [162200 162696])
            ("use-region-p" function nil nil [162698 163304])
            ("region-active-p" function nil nil [163306 163674])
            ("mark-ring" variable nil nil [163676 163769])
            ("make-variable-buffer-local" code nil nil [163770 163809])
            ("put" code nil nil [163810 163845])
            ("mark-ring-max" variable (:default-value 16) nil [163847 163992])
            ("global-mark-ring" variable nil nil [163994 164078])
            ("global-mark-ring-max" variable (:default-value 16) nil [164080 164241])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [164243 164552])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [164554 165023])
            ("set-mark-command-repeat-pop" variable nil nil [165025 165484])
            ("set-mark-default-inactive" variable nil nil [165486 165751])
            ("make-obsolete-variable" code nil nil [165752 165814])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165816 168217])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [168219 169773])
            ("pop-mark" function nil nil [169775 170194])
            ("define-obsolete-function-alias" code nil nil [170196 170285])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170286 171245])
            ("shift-select-mode" variable (:default-value t) nil [171247 171819])
            ("handle-shift-selection" function nil nil [171821 172990])
            ("define-minor-mode" code nil nil [172992 174312])
            ("widen-automatically" variable (:default-value t) nil [174314 174648])
            ("non-essential" variable nil nil [174650 175048])
            ("pop-global-mark" function (:user-visible-flag t) nil [175050 175865])
            ("next-line-add-newlines" variable nil nil [175868 176042])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [176044 178115])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [178117 179666])
            ("track-eol" variable nil nil [179668 179993])
            ("goal-column" variable nil nil [179995 180249])
            ("make-variable-buffer-local" code nil nil [180250 180291])
            ("temporary-goal-column" variable nil nil [180293 180797])
            ("line-move-ignore-invisible" variable (:default-value t) nil [180799 180983])
            ("line-move-visual" variable (:default-value t) nil [180985 181561])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [181608 183436])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [183760 184688])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [184836 186454])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [186608 191281])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [191283 194420])
            ("line-move-to-column" function (:arguments ("col")) nil [194422 195801])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195803 197158])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197160 198682])
            ("put" code nil nil [198812 198846])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [198848 199849])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [199917 200481])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [200483 201074])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201076 202491])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [202493 202862])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [202864 203243])
            ("visual-line" customgroup (:user-visible-flag t) nil [203245 203346])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [203348 203836])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [203838 205025])
            ("visual-line--saved-state" variable nil nil [205027 205064])
            ("define-minor-mode" code nil nil [205066 206707])
            ("turn-on-visual-line-mode" function nil nil [206709 206767])
            ("define-globalized-minor-mode" code nil nil [206769 206884])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [206888 207322])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207324 207768])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [207770 209241])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [209243 209850])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [210001 211199])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [211201 211952])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211955 212151])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [212153 212905])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [212907 213119])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [213121 213312])
            ("current-word" function (:arguments ("strict" "really-word")) nil [213314 214794])
            ("fill-prefix" variable nil nil [214797 214963])
            ("make-variable-buffer-local" code nil nil [214964 215005])
            ("put" code nil nil [215006 215063])
            ("auto-fill-inhibit-regexp" variable nil nil [215065 215231])
            ("do-auto-fill" function nil nil [215233 218533])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [218535 218861])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [218863 219970])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [219972 220128])
            ("put" code nil nil [220130 220192])
            ("put" code nil nil [220366 220418])
            ("define-minor-mode" code nil nil [220420 221165])
            ("auto-fill-function" function nil nil [221232 221339])
            ("turn-on-auto-fill" function nil nil [221341 221434])
            ("turn-off-auto-fill" function nil nil [221436 221532])
            ("custom-add-option" code nil nil [221534 221588])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [221590 222428])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [222431 223239])
            ("defvaralias" code nil nil [223241 223299])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223301 224081])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [224083 224627])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [224629 224746])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [224747 224874])
            ("define-minor-mode" code nil nil [224876 225609])
            ("define-minor-mode" code nil nil [225611 226539])
            ("define-minor-mode" code nil nil [226541 227017])
            ("define-minor-mode" code nil nil [227019 227323])
            ("define-minor-mode" code nil nil [227325 227633])
            ("define-minor-mode" code nil nil [227635 228631])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [228634 228765])
            ("blink-matching-paren" variable (:default-value t) nil [228767 228916])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [228918 229317])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [229319 229644])
            ("blink-matching-delay" variable (:default-value 1) nil [229646 229782])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [229784 230052])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [230054 231039])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [231041 231407])
            ("blink-matching-open" function (:user-visible-flag t) nil [231409 235440])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [235442 235631])
            ("blink-paren-post-self-insert-function" function nil nil [235633 236160])
            ("add-hook" code nil nil [236162 236459])
            ("keyboard-quit" function (:user-visible-flag t) nil [236637 237130])
            ("buffer-quit-function" variable nil nil [237132 237382])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [237384 238210])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [238212 238607])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [238611 239128])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [239130 240674])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [240676 241001])
            ("rfc822-goto-eoh" function nil nil [241003 241407])
            ("mail-encode-mml" variable nil nil [241449 241588])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [241590 244276])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [244278 244669])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [244671 245059])
            ("set-variable-value-history" variable nil nil [245063 245248])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [245250 248000])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote mouse-choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [248055 248598])
            ("put" code nil nil [248666 248714])
            ("completion-reference-buffer" variable nil nil [248716 248945])
            ("completion-no-auto-exit" variable nil nil [248947 249128])
            ("completion-base-position" variable nil nil [249130 249500])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [249502 249801])
            ("completion-base-size" variable nil nil [249803 250258])
            ("make-obsolete-variable" code nil nil [250259 250338])
            ("delete-completion-window" function (:user-visible-flag t) nil [250340 250754])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [250756 250887])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [250889 252139])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [252141 254033])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [254117 254955])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [254957 255149])
            ("choose-completion-string-functions" variable nil nil [255151 255871])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [255873 259165])
            ("define-derived-mode" code nil nil [259167 259592])
            ("completion-list-mode-finish" function nil nil [259594 259790])
            ("add-hook" code nil nil [259792 259854])
            ("completion-show-help" variable (:default-value t) nil [259918 260069])
            ("completion-setup-function" function nil nil [260200 261742])
            ("add-hook" code nil nil [261744 261804])
            ("define-key" code nil nil [261806 261881])
            ("define-key" code nil nil [261882 261957])
            ("switch-to-completions" function (:user-visible-flag t) nil [261959 262500])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [262662 262905])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [262906 263159])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [263160 263413])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [263414 263667])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [263668 263925])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [263926 264174])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [264176 265240])
            ("define-key" code nil nil [265242 265313])
            ("define-key" code nil nil [265314 265385])
            ("define-key" code nil nil [265386 265456])
            ("define-key" code nil nil [265457 265526])
            ("define-key" code nil nil [265527 265598])
            ("define-key" code nil nil [265599 265672])
            ("mapc" code nil nil [265962 266712])
            ("clone-buffer-hook" variable nil nil [266764 266865])
            ("clone-indirect-buffer-hook" variable nil nil [266867 266986])
            ("clone-process" function (:arguments ("process" "newname")) nil [266988 268497])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [268600 271563])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [271566 273158])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [273161 273644])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [273692 275232])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [275234 276309])
            ("define-minor-mode" code nil nil [276311 279801])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [279804 279927])
            ("define-minor-mode" code nil nil [279929 281082])
            ("define-minor-mode" code nil nil [281084 281854])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [282812 284291])
            ("bad-package-check" function (:arguments ("package")) nil [284293 284798])
            ("mapc" code nil nil [284800 284918])
            ("simple" package nil nil [284921 284938]))          
    :file "simple.el.gz"
    :pointmax 284964
    :fsize 76862
    :lastmodtime '(20718 7922 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "subr.el.gz"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("custom-declare-variable-list" variable nil nil [1076 1270])
            ("custom-declare-variable-early" function (:arguments ("arguments")) nil [1363 1503])
            ("declare-function" function (:arguments ("fn" "file" "arglist" "fileonly")) nil [1505 3022])
            ("'not 'null" defalias nil nil [3051 3072])
            ("noreturn" function (:arguments ("form")) nil [3074 3278])
            ("1value" function (:arguments ("form")) nil [3280 3518])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3520 3980])
            ("lambda" function (:arguments ("cdr")) nil [3982 5140])
            ("setq-local" function (:arguments ("var" "val")) nil [5142 5354])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [5356 5797])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5799 6214])
            ("push" function (:arguments ("newelt" "place")) nil [6216 6810])
            ("pop" function (:arguments ("place")) nil [6812 7376])
            ("when" function (:arguments ("cond" "body")) nil [7378 7666])
            ("unless" function (:arguments ("cond" "body")) nil [7668 7954])
            ("(null (featurep 'cl))" if nil nil [7956 11547])
            ("ignore-errors" function (:arguments ("body")) nil [11549 11856])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11887 12035])
            ("error" function (:arguments ("args")) nil [12092 12421])
            ("set-advertised-calling-convention" code nil nil [12422 12492])
            ("user-error" function (:arguments ("format" "args")) nil [12494 13034])
            ("frame-configuration-p" function (:arguments ("object")) nil [13148 13403])
            ("caar" function (:arguments ("x")) nil [13428 13499])
            ("cadr" function (:arguments ("x")) nil [13501 13572])
            ("cdar" function (:arguments ("x")) nil [13574 13645])
            ("cddr" function (:arguments ("x")) nil [13647 13718])
            ("last" function (:arguments ("list" "n")) nil [13720 14137])
            ("butlast" function (:arguments ("list" "n")) nil [14139 14300])
            ("nbutlast" function (:arguments ("list" "n")) nil [14302 14530])
            ("delete-dups" function (:arguments ("list")) nil [14532 14885])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [14887 16711])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [16713 17462])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [17502 18302])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [18304 18626])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [18628 18896])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [18898 19333])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [19335 19819])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [19821 20314])
            ("remove" function (:arguments ("elt" "seq")) nil [20316 20669])
            ("remq" function (:arguments ("elt" "list")) nil [20671 21002])
            ("kbd" function (:arguments ("keys")) nil [21027 21337])
            ("'kbd 'pure t" put nil nil [21338 21356])
            ("undefined" function (:user-visible-flag t) nil [21358 21456])
            ("'undefined 'suppress-keymap t" put nil nil [21551 21586])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [21588 22152])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [22154 22806])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [22808 24869])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [24871 25551])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [25553 26023])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [26077 26677])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [26679 27145])
            ("keymap-canonicalize" function (:arguments ("map")) nil [27147 29016])
            ("'keyboard-translate-table 'char-table-extra-slots 0" put nil nil [29018 29075])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [29077 29452])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [29483 30229])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30231 31035])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31037 31233])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [31235 31464])
            ("key-substitution-in-progress" variable nil nil [31520 31613])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [31615 33000])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [33002 34667])
            ("global-map" variable nil nil [34816 34990])
            ("esc-map" variable nil nil [34992 35132])
            ("ctl-x-map" variable nil nil [35134 35269])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [35271 35349])
            ("'ctl-x-4-prefix ctl-x-4-map" defalias nil nil [35350 35388])
            ("ctl-x-map \"4\" 'ctl-x-4-prefix" define-key nil nil [35389 35431])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [35433 35505])
            ("'ctl-x-5-prefix ctl-x-5-map" defalias nil nil [35506 35544])
            ("ctl-x-map \"5\" 'ctl-x-5-prefix" define-key nil nil [35545 35587])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [35627 35682])
            ("listify-key-sequence" function (:arguments ("key")) nil [35684 35922])
            ("eventp" function (:arguments ("obj")) nil [35924 36125])
            ("event-modifiers" function (:arguments ("event")) nil [36127 37421])
            ("event-basic-type" function (:arguments ("event")) nil [37423 38191])
            ("mouse-movement-p" function (:arguments ("object")) nil [38193 38326])
            ("mouse-event-p" function (:arguments ("object")) nil [38328 38546])
            ("event-start" function (:arguments ("event")) nil [38548 39279])
            ("event-end" function (:arguments ("event")) nil [39281 40121])
            ("event-click-count" function (:arguments ("event")) nil [40123 40333])
            ("posnp" function (:arguments ("obj")) nil [40390 40690])
            ("posn-window" function (:arguments ("position")) nil [40724 40906])
            ("posn-area" function (:arguments ("position")) nil [40908 41232])
            ("posn-point" function (:arguments ("position")) nil [41234 41509])
            ("posn-set-point" function (:arguments ("position")) nil [41511 41831])
            ("posn-x-y" function (:arguments ("position")) nil [41833 42086])
            ("scroll-bar-scale" declare-function nil nil [42088 42154])
            ("posn-col-row" function (:arguments ("position")) nil [42156 43702])
            ("posn-actual-col-row" function (:arguments ("position")) nil [43704 44138])
            ("posn-timestamp" function (:arguments ("position")) nil [44140 44328])
            ("posn-string" function (:arguments ("position")) nil [44330 44582])
            ("posn-image" function (:arguments ("position")) nil [44584 44824])
            ("posn-object" function (:arguments ("position")) nil [44826 45195])
            ("posn-object-x-y" function (:arguments ("position")) nil [45197 45484])
            ("posn-object-width-height" function (:arguments ("position")) nil [45486 45746])
            ("'window-dot" define-obsolete-function-alias nil nil [45789 45854])
            ("'set-window-dot" define-obsolete-function-alias nil nil [45855 45928])
            ("'read-input" define-obsolete-function-alias nil nil [45929 45993])
            ("'show-buffer" define-obsolete-function-alias nil nil [45994 46065])
            ("'eval-current-buffer" define-obsolete-function-alias nil nil [46066 46139])
            ("'string-to-int" define-obsolete-function-alias nil nil [46140 46212])
            ("'forward-point \"use (+ (point) N) instead.\"" make-obsolete nil nil [46214 46280])
            ("'buffer-has-markers-at nil" make-obsolete nil nil [46281 46330])
            ("insert-string" function (:arguments ("args")) nil [46332 46650])
            ("makehash" function (:arguments ("test")) nil [46652 46772])
            ("'focus-frame 'ignore" defalias nil nil [46820 46854])
            ("'focus-frame \"it does nothing.\"" make-obsolete nil nil [46855 46909])
            ("'unfocus-frame 'ignore" defalias nil nil [46910 46946])
            ("'unfocus-frame \"it does nothing.\"" make-obsolete nil nil [46947 47003])
            ("'make-variable-frame-local 	       \"explicitly check for a frame-parameter instead.\"" make-obsolete nil nil [47004 47111])
            ("'interactive-p 'called-interactively-p" make-obsolete nil nil [47112 47173])
            ("set-advertised-calling-convention" code nil nil [47174 47248])
            ("set-advertised-calling-convention" code nil nil [47249 47350])
            ("set-advertised-calling-convention" code nil nil [47351 47419])
            ("set-advertised-calling-convention" code nil nil [47420 47505])
            ("'default-mode-line-format" make-obsolete-variable nil nil [47910 47985])
            ("'default-header-line-format" make-obsolete-variable nil nil [47986 48065])
            ("'default-line-spacing" make-obsolete-variable nil nil [48066 48133])
            ("'default-abbrev-mode" make-obsolete-variable nil nil [48134 48199])
            ("'default-ctl-arrow" make-obsolete-variable nil nil [48200 48261])
            ("'default-truncate-lines" make-obsolete-variable nil nil [48262 48333])
            ("'default-left-margin" make-obsolete-variable nil nil [48334 48399])
            ("'default-tab-width" make-obsolete-variable nil nil [48400 48461])
            ("'default-case-fold-search" make-obsolete-variable nil nil [48462 48537])
            ("'default-left-margin-width" make-obsolete-variable nil nil [48538 48615])
            ("'default-right-margin-width" make-obsolete-variable nil nil [48616 48695])
            ("'default-left-fringe-width" make-obsolete-variable nil nil [48696 48773])
            ("'default-right-fringe-width" make-obsolete-variable nil nil [48774 48853])
            ("'default-fringes-outside-margins" make-obsolete-variable nil nil [48854 48943])
            ("'default-scroll-bar-width" make-obsolete-variable nil nil [48944 49019])
            ("'default-vertical-scroll-bar" make-obsolete-variable nil nil [49020 49101])
            ("'default-indicate-empty-lines" make-obsolete-variable nil nil [49102 49185])
            ("'default-indicate-buffer-boundaries" make-obsolete-variable nil nil [49186 49281])
            ("'default-fringe-indicator-alist" make-obsolete-variable nil nil [49282 49369])
            ("'default-fringe-cursor-alist" make-obsolete-variable nil nil [49370 49451])
            ("'default-scroll-up-aggressively" make-obsolete-variable nil nil [49452 49539])
            ("'default-scroll-down-aggressively" make-obsolete-variable nil nil [49540 49631])
            ("'default-fill-column" make-obsolete-variable nil nil [49632 49697])
            ("'default-cursor-type" make-obsolete-variable nil nil [49698 49763])
            ("'default-buffer-file-type" make-obsolete-variable nil nil [49764 49839])
            ("'default-cursor-in-non-selected-windows" make-obsolete-variable nil nil [49840 49943])
            ("'default-buffer-file-coding-system" make-obsolete-variable nil nil [49944 50037])
            ("'default-major-mode" make-obsolete-variable nil nil [50038 50101])
            ("'default-enable-multibyte-characters" make-obsolete-variable nil nil [50102 50242])
            ("'define-key-rebound-commands" make-obsolete-variable nil nil [50244 50308])
            ("'redisplay-end-trigger-functions" make-obsolete-variable nil nil [50309 50392])
            ("'deferred-action-list" make-obsolete-variable nil nil [50393 50465])
            ("'deferred-action-function" make-obsolete-variable nil nil [50466 50542])
            ("'window-redisplay-end-trigger nil" make-obsolete nil nil [50543 50599])
            ("'set-window-redisplay-end-trigger nil" make-obsolete nil nil [50600 50660])
            ("'process-filter-multibyte-p nil" make-obsolete nil nil [50662 50716])
            ("'set-process-filter-multibyte nil" make-obsolete nil nil [50717 50773])
            ("'executing-macro" define-obsolete-variable-alias nil nil [50812 50899])
            ("'x-lost-selection-hooks" define-obsolete-variable-alias nil nil [50901 50994])
            ("'x-sent-selection-hooks" define-obsolete-variable-alias nil nil [50995 51088])
            ("'translation-table-for-input" make-obsolete-variable nil nil [51334 51398])
            ("defvaralias" code nil nil [51400 51457])
            ("'send-string 'process-send-string" defalias nil nil [51530 51574])
            ("'send-region 'process-send-region" defalias nil nil [51575 51619])
            ("'string= 'string-equal" defalias nil nil [51620 51653])
            ("'string< 'string-lessp" defalias nil nil [51654 51687])
            ("'move-marker 'set-marker" defalias nil nil [51688 51723])
            ("'rplaca 'setcar" defalias nil nil [51724 51750])
            ("'rplacd 'setcdr" defalias nil nil [51751 51777])
            ("'beep 'ding" defalias nil nil [51778 51800])
            ("'indent-to-column 'indent-to" defalias nil nil [51826 51865])
            ("'backward-delete-char 'delete-backward-char" defalias nil nil [51866 51920])
            ("'search-forward-regexp (symbol-function 're-search-forward)" defalias nil nil [51921 51991])
            ("'search-backward-regexp (symbol-function 're-search-backward)" defalias nil nil [51992 52064])
            ("'int-to-string 'number-to-string" defalias nil nil [52065 52108])
            ("'store-match-data 'set-match-data" defalias nil nil [52109 52153])
            ("'chmod 'set-file-modes" defalias nil nil [52154 52187])
            ("'mkdir 'make-directory" defalias nil nil [52188 52221])
            ("'point-at-eol 'line-end-position" defalias nil nil [52253 52296])
            ("'point-at-bol 'line-beginning-position" defalias nil nil [52297 52346])
            ("'user-original-login-name 'user-login-name" defalias nil nil [52348 52401])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [52440 54576])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [54578 56246])
            ("letrec" function (:arguments ("binders" "body")) nil [56248 56877])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [56879 59822])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [59824 61127])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [61130 62449])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [62451 63663])
            ("delay-mode-hooks" variable nil nil [63685 63779])
            ("delayed-mode-hooks" variable nil nil [63780 63861])
            ("'delayed-mode-hooks" make-variable-buffer-local nil nil [63862 63910])
            ("'delay-mode-hooks 'permanent-local t" put nil nil [63911 63953])
            ("change-major-mode-after-body-hook" variable nil nil [63955 64069])
            ("after-change-major-mode-hook" variable nil nil [64071 64173])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [64175 65058])
            ("delay-mode-hooks" function (:arguments ("body")) nil [65060 65461])
            ("derived-mode-p" function (:arguments ("modes")) nil [65522 65835])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [66026 66219])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [66221 68906])
            ("autoloadp" function (:arguments ("object")) nil [68927 69029])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [69513 70737])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [70739 72145])
            ("load-history-regexp" function (:arguments ("file")) nil [72186 72822])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [72824 73260])
            ("'eval-after-load 'lisp-indent-function 1" put nil nil [73262 73308])
            ("eval-after-load" function (:arguments ("file" "form")) nil [73309 76250])
            ("after-load-functions" variable nil nil [76252 76425])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [76427 77427])
            ("eval-next-after-load" function (:arguments ("file")) nil [77429 77729])
            ("display-delayed-warnings" function nil nil [77731 77998])
            ("collapse-delayed-warnings" function nil nil [78000 78679])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [78809 79149])
            ("process-lines" function (:arguments ("program" "args")) nil [79174 79779])
            ("process-live-p" function (:arguments ("process")) nil [79781 80021])
            ("'process-kill-without-query  \"use `process-query-on-exit-flag' or `set-process-query-on-exit-flag'.\"" make-obsolete nil nil [80041 80166])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [80167 80511])
            ("process-kill-buffer-query-function" function nil nil [80513 80932])
            ("'kill-buffer-query-functions 'process-kill-buffer-query-function" add-hook nil nil [80934 81009])
            ("process-get" function (:arguments ("process" "propname")) nil [81040 81252])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [81254 81493])
            ("read-quoted-char-radix" variable (:default-value 8) nil [81533 81678])
            ("custom-declare-variable-early" code nil nil [81680 81923])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [81925 81975])
            ("read-key-delay" variable (:default-value 0.01) nil [81977 82005])
            ("read-key" function (:arguments ("prompt")) nil [82054 84760])
            ("read-quoted-char" function (:arguments ("prompt")) nil [84762 87357])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [87359 87696])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87698 90154])
            ("read-number" function (:arguments ("prompt" "default")) nil [90218 91240])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91242 92981])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92983 94490])
            ("set-advertised-calling-convention" code nil nil [94491 94570])
            ("y-or-n-p" function (:arguments ("prompt")) nil [94572 98231])
            ("atomic-change-group" function (:arguments ("body")) nil [98262 99468])
            ("prepare-change-group" function (:arguments ("buffer")) nil [99470 100946])
            ("activate-change-group" function (:arguments ("handle")) nil [100948 101186])
            ("accept-change-group" function (:arguments ("handle")) nil [101188 101479])
            ("cancel-change-group" function (:arguments ("handle")) nil [101481 102652])
            ("'redraw-modeline" define-obsolete-function-alias nil nil [102710 102792])
            ("force-mode-line-update" function (:arguments ("all")) nil [102794 103168])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [103170 104623])
            ("copy-overlay" function (:arguments ("o")) nil [104652 105226])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [105228 106236])
            ("suspend-hook" variable nil nil [106258 106342])
            ("suspend-resume-hook" variable nil nil [106344 106442])
            ("temp-buffer-show-hook" variable nil nil [106444 106660])
            ("temp-buffer-setup-hook" variable nil nil [106662 106893])
            ("defvar-local" code nil nil [106895 107234])
            ("'cl-assertion-failed 'error-conditions '(error)" put nil nil [107343 107396])
            ("'cl-assertion-failed 'error-message (purecopy \"Assertion failed\")" put nil nil [107397 107468])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [107470 107845])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [107847 108839])
            ("buffer-narrowed-p" function nil nil [108872 109006])
            ("find-tag-default" function nil nil [109008 109958])
            ("play-sound" function (:arguments ("sound")) nil [109960 110779])
            ("w32-shell-dos-semantics" declare-function nil nil [110781 110837])
            ("shell-quote-argument" function (:arguments ("argument")) nil [110839 112984])
            ("string-or-null-p" function (:arguments ("object")) nil [112986 113123])
            ("booleanp" function (:arguments ("object")) nil [113125 113283])
            ("field-at-pos" function (:arguments ("pos")) nil [113285 113555])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [113557 113920])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [113922 114732])
            ("yank-handled-properties" variable nil nil [114782 114814])
            ("yank-excluded-properties" variable nil nil [114815 114848])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [114850 115639])
            ("yank-undo-function" variable nil nil [115641 115668])
            ("insert-for-yank" function (:arguments ("string")) nil [115670 116029])
            ("insert-for-yank-1" function (:arguments ("string")) nil [116031 118381])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118383 118868])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118870 119556])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119558 119870])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120009 120447])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120485 121398])
            ("set-advertised-calling-convention" code nil nil [121399 121528])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121530 121949])
            ("set-advertised-calling-convention" code nil nil [121950 122084])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [122086 123531])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123533 123977])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124032 124420])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124422 124942])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [124944 125504])
            ("with-selected-window" function (:arguments ("window" "body")) nil [125506 126644])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [126646 127387])
            ("save-window-excursion" function (:arguments ("body")) nil [127389 128208])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128210 129605])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [129658 131858])
            ("with-temp-file" function (:arguments ("file" "body")) nil [131860 132555])
            ("with-temp-message" function (:arguments ("message" "body")) nil [132557 133484])
            ("with-temp-buffer" function (:arguments ("body")) nil [133486 134045])
            ("with-silent-modifications" function (:arguments ("body")) nil [134047 135243])
            ("with-output-to-string" function (:arguments ("body")) nil [135245 135690])
            ("with-local-quit" function (:arguments ("body")) nil [135692 136447])
            ("while-no-input" function (:arguments ("body")) nil [136449 136949])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [136951 137456])
            ("'condition-case-no-debug" define-obsolete-function-alias nil nil [137458 137553])
            ("with-demoted-errors" function (:arguments ("body")) nil [137555 138051])
            ("combine-after-change-calls" function (:arguments ("body")) nil [138053 138748])
            ("with-case-table" function (:arguments ("table" "body")) nil [138750 139271])
            ("save-match-data-internal" variable nil nil [139304 139337])
            ("save-match-data" function (:arguments ("body")) nil [139595 140275])
            ("match-string" function (:arguments ("num" "string")) nil [140277 140922])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [140924 141648])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [141651 142300])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [142303 143387])
            ("looking-at-p" function (:arguments ("regexp")) nil [143389 143567])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [143569 143789])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [143791 145701])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [145723 146076])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls")) nil [146338 148239])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [148241 148802])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [148804 149440])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [149474 149878])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [149880 152459])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [152462 152761])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [152763 153546])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [153574 153917])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [153919 154143])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [154167 154803])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [154805 155125])
            ("syntax-after" function (:arguments ("pos")) nil [155127 155500])
            ("syntax-class" function (:arguments ("syntax")) nil [155502 155854])
            ("text-clone-maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [155875 157905])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [157907 160094])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [160202 161780])
            ("set-temporary-overlay-map" function (:arguments ("map" "keep-pred")) nil [161783 163454])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [164037 164804])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [164806 166651])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [166653 167152])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [167154 167271])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [167273 168979])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [168981 169136])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [169138 170242])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [170279 170438])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?alpha$" . -3) ("^[-_+]$" . -3) ("^[-_+ ]cvs$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rcc\\)$" . -1))))
                nil [170441 171666])
            ("version-to-list" function (:arguments ("ver")) nil [171669 174007])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [174010 174841])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [174844 175643])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [175646 176431])
            ("version-list-not-zero" function (:arguments ("lst")) nil [176433 176743])
            ("version<" function (:arguments ("v1" "v2")) nil [176746 177202])
            ("version<=" function (:arguments ("v1" "v2")) nil [177205 177675])
            ("version=" function (:arguments ("v1" "v2")) nil [177677 178123])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [178137 178199])
            ("(hash-table-p (car (read-from-string 			  (prin1-to-string (make-hash-table)))))" when nil nil [178361 178486]))          
    :file "subr.el.gz"
    :pointmax 178510
    :fsize 53223
    :lastmodtime '(20708 57451 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "thingatpt.el.gz"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "thingatpt.el.gz"
    :pointmax 18363
    :fsize 5511
    :lastmodtime '(20707 18685 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "custom.el.gz"
    :major-mode 'emacs-lisp-mode
    :tags nil
    :file "custom.el.gz"
    :pointmax 56352
    :fsize 16330
    :lastmodtime '(20707 18685 0 0)
    :unmatched-syntax 'nil
    )
   (semanticdb-table "startup.el.gz"
    :major-mode 'emacs-lisp-mode
    :tags 
        '( ("setq" code nil nil [1115 1151])
            ("command-line-processed" variable nil nil [1153 1238])
            ("initialization" customgroup (:user-visible-flag t) nil [1240 1321])
            ("initial-buffer-choice" variable nil nil [1323 1952])
            ("inhibit-startup-screen" variable nil nil [1954 2207])
            ("defvaralias" code nil nil [2209 2269])
            ("defvaralias" code nil nil [2270 2332])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2334 2384])
            ("inhibit-startup-echo-area-message" variable nil nil [2506 3191])
            ("inhibit-default-init" variable nil nil [3193 3323])
            ("inhibit-startup-buffer-menu" variable nil nil [3325 3489])
            ("command-switch-alist" variable nil nil [3491 3759])
            ("command-line-args-left" variable nil nil [3761 3845])
            ("defvaralias" code nil nil [3847 4083])
            ("internal-make-var-non-special" code nil nil [4084 4121])
            ("argi" variable nil nil [4123 4175])
            ("internal-make-var-non-special" code nil nil [4176 4213])
            ("command-line-functions" variable nil nil [4215 4669])
            ("command-line-default-directory" variable nil nil [4671 4839])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [4947 8131])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8133 11085])
            ("before-init-hook" variable nil nil [11088 11198])
            ("after-init-hook" variable nil nil [11200 11616])
            ("emacs-startup-hook" variable nil nil [11618 11725])
            ("term-setup-hook" variable nil nil [11727 12001])
            ("inhibit-startup-hooks" variable nil nil [12003 12144])
            ("keyboard-type" variable nil nil [12146 12367])
            ("window-setup-hook" variable nil nil [12369 12555])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [12557 12726])
            ("init-file-user" variable nil nil [12728 13375])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [13377 14647])
            ("mail-host-address" variable nil nil [14649 14878])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [14880 15369])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [15371 16124])
            ("emacs-basic-display" variable nil nil [16126 16158])
            ("init-file-debug" variable nil nil [16160 16188])
            ("init-file-had-error" variable nil nil [16190 16286])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16288 16340])
            ("no-blinking-cursor" variable nil nil [16342 16373])
            ("default-frame-background-mode" variable nil nil [16375 16413])
            ("pure-space-overflow" variable nil nil [16415 16500])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [16502 16678])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [16680 16915])
            ("package-subdirectory-regexp" variable
               (:constant-flag t
                :default-value "\\([^.].*?\\)-\\([0-9]+\\(?:[.][0-9]+\\|\\(?:pre\\|beta\\|alpha\\)[0-9]+\\)*\\)")
                nil [16917 17316])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [17318 19050])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [19052 19821])
            ("normal-top-level" function nil nil [19823 26215])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [26323 26549])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [26551 26641])
            ("tool-bar-originally-present" variable nil nil [26643 26762])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [26764 27126])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [27128 27494])
            ("tty-handle-args" function (:arguments ("args")) nil [27496 30254])
            ("declare-function" code nil nil [30256 30350])
            ("declare-function" code nil nil [30351 30410])
            ("declare-function" code nil nil [30411 30455])
            ("server-name" variable nil nil [30457 30477])
            ("server-process" variable nil nil [30478 30501])
            ("command-line" function nil nil [30503 50915])
            ("x-apply-session-resources" function nil nil [50917 51944])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [51946 52388])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [52563 55280])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil 0 256) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [55282 58394])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [58397 58516])
            ("fancy-splash-image" variable nil nil [58518 58715])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [58718 59039])
            ("fancy-splash-insert" function (:arguments ("args")) nil [59110 60506])
            ("declare-function" code nil nil [60508 60577])
            ("fancy-splash-head" function nil nil [60579 62079])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [62081 65191])
            ("exit-splash-screen" function (:user-visible-flag t) nil [65193 65302])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [65304 66672])
            ("fancy-about-screen" function nil nil [66674 67369])
            ("fancy-splash-frame" function nil nil [67371 67829])
            ("use-fancy-splash-screens-p" function nil nil [67831 68628])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [68631 71140])
            ("normal-mouse-startup-screen" function nil nil [71142 72919])
            ("normal-no-mouse-startup-screen" function nil nil [72973 77947])
            ("normal-about-screen" function nil nil [77949 79474])
            ("startup-echo-area-message" function nil nil [79476 79790])
            ("display-startup-echo-area-message" function nil nil [79792 81056])
            ("display-startup-screen" function (:arguments ("concise")) nil [81058 81510])
            ("display-about-screen" function (:user-visible-flag t) nil [81512 81758])
            ("defalias" code nil nil [81760 81805])
            ("defalias" code nil nil [81806 81863])
            ("command-line-1" function (:arguments ("args-left")) nil [81865 92809])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [92811 93479]))          
    :file "startup.el.gz"
    :pointmax 93506
    :fsize 25541
    :lastmodtime '(20707 18685 0 0)
    :unmatched-syntax 'nil
    )
   )
  :file "!usr!share!emacs!24.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2"
  )
