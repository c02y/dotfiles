" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
" The first three are the default enabled layers
" TODO: dependencies should be install by the layers:
" pip install flake8 yapf isort
let g:spacevim_layers = [
      \ 'fzf', 'better-defaults', 'which-key',
      \ 'auto-completion', 'c-c++', 'markdown',
      \ 'editing', 'code-snippets', 'formatting', 'formatting', 'file-manager',
      \ 'better-motion', 'better-motion', 'ctrlp', 'airline'
      \ ]

" Uncomment the following line if your terminal(-emulator) supports true colors.
" let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
" let g:spacevim_nerd_fonts = 1

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" exclude a plugin from a layer
" function! Layers()
"     " excluding multiple plugins like: { 'exclude': ['plugin1', 'plugin2'] }
"     Layer 'auto-completion',  { 'exclude': 'roxma/vim-hug-neovim-rpc' }
" endfunction

let g:spacevim_speed_up_via_timer = 0

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()
  " Add your own plugin via Plug command.

  " rainbow parentheses
  Plug 'luochen1990/rainbow'
  let g:rainbow_active = 1
  "0 if you want to enable it later via :RainbowToggle

  " use +/- to expand/shrink selection
  Plug 'terryma/vim-expand-region'

  Plug 'chrisbra/NrrwRgn'

  Plug 'airblade/vim-gitgutter'
  let g:gitgutter_sign_modified = '!'

  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-unimpaired'

  " for syntax-checking layer, check https://github.com/liuchengxu/space-vim/issues/407
  Plug 'w0rp/ale'
  let g:ale_set_highlights = 0
  let g:ale_fix_on_save = 1
  let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'
  let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']
  let g:ale_sign_error = '•'
  let g:ale_sign_warning = '•'
  let g:ale_echo_msg_error_str = g:spacevim.gui ? 'Error' : '✹ Error'
  let g:ale_echo_msg_warning_str = g:spacevim.gui ? 'Warning' : '⚠ Warning'
  let g:ale_completion_delay = 500
  let g:ale_echo_delay = 20
  let g:ale_lint_delay = 500
  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_lint_on_insert_leave = 1
  nmap <Leader>en <Plug>(ale_next)
  nmap <Leader>ep <Plug>(ale_previous)
  nnoremap <Leader>ts :ALEToggle<CR>

  Plug 'tpope/vim-repeat'

  " https://stackoverflow.com/a/15550787/1528712
  set timeout " Do time out on mappings and others
  set timeoutlen=2000 " Wait {num} ms before timing out a mapping
  " When you’re pressing Escape to leave insert mode in the terminal, it will by
  " default take a second or another keystroke to leave insert mode completely
  " and update the statusline. This fixes that. I got this from:
  " https://powerline.readthedocs.org/en/latest/tipstricks.html#vim
  if !has('gui_running')
      set ttimeoutlen=10
      augroup FastEscape
          autocmd!
          au InsertEnter * set timeoutlen=0
          au InsertLeave * set timeoutlen=1000
      augroup END
  endif
endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()
  " disable tabline
  let g:airline#extensions#tabline#enabled = 0
  " disable the git part in statusline
  let g:airline_section_b = ""

  " Adding extras.
  " Uncomment the following line If you have installed the powerline fonts.
  " It is good for airline layer.
  " let g:airline_powerline_fonts = 1

  " disable theme only in terminal vim
  if !has("gui_running")
     colorscheme default
  endif

  " q to exit if no change
  nmap q :q<CR>

  " toggle relativenumber and no number at all
  function! NumberToggle()
    if(&rnu == 1)
        set nornu nonu
    else
        set number relativenumber
    endif
  endfunc
  function! ListToggle()
    if(&list == 1)
        set nolist
    else
        set list
    end
  endfunc

  imap <C-a> <Home>
  imap <C-e> <End>
  imap <C-k> <c-o>d$

  " add bindings for leader key
  nnoremap <Leader>tt :call NumberToggle()<cr>
  nnoremap <Leader>tl :call ListToggle()<cr>
  "fzf
  " Overwrite the default Files command to include hidden files
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'source': 'ag --hidden --ignore .git -g ""'}, <bang>0)
  nnoremap <Leader>ff :Files<cr>
  nnoremap <Leader>fv :e ~/.spacevim<cr>
  nnoremap <Leader>fF :GFiles<CR>
  nnoremap <Leader>sg :Ag<CR>
  nnoremap <Leader>sG :Rg<CR>
  nnoremap <Leader>sS :call SwoopSelection()<CR>
  nnoremap <Leader>nn :NR<CR>
  nnoremap <Leader>nl :NRV<CR>
  nnoremap <Leader>w<LEFT> <C-W>h<CR>
  nnoremap <Leader>w<RIGHT> <C-W>l<CR>
  nnoremap <Leader>w<UP> <C-W>k<CR>
  nnoremap <Leader>w<DOWN> <C-W>j<CR>
  nnoremap <Leader>w<Bslash> <C-W>v<CR> " SPC w \ to split-window-right
  nnoremap <Leader>vi :PlugInstall<CR>
  nnoremap <Leader>vc :PlugClean<CR>
  nnoremap <Leader>vC :PlugClean!<CR>
  nnoremap <Leader>vu :PlugUpdate<CR>
  nnoremap <Leader>vU :PlugUpgrade<CR>
  nnoremap <Leader>bi g<C-g><CR>


  " autocmd BufRead,BufNewFile *.sh,*.py syntax on
  autocmd BufRead,BufNewFile *.py set ts=4 sw=4 autoindent smartindent expandtab cinwords=if,elif,else,for,while,with,try,except,finally,def,class
  autocmd BufRead,BufNewFile *.sh set expandtab tabstop=4 shiftwidth=4
  autocmd BufRead,BufNewFile *.fish,*.fishrc set expandtab tabstop=4 shiftwidth=4
  autocmd BufRead,BufNewFile *.c,*.cpp set noexpandtab tabstop=8 shiftwidth=8

endfunction
