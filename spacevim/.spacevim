" Comment the following line if you don't want Vim and NeoVim to share the
" same plugin download directory.
let g:spacevim_plug_home = '~/.vim/plugged'

" Uncomment the following line to override the leader key. The default value is space key "<\Space>".
" let g:spacevim_leader = "<\Space>"

" Uncomment the following line to override the local leader key. The default value is comma ','.
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim.
" Refer to https://github.com/liuchengxu/space-vim/blob/master/layers/LAYERS.md for all available layers.
" The first three are the default enabled layers
" TODO: dependencies should be install by the layers:
" pip install flake8 yapf isort
let g:spacevim_layers = [
            \ 'fzf', 'better-defaults', 'which-key',
            \ 'auto-completion', 'c-c++', 'git', 'editing', 'python',
            \ 'better-motion', 'airline', 'lsp', 'text-align',
            \ ]

" Uncomment the following line if your terminal(-emulator) supports true colors.
let g:spacevim_enable_true_color = 1

" Uncomment the following if you have some nerd font installed.
" let g:spacevim_nerd_fonts = 1

" If you want to have more control over the layer, try using Layer command.
" if g:spacevim.gui
"   Layer 'airline'
" endif

" let g:spacevim_enable_startify = 0

" the default is lcn(LanguageClient-neovim)
let g:spacevim_lsp_engine = 'coc'

" exclude a plugin from a layer
" function! Layers()
"     " excluding multiple plugins like: { 'exclude': ['plugin1', 'plugin2'] }
"     Layer 'auto-completion',  { 'exclude': 'roxma/vim-hug-neovim-rpc' }
" endfunction
let g:spacevim_excluded = ['ntpeters/vim-better-whitespace', 'tpope/vim-rsi', 'mhinz/vim-signify']

let g:spacevim_speed_up_via_timer = 0

" this variable is in ~/.vim/plugged/vim-better-default
" Use the following variable to 'set noexpandtab' (use tab instead of spaces)
let g:vim_better_default_tabs_as_spaces = 0
let g:vim_better_default_persistent_undo = 1
let g:vim_better_default_basic_key_mapping = 1

" Manage your own plugins.
" Refer to https://github.com/junegunn/vim-plug for more detials.
function! UserInit()
    " rainbow parentheses
    Plug 'luochen1990/rainbow'
    let g:rainbow_active = 1
    "0 if you want to enable it later via :RainbowToggle

    " use +/- to expand/shrink selection
    Plug 'terryma/vim-expand-region'

    Plug 'chrisbra/NrrwRgn'

    Plug 'airblade/vim-gitgutter'
    " speedup the updates of the signs
    set updatetime=100
    let g:gitgutter_sign_modified = '*'
    " in case the sudden popup of signcolumn
    set signcolumn=yes
    nmap [h <Plug>(GitGutterPrevHunk)
    nmap ]h <Plug>(GitGutterNextHunk)
    nmap [H <Plug>(GitGutterNextHunk)
    nmap [a <Plug>(GitGutterStageHunk)
    nmap [u <Plug>(GitGutterUndoHunk)
    " <Leader>gd is already bound for :Gdiff
    nmap [d :Gdiff<CR>
    nmap <Leader>gn <Plug>(GitGutterNextHunk)
    nmap <Leader>gN <Plug>(GitGutterPrevHunk)
    nmap <Leader>ga <Plug>(GitGutterStageHunk)
    nmap <Leader>gu <Plug>(GitGutterUndoHunk)
    " Used for merging conflicts
    " <Leader>gd is :Gdiff
    " d2o, d3o are used to obtain the hunks
    nmap <Leader>gD :Gvdiffsplit!<CR>
    if &diff
        " https://stackoverflow.com/a/13931727/1528712
        function! UpdateDiffHunks()
            setlocal nocursorbind
            setlocal noscrollbind
            let winview = winsaveview()
            let pos = getpos(".")
            sil exe 'normal! gg'
            let moved = 1
            let hunks = []
            while moved
                let startl = line(".")
                keepjumps sil exe 'normal! ]c'
                let moved = line(".") - startl
                if moved
                    call add(hunks,line("."))
                endif
            endwhile
            call winrestview(winview)
            call setpos(".",pos)
            setlocal cursorbind
            setlocal scrollbind
            let g:diff_hunks = hunks
        endfunction
        function! DiffCount()
            if !exists("g:diff_hunks")
                call UpdateDiffHunks()
            endif
            let n_hunks = 0
            let curline = line(".")
            for hunkline in g:diff_hunks
                if curline < hunkline
                    break
                endif
                let n_hunks += 1
            endfor
            return n_hunks . '/' . len(g:diff_hunks)
        endfunction
        " jump to the next/previous difference
        map [[ [c
        map ]] ]c
        " auto jump to the next difference after do/dp
        map do do]c
        map dp dp]c
        " TODO: not working automatically
        " autocmd CursorMoved,BufEnter * :echo DiffCount()
    endif

    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-unimpaired'

    " for syntax-checking layer, check https://github.com/liuchengxu/space-vim/issues/407
    " Comment the following part out to enable ale plug
    "
    Plug 'dense-analysis/ale'
    let g:ale_set_highlights = 0
    let g:ale_fix_on_save = 1
    let g:ale_echo_msg_format = '[#%linter%#] %s [%severity%]'
    let g:ale_statusline_format = ['E•%d', 'W•%d', 'OK']
    let g:ale_sign_error = '•'
    let g:ale_sign_warning = '•'
    let g:ale_echo_msg_error_str = g:spacevim.gui ? 'Error' : '✹ Error'
    let g:ale_echo_msg_warning_str = g:spacevim.gui ? 'Warning' : '⚠ Warning'
    let g:ale_completion_delay = 500
    let g:ale_echo_delay = 20
    let g:ale_lint_delay = 500
    let g:ale_lint_on_text_changed = 'normal'
    let g:ale_lint_on_insert_leave = 1
    " ale uses clang to generate ./.cache dir -- keep it that way
    " also uses ccls to generate ./.ccls-cache dir -- use the following configs
    " to override it, NOTE that coc generates .ccls-cache too, dealt with it already
    let g:ale_cpp_ccls_init_options = {'diagnostics': {'onOpen': 1, 'onChange': 1, 'onSave': 1}, 'cache': {'directory': '/tmp/ccls'}, 'compilationDatabaseDirectory': '.'}
    let g:ale_c_ccls_init_options = {'diagnostics': {'onOpen': 1, 'onChange': 1, 'onSave': 1}, 'cache': {'directory': '/tmp/ccls'}, 'compilationDatabaseDirectory': '.'}
    nmap <Leader>en <Plug>(ale_next)
    nmap <Leader>ep <Plug>(ale_previous)
    nnoremap <Leader>ts :ALEToggle<CR>

    Plug 'tpope/vim-repeat'

    Plug 'szw/vim-maximizer'
    nnoremap <silent><Leader>wm :MaximizerToggle<CR>
    nnoremap <silent><C-w>m :MaximizerToggle<CR>

    Plug 'haya14busa/vim-asterisk'
    map *   <Plug>(asterisk-*)
    map #   <Plug>(asterisk-#)
    map g*  <Plug>(asterisk-g*)
    map g#  <Plug>(asterisk-g#)
    map z*  <Plug>(asterisk-z*)
    map gz* <Plug>(asterisk-gz*)
    map z#  <Plug>(asterisk-z#)
    map gz# <Plug>(asterisk-gz#)
    let g:asterisk#keeppos = 1

    Plug 'Shougo/unite.vim'
    Plug 'Shougo/neoyank.vim'
    nnoremap <Leader>ry :Unite history/yank -default-action=append<CR>

    Plug 'ntpeters/vim-better-whitespace'
    let g:strip_whitespace_on_save=1
    let g:strip_whitespace_confirm=0
    let g:show_spaces_that_precede_tabs=1

    Plug 'ajh17/VimCompletesMe'
    Plug 'wellle/targets.vim'

    Plug 'machakann/vim-highlightedyank'
    let g:highlightedyank_highlight_duration = 500

    Plug 'vim-scripts/DirDiff.vim'
    let g:DirDiffExcludes = "CVS,*.class,*.o,*.bak,*.git"

    Plug 'matze/vim-move'
    map <A-Down> <A-j>
    map <A-Up>   <A-k>
    map <A-Left> <A-h>
    map <A-Right> <A-l>

    Plug 'mbbill/undotree'
    nnoremap <Leader>ru :UndotreeToggle<cr>

    Plug 'aymericbeaumet/vim-symlink'

    Plug 'chrisbra/Colorizer'
    nnoremap <Leader>tr :ColorToggle<cr>

    set nomodeline " fix the error message about modeline
    if has('nvim')
        set inccommand=split

        Plug 'vimlab/split-term.vim'
        " the default <Leader>' is using full window
        map <Leader>vv :VTerm<CR>
        map <Leader>vs :Term<CR>
    endif

    " NOTE: timeoutlen also affects the which-key popup delay
    " https://stackoverflow.com/a/15550787/1528712
    set timeout " Do time out on mappings and others
    set timeoutlen=500 " Wait {num} ms before timing out a mapping
    " When you’re pressing Escape to leave insert mode in the terminal, it will by
    " default take a second or another keystroke to leave insert mode completely
    " and update the statusline. This fixes that. I got this from:
    " https://powerline.readthedocs.org/en/latest/tipstricks.html#vim
    if !has('gui_running')
        set ttimeoutlen=10
        augroup FastEscape
            autocmd!
            au InsertEnter * set timeoutlen=0
            au InsertLeave * set timeoutlen=500
        augroup END
    endif
endfunction

" Override the default settings from space-vim as well as adding extras
function! UserConfig()
    " this variable is in ~/.vim/plugged/vim-better-default
    " Use the following format to overwrite configs in it
    runtime! plugin/default.vim
    set listchars=tab:»\ ,extends:›,precedes:‹,nbsp:·,trail:·,eol:$,space:·,conceal:·

    set nofixeol
    " enable mouse action such as moving point or choosing window
    set mouse=a

    " specll checking
    set spell spelllang=en_us
    set complete+=kspell
    let g:airline_detect_spell=0
    " C-x+C-l for completing the whole line, C-x+C-] for tag
    " C-x+C-n for keywords in the current file, C-x+C-f for file name
    " C-x+s for spelling suggestions
    " check for ':h ins-completion' for more shortcuts for completion

    " be able to add/modify description for bindings under leader key
    let g:spacevim#map#leader#desc = g:spacevim#map#leader#desc

    " disable tabline
    let g:airline#extensions#tabline#enabled = 0
    " disable the git part in statusline
    let g:airline_section_b = ""
    " hide 'utf-8[unix]' file format
    let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'

    " Adding extras.
    " Uncomment the following line If you have installed the powerline fonts.
    " It is good for airline layer.
    " let g:airline_powerline_fonts = 1

    " disable theme in terminal vim
    if !has("gui_running")
        colorscheme default
        " for which-key and floatwindow of fzf
        highlight Pmenu guibg=#3A3A3A
    endif

    " q to exit if no change, Q quit without saving
    nmap q :q<CR>
    nmap Q :qa!<CR>

    " start insert when editing git commit message
    au FileType gitcommit 1 | startinsert

    " use hybrid relative in normal mode, and normal relative in insert mode
    augroup numberinitial
        autocmd!
        autocmd BufEnter,FocusGained * set relativenumber
        autocmd BufLeave,FocusLost * set norelativenumber
    augroup END
    let g:number_lock = 0
    function! NumberNext()
        if (&nu == 1 && &rnu == 1)
            let g:number_lock = 1
            set nu nornu
        elseif (&nu == 1 && &rnu == 0)
            set nu rnu
        endif
    endfunction
    function! NumberToggle()
        if (&rnu == 1 && &nu == 1)
            let g:number_lock = 0
            set nornu nonu
        elseif (&rnu == 0 && &nu == 1)
            set nornu nonu
        elseif (&rnu == 0 && &nu == 0 && g:number_lock == 1)
            set nornu nu
        elseif (&rnu == 0 && &nu == 0 && g:number_lock == 0)
            set rnu nu
        endif
    endfunction
    nnoremap <Leader>tt :call NumberToggle()<CR>
    nnoremap <Leader>tn :call NumberNext()<CR>
    nnoremap <Leader>tw :set list!<CR>
    nnoremap <Leader>tl :set wrap!<CR>

    nnoremap <Leader>br :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>
    vnoremap <Leader>br :%s/\<<C-r><C-w>\>//gc<Left><Left><Left>

    function! GotoClosedFold(dir)
        let cmd = 'norm!z' . a:dir
        let view = winsaveview()
        let [l0, l, open] = [0, view.lnum, 1]
        while l != l0 && open
            exe cmd
            let [l0, l] = [l, line('.')]
            let open = foldclosed(l) < 0
        endwhile
        if open
            call winrestview(view)
        endif
    endfunction
    let $foldall=0
    function ToggleFoldAll()
        if $foldall==0
            :exe "normal zM"
            let $foldall=1
        else
            :exe "normal zR"
            let $foldall=0
        endif
    endfunction
    " za to toggle current fold, zm to toggle all fold
    " default zj/k are for GotoOpenedFold, overwrite them
    nnoremap <silent> zj :call GotoClosedFold('j')<cr>
    nnoremap <silent> zk :call GotoClosedFold('k')<cr>
    nnoremap zm :call ToggleFoldAll()<CR>

    noremap <C-a> <Home>
    noremap <C-e> <End>
    imap <C-k> <c-o>d$

    " change PWD according to the buffer, this affect a lot of functions in vim
    autocmd BufEnter * silent! lcd %:p:h

    "fzf
    " Overwrite the default Files command to include hidden files
    command! -bang -nargs=? -complete=dir Files
                \ call fzf#vim#files(<q-args>, {'source': 'rg --hidden --files -g !.git'}, <bang>0)
    " SPC ff is bound to files-in-home-direcotry by default
    nnoremap <Leader>ff :Files<CR>
    let g:spacevim#map#leader#desc.f.f = 'Files-in-current-dir'
    nnoremap <Leader>fF :Files<Space>
    let g:spacevim#map#leader#desc.f.F = 'Files-in-other-dir'
    nnoremap <Leader>fp :GFiles --cached --others<CR>
    let g:spacevim#map#leader#desc.f.p = 'Files-in-project-all'
    nnoremap <Leader>fP :GFiles<CR>
    let g:spacevim#map#leader#desc.f.P = 'Files-in-project'
    nnoremap <Leader>fe :call feedkeys(":e \<Tab>", 'tn')<CR>
    let g:spacevim#map#leader#desc.f.e = 'Open-file'
    nnoremap <Leader>fh :History<CR>
    nnoremap <Leader>fv :e ~/.spacevim<cr>
    nnoremap <Leader>pf :GFiles --cached --others<CR>
    let g:spacevim#map#leader#desc.p.f = 'Files-in-project-all'
    nnoremap <Leader>pF :GFiles<CR>
    let g:spacevim#map#leader#desc.p.F = 'Files-in-project'
    nnoremap <Leader>sg :Rg<CR>
    nnoremap <Leader>sG :Ag<CR>
    nnoremap <Leader>sS :call SwoopSelection()<CR>
    nnoremap <Leader>hc :Commands<CR>
    nnoremap <Leader>hb :Maps<CR>
    " search in recent files
    nnoremap <Leader>br :History<CR>
    " the default <Leader>bb binding is not so good
    nnoremap <Leader>bb :Buffers<CR>

    nnoremap <Leader>nn :NR<CR>
    nnoremap <Leader>nl :NRV<CR>
    " FIXME: special keys like <LEFT> cannot be parsed by add-description for bindings using
    " let g:spacevim#map#leader#desc.f.f = 'Files-in-current-dir'
    nnoremap <Leader>w<LEFT> <C-W>h
    nnoremap <Leader>w<RIGHT> <C-W>l
    nnoremap <Leader>w<UP> <C-W>k
    nnoremap <Leader>w<DOWN> <C-W>j
    nnoremap <Leader>w<Bslash> <C-W>v " SPC w \ to split-window-right
    nnoremap <Leader>vi :PlugInstall<CR>
    nnoremap <Leader>vc :PlugClean<CR>
    nnoremap <Leader>vC :PlugClean!<CR>
    nnoremap <Leader>vu :PlugUpdate<CR>
    nnoremap <Leader>vU :PlugUpgrade<CR>
    " show the info of point and buffer
    nnoremap <Leader>bi g<C-g>
    " show full path
    nnoremap <Leader>b<Space> :echo expand('%:p')<CR>
    " coc, add more, replace the default
    " TODO: :CocInstall coc-python for python
    " https://github.com/neoclide/coc.nvim/wiki/Language-servers#python
    " gd == goto definition in current window
    " do not comment the following line out, coc commands rely on the file
    let g:coc_config_home = "~/.bin/"
    nmap gG :call CocAction('jumpDefinition', 'split')<CR>
    nmap gv :call CocAction('jumpDefinition', 'vsplit')<CR>
    nmap gh :call spacevim#plug#coc#show_documentation()<CR>
    nmap gt <Plug>(coc-type-definition)
    nmap gi <Plug>(coc-implementation)
    nmap gr <Plug>(coc-references)
    nmap gl :<C-u>CocListResume<CR>
    nmap <silent> gR <Plug>(coc-rename)
    nnoremap <Leader>lg :call CocAction('jumpDefinition', 'split')<CR>
    nnoremap <Leader>lv :call CocAction('jumpDefinition', 'vsplit')<CR>
    " K == show doc == <Leader>lh
    nnoremap <Leader>ld :call spacevim#lang#util#Definition()<CR>
    nnoremap <Leader>li <Plug>(coc-implementation)
    nnoremap <Leader>lt <Plug>(coc-type-definition)
    nnoremap <Leader>ll :CocOpenLog<CR>
    nnoremap <Leader>lI :CocInfo<CR>
    nnoremap <Leader>lc  :<C-u>CocListResume<CR>
    nnoremap <Leader>lC  :CocConfig<CR>
    " all functions/variables/etc/
    nnoremap <Leader>lm :CocList -I symbols<CR>
    " like imenu
    nnoremap <Leader>l/ :CocList outline<CR>

    function! ToggleWindowSplit()
        if !exists('t:splitType')
            let t:splitType = 'vertical'
        endif
        if t:splitType == 'vertical' " is vertical switch to horizontal
            windo wincmd K
            let t:splitType = 'horizontal'
        else " is horizontal switch to vertical
            windo wincmd H
            let t:splitType = 'vertical'
        endif
    endfunction
    nnoremap <silent> <leader>wt :call ToggleWindowSplit()<cr>

    " indent and jump back
    nnoremap <Leader>== gg=G``
    nnoremap <Leader>={ =i{<C-o>
    nnoremap <Leader>=( =i(<C-o>
    nnoremap <Leader>=[ =i[<C-o>
    nnoremap <Leader>jg :call spacevim#util#GotoJump()<CR>

    " autocmd BufRead,BufNewFile *.sh,*.py syntax on
    " for python scripts with/without extension
    autocmd BufRead,BufNewFile * if (&ft == "sh") | set ts=4 sw=4 autoindent smartindent expandtab foldmethod=syntax cinwords=if,elif,else,for,while,with,try,except,finally,def,class | endif
    " for shell scripts with or without extension
    " FIXME: shell script indent is not correct when using gg=G
    autocmd BufRead,BufNewFile * if (&ft == "sh") | set noexpandtab tabstop=4 shiftwidth=4 | endif
    autocmd BufRead,BufNewFile *.fish,*.fishrc set expandtab tabstop=4 shiftwidth=4
    autocmd BufRead,BufNewFile *.c,*.h set noexpandtab tabstop=8 shiftwidth=8
    autocmd BufRead,BufNewFile *.cc,*.cpp set noexpandtab tabstop=4 shiftwidth=4
    autocmd BufRead,BufNewFile * if (&ft == "vim") | set expandtab tabstop=4 shiftwidth=4 | endif
    " set foldmethod for different file types
    autocmd BufRead,BufNewFile *.el set foldmethod=syntax

    " set pastetoggle=<F9>	 " paste from out-program under insert mode
    " donnot have to type F9 before pasting from outside of Vim
    let &t_SI .= "\<Esc>[?2004h"
    let &t_EI .= "\<Esc>[?2004l"
    inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
    function! XTermPasteBegin()
        set pastetoggle=<Esc>[201~
        set paste
        return ""
    endfunction

    function! WindowNumber(...)
        let builder = a:1
        let context = a:2
        call builder.add_section('airline_b', '%{tabpagewinnr(tabpagenr())}')
        return 0
    endfunction
    call airline#add_statusline_func('WindowNumber')
    call airline#add_inactive_statusline_func('WindowNumber')

    " after using n/N, auto highlight search even without using n/N
    map n <Plug>(anzu-n-with-echo)
    map N <Plug>(anzu-N-with-echo)
    " toggle hlsearch, highlight search result
    nnoremap <expr> <Leader>th (&hls && v:hlsearch ? ':nohls' : ':set hls')."\n"

    " search the whole word
    nnoremap <Leader>/ /\<\><left><left>
    " search and list all the result of current word
    nnoremap <Leader>sl :vimgrep /<c-r>=expand("<cword>")<cr>/ %<cr>:copen<cr>
endfunction
