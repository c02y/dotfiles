#!/bin/env bash
# alias/function definitions.
# Make sure the following line is in ~/.bashrc to use this file
# [ -f ~/Dotfiles.d/misc/bash_aliases ] && . ~/Dotfiles.d/misc/bash_aliases

export GOPATH=~/.go
# print PATH line by line using `echo -e ${PATH//:/\\n}`
PATH_A="$GOPATH/bin $HOME/.npms/bin $HOME/.cargo/bin $HOME/anaconda3/bin $HOME/.local/bin"
for path in $PATH_A; do
	if ! [[ ":$PATH:" == *":$path:"* ]]; then
		[ -d "$path" ] && export PATH=$path:$PATH
	fi
done

! [[ -v MANPATH ]] && export MANPATH=$(manpath)
# print MANPATH line by line using `echo -e ${MANPATH//:/\\n}`
MANPATH_A="$HOME/anaconda3/share/man $HOME/.npms/lib/node_modules/npm/man $HOME/.local/share/man"
for path in $MANPATH_A; do
	if ! [[ ":$MANPATH:" == *":$path:"* ]]; then
		[ -d "$path" ] && export MANPATH=$path:$MANPATH
	fi
done

######################################## start
# ingnore duplicates(continuous occurrences od a command) in history
export HISTCONTROL=ignoredups
# ignore some commands showing in history
# export HISTIGNORE="pwd:ls:la:ll:kill:killall:more:cd:"
# Enable huge history
export HISTFILESIZE=9999999999
export HISTSIZE=9999999999
# Save timestamp info for every command
export HISTTIMEFORMAT="[%F %T] ~~~ "
# Dump the history file after every command
shopt -s histappend
# Preload the working directory history list from the directory history
if type -t hd >/dev/null && type -t cd_func >/dev/null; then
	for x in $(hd 20) $(pwd); do cd_func "$x"; done
fi

alias bsr='source ~/.bashrc && echo ~/.bashrc reloaded!'

eval "$(zoxide init bash)"
alias zz='zi'
export _ZO_FZF_OPTS="-1 -0 --reverse --print0"
export FZF_DEFAULT_OPTS='+s -e -m -0 --reverse --print0'
export FZF_TMUX_HEIGHT=100%

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

# Dir = cd Dir, cd into a dir without using cd
shopt -s autocd

export LESS_TERMCAP_me=$'\e[0m'           # turn off all appearance modes (mb, md, so, us)
export LESS_TERMCAP_se=$'\e[0m'           # leave standout mode
export LESS_TERMCAP_ue=$'\e[0m'           # leave underline mode
export LESS_TERMCAP_so=$'\e[30;44m'       # standout-mode â€“ info
export LESS_TERMCAP_mb=$'\e[01;31m'       # enter blinking mode
export LESS_TERMCAP_md=$'\e[01;38;5;75m'  # enter double-bright mode
export LESS_TERMCAP_us=$'\e[04;38;5;200m' # enter underline mode
# color man page
export MANPAGER='vim +Man! -c "set signcolumn=no" -c "set cmdheight=1" -c "set laststatus=1"'
export PAGER='less -iXFR -x4 -M'
export GROFF_NO_SGR yes
export EDITOR='vim'
# disable Ctrl-d to EXIT
set -o ignoreeof # 10 times until exiting

alias x='exit'
alias q='exit'
# User specific aliases and functions
alias sl='ls'
alias ls='ls --color=auto'
alias lsp='readlink -f' # print the full path of a file
alias ll='ls -lh'
alias la='ls -d .??*'
alias lla='ls -lhA'
alias l.='ls -A'
alias lst='clear; ls --sort=time | less'
alias llt='ll --sort=time | less'
alias lat='la --sort=time | less'

# User specific aliases and functions
# alias ima='gwenview'
alias ima='ristretto '
alias ka='killall'
alias his='history'
# alias bw='ssh -qTfnN -D 7070 -p 443 hei1000@216.194.70.6'
alias bw='ssh -qTfnN -D 7070 hei1000@216.194.70.6'

# alias rm='rm -vir'
# alias cp='cp -vi'
# alias mv='mv -vi'

alias less='less -iXFR -x4 -M'
alias grep='grep --color=auto'
alias findt='find ./* -name "*~"; find ./* -name "\#*"'
alias ftr='find ./* -name "*~" | xargs rm -rfv; find ./* -name "\#*" | xargs rm -rfv'

# ps
alias pss='ps -ef | grep -v grep | grep '

alias du='du -h'
alias dus='du --summarize'
alias duS='du -sk * | sort -n'
alias watd='watch -d du --summarize'
alias df='df -h'

alias rgr='ranger'

# git
alias lg='lazygit'
alias gg='lazygit'
alias ggl='lazygit log'
alias ggs='lazygit status'
alias gits='git status' # gs is original Ghostscript app
alias gitpl='git pull'
alias gitpu='git push -v'
alias gitl='git log --stat'
alias gitd='git diff'           # show unstaged local modification
alias gitdc='git diff --cached' # show staged bu unpushed local modification
alias gitlp='git log -p --'     # [+ file] to how entire all/[file(even renamed)] history
alias gitsh='git show'          # [+ COMMIT] to show the modifications in a last/[specific] commit
alias gitlo='git log --oneline'
alias gitb='git branch -vv'
alias gitbl='git ls-remote'
alias gitblg='git ls-remote | grep -i'
alias gitcl='git config -l'
# git checkout previous/old commit
alias gitcp='git checkout HEAD^1'
# git checkout next/new commit
alias gitcn='git log --reverse --pretty=%H master | grep -A 1 (git rev-parse HEAD) | tail -n1 | xargs git checkout'
alias gitcm='git commit -m'
alias gitcma='git commit -amend -m'
alias gitt='git tag'
alias gitft='git ls-files --error-unmatch' # Check if file/dir is git-tracked

# gcc
alias gcc-w='gcc -Wall -W'
alias gcc-a='gcc -ansi -pedantic -Wall -W -Wconversion -Wshadow -Wcast-qual -Wwrite-strings'

alias emq='emacs -q'
alias emx='emacs -nw'
alias emd='rm -rf ~/.emacs.elc && emacs --debug-init'
alias emn='emacs --no-desktop'

# j for .bz2, z for .gz, J for xz, a for auto determine
alias tarsl='tar tvfa' # show the content
alias tarsx='tar xvfa' # extract the content
alias tarsc='tar cvfa' # create a tar.xxx

alias wgets='wget --mirror -p --html-extension --convert-links'
alias wt='wget -P /tmp/  http://softdownload.hao123.com/hao123-soft-online-bcs/soft/Q/2013-11-01_QQ2013SP4.exe'

# systemd-analyze
alias sab='systemd-analyze blame; systemd-analyze time'

function mkcd() {
	mkdir -p "$@"
	eval cd "\"\$$#\""
}

alias diff-s='diff -y --suppress-common-line '
# function diff-s () { diff -s --suppress-common-line "$@" | more -N;}
function diff-y() { diff -y "$@" | more -N; }

function lls() {
	if [ $# -eq 0 ]; then
		ls -lhA --color=yes . --sort=time --time=ctime | nl -v 0 | sort -nr | tail -20
	else
		ls -lhA --color=yes "$@" --sort=time --time=ctime | nl -v 0 | sort -nr | tail -20
	fi
}

function finds() {
	if [ $# -eq 2 ]; then
		find "$1" -iname "*$2*"
	else
		find . -iname "*$1*"
	fi
}

function lsx() {
	if test $DISPLAY; then
		if [ -f "$@" ] || [ -d "$@" ]; then
			readlink -fn "$@" | xclip -selection c
			readlink -f "$@"
			echo ---- Path copied to Clipbaord! ----
		fi
	else
		readlink -f "$@"
	fi
}

######################################## end
