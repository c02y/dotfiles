# -*- mode: snippet -*-
# name: time-timer
# key: time
# --
#include <chrono>

class ${1:Timer}
{
private:
	const char*m_Name;
	std::chrono::time_point<std::chrono::high_resolution_clock> m_StartTimepoint;
	bool m_Stopped;
public:
	$1(const char*name)
		:m_Name(name), m_Stopped(false)
	{
		m_StartTimepoint = std::chrono::high_resolution_clock::now();
	}

	void Stop()
	{
		auto endTimepoint = std::chrono::high_resolution_clock::now();

		long long start = std::chrono::time_point_cast<std::chrono::milliseconds>(m_StartTimepoint).time_since_epoch().count();
long long end = std::chrono::time_point_cast<std::chrono::milliseconds>(endTimepoint).time_since_epoch().count();

		std::cout << m_Name << ": " << (end - start) << "ms" << std::endl;
m_Stopped = true;
	}
	~$1()
	{
		if(!m_Stopped)
			Stop();
	}
}; // Using '$1 timer("msg")' in a block of code
