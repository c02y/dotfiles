;; Object python2.6/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.6/"
  :tables
  (list
    (semanticdb-table "Bastion.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Bastionification utility.

A bastion (for another object -- the 'original') is an object that has
the same methods as the original but does not give access to its
instance variables.  Bastions have a number of uses, but the most
obvious one is to provide code executing in restricted mode with a
safe interface to an object implemented in unrestricted mode.

The bastionification routine has an optional second argument which is
a filter function.  Only those methods for which the filter method
(called with the method name as argument) returns true are accessible.
The default filter method returns true unless the method name begins
with an underscore.

There are a number of possible implementations of bastions.  We use a
'lazy' approach where the bastion's __getattr__() discipline does all
the work for a particular method the first time it is used.  This is
usually fastest, especially if the user doesn't call all available
methods.  The retrieved methods are stored as instance variables of
the bastion, so the overhead is only occurred on the first use of each
method.

Detail: the bastion class has a __repr__() discipline which includes
the repr() of the original object.  This is precomputed when the
bastion is created.

\"\"\"" code nil nil [1 1243])
            ("warnings" include nil nil [1244 1273])
            ("warnpy3k" code nil nil [1274 1349])
            ("del" code nil nil [1350 1362])
            ("__all__" variable nil nil [1364 1401])
            ("types" include nil nil [1403 1431])
            ("BastionClass" type
               (:documentation "Helper class used by the Bastion() function.

    You could subclass this and pass the subclass as the bastionclass
    argument to the Bastion() function, as long as the constructor has
    the same signature (a get() function and a name for the object).

    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Constructor.

        Arguments:

        get - a function that gets the attribute value (by name)
        name - a human-readable name for the original object
               (suggestion: use repr(object))

        \"\"\"" code nil (reparse-symbol indented_block_body) [1771 1992])
                            ("self" variable nil (reparse-symbol indented_block_body) [2001 2017])
                            ("self" variable nil (reparse-symbol indented_block_body) [2026 2044]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1745 1749])
                            ("get" variable nil (reparse-symbol function_parameters) [1751 1754])
                            ("name" variable nil (reparse-symbol function_parameters) [1756 1760]))                          
                        :documentation "Constructor.

        Arguments:

        get - a function that gets the attribute value (by name)
        name - a human-readable name for the original object
               (suggestion: use repr(object))

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1732 2045])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2063 2067]))                          
                        :documentation "Return a representation string.

        This includes the name passed in to the constructor, so that
        if you print the bastion during debugging, at least you have
        some idea of what it is.

        ")
                        (reparse-symbol indented_block_body) [2050 2346])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2367 2371])
                            ("name" variable nil (reparse-symbol function_parameters) [2373 2377]))                          
                        :documentation "Get an as-yet undefined attribute value.

        This calls the get() function that was passed to the
        constructor.  The result is stored as an instance variable so
        that the next time the same attribute is requested,
        __getattr__() won't be invoked.

        If the get() function raises an exception, this is simply
        passed on -- exceptions are not cached.

        ")
                        (reparse-symbol indented_block_body) [2351 2894]))                  
                :type "class")
                nil [1434 2894])
            ("Bastion" function
               (:documentation "Create a bastion for an object, using an optional filter.

    See the Bastion module's documentation for background.

    Arguments:

    object - the original object
    filter - a predicate that decides whether a function name is OK;
             by default all names are OK that don't start with '_'
    name - the name of the object; default repr(object)
    bastionclass - class used to create the bastion; default BastionClass

    "
                :arguments 
                  ( ("object" variable nil (reparse-symbol function_parameters) [2908 2914])
                    ("filter" variable nil (reparse-symbol function_parameters) [2916 2922])
                    ("name" variable nil (reparse-symbol function_parameters) [2967 2971])
                    ("bastionclass" variable nil (reparse-symbol function_parameters) [2978 2990]))                  )
                nil [2896 4707])
            ("_test" function (:documentation "Test the Bastion() function.") nil [4709 5704])
            ("if" code nil nil [5706 5745]))          
      :file "Bastion.py"
      :pointmax 5745
      :fsize 5744
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    Use assertions to check that all arguments have the right type."
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2518])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2536 2542])
                    ("category" variable nil (reparse-symbol function_parameters) [2544 2552])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2562 2568])
                    ("append" variable nil (reparse-symbol function_parameters) [2572 2578]))                  )
                nil [2519 3091])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3092 3209])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3300 3304]))                  
                :type "class")
                nil [3210 3305])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3384 3388]))              ) nil [3364 3553])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [3600 3603]))              ) nil [3585 4411])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [4453 4459]))              ) nil [4438 4738])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [4782 4790]))              ) nil [4765 5598])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [5648 5655])
                    ("category" variable nil (reparse-symbol function_parameters) [5657 5665])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [5672 5682]))                  )
                nil [5639 6978])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [6997 7004])
                ("category" variable nil (reparse-symbol function_parameters) [7006 7014])
                ("filename" variable nil (reparse-symbol function_parameters) [7016 7024])
                ("lineno" variable nil (reparse-symbol function_parameters) [7026 7032])
                ("module" variable nil (reparse-symbol function_parameters) [7052 7058])
                ("registry" variable nil (reparse-symbol function_parameters) [7065 7073])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7080 7094]))              ) nil [6979 9894])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9991 10095])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [10208 10231])
                            ("for" code nil (reparse-symbol indented_block_body) [10240 10327])
                            ("None" code nil (reparse-symbol indented_block_body) [10392 10396]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10114 10118])
                            ("message" variable nil (reparse-symbol function_parameters) [10120 10127])
                            ("category" variable nil (reparse-symbol function_parameters) [10129 10137])
                            ("filename" variable nil (reparse-symbol function_parameters) [10139 10147])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10149 10155])
                            ("file" variable nil (reparse-symbol function_parameters) [10157 10161])
                            ("line" variable nil (reparse-symbol function_parameters) [10188 10192]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10101 10397])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10414 10418]))                          )
                        (reparse-symbol indented_block_body) [10402 10645]))                  
                :type "class")
                nil [9896 10645])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11404 11644])
                            ("self" variable nil (reparse-symbol indented_block_body) [11653 11674])
                            ("module" code nil (reparse-symbol indented_block_body) [11745 11751])
                            ("self" variable nil (reparse-symbol indented_block_body) [11760 11781]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11362 11366])
                            ("record" variable nil (reparse-symbol function_parameters) [11368 11374])
                            ("module" variable nil (reparse-symbol function_parameters) [11382 11388]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11349 11782])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11800 11804]))                          )
                        (reparse-symbol indented_block_body) [11787 12082])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12101 12105]))                          )
                        (reparse-symbol indented_block_body) [12087 12636])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12654 12658])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12660 12669]))                          )
                        (reparse-symbol indented_block_body) [12641 12879]))                  
                :type "class")
                nil [10647 12879])
            ("_warnings_defaults" variable nil nil [13331 13357])
            ("try" code nil nil [13358 13666])
            ("_processoptions" code nil nil [13692 13724])
            ("if" code nil nil [13725 14150])
            ("del" code nil nil [14150 14172]))          
      :file "warnings.py"
      :pointmax 14173
      :fsize 14172
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 11683 . 11687) (IF 11722 . 11724) (ELSE 11740 . 11744) (NAME 10335 . 10339) (IF 10375 . 10377) (ELSE 10387 . 10391) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("try" code nil nil [1118 1229])
            ("_g" function nil nil [1230 1252])
            ("GeneratorType" variable nil nil [1252 1278])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1301 1305]))                          )
                        (reparse-symbol indented_block_body) [1294 1313]))                  
                :type "class")
                nil [1280 1313])
            ("ClassType" variable nil nil [1313 1333])
            ("UnboundMethodType" variable nil nil [1334 1365])
            ("_x" variable nil nil [1395 1404])
            ("InstanceType" variable nil nil [1405 1428])
            ("MethodType" variable nil nil [1429 1453])
            ("BuiltinFunctionType" variable nil nil [1455 1486])
            ("BuiltinMethodType" variable nil nil [1487 1522])
            ("ModuleType" variable nil nil [1558 1580])
            ("FileType" variable nil nil [1581 1596])
            ("XRangeType" variable nil nil [1597 1616])
            ("try" code nil nil [1618 1964])
            ("SliceType" variable nil nil [1965 1982])
            ("EllipsisType" variable nil nil [1983 2012])
            ("DictProxyType" variable nil nil [2014 2053])
            ("NotImplementedType" variable nil nil [2054 2095])
            ("GetSetDescriptorType" variable nil nil [2149 2200])
            ("MemberDescriptorType" variable nil nil [2201 2255])
            ("del" code nil nil [2257 2280]))          
      :file "types.py"
      :pointmax 2324
      :fsize 2323
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "rexec.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Restricted execution facilities.

The class RExec exports methods r_exec(), r_eval(), r_execfile(), and
r_import(), which correspond roughly to the built-in operations
exec, eval(), execfile() and import, but executing the code in an
environment that only exposes those built-in operations that are
deemed safe.  To this end, a modest collection of 'fake' modules is
created which mimics the standard modules by the same names.  It is a
policy decision which built-in modules and operations are made
available; this module provides a reasonable default, but derived
classes can change the policies e.g. by overriding or extending class
variables like ok_builtin_modules or methods like make_sys().

XXX To do:
- r_open should allow writing tmp dir
- r_exec etc. with explicit globals/locals? (Use rexec(\"exec ... in ...\")?)

\"\"\"" code nil nil [1 832])
            ("warnings" include nil nil [833 862])
            ("warnpy3k" code nil nil [863 936])
            ("del" code nil nil [937 949])
            ("sys" include nil nil [952 962])
            ("__builtin__" include nil nil [963 981])
            ("os" include nil nil [982 991])
            ("ihooks" include nil nil [992 1005])
            ("imp" include nil nil [1006 1016])
            ("__all__" variable nil nil [1018 1037])
            ("FileBase" type
               (:members 
                  ( ("ok_file_methods" variable nil (reparse-symbol indented_block_body) [1060 1229]))                  
                :type "class")
                nil [1039 1230])
            ("FileWrapper" type
               (:superclasses ("FileBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("for" code nil (reparse-symbol indented_block_body) [1356 1490]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1338 1342])
                            ("f" variable nil (reparse-symbol function_parameters) [1344 1345]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1325 1490])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1505 1509]))                          )
                        (reparse-symbol indented_block_body) [1495 1533]))                  
                :type "class")
                nil [1232 1533])
            ("TEMPLATE" variable nil nil [1535 1628])
            ("FileDelegate" type
               (:superclasses ("FileBase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1704 1718])
                            ("self" variable nil (reparse-symbol indented_block_body) [1727 1743]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1678 1682])
                            ("mod" variable nil (reparse-symbol function_parameters) [1684 1687])
                            ("name" variable nil (reparse-symbol function_parameters) [1689 1693]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1665 1744])
                    ("for" code nil (reparse-symbol indented_block_body) [1749 1828]))                  
                :type "class")
                nil [1630 1828])
            ("RHooks" type
               (:superclasses ("ihooks.Hooks")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("verbose" variable nil (reparse-symbol indented_block_body) [2052 2063])
                            ("rexec" variable nil (reparse-symbol indented_block_body) [2072 2084])
                            ("if" code nil (reparse-symbol indented_block_body) [2093 2192])
                            ("if" code nil (reparse-symbol indented_block_body) [2200 2299])
                            ("if" code nil (reparse-symbol indented_block_body) [2307 2366])
                            ("ihooks" code nil (reparse-symbol indented_block_body) [2374 2410])
                            ("self" variable nil (reparse-symbol indented_block_body) [2419 2437]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1876 1880])
                            ("args" variable nil (reparse-symbol function_parameters) [1882 1887]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1863 2438])
                    ("set_rexec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2457 2461])
                            ("rexec" variable nil (reparse-symbol function_parameters) [2463 2468]))                          )
                        (reparse-symbol indented_block_body) [2443 2560])
                    ("get_suffixes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2582 2586]))                          )
                        (reparse-symbol indented_block_body) [2565 2630])
                    ("is_builtin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2650 2654])
                            ("name" variable nil (reparse-symbol function_parameters) [2656 2660]))                          )
                        (reparse-symbol indented_block_body) [2635 2706])
                    ("init_builtin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2728 2732])
                            ("name" variable nil (reparse-symbol function_parameters) [2734 2738]))                          )
                        (reparse-symbol indented_block_body) [2711 2815])
                    ("init_frozen" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2836 2840])
                            ("name" variable nil (reparse-symbol function_parameters) [2842 2846]))                          )
                        (reparse-symbol indented_block_body) [2820 2885])
                    ("load_source" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2905 2909])
                            ("args" variable nil (reparse-symbol function_parameters) [2911 2916]))                          )
                        (reparse-symbol indented_block_body) [2889 2955])
                    ("load_compiled" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2977 2981])
                            ("args" variable nil (reparse-symbol function_parameters) [2983 2988]))                          )
                        (reparse-symbol indented_block_body) [2959 3027])
                    ("load_package" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3048 3052])
                            ("args" variable nil (reparse-symbol function_parameters) [3054 3059]))                          )
                        (reparse-symbol indented_block_body) [3031 3098])
                    ("load_dynamic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3120 3124])
                            ("name" variable nil (reparse-symbol function_parameters) [3126 3130])
                            ("filename" variable nil (reparse-symbol function_parameters) [3132 3140])
                            ("file" variable nil (reparse-symbol function_parameters) [3142 3146]))                          )
                        (reparse-symbol indented_block_body) [3103 3210])
                    ("add_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3230 3234])
                            ("name" variable nil (reparse-symbol function_parameters) [3236 3240]))                          )
                        (reparse-symbol indented_block_body) [3215 3286])
                    ("modules_dict" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3308 3312]))                          )
                        (reparse-symbol indented_block_body) [3291 3349])
                    ("default_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3371 3375]))                          )
                        (reparse-symbol indented_block_body) [3354 3424]))                  
                :type "class")
                nil [1830 3424])
            ("RModuleLoader" variable nil nil [3456 3496])
            ("RModuleImporter" variable nil nil [3497 3536])
            ("RExec" type
               (:documentation "Basic restricted execution framework.

    Code executed in this restricted environment will only have access to
    modules and functions that are deemed safe; you can subclass RExec to
    add or remove capabilities as desired.

    The RExec class can prevent code from performing unsafe operations like
    reading or writing disk files, or using TCP/IP sockets.  However, it does
    not protect against code using extremely large amounts of memory or
    processor time.

    "
                :superclasses ("ihooks._Verbose")
                :members 
                  ( ("ok_path" variable nil (reparse-symbol indented_block_body) [4067 4092])
                    ("ok_builtin_modules" variable nil (reparse-symbol indented_block_body) [4135 4459])
                    ("ok_posix_names" variable nil (reparse-symbol indented_block_body) [4465 4675])
                    ("ok_sys_names" variable nil (reparse-symbol indented_block_body) [4681 4898])
                    ("nok_builtin_names" variable nil (reparse-symbol indented_block_body) [4904 4964])
                    ("ok_file_types" variable nil (reparse-symbol indented_block_body) [4970 5018])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Returns an instance of the RExec class.

        The hooks parameter is an instance of the RHooks class or a subclass
        of it.  If it is omitted or None, the default RHooks class is
        instantiated.

        Whenever the RExec module searches for a module (even a built-in one)
        or reads a module's code, it doesn't actually go out to the file
        system itself.  Rather, it calls methods of an RHooks instance that
        was passed to or created by its constructor.  (Actually, the RExec
        object doesn't make these calls --- they are made by a module loader
        object that's part of the RExec object.  This allows another level of
        flexibility, which can be useful when changing the mechanics of
        import within the restricted environment.)

        By providing an alternate RHooks object, we can control the file
        system accesses made to import a module, without changing the
        actual algorithm that controls the order in which those accesses are
        made.  For instance, we could substitute an RHooks object that
        passes all filesystem requests to a file server elsewhere, via some
        RPC mechanism such as ILU.  Grail's applet loader uses this to support
        importing applets from a URL for a directory.

        If the verbose parameter is true, additional debugging output may be
        sent to standard output.

        \"\"\"" code nil (reparse-symbol indented_block_body) [5079 6497])
                            ("raise" code nil (reparse-symbol indented_block_body) [6507 6576])
                            ("ihooks" code nil (reparse-symbol indented_block_body) [6586 6625])
                            ("self" code nil (reparse-symbol indented_block_body) [6683 6720])
                            ("self" code nil (reparse-symbol indented_block_body) [6729 6755])
                            ("self" variable nil (reparse-symbol indented_block_body) [6764 6781])
                            ("self" variable nil (reparse-symbol indented_block_body) [6790 6839])
                            ("list" variable nil (reparse-symbol indented_block_body) [6848 6857])
                            ("for" code nil (reparse-symbol indented_block_body) [6866 6989])
                            ("self" variable nil (reparse-symbol indented_block_body) [6997 7034])
                            ("self" code nil (reparse-symbol indented_block_body) [7043 7066])
                            ("self" code nil (reparse-symbol indented_block_body) [7075 7094])
                            ("self" code nil (reparse-symbol indented_block_body) [7103 7130])
                            ("self" code nil (reparse-symbol indented_block_body) [7253 7268])
                            ("self" variable nil (reparse-symbol indented_block_body) [7277 7325])
                            ("self" variable nil (reparse-symbol indented_block_body) [7334 7387]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5037 5041])
                            ("hooks" variable nil (reparse-symbol function_parameters) [5043 5048])
                            ("verbose" variable nil (reparse-symbol function_parameters) [5057 5064]))                          
                        :documentation "Returns an instance of the RExec class.

        The hooks parameter is an instance of the RHooks class or a subclass
        of it.  If it is omitted or None, the default RHooks class is
        instantiated.

        Whenever the RExec module searches for a module (even a built-in one)
        or reads a module's code, it doesn't actually go out to the file
        system itself.  Rather, it calls methods of an RHooks instance that
        was passed to or created by its constructor.  (Actually, the RExec
        object doesn't make these calls --- they are made by a module loader
        object that's part of the RExec object.  This allows another level of
        flexibility, which can be useful when changing the mechanics of
        import within the restricted environment.)

        By providing an alternate RHooks object, we can control the file
        system accesses made to import a module, without changing the
        actual algorithm that controls the order in which those accesses are
        made.  For instance, we could substitute an RHooks object that
        passes all filesystem requests to a file server elsewhere, via some
        RPC mechanism such as ILU.  Grail's applet loader uses this to support
        importing applets from a URL for a directory.

        If the verbose parameter is true, additional debugging output may be
        sent to standard output.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5024 7388])
                    ("set_trusted_path" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7414 7418]))                          )
                        (reparse-symbol indented_block_body) [7393 7616])
                    ("load_dynamic" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7638 7642])
                            ("name" variable nil (reparse-symbol function_parameters) [7644 7648])
                            ("filename" variable nil (reparse-symbol function_parameters) [7650 7658])
                            ("file" variable nil (reparse-symbol function_parameters) [7660 7664]))                          )
                        (reparse-symbol indented_block_body) [7621 7982])
                    ("make_initial_modules" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8012 8016]))                          )
                        (reparse-symbol indented_block_body) [7987 8071])
                    ("get_suffixes" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8119 8123]))                          )
                        (reparse-symbol indented_block_body) [8102 8267])
                    ("is_builtin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8287 8291])
                            ("mname" variable nil (reparse-symbol function_parameters) [8293 8298]))                          )
                        (reparse-symbol indented_block_body) [8272 8349])
                    ("make_builtin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8430 8434]))                          )
                        (reparse-symbol indented_block_body) [8413 8611])
                    ("make_main" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8630 8634]))                          )
                        (reparse-symbol indented_block_body) [8616 8677])
                    ("make_osname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8698 8702]))                          )
                        (reparse-symbol indented_block_body) [8682 8920])
                    ("make_sys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8938 8942]))                          )
                        (reparse-symbol indented_block_body) [8925 9294])
                    ("copy_except" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9381 9385])
                            ("src" variable nil (reparse-symbol function_parameters) [9387 9390])
                            ("exceptions" variable nil (reparse-symbol function_parameters) [9392 9402]))                          )
                        (reparse-symbol indented_block_body) [9365 9679])
                    ("copy_only" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9698 9702])
                            ("src" variable nil (reparse-symbol function_parameters) [9704 9707])
                            ("names" variable nil (reparse-symbol function_parameters) [9709 9714]))                          )
                        (reparse-symbol indented_block_body) [9684 9955])
                    ("copy_none" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9974 9978])
                            ("src" variable nil (reparse-symbol function_parameters) [9980 9983]))                          )
                        (reparse-symbol indented_block_body) [9960 10077])
                    ("add_module" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10160 10164])
                            ("mname" variable nil (reparse-symbol function_parameters) [10166 10171]))                          )
                        (reparse-symbol indented_block_body) [10145 10369])
                    ("r_exec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10429 10433])
                            ("code" variable nil (reparse-symbol function_parameters) [10435 10439]))                          
                        :documentation "Execute code within a restricted environment.

        The code parameter must either be a string containing one or more
        lines of Python code, or a compiled code object, which will be
        executed in the restricted environment's __main__ module.

        ")
                        (reparse-symbol indented_block_body) [10418 10796])
                    ("r_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10812 10816])
                            ("code" variable nil (reparse-symbol function_parameters) [10818 10822]))                          
                        :documentation "Evaluate code within a restricted environment.

        The code parameter must either be a string containing a Python
        expression, or a compiled code object, which will be evaluated in
        the restricted environment's __main__ module.  The value of the
        expression or code object will be returned.

        ")
                        (reparse-symbol indented_block_body) [10801 11244])
                    ("r_execfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11264 11268])
                            ("file" variable nil (reparse-symbol function_parameters) [11270 11274]))                          
                        :documentation "Execute the Python code in the file in the restricted
        environment's __main__ module.

        ")
                        (reparse-symbol indented_block_body) [11249 11469])
                    ("r_import" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11487 11491])
                            ("mname" variable nil (reparse-symbol function_parameters) [11493 11498])
                            ("globals" variable nil (reparse-symbol function_parameters) [11500 11507])
                            ("locals" variable nil (reparse-symbol function_parameters) [11512 11518])
                            ("fromlist" variable nil (reparse-symbol function_parameters) [11523 11531]))                          
                        :documentation "Import a module, raising an ImportError exception if the module
        is considered unsafe.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        ")
                        (reparse-symbol indented_block_body) [11474 11946])
                    ("r_reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11964 11968])
                            ("m" variable nil (reparse-symbol function_parameters) [11970 11971]))                          
                        :documentation "Reload the module object, re-parsing and re-initializing it.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        ")
                        (reparse-symbol indented_block_body) [11951 12312])
                    ("r_unload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12330 12334])
                            ("m" variable nil (reparse-symbol function_parameters) [12336 12337]))                          
                        :documentation "Unload the module.

        Removes it from the restricted environment's sys.modules dictionary.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        ")
                        (reparse-symbol indented_block_body) [12317 12714])
                    ("make_delegate_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12808 12812]))                          )
                        (reparse-symbol indented_block_body) [12784 13185])
                    ("set_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13204 13208]))                          )
                        (reparse-symbol indented_block_body) [13190 13652])
                    ("reset_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13673 13677]))                          )
                        (reparse-symbol indented_block_body) [13657 13865])
                    ("save_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13886 13890]))                          )
                        (reparse-symbol indented_block_body) [13871 14005])
                    ("restore_files" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14028 14032]))                          )
                        (reparse-symbol indented_block_body) [14010 14147])
                    ("s_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14164 14168])
                            ("func" variable nil (reparse-symbol function_parameters) [14170 14174])
                            ("args" variable nil (reparse-symbol function_parameters) [14176 14180])
                            ("kw" variable nil (reparse-symbol function_parameters) [14185 14187]))                          )
                        (reparse-symbol indented_block_body) [14152 14362])
                    ("s_exec" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14378 14382])
                            ("args" variable nil (reparse-symbol function_parameters) [14384 14389]))                          
                        :documentation "Execute code within a restricted environment.

        Similar to the r_exec() method, but the code will be granted access
        to restricted versions of the standard I/O streams sys.stdin,
        sys.stderr, and sys.stdout.

        The code parameter must either be a string containing one or more
        lines of Python code, or a compiled code object, which will be
        executed in the restricted environment's __main__ module.

        ")
                        (reparse-symbol indented_block_body) [14367 14904])
                    ("s_eval" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14920 14924])
                            ("args" variable nil (reparse-symbol function_parameters) [14926 14931]))                          
                        :documentation "Evaluate code within a restricted environment.

        Similar to the r_eval() method, but the code will be granted access
        to restricted versions of the standard I/O streams sys.stdin,
        sys.stderr, and sys.stdout.

        The code parameter must either be a string containing a Python
        expression, or a compiled code object, which will be evaluated in
        the restricted environment's __main__ module.  The value of the
        expression or code object will be returned.

        ")
                        (reparse-symbol indented_block_body) [14909 15505])
                    ("s_execfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15525 15529])
                            ("args" variable nil (reparse-symbol function_parameters) [15531 15536]))                          
                        :documentation "Execute the Python code in the file in the restricted
        environment's __main__ module.

        Similar to the r_execfile() method, but the code will be granted
        access to restricted versions of the standard I/O streams sys.stdin,
        sys.stderr, and sys.stdout.

        ")
                        (reparse-symbol indented_block_body) [15510 15894])
                    ("s_import" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15912 15916])
                            ("args" variable nil (reparse-symbol function_parameters) [15918 15923]))                          
                        :documentation "Import a module, raising an ImportError exception if the module
        is considered unsafe.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        Similar to the r_import() method, but has access to restricted
        versions of the standard I/O streams sys.stdin, sys.stderr, and
        sys.stdout.

        ")
                        (reparse-symbol indented_block_body) [15899 16471])
                    ("s_reload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16489 16493])
                            ("args" variable nil (reparse-symbol function_parameters) [16495 16500]))                          
                        :documentation "Reload the module object, re-parsing and re-initializing it.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        Similar to the r_reload() method, but has access to restricted
        versions of the standard I/O streams sys.stdin, sys.stderr, and
        sys.stdout.

        ")
                        (reparse-symbol indented_block_body) [16476 17015])
                    ("s_unload" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17033 17037])
                            ("args" variable nil (reparse-symbol function_parameters) [17039 17044]))                          
                        :documentation "Unload the module.

        Removes it from the restricted environment's sys.modules dictionary.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        Similar to the r_unload() method, but has access to restricted
        versions of the standard I/O streams sys.stdin, sys.stderr, and
        sys.stdout.

        ")
                        (reparse-symbol indented_block_body) [17020 17595])
                    ("r_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17639 17643])
                            ("file" variable nil (reparse-symbol function_parameters) [17645 17649])
                            ("mode" variable nil (reparse-symbol function_parameters) [17651 17655])
                            ("buf" variable nil (reparse-symbol function_parameters) [17661 17664]))                          
                        :documentation "Method called when open() is called in the restricted environment.

        The arguments are identical to those of the open() function, and a
        file object (or a class instance compatible with file objects)
        should be returned.  RExec's default behaviour is allow opening
        any file for reading, but forbidding any attempt to write a file.

        This method is implicitly called by code executing in the
        restricted environment.  Overriding this method in a subclass is
        used to change the policies enforced by a restricted environment.

        ")
                        (reparse-symbol indented_block_body) [17628 18443])
                    ("r_exc_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18507 18511]))                          )
                        (reparse-symbol indented_block_body) [18492 18594]))                  
                :type "class")
                nil [3539 18594])
            ("test" function nil nil [18596 20103])
            ("if" code nil nil [20105 20153]))          
      :file "rexec.py"
      :pointmax 20153
      :fsize 20152
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9664])
            ("__all__" code nil nil [9665 9687])
            ("try" code nil nil [9729 9781])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9792 9796])
                    ("args" variable nil (reparse-symbol function_parameters) [9798 9803]))                  )
                nil [9782 9951])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9963 9967])
                    ("args" variable nil (reparse-symbol function_parameters) [9969 9974]))                  )
                nil [9952 10178])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10190 10194])
                    ("args" variable nil (reparse-symbol function_parameters) [10196 10201]))                  )
                nil [10179 10387])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10400 10404])
                    ("args" variable nil (reparse-symbol function_parameters) [10406 10411]))                  )
                nil [10388 10657])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10669 10673])
                    ("args" variable nil (reparse-symbol function_parameters) [10675 10679]))                  )
                nil [10658 10910])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10923 10927])
                    ("args" variable nil (reparse-symbol function_parameters) [10929 10933])
                    ("env" variable nil (reparse-symbol function_parameters) [10935 10938]))                  )
                nil [10911 11205])
            ("__all__" code nil nil [11206 11278])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11293 11297])
                ("args" variable nil (reparse-symbol function_parameters) [11299 11303])
                ("env" variable nil (reparse-symbol function_parameters) [11305 11308]))              ) nil [11280 12148])
            ("try" code nil nil [12210 16419])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16431 16434])
                    ("default" variable nil (reparse-symbol function_parameters) [16436 16443]))                  )
                nil [16420 16627])
            ("__all__" code nil nil [16627 16651])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16665 16669]))              ) nil [16653 16763])
            ("if" code nil nil [16807 19710])
            ("if" code nil nil [19711 20708])
            ("if" code nil nil [20710 21816])
            ("if" code nil nil [21850 25116])
            ("copy_reg" include nil nil [25117 25145])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25169 25172])
                ("dict" variable nil (reparse-symbol function_parameters) [25174 25178]))              ) nil [25147 25215])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25240 25242]))              ) nil [25216 25317])
            ("try" code nil nil [25318 25452])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25478 25481])
                ("dict" variable nil (reparse-symbol function_parameters) [25483 25487]))              ) nil [25453 25527])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25555 25557]))              ) nil [25528 25635])
            ("try" code nil nil [25636 25803]))          
      :file "os.py"
      :pointmax 25803
      :fsize 25802
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ihooks.py"
      :file "ihooks.py"
      :fsize 17452
      :lastmodtime '(19690 55975 0 0))
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882]))                  )
                nil [6846 7301])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7311 7318])
                    ("repl" variable nil (reparse-symbol function_parameters) [7320 7324])
                    ("string" variable nil (reparse-symbol function_parameters) [7326 7332])
                    ("count" variable nil (reparse-symbol function_parameters) [7334 7339]))                  )
                nil [7302 7888])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7899 7906])
                    ("string" variable nil (reparse-symbol function_parameters) [7908 7914])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7916 7924]))                  )
                nil [7889 8112])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8125 8132])
                    ("string" variable nil (reparse-symbol function_parameters) [8134 8140])
                    ("flags" variable nil (reparse-symbol function_parameters) [8142 8147]))                  )
                nil [8113 8479])
            ("if" code nil nil [8480 8839])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8852 8859])
                ("flags" variable nil (reparse-symbol function_parameters) [8861 8866]))              ) nil [8840 8979])
            ("purge" function nil nil [8980 9077])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9091 9098])
                ("flags" variable nil (reparse-symbol function_parameters) [9100 9105]))              ) nil [9078 9209])
            ("_alphanum" variable nil nil [9210 9224])
            ("for" code nil nil [9225 9322])
            ("del" code nil nil [9322 9327])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9340 9347]))              ) nil [9329 12967]))          
      :file "re.py"
      :pointmax 12967
      :fsize 12966
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("set" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [502 505]))              ) nil [494 573])
            ("_LITERAL_CODES" variable nil nil [574 618])
            ("_REPEATING_CODES" variable nil nil [619 675])
            ("_SUCCESS_CODES" variable nil nil [676 716])
            ("_ASSERT_CODES" variable nil nil [717 758])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [773 777])
                ("pattern" variable nil (reparse-symbol function_parameters) [779 786])
                ("flags" variable nil (reparse-symbol function_parameters) [788 793]))              ) nil [760 6092])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6114 6121])
                ("flags" variable nil (reparse-symbol function_parameters) [6123 6128])
                ("code" variable nil (reparse-symbol function_parameters) [6130 6134])
                ("fixup" variable nil (reparse-symbol function_parameters) [6136 6141]))              ) nil [6093 6999])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [7022 7029])
                ("fixup" variable nil (reparse-symbol function_parameters) [7031 7036]))              ) nil [7000 8417])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8433 8437]))              ) nil [8418 8749])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10092 10099])
                ("fixup" variable nil (reparse-symbol function_parameters) [10101 10106]))              ) nil [10070 11661])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11674 11676]))              ) nil [11662 11882])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11901 11905])
                ("pattern" variable nil (reparse-symbol function_parameters) [11907 11914])
                ("flags" variable nil (reparse-symbol function_parameters) [11916 11921]))              ) nil [11883 15281])
            ("try" code nil nil [15282 15403])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15417 15420]))              ) nil [15404 15517])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15528 15529])
                ("flags" variable nil (reparse-symbol function_parameters) [15531 15536]))              ) nil [15518 15763])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15776 15777])
                ("flags" variable nil (reparse-symbol function_parameters) [15779 15784]))              ) nil [15764 16508]))          
      :file "sre_compile.py"
      :pointmax 16508
      :fsize 16507
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("set" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [394 397]))              ) nil [386 465])
            ("SPECIAL_CHARS" variable nil nil [466 497])
            ("REPEAT_CHARS" variable nil nil [498 519])
            ("DIGITS" variable nil nil [521 547])
            ("OCTDIGITS" variable nil nil [549 576])
            ("HEXDIGITS" variable nil nil [577 618])
            ("WHITESPACE" variable nil nil [620 651])
            ("ESCAPES" variable nil nil [653 929])
            ("CATEGORIES" variable nil nil [931 1407])
            ("FLAGS" variable nil nil [1409 1651])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1763 1777])
                            ("self" variable nil (reparse-symbol indented_block_body) [1786 1800])
                            ("self" variable nil (reparse-symbol indented_block_body) [1809 1824])
                            ("self" variable nil (reparse-symbol indented_block_body) [1833 1852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1748 1752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1735 1853])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1871 1875])
                            ("name" variable nil (reparse-symbol function_parameters) [1877 1881]))                          )
                        (reparse-symbol indented_block_body) [1857 2294])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2313 2317])
                            ("gid" variable nil (reparse-symbol function_parameters) [2319 2322]))                          )
                        (reparse-symbol indented_block_body) [2298 2355])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2374 2378])
                            ("gid" variable nil (reparse-symbol function_parameters) [2380 2383]))                          )
                        (reparse-symbol indented_block_body) [2359 2444]))                  
                :type "class")
                nil [1653 2444])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2556 2578])
                            ("if" code nil (reparse-symbol indented_block_body) [2587 2626])
                            ("self" variable nil (reparse-symbol indented_block_body) [2634 2650])
                            ("self" variable nil (reparse-symbol indented_block_body) [2659 2676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2521 2525])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2527 2534])
                            ("data" variable nil (reparse-symbol function_parameters) [2536 2540]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2508 2677])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2690 2694])
                            ("level" variable nil (reparse-symbol function_parameters) [2696 2701]))                          )
                        (reparse-symbol indented_block_body) [2681 3637])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3654 3658]))                          )
                        (reparse-symbol indented_block_body) [3641 3692])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3708 3712]))                          )
                        (reparse-symbol indented_block_body) [3696 3745])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3765 3769])
                            ("index" variable nil (reparse-symbol function_parameters) [3771 3776]))                          )
                        (reparse-symbol indented_block_body) [3749 3808])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3828 3832])
                            ("index" variable nil (reparse-symbol function_parameters) [3834 3839]))                          )
                        (reparse-symbol indented_block_body) [3812 3973])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3993 3997])
                            ("index" variable nil (reparse-symbol function_parameters) [3999 4004])
                            ("code" variable nil (reparse-symbol function_parameters) [4006 4010]))                          )
                        (reparse-symbol indented_block_body) [3977 4045])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("index" variable nil (reparse-symbol function_parameters) [4066 4071])
                            ("code" variable nil (reparse-symbol function_parameters) [4073 4077]))                          )
                        (reparse-symbol indented_block_body) [4049 4118])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4133 4137])
                            ("code" variable nil (reparse-symbol function_parameters) [4139 4143]))                          )
                        (reparse-symbol indented_block_body) [4122 4177])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4194 4198]))                          )
                        (reparse-symbol indented_block_body) [4181 5420]))                  
                :type "class")
                nil [2445 5420])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5478 5498])
                            ("self" variable nil (reparse-symbol indented_block_body) [5507 5521])
                            ("self" code nil (reparse-symbol indented_block_body) [5530 5543]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5455 5459])
                            ("string" variable nil (reparse-symbol function_parameters) [5461 5467]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5442 5544])
                    ("raise" code nil (reparse-symbol indented_block_body) [7795 7841]))                  
                :type "class")
                nil [5421 7842])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7855 7861])
                ("escape" variable nil (reparse-symbol function_parameters) [7863 7869])
                ("state" variable nil (reparse-symbol function_parameters) [7871 7876]))              ) nil [7843 9535])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9551 9557])
                ("state" variable nil (reparse-symbol function_parameters) [9559 9564])
                ("nested" variable nil (reparse-symbol function_parameters) [9566 9572]))              ) nil [9536 11161])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11182 11188])
                ("state" variable nil (reparse-symbol function_parameters) [11190 11195])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11197 11206]))              ) nil [11162 11680])
            ("_PATTERNENDERS" variable nil nil [11681 11707])
            ("_ASSERTCHARS" variable nil nil [11708 11733])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11734 11768])
            ("_REPEATCODES" variable nil nil [11769 11813])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11826 11832])
                ("state" variable nil (reparse-symbol function_parameters) [11834 11839]))              ) nil [11815 26473])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26494 26502])
                ("match" variable nil (reparse-symbol function_parameters) [26504 26509]))              ) nil [26474 26879]))          
      :file "sre_parse.py"
      :pointmax 26879
      :fsize 26878
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((ASSIGN 26186 . 26187) (INDENT_BLOCK 7778 . 7791) (NEWLINE 7777 . 7778) (COLON 7776 . 7777)))
    (semanticdb-table "socket.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1857])
            ("_socket" include nil nil [1859 1873])
            ("_socket" include nil nil [1874 1895])
            ("try" code nil nil [1897 2839])
            ("warnings" include nil nil [2840 2864])
            ("sys" include nil nil [2840 2864])
            ("os" include nil nil [2840 2864])
            ("try" code nil nil [2866 2960])
            ("try" code nil nil [2961 3020])
            ("EBADF" variable nil nil [3020 3054])
            ("EINTR" variable nil nil [3055 3089])
            ("__all__" variable nil nil [3091 3133])
            ("__all__" code nil nil [3134 3179])
            ("_realsocket" variable nil nil [3182 3202])
            ("if" code nil nil [3222 4118])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4133 4137]))                  )
                nil [4121 4812])
            ("_socketmethods" variable nil nil [4814 5025])
            ("if" code nil nil [5027 5096])
            ("if" code nil nil [5097 5180])
            ("_delegate_methods" variable nil nil [5291 5400])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5435 5449])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5465 5470]))                      ) (reparse-symbol indented_block_body) [5454 5523])
                    ("send" variable nil (reparse-symbol indented_block_body) [5586 5654])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5659 5679]))                  
                :type "class")
                nil [5402 5680])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [5920 5949])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [5955 6017])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6106 6177])
                            ("self" variable nil (reparse-symbol indented_block_body) [6185 6203])
                            ("for" code nil (reparse-symbol indented_block_body) [6212 6303]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6036 6040])
                            ("family" variable nil (reparse-symbol function_parameters) [6042 6048])
                            ("type" variable nil (reparse-symbol function_parameters) [6058 6062])
                            ("proto" variable nil (reparse-symbol function_parameters) [6076 6081])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6085 6090]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6023 6303])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6318 6322]))                          )
                        (reparse-symbol indented_block_body) [6308 6478])
                    ("close" variable nil (reparse-symbol indented_block_body) [6482 6523])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6540 6544]))                          )
                        (reparse-symbol indented_block_body) [6529 6635])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6639 6682])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6696 6700]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6688 6862])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6880 6884])
                            ("mode" variable nil (reparse-symbol function_parameters) [6886 6890])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [6896 6903]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [6867 7168])
                    ("family" variable nil (reparse-symbol indented_block_body) [7173 7247])
                    ("type" variable nil (reparse-symbol indented_block_body) [7252 7320])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7325 7399])
                    ("_s" variable nil (reparse-symbol indented_block_body) [7405 7516])
                    ("for" code nil (reparse-symbol indented_block_body) [7521 7582])
                    ("del" code nil (reparse-symbol indented_block_body) [7586 7596]))                  
                :type "class")
                nil [5886 7597])
            ("socket" variable nil nil [7598 7633])
            ("_exception_was_EINTR" function (:arguments 
              ( ("exc" variable nil (reparse-symbol function_parameters) [7660 7663]))              ) nil [7635 7759])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [7848 7870])
                    ("name" variable nil (reparse-symbol indented_block_body) [7875 7892])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [7898 8105])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8181 8198])
                            ("self" variable nil (reparse-symbol indented_block_body) [8207 8223])
                            ("if" code nil (reparse-symbol indented_block_body) [8268 8327])
                            ("self" variable nil (reparse-symbol indented_block_body) [8335 8357])
                            ("self" variable nil (reparse-symbol indented_block_body) [8366 8388])
                            ("if" code nil (reparse-symbol indented_block_body) [8615 8791])
                            ("self" variable nil (reparse-symbol indented_block_body) [8799 8823])
                            ("self" variable nil (reparse-symbol indented_block_body) [9112 9135])
                            ("self" variable nil (reparse-symbol indented_block_body) [9144 9159])
                            ("self" variable nil (reparse-symbol indented_block_body) [9188 9206])
                            ("self" variable nil (reparse-symbol indented_block_body) [9215 9234]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8124 8128])
                            ("sock" variable nil (reparse-symbol function_parameters) [8130 8134])
                            ("mode" variable nil (reparse-symbol function_parameters) [8136 8140])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8147 8154])
                            ("close" variable nil (reparse-symbol function_parameters) [8159 8164]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8111 9235])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9255 9259]))                          )
                        (reparse-symbol indented_block_body) [9240 9296])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9300 9363])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9379 9383]))                          )
                        (reparse-symbol indented_block_body) [9369 9565])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9582 9586]))                          )
                        (reparse-symbol indented_block_body) [9570 9719])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9734 9738]))                          )
                        (reparse-symbol indented_block_body) [9724 10697])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10713 10717]))                          )
                        (reparse-symbol indented_block_body) [10702 10755])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10770 10774])
                            ("data" variable nil (reparse-symbol function_parameters) [10776 10780]))                          )
                        (reparse-symbol indented_block_body) [10760 11125])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11145 11149])
                            ("list" variable nil (reparse-symbol function_parameters) [11151 11155]))                          )
                        (reparse-symbol indented_block_body) [11130 11506])
                    ("_get_wbuf_len" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11529 11533]))                          )
                        (reparse-symbol indented_block_body) [11511 11566])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11580 11584])
                            ("size" variable nil (reparse-symbol function_parameters) [11586 11590]))                          )
                        (reparse-symbol indented_block_body) [11571 14548])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14566 14570])
                            ("size" variable nil (reparse-symbol function_parameters) [14572 14576]))                          )
                        (reparse-symbol indented_block_body) [14553 18586])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18605 18609])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18611 18619]))                          )
                        (reparse-symbol indented_block_body) [18591 18912])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18956 18960]))                          )
                        (reparse-symbol indented_block_body) [18943 18983])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18997 19001]))                          )
                        (reparse-symbol indented_block_body) [18988 19108]))                  
                :type "class")
                nil [7760 19108])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19109 19143])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19167 19174])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19176 19183]))                  )
                nil [19145 20150]))          
      :file "socket.py"
      :pointmax 20150
      :fsize 20149
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4129]))          
      :file "linecache.py"
      :pointmax 4129
      :fsize 4128
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "threading.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Thread module emulating a subset of Java's threading model.\"\"\"" code nil nil [1 66])
            ("sys" include nil nil [68 86])
            ("try" code nil nil [88 172])
            ("warnings" include nil nil [173 188])
            ("functools" include nil nil [190 217])
            ("time" include nil nil [218 265])
            ("traceback" include nil nil [266 313])
            ("collections" include nil nil [314 343])
            ("__all__" variable nil nil [924 1186])
            ("_start_new_thread" variable nil nil [1188 1231])
            ("_allocate_lock" variable nil nil [1232 1269])
            ("_get_ident" variable nil nil [1270 1299])
            ("ThreadError" variable nil nil [1300 1326])
            ("del" code nil nil [1327 1337])
            ("warnings" code nil nil [1452 1583])
            ("_VERBOSE" variable nil nil [1866 1882])
            ("if" code nil nil [1884 2503])
            ("_profile_hook" variable nil nil [2543 2563])
            ("_trace_hook" variable nil nil [2564 2582])
            ("setprofile" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2599 2603]))              ) nil [2584 2656])
            ("settrace" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [2670 2674]))              ) nil [2657 2723])
            ("Lock" variable nil nil [2751 2772])
            ("RLock" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [2784 2789])
                ("kwargs" variable nil (reparse-symbol function_parameters) [2791 2799]))              ) nil [2774 2837])
            ("_RLock" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [2909 2941])
                            ("self" variable nil (reparse-symbol indented_block_body) [2950 2981])
                            ("self" variable nil (reparse-symbol indented_block_body) [2990 3009])
                            ("self" variable nil (reparse-symbol indented_block_body) [3018 3034]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2880 2884])
                            ("verbose" variable nil (reparse-symbol function_parameters) [2886 2893]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2867 3035])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3053 3057]))                          )
                        (reparse-symbol indented_block_body) [3040 3290])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3307 3311])
                            ("blocking" variable nil (reparse-symbol function_parameters) [3313 3321]))                          )
                        (reparse-symbol indented_block_body) [3295 3904])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [3909 3928])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3946 3950]))                          )
                        (reparse-symbol indented_block_body) [3934 4395])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4413 4417])
                            ("t" variable nil (reparse-symbol function_parameters) [4419 4420])
                            ("v" variable nil (reparse-symbol function_parameters) [4422 4423])
                            ("tb" variable nil (reparse-symbol function_parameters) [4425 4427]))                          )
                        (reparse-symbol indented_block_body) [4400 4453])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4531 4535])
                            ("count_owner" variable nil (reparse-symbol function_parameters) [4537 4548]))                          )
                        (reparse-symbol indented_block_body) [4510 4751])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4774 4778]))                          )
                        (reparse-symbol indented_block_body) [4756 5026])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5045 5049]))                          )
                        (reparse-symbol indented_block_body) [5031 5096]))                  
                :type "class")
                nil [2838 5096])
            ("Condition" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [5112 5117])
                ("kwargs" variable nil (reparse-symbol function_parameters) [5119 5127]))              ) nil [5098 5169])
            ("_Condition" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [5256 5288])
                            ("if" code nil (reparse-symbol indented_block_body) [5297 5341])
                            ("self" variable nil (reparse-symbol indented_block_body) [5349 5367])
                            ("self" variable nil (reparse-symbol indented_block_body) [5436 5463])
                            ("self" variable nil (reparse-symbol indented_block_body) [5472 5499])
                            ("try" code nil (reparse-symbol indented_block_body) [5723 5828])
                            ("try" code nil (reparse-symbol indented_block_body) [5836 5947])
                            ("try" code nil (reparse-symbol indented_block_body) [5955 6052])
                            ("self" variable nil (reparse-symbol indented_block_body) [6060 6079]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5216 5220])
                            ("lock" variable nil (reparse-symbol function_parameters) [5222 5226])
                            ("verbose" variable nil (reparse-symbol function_parameters) [5233 5240]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5203 6080])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6099 6103]))                          )
                        (reparse-symbol indented_block_body) [6085 6145])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6163 6167])
                            ("args" variable nil (reparse-symbol function_parameters) [6169 6174]))                          )
                        (reparse-symbol indented_block_body) [6150 6220])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6238 6242]))                          )
                        (reparse-symbol indented_block_body) [6225 6319])
                    ("_release_save" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6342 6346]))                          )
                        (reparse-symbol indented_block_body) [6324 6408])
                    ("_acquire_restore" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6434 6438])
                            ("x" variable nil (reparse-symbol function_parameters) [6440 6441]))                          )
                        (reparse-symbol indented_block_body) [6413 6505])
                    ("_is_owned" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6524 6528]))                          )
                        (reparse-symbol indented_block_body) [6510 6794])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6808 6812])
                            ("timeout" variable nil (reparse-symbol function_parameters) [6814 6821]))                          )
                        (reparse-symbol indented_block_body) [6799 8616])
                    ("notify" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8632 8636])
                            ("n" variable nil (reparse-symbol function_parameters) [8638 8639]))                          )
                        (reparse-symbol indented_block_body) [8621 9216])
                    ("notifyAll" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9235 9239]))                          )
                        (reparse-symbol indented_block_body) [9221 9283])
                    ("notify_all" variable nil (reparse-symbol indented_block_body) [9288 9310]))                  
                :type "class")
                nil [5170 9311])
            ("Semaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [9327 9332])
                ("kwargs" variable nil (reparse-symbol function_parameters) [9334 9342]))              ) nil [9313 9384])
            ("_Semaphore" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [9547 9630])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [9638 9670])
                            ("self" variable nil (reparse-symbol indented_block_body) [9679 9710])
                            ("self" variable nil (reparse-symbol indented_block_body) [9719 9739]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9509 9513])
                            ("value" variable nil (reparse-symbol function_parameters) [9515 9520])
                            ("verbose" variable nil (reparse-symbol function_parameters) [9524 9531]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9496 9740])
                    ("acquire" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9757 9761])
                            ("blocking" variable nil (reparse-symbol function_parameters) [9763 9771]))                          )
                        (reparse-symbol indented_block_body) [9745 10356])
                    ("__enter__" variable nil (reparse-symbol indented_block_body) [10361 10380])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10398 10402]))                          )
                        (reparse-symbol indented_block_body) [10386 10655])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10673 10677])
                            ("t" variable nil (reparse-symbol function_parameters) [10679 10680])
                            ("v" variable nil (reparse-symbol function_parameters) [10682 10683])
                            ("tb" variable nil (reparse-symbol function_parameters) [10685 10687]))                          )
                        (reparse-symbol indented_block_body) [10660 10713]))                  
                :type "class")
                nil [9385 10713])
            ("BoundedSemaphore" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [10736 10741])
                ("kwargs" variable nil (reparse-symbol function_parameters) [10743 10751]))              ) nil [10715 10800])
            ("_BoundedSemaphore" type
               (:documentation "Semaphore that checks that # releases is <= # acquires"
                :superclasses ("_Semaphore")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Semaphore" code nil (reparse-symbol indented_block_body) [10958 10999])
                            ("self" variable nil (reparse-symbol indented_block_body) [11008 11035]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10920 10924])
                            ("value" variable nil (reparse-symbol function_parameters) [10926 10931])
                            ("verbose" variable nil (reparse-symbol function_parameters) [10935 10942]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10907 11036])
                    ("release" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11053 11057]))                          )
                        (reparse-symbol indented_block_body) [11041 11224]))                  
                :type "class")
                nil [10801 11224])
            ("Event" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [11236 11241])
                ("kwargs" variable nil (reparse-symbol function_parameters) [11243 11251]))              ) nil [11226 11289])
            ("_Event" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("_Verbose" code nil (reparse-symbol indented_block_body) [11420 11452])
                            ("self" variable nil (reparse-symbol indented_block_body) [11461 11492])
                            ("self" variable nil (reparse-symbol indented_block_body) [11501 11520]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11391 11395])
                            ("verbose" variable nil (reparse-symbol function_parameters) [11397 11404]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11378 11521])
                    ("isSet" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11536 11540]))                          )
                        (reparse-symbol indented_block_body) [11526 11570])
                    ("is_set" variable nil (reparse-symbol indented_block_body) [11575 11589])
                    ("set" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11603 11607]))                          )
                        (reparse-symbol indented_block_body) [11595 11772])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11787 11791]))                          )
                        (reparse-symbol indented_block_body) [11777 11920])
                    ("wait" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11934 11938])
                            ("timeout" variable nil (reparse-symbol function_parameters) [11940 11947]))                          )
                        (reparse-symbol indented_block_body) [11925 12123]))                  
                :type "class")
                nil [11290 12123])
            ("_counter" variable nil nil [12162 12174])
            ("_newname" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [12188 12196]))              ) nil [12175 12290])
            ("_active_limbo_lock" variable nil nil [12322 12359])
            ("_active" variable nil nil [12360 12372])
            ("_limbo" variable nil nil [12410 12421])
            ("Thread" type
               (:superclasses ("_Verbose")
                :members 
                  ( ("__initialized" variable nil (reparse-symbol indented_block_body) [12479 12500])
                    ("__exc_info" variable nil (reparse-symbol indented_block_body) [12751 12777])
                    ("__exc_clear" variable nil (reparse-symbol indented_block_body) [12880 12908])
                    ("__init__" function
                       (:suite 
                          ( ("assert" code nil (reparse-symbol indented_block_body) [13031 13090])
                            ("_Verbose" code nil (reparse-symbol indented_block_body) [13099 13131])
                            ("if" code nil (reparse-symbol indented_block_body) [13140 13183])
                            ("self" variable nil (reparse-symbol indented_block_body) [13191 13213])
                            ("self" variable nil (reparse-symbol indented_block_body) [13222 13259])
                            ("self" variable nil (reparse-symbol indented_block_body) [13268 13286])
                            ("self" variable nil (reparse-symbol indented_block_body) [13295 13317])
                            ("self" variable nil (reparse-symbol indented_block_body) [13326 13362])
                            ("self" variable nil (reparse-symbol indented_block_body) [13371 13390])
                            ("self" variable nil (reparse-symbol indented_block_body) [13399 13423])
                            ("self" variable nil (reparse-symbol indented_block_body) [13432 13454])
                            ("self" variable nil (reparse-symbol indented_block_body) [13463 13495])
                            ("self" variable nil (reparse-symbol indented_block_body) [13504 13529])
                            ("self" variable nil (reparse-symbol indented_block_body) [13656 13683]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12927 12931])
                            ("group" variable nil (reparse-symbol function_parameters) [12933 12938])
                            ("target" variable nil (reparse-symbol function_parameters) [12945 12951])
                            ("name" variable nil (reparse-symbol function_parameters) [12958 12962])
                            ("args" variable nil (reparse-symbol function_parameters) [12986 12990])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [12995 13001])
                            ("verbose" variable nil (reparse-symbol function_parameters) [13008 13015]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12914 13684])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13705 13709]))                          )
                        (reparse-symbol indented_block_body) [13689 13804])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13822 13826]))                          )
                        (reparse-symbol indented_block_body) [13809 14270])
                    ("start" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14285 14289]))                          )
                        (reparse-symbol indented_block_body) [14275 14876])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14889 14893]))                          )
                        (reparse-symbol indented_block_body) [14881 15218])
                    ("__bootstrap" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15239 15243]))                          )
                        (reparse-symbol indented_block_body) [15223 16222])
                    ("_set_ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16242 16246]))                          )
                        (reparse-symbol indented_block_body) [16227 16285])
                    ("__bootstrap_inner" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16312 16316]))                          )
                        (reparse-symbol indented_block_body) [16290 19702])
                    ("__stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19718 19722]))                          )
                        (reparse-symbol indented_block_body) [19707 19851])
                    ("__delete" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19869 19873]))                          )
                        (reparse-symbol indented_block_body) [19856 21670])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21684 21688])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21690 21697]))                          )
                        (reparse-symbol indented_block_body) [21675 22948])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22976 22980]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [22953 23076])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23107 23111])
                            ("name" variable nil (reparse-symbol function_parameters) [23113 23117]))                          
                        :decorators 
                          ( ("name.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23081 23218])
                    ("ident" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23247 23251]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23223 23348])
                    ("isAlive" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23365 23369]))                          )
                        (reparse-symbol indented_block_body) [23353 23500])
                    ("is_alive" variable nil (reparse-symbol indented_block_body) [23505 23523])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23554 23558]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23529 23658])
                    ("daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23693 23697])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [23699 23707]))                          
                        :decorators 
                          ( ("daemon.setter" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [23663 23956])
                    ("isDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23974 23978]))                          )
                        (reparse-symbol indented_block_body) [23961 24008])
                    ("setDaemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24027 24031])
                            ("daemonic" variable nil (reparse-symbol function_parameters) [24033 24041]))                          )
                        (reparse-symbol indented_block_body) [24013 24075])
                    ("getName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24092 24096]))                          )
                        (reparse-symbol indented_block_body) [24080 24124])
                    ("setName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24141 24145])
                            ("name" variable nil (reparse-symbol function_parameters) [24147 24151]))                          )
                        (reparse-symbol indented_block_body) [24129 24179]))                  
                :type "class")
                nil [12450 24179])
            ("Timer" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [24251 24256])
                ("kwargs" variable nil (reparse-symbol function_parameters) [24258 24266]))              ) nil [24241 24304])
            ("_Timer" type
               (:documentation "Call a function after a specified number of seconds:

    t = Timer(30.0, f, args=[], kwargs={})
    t.start()
    t.cancel() # stop the timer's action if it's still waiting
    "
                :superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [24589 24610])
                            ("self" variable nil (reparse-symbol indented_block_body) [24619 24643])
                            ("self" variable nil (reparse-symbol indented_block_body) [24652 24676])
                            ("self" variable nil (reparse-symbol indented_block_body) [24685 24701])
                            ("self" variable nil (reparse-symbol indented_block_body) [24710 24730])
                            ("self" variable nil (reparse-symbol indented_block_body) [24739 24762]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24534 24538])
                            ("interval" variable nil (reparse-symbol function_parameters) [24540 24548])
                            ("function" variable nil (reparse-symbol function_parameters) [24550 24558])
                            ("args" variable nil (reparse-symbol function_parameters) [24560 24564])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [24569 24575]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24521 24763])
                    ("cancel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24779 24783]))                          
                        :documentation "Stop the timer if it hasn't finished yet")
                        (reparse-symbol indented_block_body) [24768 24869])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24882 24886]))                          )
                        (reparse-symbol indented_block_body) [24874 25051]))                  
                :type "class")
                nil [24305 25051])
            ("_MainThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [25217 25257])
                            ("self" code nil (reparse-symbol indented_block_body) [25266 25293])
                            ("self" code nil (reparse-symbol indented_block_body) [25302 25319])
                            ("_active_limbo_lock" code nil (reparse-symbol indented_block_body) [25328 25356])
                            ("_active" variable nil (reparse-symbol indented_block_body) [25365 25393])
                            ("_active_limbo_lock" code nil (reparse-symbol indented_block_body) [25402 25430]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25202 25206]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [25189 25431])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25452 25456]))                          )
                        (reparse-symbol indented_block_body) [25436 25480])
                    ("_exitfunc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25499 25503]))                          )
                        (reparse-symbol indented_block_body) [25485 25858]))                  
                :type "class")
                nil [25157 25858])
            ("_pickSomeNonDaemonThread" function nil nil [25859 25996])
            ("_DummyThread" type
               (:superclasses ("Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("Thread" code nil (reparse-symbol indented_block_body) [26495 26543])
                            ("del" code nil (reparse-symbol indented_block_body) [26763 26786])
                            ("self" code nil (reparse-symbol indented_block_body) [26796 26823])
                            ("self" code nil (reparse-symbol indented_block_body) [26832 26849])
                            ("_active_limbo_lock" code nil (reparse-symbol indented_block_body) [26858 26886])
                            ("_active" variable nil (reparse-symbol indented_block_body) [26895 26923])
                            ("_active_limbo_lock" code nil (reparse-symbol indented_block_body) [26932 26960]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26480 26484]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26467 26961])
                    ("_set_daemon" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26982 26986]))                          )
                        (reparse-symbol indented_block_body) [26966 27009])
                    ("join" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27023 27027])
                            ("timeout" variable nil (reparse-symbol function_parameters) [27029 27036]))                          )
                        (reparse-symbol indented_block_body) [27014 27095]))                  
                :type "class")
                nil [26434 27095])
            ("currentThread" function nil nil [27121 27311])
            ("current_thread" variable nil nil [27312 27342])
            ("activeCount" function nil nil [27344 27485])
            ("active_count" variable nil nil [27486 27512])
            ("_enumerate" function nil nil [27514 27646])
            ("enumerate" function nil nil [27647 27796])
            ("thread" include nil nil [27797 27826])
            ("_shutdown" variable nil nil [27942 27977])
            ("try" code nil nil [28076 28179])
            ("_after_fork" function nil nil [28181 29523])
            ("_test" function nil nil [29543 31769])
            ("if" code nil nil [31770 31809]))          
      :file "threading.py"
      :pointmax 31809
      :fsize 31808
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((INDENT_BLOCK 19351 . 19386) (NEWLINE 19135 . 19136) (COLON 19134 . 19135) (FINALLY 19127 . 19134) (INDENT_BLOCK 19351 . 19386) (NEWLINE 19135 . 19136) (COLON 19134 . 19135) (FINALLY 19127 . 19134) (INDENT_BLOCK 19351 . 19386) (NEWLINE 19135 . 19136) (COLON 19134 . 19135) (FINALLY 19127 . 19134) (INDENT_BLOCK 19351 . 19386) (NEWLINE 19135 . 19136) (COLON 19134 . 19135) (FINALLY 19127 . 19134)))
    (semanticdb-table "functools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"functools.py - Tools for working with functions and callable objects
\"\"\"" code nil nil [1 76])
            ("_functools" include nil nil [358 396])
            ("WRAPPER_ASSIGNMENTS" variable nil nil [510 569])
            ("WRAPPER_UPDATES" variable nil nil [570 601])
            ("update_wrapper" function
               (:documentation "Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    "
                :arguments 
                  ( ("wrapper" variable nil (reparse-symbol function_parameters) [621 628])
                    ("wrapped" variable nil (reparse-symbol function_parameters) [649 656])
                    ("assigned" variable nil (reparse-symbol function_parameters) [677 685])
                    ("updated" variable nil (reparse-symbol function_parameters) [728 735]))                  )
                nil [602 1550])
            ("wraps" function
               (:documentation "Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    "
                :arguments 
                  ( ("wrapped" variable nil (reparse-symbol function_parameters) [1561 1568])
                    ("assigned" variable nil (reparse-symbol function_parameters) [1580 1588])
                    ("updated" variable nil (reparse-symbol function_parameters) [1622 1629]))                  )
                nil [1551 2163]))          
      :file "functools.py"
      :pointmax 2163
      :fsize 2162
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "traceback.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Extract, format and print information about Python stack traces.\"\"\"" code nil nil [1 71])
            ("linecache" include nil nil [73 89])
            ("sys" include nil nil [90 100])
            ("types" include nil nil [101 113])
            ("__all__" variable nil nil [115 378])
            ("_print" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [391 395])
                ("str" variable nil (reparse-symbol function_parameters) [397 400])
                ("terminator" variable nil (reparse-symbol function_parameters) [405 415]))              ) nil [380 454])
            ("print_list" function
               (:documentation "Print the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file."
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [471 485])
                    ("file" variable nil (reparse-symbol function_parameters) [487 491]))                  )
                nil [456 893])
            ("format_list" function
               (:documentation "Format a list of traceback entry tuples for printing.

    Given a list of tuples as returned by extract_tb() or
    extract_stack(), return a list of strings ready for printing.
    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    "
                :arguments 
                  ( ("extracted_list" variable nil (reparse-symbol function_parameters) [910 924]))                  )
                nil [894 1625])
            ("print_tb" function
               (:documentation "Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [1640 1642])
                    ("limit" variable nil (reparse-symbol function_parameters) [1644 1649])
                    ("file" variable nil (reparse-symbol function_parameters) [1656 1660]))                  )
                nil [1627 2610])
            ("format_tb" function
               (:documentation "A shorthand for 'format_list(extract_stack(f, limit))."
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2625 2627])
                    ("limit" variable nil (reparse-symbol function_parameters) [2629 2634]))                  )
                nil [2611 2755])
            ("extract_tb" function
               (:documentation "Return list of up to limit pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a quadruple (filename, line
    number, function name, text) representing the information that is
    usually printed for a stack trace.  The text is a string with
    leading and trailing whitespace stripped; if the source is not
    available it is None.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [2771 2773])
                    ("limit" variable nil (reparse-symbol function_parameters) [2775 2780]))                  )
                nil [2756 3891])
            ("print_exception" function
               (:documentation "Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header \"Traceback (most recent
    call last):\"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [3913 3918])
                    ("value" variable nil (reparse-symbol function_parameters) [3920 3925])
                    ("tb" variable nil (reparse-symbol function_parameters) [3927 3929])
                    ("limit" variable nil (reparse-symbol function_parameters) [3931 3936])
                    ("file" variable nil (reparse-symbol function_parameters) [3943 3947]))                  )
                nil [3893 4762])
            ("format_exception" function
               (:documentation "Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [4784 4789])
                    ("value" variable nil (reparse-symbol function_parameters) [4791 4796])
                    ("tb" variable nil (reparse-symbol function_parameters) [4798 4800])
                    ("limit" variable nil (reparse-symbol function_parameters) [4802 4807]))                  )
                nil [4763 5414])
            ("format_exception_only" function
               (:documentation "Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    "
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [5441 5446])
                    ("value" variable nil (reparse-symbol function_parameters) [5448 5453]))                  )
                nil [5415 7529])
            ("_format_final_exc_line" function
               (:documentation "Return a list of a single line -- normal case for format_exception_only"
                :arguments 
                  ( ("etype" variable nil (reparse-symbol function_parameters) [7557 7562])
                    ("value" variable nil (reparse-symbol function_parameters) [7564 7569]))                  )
                nil [7530 7826])
            ("_some_str" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [7841 7846]))              ) nil [7827 8111])
            ("print_exc" function
               (:documentation "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.
    (In fact, it uses sys.exc_info() to retrieve the same information
    in a thread-safe way.)"
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8127 8132])
                    ("file" variable nil (reparse-symbol function_parameters) [8139 8143]))                  )
                nil [8113 8552])
            ("format_exc" function
               (:documentation "Like print_exc() but return a string."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8569 8574]))                  )
                nil [8554 8794])
            ("print_last" function
               (:documentation "This is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'."
                :arguments 
                  ( ("limit" variable nil (reparse-symbol function_parameters) [8811 8816])
                    ("file" variable nil (reparse-symbol function_parameters) [8823 8827]))                  )
                nil [8796 9107])
            ("print_stack" function
               (:documentation "Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9125 9126])
                    ("limit" variable nil (reparse-symbol function_parameters) [9133 9138])
                    ("file" variable nil (reparse-symbol function_parameters) [9145 9149]))                  )
                nil [9109 9612])
            ("format_stack" function
               (:documentation "Shorthand for 'format_list(extract_stack(f, limit))'."
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9630 9631])
                    ("limit" variable nil (reparse-symbol function_parameters) [9638 9643]))                  )
                nil [9613 9914])
            ("extract_stack" function
               (:documentation "Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    "
                :arguments 
                  ( ("f" variable nil (reparse-symbol function_parameters) [9933 9934])
                    ("limit" variable nil (reparse-symbol function_parameters) [9941 9946]))                  )
                nil [9915 11075])
            ("tb_lineno" function
               (:documentation "Calculate correct line number of traceback given in tb.

    Obsolete in 2.3.
    "
                :arguments 
                  ( ("tb" variable nil (reparse-symbol function_parameters) [11090 11092]))                  )
                nil [11076 11212]))          
      :file "traceback.py"
      :pointmax 11212
      :fsize 11211
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "collections.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 64])
            ("_abcoll" include nil nil [213 234])
            ("_abcoll" include nil nil [235 249])
            ("__all__" variable nil nil [250 276])
            ("_collections" include nil nil [278 321])
            ("operator" include nil nil [322 368])
            ("keyword" include nil nil [369 412])
            ("sys" include nil nil [413 431])
            ("itertools" include nil nil [432 467])
            ("operator" include nil nil [468 498])
            ("try" code nil nil [499 624])
            ("OrderedDict" type
               (:superclasses ("dict")
                :members 
                  ( ("'Dictionary that remembers insertion order'" code nil (reparse-symbol indented_block_body) [654 697])
                    ("__init__" function
                       (:suite 
                          ( ("'''Initialize an ordered dictionary.  The signature is the same as
        regular dictionaries, but keyword arguments are not recommended because
        their insertion order is arbitrary.

        '''" code nil (reparse-symbol indented_block_body) [1306 1509])
                            ("if" code nil (reparse-symbol indented_block_body) [1518 1616])
                            ("try" code nil (reparse-symbol indented_block_body) [1624 1825])
                            ("self" code nil (reparse-symbol indented_block_body) [1833 1861]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1276 1280])
                            ("args" variable nil (reparse-symbol function_parameters) [1282 1287])
                            ("kwds" variable nil (reparse-symbol function_parameters) [1289 1295]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1263 1862])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1883 1887])
                            ("key" variable nil (reparse-symbol function_parameters) [1889 1892])
                            ("value" variable nil (reparse-symbol function_parameters) [1894 1899])
                            ("dict_setitem" variable nil (reparse-symbol function_parameters) [1901 1913]))                          )
                        (reparse-symbol indented_block_body) [1867 2335])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2356 2360])
                            ("key" variable nil (reparse-symbol function_parameters) [2362 2365])
                            ("dict_delitem" variable nil (reparse-symbol function_parameters) [2367 2379]))                          )
                        (reparse-symbol indented_block_body) [2340 2850])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2868 2872]))                          )
                        (reparse-symbol indented_block_body) [2855 3253])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3275 3279]))                          )
                        (reparse-symbol indented_block_body) [3258 3679])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3694 3698]))                          )
                        (reparse-symbol indented_block_body) [3684 3874])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3963 3967]))                          )
                        (reparse-symbol indented_block_body) [3954 4038])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4054 4058]))                          )
                        (reparse-symbol indented_block_body) [4043 4150])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4165 4169]))                          )
                        (reparse-symbol indented_block_body) [4155 4279])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4297 4301]))                          )
                        (reparse-symbol indented_block_body) [4284 4389])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4409 4413]))                          )
                        (reparse-symbol indented_block_body) [4394 4526])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4545 4549]))                          )
                        (reparse-symbol indented_block_body) [4531 4678])
                    ("update" variable nil (reparse-symbol indented_block_body) [4683 4713])
                    ("__update" variable nil (reparse-symbol indented_block_body) [4719 4736])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [4801 4820])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4834 4838])
                            ("key" variable nil (reparse-symbol function_parameters) [4840 4843])
                            ("default" variable nil (reparse-symbol function_parameters) [4845 4852]))                          )
                        (reparse-symbol indented_block_body) [4826 5256])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5276 5280])
                            ("key" variable nil (reparse-symbol function_parameters) [5282 5285])
                            ("default" variable nil (reparse-symbol function_parameters) [5287 5294]))                          )
                        (reparse-symbol indented_block_body) [5261 5485])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5502 5506])
                            ("last" variable nil (reparse-symbol function_parameters) [5508 5512]))                          )
                        (reparse-symbol indented_block_body) [5490 5874])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5892 5896])
                            ("_repr_running" variable nil (reparse-symbol function_parameters) [5898 5911]))                          )
                        (reparse-symbol indented_block_body) [5879 6320])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6340 6344]))                          )
                        (reparse-symbol indented_block_body) [6325 6670])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6684 6688]))                          )
                        (reparse-symbol indented_block_body) [6675 6771])
                    ("fromkeys" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [6806 6809])
                            ("iterable" variable nil (reparse-symbol function_parameters) [6811 6819])
                            ("value" variable nil (reparse-symbol function_parameters) [6821 6826]))                          )
                        (reparse-symbol indented_block_body) [6776 7076])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7092 7096])
                            ("other" variable nil (reparse-symbol function_parameters) [7098 7103]))                          )
                        (reparse-symbol indented_block_body) [7081 7428])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7444 7448])
                            ("other" variable nil (reparse-symbol function_parameters) [7450 7455]))                          )
                        (reparse-symbol indented_block_body) [7433 7525])
                    ("viewkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7620 7624]))                          )
                        (reparse-symbol indented_block_body) [7607 7732])
                    ("viewvalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7752 7756]))                          )
                        (reparse-symbol indented_block_body) [7737 7862])
                    ("viewitems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7881 7885]))                          )
                        (reparse-symbol indented_block_body) [7867 7996]))                  
                :type "class")
                nil [625 7996])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [8013 8021])
                    ("field_names" variable nil (reparse-symbol function_parameters) [8023 8034])
                    ("verbose" variable nil (reparse-symbol function_parameters) [8036 8043]))                  )
                nil [7998 12558])
            ("if" code nil nil [12564 13731]))          
      :file "collections.py"
      :pointmax 13731
      :fsize 13730
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 13189 . 13199) (PAREN_BLOCK 13199 . 13215) (NAME 12847 . 12857) (PAREN_BLOCK 12857 . 12873)))
    (semanticdb-table "_abcoll.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2155]))                  
                :type "class")
                nil [1841 2155])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2174 2197])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2235 2239]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2203 2259])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2302 2305])
                            ("C" variable nil (reparse-symbol function_parameters) [2307 2308]))                          )
                        (reparse-symbol indented_block_body) [2264 2433]))                  
                :type "class")
                nil [2157 2433])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2456 2479])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2522 2526])
                            ("x" variable nil (reparse-symbol function_parameters) [2528 2529]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2485 2553])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2596 2599])
                            ("C" variable nil (reparse-symbol function_parameters) [2601 2602]))                          )
                        (reparse-symbol indented_block_body) [2558 2736]))                  
                :type "class")
                nil [2435 2736])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2758 2781])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2820 2824])
                            ("args" variable nil (reparse-symbol function_parameters) [2826 2831])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2833 2839]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2787 2863])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2906 2909])
                            ("C" variable nil (reparse-symbol function_parameters) [2911 2912]))                          )
                        (reparse-symbol indented_block_body) [2868 3041]))                  
                :type "class")
                nil [2738 3041])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3484 3488])
                            ("other" variable nil (reparse-symbol function_parameters) [3490 3495]))                          )
                        (reparse-symbol indented_block_body) [3473 3740])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3756 3760])
                            ("other" variable nil (reparse-symbol function_parameters) [3762 3767]))                          )
                        (reparse-symbol indented_block_body) [3745 3904])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3920 3924])
                            ("other" variable nil (reparse-symbol function_parameters) [3926 3931]))                          )
                        (reparse-symbol indented_block_body) [3909 4035])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4051 4055])
                            ("other" variable nil (reparse-symbol function_parameters) [4057 4062]))                          )
                        (reparse-symbol indented_block_body) [4040 4167])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4183 4187])
                            ("other" variable nil (reparse-symbol function_parameters) [4189 4194]))                          )
                        (reparse-symbol indented_block_body) [4172 4332])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4348 4352])
                            ("other" variable nil (reparse-symbol function_parameters) [4354 4359]))                          )
                        (reparse-symbol indented_block_body) [4337 4397])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4438 4441])
                            ("it" variable nil (reparse-symbol function_parameters) [4443 4445]))                          )
                        (reparse-symbol indented_block_body) [4402 4674])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4691 4695])
                            ("other" variable nil (reparse-symbol function_parameters) [4697 4702]))                          )
                        (reparse-symbol indented_block_body) [4679 4861])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4881 4885])
                            ("other" variable nil (reparse-symbol function_parameters) [4887 4892]))                          )
                        (reparse-symbol indented_block_body) [4866 5002])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5018 5022])
                            ("other" variable nil (reparse-symbol function_parameters) [5024 5029]))                          )
                        (reparse-symbol indented_block_body) [5007 5206])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5223 5227])
                            ("other" variable nil (reparse-symbol function_parameters) [5229 5234]))                          )
                        (reparse-symbol indented_block_body) [5211 5526])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547])
                            ("other" variable nil (reparse-symbol function_parameters) [5549 5554]))                          )
                        (reparse-symbol indented_block_body) [5531 5776])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5852 5867])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5883 5887]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5873 6876]))                  
                :type "class")
                nil [3058 6876])
            ("Set" code nil nil [6877 6900])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6959 6963])
                            ("value" variable nil (reparse-symbol function_parameters) [6965 6970]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6931 7037])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7074 7078])
                            ("value" variable nil (reparse-symbol function_parameters) [7080 7085]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7042 7193])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7209 7213])
                            ("value" variable nil (reparse-symbol function_parameters) [7215 7220]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7198 7383])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7396 7400]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7388 7640])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7655 7659]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7645 7837])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7854 7858])
                            ("it" variable nil (reparse-symbol function_parameters) [7860 7862]))                          )
                        (reparse-symbol indented_block_body) [7842 7938])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960])
                            ("it" variable nil (reparse-symbol function_parameters) [7962 7964]))                          )
                        (reparse-symbol indented_block_body) [7943 8053])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8071 8075])
                            ("it" variable nil (reparse-symbol function_parameters) [8077 8079]))                          )
                        (reparse-symbol indented_block_body) [8058 8320])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8338 8342])
                            ("it" variable nil (reparse-symbol function_parameters) [8344 8346]))                          )
                        (reparse-symbol indented_block_body) [8325 8426]))                  
                :type "class")
                nil [6903 8426])
            ("MutableSet" code nil nil [8427 8451])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8557 8561])
                            ("key" variable nil (reparse-symbol function_parameters) [8563 8566]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8521 8592])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8605 8609])
                            ("key" variable nil (reparse-symbol function_parameters) [8611 8614])
                            ("default" variable nil (reparse-symbol function_parameters) [8616 8623]))                          )
                        (reparse-symbol indented_block_body) [8597 8725])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("key" variable nil (reparse-symbol function_parameters) [8753 8756]))                          )
                        (reparse-symbol indented_block_body) [8730 8882])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8900 8904]))                          )
                        (reparse-symbol indented_block_body) [8887 8933])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8953 8957]))                          )
                        (reparse-symbol indented_block_body) [8938 9013])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9032 9036]))                          )
                        (reparse-symbol indented_block_body) [9018 9099])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9113 9117]))                          )
                        (reparse-symbol indented_block_body) [9104 9146])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9161 9165]))                          )
                        (reparse-symbol indented_block_body) [9151 9218])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9234 9238]))                          )
                        (reparse-symbol indented_block_body) [9223 9284])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9364 9379])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9396 9400])
                            ("other" variable nil (reparse-symbol function_parameters) [9402 9407]))                          )
                        (reparse-symbol indented_block_body) [9385 9544])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9560 9564])
                            ("other" variable nil (reparse-symbol function_parameters) [9566 9571]))                          )
                        (reparse-symbol indented_block_body) [9549 9609]))                  
                :type "class")
                nil [8473 9609])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9678 9701]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9654 9658])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9660 9667]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9641 9702])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9719 9723]))                          )
                        (reparse-symbol indented_block_body) [9707 9760]))                  
                :type "class")
                nil [9610 9760])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9818 9822])
                            ("key" variable nil (reparse-symbol function_parameters) [9824 9827]))                          )
                        (reparse-symbol indented_block_body) [9801 9866])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9884 9888]))                          )
                        (reparse-symbol indented_block_body) [9871 9947]))                  
                :type "class")
                nil [9762 9947])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10006 10010])
                            ("item" variable nil (reparse-symbol function_parameters) [10012 10016]))                          )
                        (reparse-symbol indented_block_body) [9989 10187])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10205 10209]))                          )
                        (reparse-symbol indented_block_body) [10192 10290]))                  
                :type "class")
                nil [9949 10290])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10345 10349])
                            ("value" variable nil (reparse-symbol function_parameters) [10351 10356]))                          )
                        (reparse-symbol indented_block_body) [10328 10486])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10504 10508]))                          )
                        (reparse-symbol indented_block_body) [10491 10582]))                  
                :type "class")
                nil [10292 10582])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10656 10660])
                            ("key" variable nil (reparse-symbol function_parameters) [10662 10665])
                            ("value" variable nil (reparse-symbol function_parameters) [10667 10672]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10620 10698])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10739 10743])
                            ("key" variable nil (reparse-symbol function_parameters) [10745 10748]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10703 10774])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [10779 10798])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10812 10816])
                            ("key" variable nil (reparse-symbol function_parameters) [10818 10821])
                            ("default" variable nil (reparse-symbol function_parameters) [10823 10830]))                          )
                        (reparse-symbol indented_block_body) [10804 11065])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11082 11086]))                          )
                        (reparse-symbol indented_block_body) [11070 11268])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11283 11287]))                          )
                        (reparse-symbol indented_block_body) [11273 11400])
                    ("update" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [11416 11421])
                        ("kwds" variable nil (reparse-symbol function_parameters) [11423 11429]))                      ) (reparse-symbol indented_block_body) [11405 12146])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12166 12170])
                            ("key" variable nil (reparse-symbol function_parameters) [12172 12175])
                            ("default" variable nil (reparse-symbol function_parameters) [12177 12184]))                          )
                        (reparse-symbol indented_block_body) [12151 12314]))                  
                :type "class")
                nil [10584 12314])
            ("MutableMapping" code nil nil [12315 12344])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12601 12605])
                            ("index" variable nil (reparse-symbol function_parameters) [12607 12612]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12565 12640])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12658 12662]))                          )
                        (reparse-symbol indented_block_body) [12645 12837])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12859 12863])
                            ("value" variable nil (reparse-symbol function_parameters) [12865 12870]))                          )
                        (reparse-symbol indented_block_body) [12842 12972])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12994 12998]))                          )
                        (reparse-symbol indented_block_body) [12977 13072])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13087 13091])
                            ("value" variable nil (reparse-symbol function_parameters) [13093 13098]))                          )
                        (reparse-symbol indented_block_body) [13077 13215])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13230 13234])
                            ("value" variable nil (reparse-symbol function_parameters) [13236 13241]))                          )
                        (reparse-symbol indented_block_body) [13220 13294]))                  
                :type "class")
                nil [12367 13294])
            ("Sequence" code nil nil [13295 13319])
            ("Sequence" code nil nil [13320 13349])
            ("Sequence" code nil nil [13350 13375])
            ("Sequence" code nil nil [13376 13401])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13478 13482])
                            ("index" variable nil (reparse-symbol function_parameters) [13484 13489])
                            ("value" variable nil (reparse-symbol function_parameters) [13491 13496]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13442 13524])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13565 13569])
                            ("index" variable nil (reparse-symbol function_parameters) [13571 13576]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13529 13604])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13640 13644])
                            ("index" variable nil (reparse-symbol function_parameters) [13646 13651])
                            ("value" variable nil (reparse-symbol function_parameters) [13653 13658]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13609 13686])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13702 13706])
                            ("value" variable nil (reparse-symbol function_parameters) [13708 13713]))                          )
                        (reparse-symbol indented_block_body) [13691 13754])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13771 13775]))                          )
                        (reparse-symbol indented_block_body) [13759 13886])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13902 13906])
                            ("values" variable nil (reparse-symbol function_parameters) [13908 13914]))                          )
                        (reparse-symbol indented_block_body) [13891 13969])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13982 13986])
                            ("index" variable nil (reparse-symbol function_parameters) [13988 13993]))                          )
                        (reparse-symbol indented_block_body) [13974 14064])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14080 14084])
                            ("value" variable nil (reparse-symbol function_parameters) [14086 14091]))                          )
                        (reparse-symbol indented_block_body) [14069 14130])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14148 14152])
                            ("values" variable nil (reparse-symbol function_parameters) [14154 14160]))                          )
                        (reparse-symbol indented_block_body) [14135 14211]))                  
                :type "class")
                nil [13404 14211])
            ("MutableSequence" code nil nil [14212 14242]))          
      :file "_abcoll.py"
      :pointmax 14243
      :fsize 14242
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 11726 . 11731) (IF 11742 . 11744) (ELSE 11760 . 11764)))
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [192 207])
            ("_InstanceType" variable nil nil [207 233])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [255 262]))                  )
                nil [236 830])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1696 1723]))                  
                :type "class")
                nil [832 1724])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2568 2597])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2615 2619])
                        ("name" variable nil (reparse-symbol function_parameters) [2621 2625])
                        ("bases" variable nil (reparse-symbol function_parameters) [2627 2632])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2634 2643]))                      ) (reparse-symbol indented_block_body) [2603 3468])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3486 3489])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3491 3499]))                          )
                        (reparse-symbol indented_block_body) [3473 4184])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4208 4211])
                            ("file" variable nil (reparse-symbol function_parameters) [4213 4217]))                          )
                        (reparse-symbol indented_block_body) [4189 4616])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4643 4646])
                            ("instance" variable nil (reparse-symbol function_parameters) [4648 4656]))                          )
                        (reparse-symbol indented_block_body) [4621 5452])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5479 5482])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5484 5492]))                          )
                        (reparse-symbol indented_block_body) [5457 7035]))                  
                :type "class")
                nil [1726 7035]))          
      :file "abc.py"
      :pointmax 7035
      :fsize 7034
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "keyword.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [28 283])
            ("__all__" variable nil nil [285 318])
            ("kwlist" variable nil nil [320 883])
            ("iskeyword" variable nil nil [885 927])
            ("main" function nil nil [929 1959])
            ("if" code nil nil [1960 1998]))          
      :file "keyword.py"
      :pointmax 1998
      :fsize 1997
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "getopt.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Parser for command line options.

This module helps scripts to parse the command line arguments in
sys.argv.  It supports the same conventions as the Unix getopt()
function (including the special meanings of arguments of the form `-'
and `--').  Long options similar to those supported by GNU software
may be used as well via an optional third argument.  This module
provides two functions and an exception:

getopt() -- Parse command line options
gnu_getopt() -- Like getopt(), but allow option and non-option arguments
to be intermixed.
GetoptError -- exception (class) raised with 'opt' attribute, which is the
option involved with the exception.
\"\"\"" code nil nil [30 686])
            ("__all__" variable nil nil [1247 1302])
            ("os" include nil nil [1304 1313])
            ("GetoptError" type
               (:superclasses ("Exception")
                :members 
                  ( ("opt" variable nil (reparse-symbol indented_block_body) [1349 1357])
                    ("msg" variable nil (reparse-symbol indented_block_body) [1362 1370])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1416 1430])
                            ("self" variable nil (reparse-symbol indented_block_body) [1439 1453])
                            ("Exception" code nil (reparse-symbol indented_block_body) [1462 1496]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1388 1392])
                            ("msg" variable nil (reparse-symbol function_parameters) [1394 1397])
                            ("opt" variable nil (reparse-symbol function_parameters) [1399 1402]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1375 1497])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1514 1518]))                          )
                        (reparse-symbol indented_block_body) [1502 1545]))                  
                :type "class")
                nil [1315 1545])
            ("error" variable nil nil [1546 1565])
            ("getopt" function
               (:documentation "getopt(args, options[, long_options]) -> opts, args

    Parses command line options and parameter list.  args is the
    argument list to be parsed, without the leading reference to the
    running program.  Typically, this means \"sys.argv[1:]\".  shortopts
    is the string of option letters that the script wants to
    recognize, with options that require an argument followed by a
    colon (i.e., the same format that Unix getopt() uses).  If
    specified, longopts is a list of strings with the names of the
    long options which should be supported.  The leading '--'
    characters should not be included in the option name.  Options
    which require an argument should be followed by an equal sign
    ('=').

    The return value consists of two elements: the first is a list of
    (option, value) pairs; the second is the list of program arguments
    left after the option list was stripped (this is a trailing slice
    of the first argument).  Each option-and-value pair returned has
    the option as its first element, prefixed with a hyphen (e.g.,
    '-x'), and the option argument as its second element, or an empty
    string if the option has no argument.  The options occur in the
    list in the same order in which they were found, thus allowing
    multiple occurrences.  Long and short options may be mixed.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [1603 1607])
                    ("shortopts" variable nil (reparse-symbol function_parameters) [1609 1618])
                    ("longopts" variable nil (reparse-symbol function_parameters) [1620 1628]))                  )
                nil [1592 3474])
            ("gnu_getopt" function
               (:documentation "getopt(args, options[, long_options]) -> opts, args

    This function works like getopt(), except that GNU style scanning
    mode is used by default. This means that option and non-option
    arguments may be intermixed. The getopt() function stops
    processing options as soon as a non-option argument is
    encountered.

    If the first character of the option string is `+', or if the
    environment variable POSIXLY_CORRECT is set, then option
    processing stops as soon as a non-option argument is encountered.

    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3490 3494])
                    ("shortopts" variable nil (reparse-symbol function_parameters) [3496 3505])
                    ("longopts" variable nil (reparse-symbol function_parameters) [3507 3515]))                  )
                nil [3475 5012])
            ("do_longs" function (:arguments 
              ( ("opts" variable nil (reparse-symbol function_parameters) [5026 5030])
                ("opt" variable nil (reparse-symbol function_parameters) [5032 5035])
                ("longopts" variable nil (reparse-symbol function_parameters) [5037 5045])
                ("args" variable nil (reparse-symbol function_parameters) [5047 5051]))              ) nil [5013 5599])
            ("long_has_args" function (:arguments 
              ( ("opt" variable nil (reparse-symbol function_parameters) [5662 5665])
                ("longopts" variable nil (reparse-symbol function_parameters) [5667 5675]))              ) nil [5644 6454])
            ("do_shorts" function (:arguments 
              ( ("opts" variable nil (reparse-symbol function_parameters) [6469 6473])
                ("optstring" variable nil (reparse-symbol function_parameters) [6475 6484])
                ("shortopts" variable nil (reparse-symbol function_parameters) [6486 6495])
                ("args" variable nil (reparse-symbol function_parameters) [6497 6501]))              ) nil [6455 7005])
            ("short_has_arg" function (:arguments 
              ( ("opt" variable nil (reparse-symbol function_parameters) [7024 7027])
                ("shortopts" variable nil (reparse-symbol function_parameters) [7029 7038]))              ) nil [7006 7228])
            ("if" code nil nil [7229 7329]))          
      :file "getopt.py"
      :pointmax 7329
      :fsize 7328
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "subprocess.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"subprocess - Subprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.  This module
intends to replace several other, older modules and functions, like:

os.system
os.spawn*
os.popen*
popen2.*
commands.*

Information about how the subprocess module can be used to replace these
modules and functions can be found below.



Using the subprocess module
===========================
This module defines one class called Popen:

class Popen(args, bufsize=0, executable=None,
            stdin=None, stdout=None, stderr=None,
            preexec_fn=None, close_fds=False, shell=False,
            cwd=None, env=None, universal_newlines=False,
            startupinfo=None, creationflags=0):


Arguments are:

args should be a string, or a sequence of program arguments.  The
program to execute is normally the first item in the args sequence or
string, but can be explicitly set by using the executable argument.

On UNIX, with shell=False (default): In this case, the Popen class
uses os.execvp() to execute the child program.  args should normally
be a sequence.  A string will be treated as a sequence with the string
as the only item (the program to execute).

On UNIX, with shell=True: If args is a string, it specifies the
command string to execute through the shell.  If args is a sequence,
the first item specifies the command string, and any additional items
will be treated as additional shell arguments.

On Windows: the Popen class uses CreateProcess() to execute the child
program, which operates on strings.  If args is a sequence, it will be
converted to a string using the list2cmdline method.  Please note that
not all MS Windows applications interpret the command line the same
way: The list2cmdline is designed for applications using the same
rules as the MS C runtime.

bufsize, if given, has the same meaning as the corresponding argument
to the built-in open() function: 0 means unbuffered, 1 means line
buffered, any other positive value means use a buffer of
(approximately) that size.  A negative bufsize means to use the system
default, which usually means fully buffered.  The default value for
bufsize is 0 (unbuffered).

stdin, stdout and stderr specify the executed programs' standard
input, standard output and standard error file handles, respectively.
Valid values are PIPE, an existing file descriptor (a positive
integer), an existing file object, and None.  PIPE indicates that a
new pipe to the child should be created.  With None, no redirection
will occur; the child's file handles will be inherited from the
parent.  Additionally, stderr can be STDOUT, which indicates that the
stderr data from the applications should be captured into the same
file handle as for stdout.

If preexec_fn is set to a callable object, this object will be called
in the child process just before the child is executed.

If close_fds is true, all file descriptors except 0, 1 and 2 will be
closed before the child process is executed.

if shell is true, the specified command will be executed through the
shell.

If cwd is not None, the current directory will be changed to cwd
before the child is executed.

If env is not None, it defines the environment variables for the new
process.

If universal_newlines is true, the file objects stdout and stderr are
opened as a text files, but lines may be terminated by any of '\\n',
the Unix end-of-line convention, '\\r', the Macintosh convention or
'\\r\\n', the Windows convention.  All of these external representations
are seen as '\\n' by the Python program.  Note: This feature is only
available if Python is built with universal newline support (the
default).  Also, the newlines attribute of the file objects stdout,
stdin and stderr are not updated by the communicate() method.

The startupinfo and creationflags, if given, will be passed to the
underlying CreateProcess() function.  They can specify things such as
appearance of the main window and priority for the new process.
(Windows only)


This module also defines two shortcut functions:

call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete, then
    return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])

check_call(*popenargs, **kwargs):
    Run command with arguments.  Wait for command to complete.  If the
    exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])

Exceptions
----------
Exceptions raised in the child process, before the new program has
started to execute, will be re-raised in the parent.  Additionally,
the exception object will have one extra attribute called
'child_traceback', which is a string containing traceback information
from the childs point of view.

The most common exception raised is OSError.  This occurs, for
example, when trying to execute a non-existent file.  Applications
should prepare for OSErrors.

A ValueError will be raised if Popen is called with invalid arguments.

check_call() will raise CalledProcessError, if the called process
returns a non-zero return code.


Security
--------
Unlike some other popen functions, this implementation will never call
/bin/sh implicitly.  This means that all characters, including shell
metacharacters, can safely be passed to child processes.


Popen objects
=============
Instances of the Popen class have the following methods:

poll()
    Check if child process has terminated.  Returns returncode
    attribute.

wait()
    Wait for child process to terminate.  Returns returncode attribute.

communicate(input=None)
    Interact with process: Send data to stdin.  Read data from stdout
    and stderr, until end-of-file is reached.  Wait for process to
    terminate.  The optional input argument should be a string to be
    sent to the child process, or None, if no data should be sent to
    the child.

    communicate() returns a tuple (stdout, stderr).

    Note: The data read is buffered in memory, so do not use this
    method if the data size is large or unlimited.

The following attributes are also available:

stdin
    If the stdin argument is PIPE, this attribute is a file object
    that provides input to the child process.  Otherwise, it is None.

stdout
    If the stdout argument is PIPE, this attribute is a file object
    that provides output from the child process.  Otherwise, it is
    None.

stderr
    If the stderr argument is PIPE, this attribute is file object that
    provides error output from the child process.  Otherwise, it is
    None.

pid
    The process ID of the child process.

returncode
    The child return code.  A None value indicates that the process
    hasn't terminated yet.  A negative value -N indicates that the
    child was terminated by signal N (UNIX only).


Replacing older functions with the subprocess module
====================================================
In this section, \"a ==> b\" means that b can be used as a replacement
for a.

Note: All functions in this section fail (more or less) silently if
the executed program cannot be found; this module raises an OSError
exception.

In the following examples, we assume that the subprocess module is
imported with \"from subprocess import *\".


Replacing /bin/sh shell backquote
---------------------------------
output=`mycmd myarg`
==>
output = Popen([\"mycmd\", \"myarg\"], stdout=PIPE).communicate()[0]


Replacing shell pipe line
-------------------------
output=`dmesg | grep hda`
==>
p1 = Popen([\"dmesg\"], stdout=PIPE)
p2 = Popen([\"grep\", \"hda\"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]


Replacing os.system()
---------------------
sts = os.system(\"mycmd\" + \" myarg\")
==>
p = Popen(\"mycmd\" + \" myarg\", shell=True)
pid, sts = os.waitpid(p.pid, 0)

Note:

* Calling the program through the shell is usually not required.

* It's easier to look at the returncode attribute than the
  exitstatus.

A more real-world example would look like this:

try:
    retcode = call(\"mycmd\" + \" myarg\", shell=True)
    if retcode < 0:
        print >>sys.stderr, \"Child was terminated by signal\", -retcode
    else:
        print >>sys.stderr, \"Child returned\", retcode
except OSError, e:
    print >>sys.stderr, \"Execution failed:\", e


Replacing os.spawn*
-------------------
P_NOWAIT example:

pid = os.spawnlp(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
pid = Popen([\"/bin/mycmd\", \"myarg\"]).pid


P_WAIT example:

retcode = os.spawnlp(os.P_WAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\")
==>
retcode = call([\"/bin/mycmd\", \"myarg\"])


Vector example:

os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])


Environment example:

os.spawnlpe(os.P_NOWAIT, \"/bin/mycmd\", \"mycmd\", \"myarg\", env)
==>
Popen([\"/bin/mycmd\", \"myarg\"], env={\"PATH\": \"/usr/bin\"})


Replacing os.popen*
-------------------
pipe = os.popen(\"cmd\", mode='r', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdout=PIPE).stdout

pipe = os.popen(\"cmd\", mode='w', bufsize)
==>
pipe = Popen(\"cmd\", shell=True, bufsize=bufsize, stdin=PIPE).stdin


(child_stdin, child_stdout) = os.popen2(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)


(child_stdin,
 child_stdout,
 child_stderr) = os.popen3(\"cmd\", mode, bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)


(child_stdin, child_stdout_and_stderr) = os.popen4(\"cmd\", mode,
                                                   bufsize)
==>
p = Popen(\"cmd\", shell=True, bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

On Unix, os.popen2, os.popen3 and os.popen4 also accept a sequence as
the command to execute, in which case arguments will be passed
directly to the program without shell intervention.  This usage can be
replaced as follows:

(child_stdin, child_stdout) = os.popen2([\"/bin/ls\", \"-l\"], mode,
                                        bufsize)
==>
p = Popen([\"/bin/ls\", \"-l\"], bufsize=bufsize, stdin=PIPE, stdout=PIPE)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

Return code handling translates as follows:

pipe = os.popen(\"cmd\", 'w')
...
rc = pipe.close()
if rc != None and rc % 256:
    print \"There were some errors\"
==>
process = Popen(\"cmd\", 'w', shell=True, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
    print \"There were some errors\"


Replacing popen2.*
------------------
(child_stdout, child_stdin) = popen2.popen2(\"somestring\", bufsize, mode)
==>
p = Popen([\"somestring\"], shell=True, bufsize=bufsize
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

On Unix, popen2 also accepts a sequence as the command to execute, in
which case arguments will be passed directly to the program without
shell intervention.  This usage can be replaced as follows:

(child_stdout, child_stdin) = popen2.popen2([\"mycmd\", \"myarg\"], bufsize,
                                            mode)
==>
p = Popen([\"mycmd\", \"myarg\"], bufsize=bufsize,
          stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

The popen2.Popen3 and popen2.Popen4 basically works as subprocess.Popen,
except that:

* subprocess.Popen raises an exception if the execution fails
* the capturestderr argument is replaced with the stderr argument.
* stdin=PIPE and stdout=PIPE must be specified.
* popen2 closes all filedescriptors by default, but you have to specify
  close_fds=True with subprocess.Popen.
\"\"\"" code nil nil [370 12364])
            ("sys" include nil nil [12366 12376])
            ("mswindows" variable nil nil [12377 12414])
            ("os" include nil nil [12416 12425])
            ("types" include nil nil [12426 12438])
            ("traceback" include nil nil [12439 12455])
            ("gc" include nil nil [12456 12465])
            ("signal" include nil nil [12466 12479])
            ("errno" include nil nil [12480 12492])
            ("time" include nil nil [12493 12504])
            ("CalledProcessError" type
               (:documentation "This exception is raised when a process run by check_call() returns
    a non-zero exit status.  The exit status will be stored in the
    returncode attribute."
                :superclasses ("Exception")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [12804 12832])
                            ("self" variable nil (reparse-symbol indented_block_body) [12841 12855]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12772 12776])
                            ("returncode" variable nil (reparse-symbol function_parameters) [12778 12788])
                            ("cmd" variable nil (reparse-symbol function_parameters) [12790 12793]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [12759 12856])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12872 12876]))                          )
                        (reparse-symbol indented_block_body) [12860 12972]))                  
                :type "class")
                nil [12547 12972])
            ("TimeoutExpired" type
               (:documentation "This exception is raised when the timeout expires while waiting for a
    child process.
    "
                :superclasses ("Exception")
                :type "class")
                nil [12974 13111])
            ("if" code nil nil [13113 13748])
            ("__all__" variable nil nil [13750 13831])
            ("if" code nil nil [13833 13888])
            ("try" code nil nil [13888 13955])
            ("_active" variable nil nil [13956 13968])
            ("_cleanup" function nil nil [13970 14368])
            ("PIPE" code nil nil [14369 14378])
            ("STDOUT" code nil nil [14379 14390])
            ("_eintr_retry_call" function (:arguments 
              ( ("func" variable nil (reparse-symbol function_parameters) [14415 14419])
                ("args" variable nil (reparse-symbol function_parameters) [14421 14426]))              ) nil [14393 14598])
            ("call" function
               (:documentation "Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [14609 14619])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [14621 14629]))                  )
                nil [14600 15140])
            ("check_call" function
               (:documentation "Run command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    check_call([\"ls\", \"-l\"])
    "
                :arguments 
                  ( ("popenargs" variable nil (reparse-symbol function_parameters) [15157 15167])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [15169 15177]))                  )
                nil [15142 15729])
            ("list2cmdline" function
               (:documentation "
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    "
                :arguments 
                  ( ("seq" variable nil (reparse-symbol function_parameters) [15748 15751]))                  )
                nil [15731 57359]))          
      :file "subprocess.py"
      :pointmax 57359
      :fsize 57358
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((INDENT_BLOCK 17352 . 57359) (NEWLINE 17313 . 17314) (COLON 17312 . 17313) (ELIF 17299 . 17303) (INDENT_BLOCK 17254 . 17287) (IF 17185 . 17187) (NAME 17221 . 17222) (NAME 17223 . 17227) (IF 17228 . 17230) (NAME 17234 . 17238) (NAME 17239 . 17241) (NAME 17242 . 17248) (NAME 17249 . 17252) (NEWLINE 17253 . 17254)))
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("__all__" variable nil nil [1491 1875])
            ("NV_MAGICCONST" code nil nil [1877 1918])
            ("TWOPI" code nil nil [1919 1934])
            ("LOG4" variable nil nil [1935 1951])
            ("SG_MAGICCONST" code nil nil [1952 1983])
            ("BPF" variable nil nil [1984 1992])
            ("RECIP_BPF" variable nil nil [2028 2047])
            ("_random" include nil nil [2230 2244])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3010 3021])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3095 3202])
                            ("self" code nil (reparse-symbol indented_block_body) [3212 3224])
                            ("self" variable nil (reparse-symbol indented_block_body) [3233 3255]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3072 3076])
                            ("x" variable nil (reparse-symbol function_parameters) [3078 3079]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3059 3256])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3270 3274])
                            ("a" variable nil (reparse-symbol function_parameters) [3276 3277]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3261 3854])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3872 3876]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3859 4028])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4046 4050])
                            ("state" variable nil (reparse-symbol function_parameters) [4052 4057]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4033 5095])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5319 5323]))                          )
                        (reparse-symbol indented_block_body) [5302 5370])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5392 5396])
                            ("state" variable nil (reparse-symbol function_parameters) [5398 5403]))                          )
                        (reparse-symbol indented_block_body) [5375 5449])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5469 5473]))                          )
                        (reparse-symbol indented_block_body) [5454 5527])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5608 5612])
                            ("start" variable nil (reparse-symbol function_parameters) [5614 5619])
                            ("stop" variable nil (reparse-symbol function_parameters) [5621 5625])
                            ("step" variable nil (reparse-symbol function_parameters) [5632 5636])
                            ("int" variable nil (reparse-symbol function_parameters) [5640 5643])
                            ("default" variable nil (reparse-symbol function_parameters) [5649 5656])
                            ("maxwidth" variable nil (reparse-symbol function_parameters) [5681 5689]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.
        Do not supply the 'int', 'default', and 'maxwidth' arguments.
        ")
                        (reparse-symbol indented_block_body) [5594 8272])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8289 8293])
                            ("a" variable nil (reparse-symbol function_parameters) [8295 8296])
                            ("b" variable nil (reparse-symbol function_parameters) [8298 8299]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8277 8430])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8450 8454])
                            ("n" variable nil (reparse-symbol function_parameters) [8456 8457])
                            ("_log" variable nil (reparse-symbol function_parameters) [8459 8463])
                            ("int" variable nil (reparse-symbol function_parameters) [8470 8473])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [8479 8488])
                            ("_Method" variable nil (reparse-symbol function_parameters) [8517 8524])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [8538 8552]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [8435 9589])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9668 9672])
                            ("seq" variable nil (reparse-symbol function_parameters) [9674 9677]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [9657 9832])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9849 9853])
                            ("x" variable nil (reparse-symbol function_parameters) [9855 9856])
                            ("random" variable nil (reparse-symbol function_parameters) [9858 9864])
                            ("int" variable nil (reparse-symbol function_parameters) [9871 9874]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.
        ")
                        (reparse-symbol indented_block_body) [9837 10361])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10377 10381])
                            ("population" variable nil (reparse-symbol function_parameters) [10383 10393])
                            ("k" variable nil (reparse-symbol function_parameters) [10395 10396]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10366 13747])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13902 13906])
                            ("a" variable nil (reparse-symbol function_parameters) [13908 13909])
                            ("b" variable nil (reparse-symbol function_parameters) [13911 13912]))                          )
                        (reparse-symbol indented_block_body) [13890 14039])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14116 14120])
                            ("low" variable nil (reparse-symbol function_parameters) [14122 14125])
                            ("high" variable nil (reparse-symbol function_parameters) [14131 14135])
                            ("mode" variable nil (reparse-symbol function_parameters) [14141 14145]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14101 14630])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14719 14723])
                            ("mu" variable nil (reparse-symbol function_parameters) [14725 14727])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14729 14734]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14701 15394])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15487 15491])
                            ("mu" variable nil (reparse-symbol function_parameters) [15493 15495])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15497 15502]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15468 15822])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15914 15918])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15920 15925]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15898 16508])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16602 16606])
                            ("mu" variable nil (reparse-symbol function_parameters) [16608 16610])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16612 16617]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16582 18035])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18122 18126])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18128 18133])
                            ("beta" variable nil (reparse-symbol function_parameters) [18135 18139]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        ")
                        (reparse-symbol indented_block_body) [18105 20103])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20191 20195])
                            ("mu" variable nil (reparse-symbol function_parameters) [20197 20199])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20201 20206]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20181 21517])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22010 22014])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22016 22021])
                            ("beta" variable nil (reparse-symbol function_parameters) [22023 22027]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [21994 22485])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22561 22565])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22567 22572]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22543 22737])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22815 22819])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22821 22826])
                            ("beta" variable nil (reparse-symbol function_parameters) [22828 22832]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [22796 23084]))                  
                :type "class")
                nil [2246 23084])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23177 23188])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23235 23239])
                            ("a" variable nil (reparse-symbol function_parameters) [23241 23242]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23226 24250])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24266 24270]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24255 25322])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25340 25344]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25327 25476])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25494 25498])
                            ("state" variable nil (reparse-symbol function_parameters) [25500 25505]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25481 25887])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25906 25910])
                            ("n" variable nil (reparse-symbol function_parameters) [25912 25913]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [25892 26655])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26673 26677])
                            ("x" variable nil (reparse-symbol function_parameters) [26679 26680])
                            ("y" variable nil (reparse-symbol function_parameters) [26684 26685])
                            ("z" variable nil (reparse-symbol function_parameters) [26689 26690]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26660 27459])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27475 27479])
                            ("a" variable nil (reparse-symbol function_parameters) [27481 27482]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27464 28163]))                  
                :type "class")
                nil [23144 28163])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28511 28515]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28500 28650])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28671 28675])
                            ("k" variable nil (reparse-symbol function_parameters) [28677 28678]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28655 29130])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29145 29149])
                            ("args" variable nil (reparse-symbol function_parameters) [29151 29156])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29158 29164]))                          )
                        (reparse-symbol indented_block_body) [29135 29258])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29262 29286])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29312 29316])
                            ("args" variable nil (reparse-symbol function_parameters) [29318 29323])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29325 29331]))                          )
                        (reparse-symbol indented_block_body) [29292 29490])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29494 29531]))                  
                :type "class")
                nil [28235 29532])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29612 29613])
                ("func" variable nil (reparse-symbol function_parameters) [29615 29619])
                ("args" variable nil (reparse-symbol function_parameters) [29621 29625]))              ) nil [29592 30146])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30158 30159]))              ) nil [30148 30946])
            ("_inst" variable nil nil [31278 31294])
            ("seed" variable nil nil [31295 31312])
            ("random" variable nil nil [31313 31334])
            ("uniform" variable nil nil [31335 31358])
            ("triangular" variable nil nil [31359 31388])
            ("randint" variable nil nil [31389 31412])
            ("choice" variable nil nil [31413 31434])
            ("randrange" variable nil nil [31435 31462])
            ("sample" variable nil nil [31463 31484])
            ("shuffle" variable nil nil [31485 31508])
            ("normalvariate" variable nil nil [31509 31544])
            ("lognormvariate" variable nil nil [31545 31582])
            ("expovariate" variable nil nil [31583 31614])
            ("vonmisesvariate" variable nil nil [31615 31654])
            ("gammavariate" variable nil nil [31655 31688])
            ("gauss" variable nil nil [31689 31708])
            ("betavariate" variable nil nil [31709 31740])
            ("paretovariate" variable nil nil [31741 31776])
            ("weibullvariate" variable nil nil [31777 31814])
            ("getstate" variable nil nil [31815 31840])
            ("setstate" variable nil nil [31841 31866])
            ("jumpahead" variable nil nil [31867 31894])
            ("getrandbits" variable nil nil [31895 31926])
            ("if" code nil nil [31928 31967]))          
      :file "random.py"
      :pointmax 31967
      :fsize 31966
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 14422 . 14423) (IF 14430 . 14432) (ELSE 14446 . 14450)))
    (semanticdb-table "copy.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Generic (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
\"pickle\" for information on these methods.
\"\"\"" code nil nil [1 1748])
            ("types" include nil nil [1750 1762])
            ("copy_reg" include nil nil [1763 1798])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [1828 1832]))                  
                :type "class")
                nil [1800 1833])
            ("error" variable nil nil [1833 1846])
            ("try" code nil nil [1875 1967])
            ("__all__" variable nil nil [1968 2007])
            ("copy" function
               (:documentation "Shallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [2018 2019]))                  )
                nil [2009 2771])
            ("_copy_dispatch" variable nil nil [2773 2796])
            ("_copy_immutable" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [2818 2819]))              ) nil [2798 2835])
            ("for" code nil nil [2835 3056])
            ("for" code nil nil [3056 3200])
            ("_copy_with_constructor" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3228 3229]))              ) nil [3201 3254])
            ("for" code nil nil [3254 3316])
            ("_copy_with_copy_method" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3344 3345]))              ) nil [3317 3368])
            ("if" code nil nil [3368 3440])
            ("_copy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [3456 3457]))              ) nil [3441 3919])
            ("d" variable nil nil [3919 3953])
            ("del" code nil nil [3955 3960])
            ("deepcopy" function
               (:documentation "Deep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [3975 3976])
                    ("memo" variable nil (reparse-symbol function_parameters) [3978 3982])
                    ("_nil" variable nil (reparse-symbol function_parameters) [3989 3993]))                  )
                nil [3962 5444])
            ("_deepcopy_dispatch" variable nil nil [5445 5472])
            ("_deepcopy_atomic" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [5495 5496])
                ("memo" variable nil (reparse-symbol function_parameters) [5498 5502]))              ) nil [5474 5518])
            ("d" variable nil nil [5518 5550])
            ("d" variable nil nil [5551 5587])
            ("d" variable nil nil [5588 5613])
            ("d" variable nil nil [5614 5640])
            ("d" variable nil nil [5641 5668])
            ("d" variable nil nil [5669 5695])
            ("try" code nil nil [5696 5762])
            ("d" variable nil nil [5762 5787])
            ("try" code nil nil [5788 5854])
            ("try" code nil nil [5854 5932])
            ("d" variable nil nil [5932 5958])
            ("d" variable nil nil [5959 5987])
            ("d" variable nil nil [5988 6025])
            ("d" variable nil nil [6026 6073])
            ("d" variable nil nil [6074 6114])
            ("_deepcopy_list" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6135 6136])
                ("memo" variable nil (reparse-symbol function_parameters) [6138 6142]))              ) nil [6116 6241])
            ("d" variable nil nil [6241 6265])
            ("_deepcopy_tuple" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6287 6288])
                ("memo" variable nil (reparse-symbol function_parameters) [6290 6294]))              ) nil [6267 6593])
            ("d" variable nil nil [6593 6619])
            ("_deepcopy_dict" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [6640 6641])
                ("memo" variable nil (reparse-symbol function_parameters) [6643 6647]))              ) nil [6621 6786])
            ("d" variable nil nil [6786 6810])
            ("if" code nil nil [6811 6875])
            ("_keep_alive" function
               (:documentation "Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [6892 6893])
                    ("memo" variable nil (reparse-symbol function_parameters) [6895 6899]))                  )
                nil [6876 7377])
            ("_deepcopy_inst" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [7397 7398])
                ("memo" variable nil (reparse-symbol function_parameters) [7400 7404]))              ) nil [7378 7968])
            ("d" variable nil nil [7968 8006])
            ("_reconstruct" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [8025 8026])
                ("info" variable nil (reparse-symbol function_parameters) [8028 8032])
                ("deep" variable nil (reparse-symbol function_parameters) [8034 8038])
                ("memo" variable nil (reparse-symbol function_parameters) [8040 8044]))              ) nil [8008 9451])
            ("del" code nil nil [9452 9457])
            ("del" code nil nil [9459 9468])
            ("_EmptyClass" type
               (:members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [9549 9553]))                  
                :type "class")
                nil [9526 9554])
            ("_test" function nil nil [9555 10957])
            ("if" code nil nil [10958 10997]))          
      :file "copy.py"
      :pointmax 10997
      :fsize 10996
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "decimal.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
This is a Py2.3 implementation of decimal floating point arithmetic based on
the General Decimal Arithmetic Specification:

    www2.hursley.ibm.com/decimal/decarith.html

and IEEE standard 854-1987:

    www.cs.berkeley.edu/~ejr/projects/754/private/drafts/854-1987/dir.html

Decimal floating point has finite precision with arbitrarily large bounds.

The purpose of this module is to support arithmetic using familiar
\"schoolhouse\" rules and to avoid some of the tricky representation
issues associated with binary floating point.  The package is especially
useful for financial applications or for contexts where users have
expectations that are at odds with binary floating point (for instance,
in binary floating point, 1.00 % 0.1 gives 0.09999999999999995 instead
of the expected Decimal('0.00') returned by decimal floating point).

Here are some examples of using the decimal module:

>>> from decimal import *
>>> setcontext(ExtendedContext)
>>> Decimal(0)
Decimal('0')
>>> Decimal('1')
Decimal('1')
>>> Decimal('-.0123')
Decimal('-0.0123')
>>> Decimal(123456)
Decimal('123456')
>>> Decimal('123.45e12345678901234567890')
Decimal('1.2345E+12345678901234567892')
>>> Decimal('1.33') + Decimal('1.27')
Decimal('2.60')
>>> Decimal('12.34') + Decimal('3.87') - Decimal('18.41')
Decimal('-2.20')
>>> dig = Decimal(1)
>>> print dig / Decimal(3)
0.333333333
>>> getcontext().prec = 18
>>> print dig / Decimal(3)
0.333333333333333333
>>> print dig.sqrt()
1
>>> print Decimal(3).sqrt()
1.73205080756887729
>>> print Decimal(3) ** 123
4.85192780976896427E+58
>>> inf = Decimal(1) / Decimal(0)
>>> print inf
Infinity
>>> neginf = Decimal(-1) / Decimal(0)
>>> print neginf
-Infinity
>>> print neginf + inf
NaN
>>> print neginf * inf
-Infinity
>>> print dig / 0
Infinity
>>> getcontext().traps[DivisionByZero] = 1
>>> print dig / 0
Traceback (most recent call last):
  ...
  ...
  ...
DivisionByZero: x / 0
>>> c = Context()
>>> c.traps[InvalidOperation] = 0
>>> print c.flags[InvalidOperation]
0
>>> c.divide(Decimal(0), Decimal(0))
Decimal('NaN')
>>> c.traps[InvalidOperation] = 1
>>> print c.flags[InvalidOperation]
1
>>> c.flags[InvalidOperation] = 0
>>> print c.flags[InvalidOperation]
0
>>> print c.divide(Decimal(0), Decimal(0))
Traceback (most recent call last):
  ...
  ...
  ...
InvalidOperation: 0 / 0
>>> print c.flags[InvalidOperation]
1
>>> c.flags[InvalidOperation] = 0
>>> c.traps[InvalidOperation] = 0
>>> print c.divide(Decimal(0), Decimal(0))
NaN
>>> print c.flags[InvalidOperation]
1
>>>
\"\"\"" code nil nil [817 3328])
            ("__all__" variable nil nil [3330 3894])
            ("copy" include nil nil [3896 3916])
            ("numbers" include nil nil [3917 3943])
            ("try" code nil nil [3945 4133])
            ("ROUND_DOWN" variable nil nil [4145 4170])
            ("ROUND_HALF_UP" variable nil nil [4171 4202])
            ("ROUND_HALF_EVEN" variable nil nil [4203 4238])
            ("ROUND_CEILING" variable nil nil [4239 4270])
            ("ROUND_FLOOR" variable nil nil [4271 4298])
            ("ROUND_UP" variable nil nil [4299 4320])
            ("ROUND_HALF_DOWN" variable nil nil [4321 4356])
            ("ROUND_05UP" variable nil nil [4357 4382])
            ("DecimalException" type
               (:documentation "Base exception class.

    Used exceptions derive from this.
    If an exception derives from another exception besides this (such as
    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only
    called if the others are present.  This isn't actually used for
    anything, though.

    handle  -- Called when context._raise_error is called and the
               trap_enabler is not set.  First argument is self, second is the
               context.  More arguments can be given, those being after
               the explanation in _raise_error (For example,
               context._raise_error(NewError, '(-x)!', self._sign) would
               call NewError().handle(context, self._sign).)

    To define a new exception, it should be sufficient to have it derive
    from DecimalException.
    "
                :superclasses ("ArithmeticError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5278 5282])
                            ("context" variable nil (reparse-symbol function_parameters) [5284 5291])
                            ("args" variable nil (reparse-symbol function_parameters) [5293 5298]))                          )
                        (reparse-symbol indented_block_body) [5267 5314]))                  
                :type "class")
                nil [4394 5314])
            ("Clamped" type
               (:documentation "Exponent of a 0 changed to fit bounds.

    This occurs and signals clamped if the exponent of a result has been
    altered in order to fit the constraints of a specific concrete
    representation.  This may occur when the exponent of a zero result would
    be outside the bounds of a representation, or when a large normal
    number would have an encoded exponent that cannot be represented.  In
    this latter case, the exponent is reduced to fit and the corresponding
    number of zero digits are appended to the coefficient (\"fold-down\").
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [5316 5913])
            ("InvalidOperation" type
               (:documentation "An invalid operation was performed.

    Various bad things cause this:

    Something creates a signaling NaN
    -INF + INF
    0 * (+-)INF
    (+-)INF / (+-)INF
    x % 0
    (+-)INF % x
    x._rescale( non-integer )
    sqrt(-x) , x > 0
    0 ** 0
    x ** (non-integer)
    x ** (+-)INF
    An operand is invalid

    The result of the operation after these is a quiet positive NaN,
    except when the cause is a signaling NaN, in which case the result is
    also a quiet NaN, but with the original sign, and an optional
    diagnostic information.
    "
                :superclasses ("DecimalException")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6542 6546])
                            ("context" variable nil (reparse-symbol function_parameters) [6548 6555])
                            ("args" variable nil (reparse-symbol function_parameters) [6557 6562]))                          )
                        (reparse-symbol indented_block_body) [6531 6718]))                  
                :type "class")
                nil [5914 6718])
            ("ConversionSyntax" type
               (:documentation "Trying to convert badly formed string.

    This occurs and signals invalid-operation if an string is being
    converted to a number and it does not conform to the numeric string
    syntax.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7008 7012])
                            ("context" variable nil (reparse-symbol function_parameters) [7014 7021])
                            ("args" variable nil (reparse-symbol function_parameters) [7023 7028]))                          )
                        (reparse-symbol indented_block_body) [6997 7051]))                  
                :type "class")
                nil [6719 7051])
            ("DivisionByZero" type
               (:documentation "Division by 0.

    This occurs and signals division-by-zero if division of a finite number
    by zero was attempted (during a divide-integer or divide operation, or a
    power operation with negative right-hand operand), and the dividend was
    not zero.

    The result of the operation is [sign,inf], where sign is the exclusive
    or of the signs of the operands for divide, or is 1 for an odd power of
    -0, for power.
    "
                :superclasses ("DecimalException" "ZeroDivisionError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7572 7576])
                            ("context" variable nil (reparse-symbol function_parameters) [7578 7585])
                            ("sign" variable nil (reparse-symbol function_parameters) [7587 7591])
                            ("args" variable nil (reparse-symbol function_parameters) [7593 7598]))                          )
                        (reparse-symbol indented_block_body) [7561 7638]))                  
                :type "class")
                nil [7052 7638])
            ("DivisionImpossible" type
               (:documentation "Cannot perform the division adequately.

    This occurs and signals invalid-operation if the integer result of a
    divide-integer or remainder operation had too many digits (would be
    longer than precision).  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7953 7957])
                            ("context" variable nil (reparse-symbol function_parameters) [7959 7966])
                            ("args" variable nil (reparse-symbol function_parameters) [7968 7973]))                          )
                        (reparse-symbol indented_block_body) [7942 7996]))                  
                :type "class")
                nil [7639 7996])
            ("DivisionUndefined" type
               (:documentation "Undefined result of division.

    This occurs and signals invalid-operation if division by zero was
    attempted (during a divide-integer, divide, or remainder operation), and
    the dividend is also zero.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation" "ZeroDivisionError")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8324 8328])
                            ("context" variable nil (reparse-symbol function_parameters) [8330 8337])
                            ("args" variable nil (reparse-symbol function_parameters) [8339 8344]))                          )
                        (reparse-symbol indented_block_body) [8313 8367]))                  
                :type "class")
                nil [7997 8367])
            ("Inexact" type
               (:documentation "Had to round, losing information.

    This occurs and signals inexact whenever the result of an operation is
    not exact (that is, it needed to be rounded and any discarded digits
    were non-zero), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The inexact signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) was inexact.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [8368 8841])
            ("InvalidContext" type
               (:documentation "Invalid context.  Unknown rounding, for example.

    This occurs and signals invalid-operation if an invalid context was
    detected during an operation.  This can occur if contexts are not checked
    on creation and either the precision exceeds the capability of the
    underlying concrete representation or an unknown or unsupported rounding
    was specified.  These aspects of the context need only be checked when
    the values are required to be used.  The result is [0,qNaN].
    "
                :superclasses ("InvalidOperation")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9401 9405])
                            ("context" variable nil (reparse-symbol function_parameters) [9407 9414])
                            ("args" variable nil (reparse-symbol function_parameters) [9416 9421]))                          )
                        (reparse-symbol indented_block_body) [9390 9444]))                  
                :type "class")
                nil [8842 9444])
            ("Rounded" type
               (:documentation "Number got rounded (not  necessarily changed during rounding).

    This occurs and signals rounded whenever the result of an operation is
    rounded (that is, some zero or non-zero digits were discarded from the
    coefficient), or if an overflow or underflow condition occurs.  The
    result in all cases is unchanged.

    The rounded signal may be tested (or trapped) to determine if a given
    operation (or sequence of operations) caused a loss of precision.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [9445 9962])
            ("Subnormal" type
               (:documentation "Exponent < Emin before rounding.

    This occurs and signals subnormal whenever the result of a conversion or
    operation is subnormal (that is, its adjusted exponent is less than
    Emin, before any rounding).  The result in all cases is unchanged.

    The subnormal signal may be tested (or trapped) to determine if a given
    or operation (or sequence of operations) yielded a subnormal result.
    "
                :superclasses ("DecimalException")
                :type "class")
                nil [9963 10417])
            ("Overflow" type
               (:documentation "Numerical overflow.

    This occurs and signals overflow if the adjusted exponent of a result
    (from a conversion or from an operation that is not an attempt to divide
    by zero), after rounding, would be greater than the largest value that
    can be handled by the implementation (the value Emax).

    The result depends on the rounding mode:

    For round-half-up and round-half-even (and for round-half-down and
    round-up, if implemented), the result of the operation is [sign,inf],
    where sign is the sign of the intermediate result.  For round-down, the
    result is the largest finite number that can be represented in the
    current precision, with the sign of the intermediate result.  For
    round-ceiling, the result is the same as for round-down if the sign of
    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,
    the result is the same as for round-down if the sign of the intermediate
    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded
    will also be raised.
    "
                :superclasses ("Inexact" "Rounded")
                :members 
                  ( ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11529 11533])
                            ("context" variable nil (reparse-symbol function_parameters) [11535 11542])
                            ("sign" variable nil (reparse-symbol function_parameters) [11544 11548])
                            ("args" variable nil (reparse-symbol function_parameters) [11550 11555]))                          )
                        (reparse-symbol indented_block_body) [11518 12190]))                  
                :type "class")
                nil [10418 12190])
            ("Underflow" type
               (:documentation "Numerical underflow with result rounded to 0.

    This occurs and signals underflow if a result is inexact and the
    adjusted exponent of the result would be smaller (more negative) than
    the smallest value that can be handled by the implementation (the value
    Emin).  That is, the result is both inexact and subnormal.

    The result after an underflow will be a subnormal number rounded, if
    necessary, so that its exponent is not less than Etiny.  This may result
    in 0 with the sign of the intermediate result and an exponent of Etiny.

    In all cases, Inexact, Rounded, and Subnormal will also be raised.
    "
                :superclasses ("Inexact" "Rounded" "Subnormal")
                :type "class")
                nil [12192 12881])
            ("_signals" variable nil nil [12915 13030])
            ("_condition_map" variable nil nil [13075 13287])
            ("try" code nil nil [13747 14047])
            ("try" code nil nil [14048 16049])
            ("localcontext" function
               (:documentation "Return a context manager for a copy of the supplied context

    Uses a copy of the current context if no context is specified
    The returned context manager creates a local decimal context
    in a with statement:
        def sin(x):
             with localcontext() as ctx:
                 ctx.prec += 2
                 # Rest of sin calculation algorithm
                 # uses a precision 2 greater than normal
             return +s  # Convert result to normal precision

         def sin(x):
             with localcontext(ExtendedContext):
                 # Rest of sin calculation algorithm
                 # uses the Extended Context from the
                 # General Decimal Arithmetic Specification
             return +s  # Convert result to normal context

    >>> setcontext(DefaultContext)
    >>> print getcontext().prec
    28
    >>> with localcontext():
    ...     ctx = getcontext()
    ...     ctx.prec += 2
    ...     print ctx.prec
    ...
    30
    >>> with localcontext(ExtendedContext):
    ...     print getcontext().prec
    ...
    9
    >>> print getcontext().prec
    28
    "
                :arguments 
                  ( ("ctx" variable nil (reparse-symbol function_parameters) [16067 16070]))                  )
                nil [16050 17278])
            ("Decimal" type
               (:documentation "Floating point class for decimal arithmetic."
                :superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [17440 17490])
                    ("__new__" function
                       (:documentation "Create a decimal point instance.

        >>> Decimal('3.14')              # string input
        Decimal('3.14')
        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)
        Decimal('3.14')
        >>> Decimal(314)                 # int or long
        Decimal('314')
        >>> Decimal(Decimal(314))        # another decimal instance
        Decimal('314')
        >>> Decimal('  3.14  \\\\n')        # leading and trailing whitespace okay
        Decimal('3.14')
        "
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [17717 17720])
                            ("value" variable nil (reparse-symbol function_parameters) [17722 17727])
                            ("context" variable nil (reparse-symbol function_parameters) [17733 17740]))                          )
                        (reparse-symbol indented_block_body) [17705 23498])
                    ("_isnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23514 23518]))                          
                        :documentation "Returns whether the number is not actually one.

        0 if a number
        1 if NaN
        2 if sNaN
        ")
                        (reparse-symbol indented_block_body) [23503 23830])
                    ("_isinfinity" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23851 23855]))                          
                        :documentation "Returns whether the number is infinite

        0 if finite or not a number
        1 if +INF
        -1 if -INF
        ")
                        (reparse-symbol indented_block_body) [23835 24114])
                    ("_check_nans" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24135 24139])
                            ("other" variable nil (reparse-symbol function_parameters) [24141 24146])
                            ("context" variable nil (reparse-symbol function_parameters) [24153 24160]))                          
                        :documentation "Returns whether the number is not actually one.

        if self, other are sNaN, signal
        if self, other are NaN return nan
        return 0

        Done before operations.
        ")
                        (reparse-symbol indented_block_body) [24119 25072])
                    ("_compare_check_nans" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25101 25105])
                            ("other" variable nil (reparse-symbol function_parameters) [25107 25112])
                            ("context" variable nil (reparse-symbol function_parameters) [25114 25121]))                          
                        :documentation "Version of _check_nans used for the signaling comparisons
        compare_signal, __le__, __lt__, __ge__, __gt__.

        Signal InvalidOperation if either self or other is a (quiet
        or signaling) NaN.  Signaling NaNs take precedence over quiet
        NaNs.

        Return 0 if neither operand is a NaN.

        ")
                        (reparse-symbol indented_block_body) [25077 26465])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26486 26490]))                          
                        :documentation "Return True if self is nonzero; otherwise return False.

        NaNs and infinities are considered nonzero.
        ")
                        (reparse-symbol indented_block_body) [26470 26677])
                    ("_cmp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26691 26695])
                            ("other" variable nil (reparse-symbol function_parameters) [26697 26702]))                          
                        :documentation "Compare the two non-NaN decimal instances self and other.

        Returns -1 if self < other, 0 if self == other and 1
        if self > other.  This routine is for internal use only.")
                        (reparse-symbol indented_block_body) [26682 28270])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28939 28943])
                            ("other" variable nil (reparse-symbol function_parameters) [28945 28950]))                          )
                        (reparse-symbol indented_block_body) [28928 29158])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29174 29178])
                            ("other" variable nil (reparse-symbol function_parameters) [29180 29185]))                          )
                        (reparse-symbol indented_block_body) [29163 29392])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29408 29412])
                            ("other" variable nil (reparse-symbol function_parameters) [29414 29419])
                            ("context" variable nil (reparse-symbol function_parameters) [29421 29428]))                          )
                        (reparse-symbol indented_block_body) [29397 29667])
                    ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29683 29687])
                            ("other" variable nil (reparse-symbol function_parameters) [29689 29694])
                            ("context" variable nil (reparse-symbol function_parameters) [29696 29703]))                          )
                        (reparse-symbol indented_block_body) [29672 29943])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29959 29963])
                            ("other" variable nil (reparse-symbol function_parameters) [29965 29970])
                            ("context" variable nil (reparse-symbol function_parameters) [29972 29979]))                          )
                        (reparse-symbol indented_block_body) [29948 30218])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30234 30238])
                            ("other" variable nil (reparse-symbol function_parameters) [30240 30245])
                            ("context" variable nil (reparse-symbol function_parameters) [30247 30254]))                          )
                        (reparse-symbol indented_block_body) [30223 30494])
                    ("compare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30511 30515])
                            ("other" variable nil (reparse-symbol function_parameters) [30517 30522])
                            ("context" variable nil (reparse-symbol function_parameters) [30524 30531]))                          
                        :documentation "Compares one to another.

        -1 => a < b
        0  => a = b
        1  => a > b
        NaN => one is NaN
        Like __cmp__, but returns Decimal instances.
        ")
                        (reparse-symbol indented_block_body) [30499 31016])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31034 31038]))                          
                        :documentation "x.__hash__() <==> hash(x)")
                        (reparse-symbol indented_block_body) [31021 32456])
                    ("as_tuple" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32474 32478]))                          
                        :documentation "Represents the number as a triple tuple.

        To show the internals exactly as they are.
        ")
                        (reparse-symbol indented_block_body) [32461 32676])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32694 32698]))                          
                        :documentation "Represents the number as an instance of Decimal.")
                        (reparse-symbol indented_block_body) [32681 32848])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32865 32869])
                            ("eng" variable nil (reparse-symbol function_parameters) [32871 32874])
                            ("context" variable nil (reparse-symbol function_parameters) [32882 32889]))                          
                        :documentation "Return string representation of the number in scientific notation.

        Captures all of the information in the underlying representation.
        ")
                        (reparse-symbol indented_block_body) [32853 34742])
                    ("to_eng_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34765 34769])
                            ("context" variable nil (reparse-symbol function_parameters) [34771 34778]))                          
                        :documentation "Convert to engineering-type string.

        Engineering notation has an exponent which is a multiple of 3, so there
        are up to 3 digits left of the decimal place.

        Same rules for when in exponential and when as a value as in __str__.
        ")
                        (reparse-symbol indented_block_body) [34747 35114])
                    ("__neg__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35131 35135])
                            ("context" variable nil (reparse-symbol function_parameters) [35137 35144]))                          
                        :documentation "Returns a copy with the sign switched.

        Rounds, if it has reason.
        ")
                        (reparse-symbol indented_block_body) [35119 35644])
                    ("__pos__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35661 35665])
                            ("context" variable nil (reparse-symbol function_parameters) [35667 35674]))                          
                        :documentation "Returns a copy, unless it is a sNaN.

        Rounds the number (if more then precision digits)
        ")
                        (reparse-symbol indented_block_body) [35649 36153])
                    ("__abs__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36170 36174])
                            ("round" variable nil (reparse-symbol function_parameters) [36176 36181])
                            ("context" variable nil (reparse-symbol function_parameters) [36188 36195]))                          
                        :documentation "Returns the absolute value of self.

        If the keyword argument 'round' is false, do not round.  The
        expression self.__abs__(round=False) is equivalent to
        self.copy_abs().
        ")
                        (reparse-symbol indented_block_body) [36158 36759])
                    ("__add__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36776 36780])
                            ("other" variable nil (reparse-symbol function_parameters) [36782 36787])
                            ("context" variable nil (reparse-symbol function_parameters) [36789 36796]))                          
                        :documentation "Returns self + other.

        -INF + INF (or the reverse) cause InvalidOperation errors.
        ")
                        (reparse-symbol indented_block_body) [36764 39632])
                    ("__radd__" variable nil (reparse-symbol indented_block_body) [39637 39655])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39673 39677])
                            ("other" variable nil (reparse-symbol function_parameters) [39679 39684])
                            ("context" variable nil (reparse-symbol function_parameters) [39686 39693]))                          
                        :documentation "Return self - other")
                        (reparse-symbol indented_block_body) [39661 40123])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40141 40145])
                            ("other" variable nil (reparse-symbol function_parameters) [40147 40152])
                            ("context" variable nil (reparse-symbol function_parameters) [40154 40161]))                          
                        :documentation "Return other - self")
                        (reparse-symbol indented_block_body) [40128 40355])
                    ("__mul__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40372 40376])
                            ("other" variable nil (reparse-symbol function_parameters) [40378 40383])
                            ("context" variable nil (reparse-symbol function_parameters) [40385 40392]))                          
                        :documentation "Return self * other.

        (+-) INF * 0 (or its reverse) raise InvalidOperation.
        ")
                        (reparse-symbol indented_block_body) [40360 42131])
                    ("__rmul__" variable nil (reparse-symbol indented_block_body) [42135 42153])
                    ("__truediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42175 42179])
                            ("other" variable nil (reparse-symbol function_parameters) [42181 42186])
                            ("context" variable nil (reparse-symbol function_parameters) [42188 42195]))                          
                        :documentation "Return self / other.")
                        (reparse-symbol indented_block_body) [42159 44266])
                    ("_divide" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44283 44287])
                            ("other" variable nil (reparse-symbol function_parameters) [44289 44294])
                            ("context" variable nil (reparse-symbol function_parameters) [44296 44303]))                          
                        :documentation "Return (self // other, self % other), to context.prec precision.

        Assumes that neither self nor other is a NaN, that self is not
        infinite and that other is nonzero.
        ")
                        (reparse-symbol indented_block_body) [44271 45600])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45622 45626])
                            ("other" variable nil (reparse-symbol function_parameters) [45628 45633])
                            ("context" variable nil (reparse-symbol function_parameters) [45635 45642]))                          
                        :documentation "Swaps self/other and returns __truediv__.")
                        (reparse-symbol indented_block_body) [45605 45861])
                    ("__div__" variable nil (reparse-symbol indented_block_body) [45866 45887])
                    ("__rdiv__" variable nil (reparse-symbol indented_block_body) [45892 45915])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45936 45940])
                            ("other" variable nil (reparse-symbol function_parameters) [45942 45947])
                            ("context" variable nil (reparse-symbol function_parameters) [45949 45956]))                          
                        :documentation "
        Return (self // other, self % other)
        ")
                        (reparse-symbol indented_block_body) [45921 47117])
                    ("__rdivmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47138 47142])
                            ("other" variable nil (reparse-symbol function_parameters) [47144 47149])
                            ("context" variable nil (reparse-symbol function_parameters) [47151 47158]))                          
                        :documentation "Swaps self/other and returns __divmod__.")
                        (reparse-symbol indented_block_body) [47122 47375])
                    ("__mod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47392 47396])
                            ("other" variable nil (reparse-symbol function_parameters) [47398 47403])
                            ("context" variable nil (reparse-symbol function_parameters) [47405 47412]))                          
                        :documentation "
        self % other
        ")
                        (reparse-symbol indented_block_body) [47380 48144])
                    ("__rmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48162 48166])
                            ("other" variable nil (reparse-symbol function_parameters) [48168 48173])
                            ("context" variable nil (reparse-symbol function_parameters) [48175 48182]))                          
                        :documentation "Swaps self/other and returns __mod__.")
                        (reparse-symbol indented_block_body) [48149 48393])
                    ("remainder_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48417 48421])
                            ("other" variable nil (reparse-symbol function_parameters) [48423 48428])
                            ("context" variable nil (reparse-symbol function_parameters) [48430 48437]))                          
                        :documentation "
        Remainder nearest to 0-  abs(remainder-near) <= other/2
        ")
                        (reparse-symbol indented_block_body) [48398 51082])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51104 51108])
                            ("other" variable nil (reparse-symbol function_parameters) [51110 51115])
                            ("context" variable nil (reparse-symbol function_parameters) [51117 51124]))                          
                        :documentation "self // other")
                        (reparse-symbol indented_block_body) [51087 51960])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51983 51987])
                            ("other" variable nil (reparse-symbol function_parameters) [51989 51994])
                            ("context" variable nil (reparse-symbol function_parameters) [51996 52003]))                          
                        :documentation "Swaps self/other and returns __floordiv__.")
                        (reparse-symbol indented_block_body) [51965 52224])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52243 52247]))                          
                        :documentation "Float representation.")
                        (reparse-symbol indented_block_body) [52229 52318])
                    ("__int__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52335 52339]))                          
                        :documentation "Converts self to an int, truncating if necessary.")
                        (reparse-symbol indented_block_body) [52323 52817])
                    ("__trunc__" variable nil (reparse-symbol indented_block_body) [52822 52841])
                    ("real" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52856 52860]))                          )
                        (reparse-symbol indented_block_body) [52847 52883])
                    ("real" variable nil (reparse-symbol indented_block_body) [52887 52908])
                    ("imag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52923 52927]))                          )
                        (reparse-symbol indented_block_body) [52914 52956])
                    ("imag" variable nil (reparse-symbol indented_block_body) [52960 52981])
                    ("conjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53001 53005]))                          )
                        (reparse-symbol indented_block_body) [52987 53028])
                    ("__complex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53049 53053]))                          )
                        (reparse-symbol indented_block_body) [53033 53092])
                    ("__long__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53110 53114]))                          
                        :documentation "Converts to a long.

        Equivalent to long(int(self))
        ")
                        (reparse-symbol indented_block_body) [53097 53235])
                    ("_fix_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53253 53257])
                            ("context" variable nil (reparse-symbol function_parameters) [53259 53266]))                          
                        :documentation "Decapitate the payload of a NaN to fit the context")
                        (reparse-symbol indented_block_body) [53240 53735])
                    ("_fix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53749 53753])
                            ("context" variable nil (reparse-symbol function_parameters) [53755 53762]))                          
                        :documentation "Round if it is necessary to keep self within prec precision.

        Rounds and fixes the exponent.  Does not raise on a sNaN.

        Arguments:
        self - Decimal instance
        context - context used.
        ")
                        (reparse-symbol indented_block_body) [53740 57300])
                    ("_pick_rounding_function" variable nil (reparse-symbol indented_block_body) [57305 57333])
                    ("_round_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [57850 57854])
                            ("prec" variable nil (reparse-symbol function_parameters) [57856 57860]))                          
                        :documentation "Also known as round-towards-0, truncate.")
                        (reparse-symbol indented_block_body) [57834 58015])
                    ("_round_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58034 58038])
                            ("prec" variable nil (reparse-symbol function_parameters) [58040 58044]))                          
                        :documentation "Rounds away from 0.")
                        (reparse-symbol indented_block_body) [58020 58120])
                    ("_round_half_up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58144 58148])
                            ("prec" variable nil (reparse-symbol function_parameters) [58150 58154]))                          
                        :documentation "Rounds 5 up (away from 0)")
                        (reparse-symbol indented_block_body) [58125 58356])
                    ("_round_half_down" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58382 58386])
                            ("prec" variable nil (reparse-symbol function_parameters) [58388 58392]))                          
                        :documentation "Round 5 down")
                        (reparse-symbol indented_block_body) [58361 58544])
                    ("_round_half_even" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58570 58574])
                            ("prec" variable nil (reparse-symbol function_parameters) [58576 58580]))                          
                        :documentation "Round 5 to even, rest to nearest.")
                        (reparse-symbol indented_block_body) [58549 58819])
                    ("_round_ceiling" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [58843 58847])
                            ("prec" variable nil (reparse-symbol function_parameters) [58849 58853]))                          
                        :documentation "Rounds up (not away from 0 if negative.)")
                        (reparse-symbol indented_block_body) [58824 59033])
                    ("_round_floor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59055 59059])
                            ("prec" variable nil (reparse-symbol function_parameters) [59061 59065]))                          
                        :documentation "Rounds down (not towards 0 if negative)")
                        (reparse-symbol indented_block_body) [59038 59248])
                    ("_round_05up" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59269 59273])
                            ("prec" variable nil (reparse-symbol function_parameters) [59275 59279]))                          
                        :documentation "Round down unless digit prec-1 is 0 or 5.")
                        (reparse-symbol indented_block_body) [59253 59488])
                    ("fma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [59501 59505])
                            ("other" variable nil (reparse-symbol function_parameters) [59507 59512])
                            ("third" variable nil (reparse-symbol function_parameters) [59514 59519])
                            ("context" variable nil (reparse-symbol function_parameters) [59521 59528]))                          
                        :documentation "Fused multiply-add.

        Returns self*other+third with no rounding of the intermediate
        product self*other.

        self and other are multiplied together, with no rounding of
        the result.  The third operand is then added to the result,
        and a single final rounding is performed.
        ")
                        (reparse-symbol indented_block_body) [59493 61381])
                    ("_power_modulo" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [61404 61408])
                            ("other" variable nil (reparse-symbol function_parameters) [61410 61415])
                            ("modulo" variable nil (reparse-symbol function_parameters) [61417 61423])
                            ("context" variable nil (reparse-symbol function_parameters) [61425 61432]))                          
                        :documentation "Three argument version of __pow__")
                        (reparse-symbol indented_block_body) [61386 65124])
                    ("_power_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [65146 65150])
                            ("other" variable nil (reparse-symbol function_parameters) [65152 65157])
                            ("p" variable nil (reparse-symbol function_parameters) [65159 65160]))                          
                        :documentation "Attempt to compute self**other exactly.

        Given Decimals self and other and an integer p, attempt to
        compute an exact result for the power self**other, with p
        digits of precision.  Return None if self**other is not
        exactly representable in p digits.

        Assumes that elimination of special cases has already been
        performed: self and other must both be nonspecial; self must
        be positive and not numerically equal to 1; other must be
        nonzero.  For efficiency, other._exp should not be too large,
        so that 10**abs(other._exp) is a feasible calculation.")
                        (reparse-symbol indented_block_body) [65129 73328])
                    ("__pow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [73345 73349])
                            ("other" variable nil (reparse-symbol function_parameters) [73351 73356])
                            ("modulo" variable nil (reparse-symbol function_parameters) [73358 73364])
                            ("context" variable nil (reparse-symbol function_parameters) [73371 73378]))                          
                        :documentation "Return self ** other [ % modulo].

        With two arguments, compute self**other.

        With three arguments, compute (self**other) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - other must be nonnegative
         - either self or other (or both) must be nonzero
         - modulo must be nonzero and must have at most p digits,
           where p is the context precision.

        If any of these restrictions is violated the InvalidOperation
        flag is raised.

        The result of pow(self, other, modulo) is identical to the
        result that would be obtained by computing (self**other) %
        modulo with unbounded precision, but is computed more
        efficiently.  It is always exact.
        ")
                        (reparse-symbol indented_block_body) [73333 82010])
                    ("__rpow__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82028 82032])
                            ("other" variable nil (reparse-symbol function_parameters) [82034 82039])
                            ("context" variable nil (reparse-symbol function_parameters) [82041 82048]))                          
                        :documentation "Swaps self/other and returns __pow__.")
                        (reparse-symbol indented_block_body) [82015 82259])
                    ("normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [82278 82282])
                            ("context" variable nil (reparse-symbol function_parameters) [82284 82291]))                          
                        :documentation "Normalize- strip trailing 0s, change anything equal to 0 to 0e0")
                        (reparse-symbol indented_block_body) [82264 83011])
                    ("quantize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [83029 83033])
                            ("exp" variable nil (reparse-symbol function_parameters) [83035 83038])
                            ("rounding" variable nil (reparse-symbol function_parameters) [83040 83048])
                            ("context" variable nil (reparse-symbol function_parameters) [83055 83062])
                            ("watchexp" variable nil (reparse-symbol function_parameters) [83069 83077]))                          
                        :documentation "Quantize self so its exponent is the same as that of exp.

        Similar to self._rescale(exp._exp) but with error checking.
        ")
                        (reparse-symbol indented_block_body) [83016 85956])
                    ("same_quantum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [85978 85982])
                            ("other" variable nil (reparse-symbol function_parameters) [85984 85989]))                          
                        :documentation "Return True if self and other have the same exponent; otherwise
        return False.

        If either operand is a special value, the following rules are used:
           * return True if both operands are infinities
           * return True if both operands are NaNs
           * otherwise, return False.
        ")
                        (reparse-symbol indented_block_body) [85961 86585])
                    ("_rescale" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [86603 86607])
                            ("exp" variable nil (reparse-symbol function_parameters) [86609 86612])
                            ("rounding" variable nil (reparse-symbol function_parameters) [86614 86622]))                          
                        :documentation "Rescale self so that the exponent is exp, either by padding with zeros
        or by truncating digits, using the given rounding mode.

        Specials are returned without change.  This operation is
        quiet: it raises no flags, and uses no information from the
        context.

        exp = exp to scale to (an integer)
        rounding = rounding mode
        ")
                        (reparse-symbol indented_block_body) [86590 87926])
                    ("_round" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [87942 87946])
                            ("places" variable nil (reparse-symbol function_parameters) [87948 87954])
                            ("rounding" variable nil (reparse-symbol function_parameters) [87956 87964]))                          
                        :documentation "Round a nonzero, nonspecial Decimal to a fixed number of
        significant figures, using the given rounding mode.

        Infinities, NaNs and zeros are returned unaltered.

        This operation is quiet: it raises no flags, and uses no
        information from the context.

        ")
                        (reparse-symbol indented_block_body) [87931 88895])
                    ("to_integral_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [88922 88926])
                            ("rounding" variable nil (reparse-symbol function_parameters) [88928 88936])
                            ("context" variable nil (reparse-symbol function_parameters) [88943 88950]))                          
                        :documentation "Rounds to a nearby integer.

        If no rounding mode is specified, take the rounding mode from
        the context.  This method raises the Rounded and Inexact flags
        when appropriate.

        See also: to_integral_value, which does exactly the same as
        this method except that it doesn't raise Inexact or Rounded.
        ")
                        (reparse-symbol indented_block_body) [88900 89909])
                    ("to_integral_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [89936 89940])
                            ("rounding" variable nil (reparse-symbol function_parameters) [89942 89950])
                            ("context" variable nil (reparse-symbol function_parameters) [89957 89964]))                          
                        :documentation "Rounds to the nearest integer, without raising inexact, rounded.")
                        (reparse-symbol indented_block_body) [89914 90464])
                    ("to_integral" variable nil (reparse-symbol indented_block_body) [90551 90582])
                    ("sqrt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [90597 90601])
                            ("context" variable nil (reparse-symbol function_parameters) [90603 90610]))                          
                        :documentation "Return the square root of self.")
                        (reparse-symbol indented_block_body) [90588 94114])
                    ("max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [94127 94131])
                            ("other" variable nil (reparse-symbol function_parameters) [94133 94138])
                            ("context" variable nil (reparse-symbol function_parameters) [94140 94147]))                          
                        :documentation "Returns the larger value.

        Like max(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        ")
                        (reparse-symbol indented_block_body) [94119 95587])
                    ("min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [95600 95604])
                            ("other" variable nil (reparse-symbol function_parameters) [95606 95611])
                            ("context" variable nil (reparse-symbol function_parameters) [95613 95620]))                          
                        :documentation "Returns the smaller value.

        Like min(self, other) except if one is not a number, returns
        NaN (and signals if one is sNaN).  Also rounds.
        ")
                        (reparse-symbol indented_block_body) [95592 96613])
                    ("_isinteger" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96633 96637]))                          
                        :documentation "Returns whether self is an integer")
                        (reparse-symbol indented_block_body) [96618 96868])
                    ("_iseven" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [96885 96889]))                          
                        :documentation "Returns True if self is even.  Assumes self is an integer.")
                        (reparse-symbol indented_block_body) [96873 97077])
                    ("adjusted" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97095 97099]))                          
                        :documentation "Return the adjusted exponent of self")
                        (reparse-symbol indented_block_body) [97082 97313])
                    ("canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97332 97336])
                            ("context" variable nil (reparse-symbol function_parameters) [97338 97345]))                          
                        :documentation "Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.
        ")
                        (reparse-symbol indented_block_body) [97318 97559])
                    ("compare_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [97583 97587])
                            ("other" variable nil (reparse-symbol function_parameters) [97589 97594])
                            ("context" variable nil (reparse-symbol function_parameters) [97596 97603]))                          
                        :documentation "Compares self to the other operand numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.
        ")
                        (reparse-symbol indented_block_body) [97564 98008])
                    ("compare_total" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [98031 98035])
                            ("other" variable nil (reparse-symbol function_parameters) [98037 98042]))                          
                        :documentation "Compares self to other using the abstract representations.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.
        ")
                        (reparse-symbol indented_block_body) [98013 100332])
                    ("compare_total_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100360 100364])
                            ("other" variable nil (reparse-symbol function_parameters) [100366 100371]))                          
                        :documentation "Compares self to other using abstract repr., ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        ")
                        (reparse-symbol indented_block_body) [100338 100683])
                    ("copy_abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100701 100705]))                          
                        :documentation "Returns a copy with the sign set to 0. ")
                        (reparse-symbol indented_block_body) [100688 100837])
                    ("copy_negate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [100858 100862]))                          
                        :documentation "Returns a copy with the sign inverted.")
                        (reparse-symbol indented_block_body) [100842 101113])
                    ("copy_sign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101132 101136])
                            ("other" variable nil (reparse-symbol function_parameters) [101138 101143]))                          
                        :documentation "Returns self with the sign of other.")
                        (reparse-symbol indented_block_body) [101118 101314])
                    ("exp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [101327 101331])
                            ("context" variable nil (reparse-symbol function_parameters) [101333 101340]))                          
                        :documentation "Returns e ** self.")
                        (reparse-symbol indented_block_body) [101319 104001])
                    ("is_canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104023 104027]))                          
                        :documentation "Return True if self is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.
        ")
                        (reparse-symbol indented_block_body) [104006 104260])
                    ("is_finite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104279 104283]))                          
                        :documentation "Return True if self is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.
        ")
                        (reparse-symbol indented_block_body) [104265 104494])
                    ("is_infinite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104515 104519]))                          
                        :documentation "Return True if self is infinite; otherwise return False.")
                        (reparse-symbol indented_block_body) [104499 104625])
                    ("is_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104641 104645]))                          
                        :documentation "Return True if self is a qNaN or sNaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [104630 104764])
                    ("is_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [104783 104787])
                            ("context" variable nil (reparse-symbol function_parameters) [104789 104796]))                          
                        :documentation "Return True if self is a normal number; otherwise return False.")
                        (reparse-symbol indented_block_body) [104769 105058])
                    ("is_qnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105075 105079]))                          
                        :documentation "Return True if self is a quiet NaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [105063 105188])
                    ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105207 105211]))                          
                        :documentation "Return True if self is negative; otherwise return False.")
                        (reparse-symbol indented_block_body) [105193 105316])
                    ("is_snan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105333 105337]))                          
                        :documentation "Return True if self is a signaling NaN; otherwise return False.")
                        (reparse-symbol indented_block_body) [105321 105450])
                    ("is_subnormal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105472 105476])
                            ("context" variable nil (reparse-symbol function_parameters) [105478 105485]))                          
                        :documentation "Return True if self is subnormal; otherwise return False.")
                        (reparse-symbol indented_block_body) [105455 105740])
                    ("is_zero" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105757 105761]))                          
                        :documentation "Return True if self is a zero; otherwise return False.")
                        (reparse-symbol indented_block_body) [105745 105890])
                    ("_ln_exp_bound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [105913 105917]))                          
                        :documentation "Compute a lower bound for the adjusted exponent of self.ln().
        In other words, compute r such that self.ln() >= 10**r.  Assumes
        that self is finite and positive and that self != 1.
        ")
                        (reparse-symbol indented_block_body) [105895 106801])
                    ("ln" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [106814 106818])
                            ("context" variable nil (reparse-symbol function_parameters) [106820 106827]))                          
                        :documentation "Returns the natural (base e) logarithm of self.")
                        (reparse-symbol indented_block_body) [106807 108348])
                    ("_log10_exp_bound" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [108374 108378]))                          
                        :documentation "Compute a lower bound for the adjusted exponent of self.log10().
        In other words, find r such that self.log10() >= 10**r.
        Assumes that self is finite and positive and that self != 1.
        ")
                        (reparse-symbol indented_block_body) [108353 109490])
                    ("log10" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [109505 109509])
                            ("context" variable nil (reparse-symbol function_parameters) [109511 109518]))                          
                        :documentation "Returns the base 10 logarithm of self.")
                        (reparse-symbol indented_block_body) [109495 111221])
                    ("logb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [111235 111239])
                            ("context" variable nil (reparse-symbol function_parameters) [111241 111248]))                          
                        :documentation " Returns the exponent of the magnitude of self's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of self (as though it were truncated
        to a single digit while maintaining the value of that digit and
        without limiting the resulting exponent).
        ")
                        (reparse-symbol indented_block_body) [111226 112252])
                    ("_islogical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112272 112276]))                          
                        :documentation "Return True if self is a logical operand.

        For being logical, it must be a finite number with a sign of 0,
        an exponent of 0, and a coefficient whose digits must all be
        either 0 or 1.
        ")
                        (reparse-symbol indented_block_body) [112257 112691])
                    ("_fill_logical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [112714 112718])
                            ("context" variable nil (reparse-symbol function_parameters) [112720 112727])
                            ("opa" variable nil (reparse-symbol function_parameters) [112729 112732])
                            ("opb" variable nil (reparse-symbol function_parameters) [112734 112737]))                          )
                        (reparse-symbol indented_block_body) [112696 113064])
                    ("logical_and" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113085 113089])
                            ("other" variable nil (reparse-symbol function_parameters) [113091 113096])
                            ("context" variable nil (reparse-symbol function_parameters) [113098 113105]))                          
                        :documentation "Applies an 'and' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [113069 113719])
                    ("logical_invert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113743 113747])
                            ("context" variable nil (reparse-symbol function_parameters) [113749 113756]))                          
                        :documentation "Invert all its digits.")
                        (reparse-symbol indented_block_body) [113724 113977])
                    ("logical_or" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [113997 114001])
                            ("other" variable nil (reparse-symbol function_parameters) [114003 114008])
                            ("context" variable nil (reparse-symbol function_parameters) [114010 114017]))                          
                        :documentation "Applies an 'or' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [113982 114630])
                    ("logical_xor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [114651 114655])
                            ("other" variable nil (reparse-symbol function_parameters) [114657 114662])
                            ("context" variable nil (reparse-symbol function_parameters) [114664 114671]))                          
                        :documentation "Applies an 'xor' operation between self and other's digits.")
                        (reparse-symbol indented_block_body) [114635 115285])
                    ("max_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [115302 115306])
                            ("other" variable nil (reparse-symbol function_parameters) [115308 115313])
                            ("context" variable nil (reparse-symbol function_parameters) [115315 115322]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [115290 116232])
                    ("min_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [116249 116253])
                            ("other" variable nil (reparse-symbol function_parameters) [116255 116260])
                            ("context" variable nil (reparse-symbol function_parameters) [116262 116269]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [116237 117179])
                    ("next_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117199 117203])
                            ("context" variable nil (reparse-symbol function_parameters) [117205 117212]))                          
                        :documentation "Returns the largest representable number smaller than itself.")
                        (reparse-symbol indented_block_body) [117184 117949])
                    ("next_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [117968 117972])
                            ("context" variable nil (reparse-symbol function_parameters) [117974 117981]))                          
                        :documentation "Returns the smallest representable number larger than itself.")
                        (reparse-symbol indented_block_body) [117954 118712])
                    ("next_toward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [118733 118737])
                            ("other" variable nil (reparse-symbol function_parameters) [118739 118744])
                            ("context" variable nil (reparse-symbol function_parameters) [118746 118753]))                          
                        :documentation "Returns the number closest to self, in the direction towards other.

        The result is the closest representable number to self
        (excluding self) that is in the direction towards other,
        unless both have the same value.  If the two operands are
        numerically equal, then the result is a copy of self with the
        sign set to be the same as the sign of other.
        ")
                        (reparse-symbol indented_block_body) [118717 120360])
                    ("number_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [120382 120386])
                            ("context" variable nil (reparse-symbol function_parameters) [120388 120395]))                          
                        :documentation "Returns an indication of the class of self.

        The class is one of the following strings:
          sNaN
          NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity
        ")
                        (reparse-symbol indented_block_body) [120365 121452])
                    ("radix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121467 121471]))                          
                        :documentation "Just returns 10, as this is Decimal, :)")
                        (reparse-symbol indented_block_body) [121457 121555])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [121571 121575])
                            ("other" variable nil (reparse-symbol function_parameters) [121577 121582])
                            ("context" variable nil (reparse-symbol function_parameters) [121584 121591]))                          
                        :documentation "Returns a rotated copy of self, value-of-other times.")
                        (reparse-symbol indented_block_body) [121560 122592])
                    ("scaleb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [122608 122612])
                            ("other" variable nil (reparse-symbol function_parameters) [122614 122619])
                            ("context" variable nil (reparse-symbol function_parameters) [122621 122628]))                          
                        :documentation "Returns self operand after adding the second value to its exp.")
                        (reparse-symbol indented_block_body) [122597 123401])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [123416 123420])
                            ("other" variable nil (reparse-symbol function_parameters) [123422 123427])
                            ("context" variable nil (reparse-symbol function_parameters) [123429 123436]))                          
                        :documentation "Returns a shifted copy of self, value-of-other times.")
                        (reparse-symbol indented_block_body) [123406 124551])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124618 124622]))                          )
                        (reparse-symbol indented_block_body) [124603 124671])
                    ("__copy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124689 124693]))                          )
                        (reparse-symbol indented_block_body) [124676 124844])
                    ("__deepcopy__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [124866 124870])
                            ("memo" variable nil (reparse-symbol function_parameters) [124872 124876]))                          )
                        (reparse-symbol indented_block_body) [124849 125017])
                    ("__format__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [125113 125117])
                            ("specifier" variable nil (reparse-symbol function_parameters) [125119 125128])
                            ("context" variable nil (reparse-symbol function_parameters) [125130 125137]))                          
                        :documentation "Format a Decimal instance according to the given specifier.

        The specifier should be a standard format specifier, with the
        form described in PEP 3101.  Formatting types 'e', 'E', 'f',
        'F', 'g', 'G', and '%' are supported.  If the formatting type
        is omitted it defaults to 'g' or 'G', depending on the value
        of context.capitals.

        At this time the 'n' format specifier type (which is supposed
        to use the current locale) is not supported.
        ")
                        (reparse-symbol indented_block_body) [125098 128735]))                  
                :type "class")
                nil [17357 128735])
            ("_dec_from_triple" function
               (:documentation "Create a decimal instance directly, without any validation,
    normalization (e.g. removal of leading zeros) or argument
    conversion.

    This function is for *internal use only*.
    "
                :arguments 
                  ( ("sign" variable nil (reparse-symbol function_parameters) [128758 128762])
                    ("coefficient" variable nil (reparse-symbol function_parameters) [128764 128775])
                    ("exponent" variable nil (reparse-symbol function_parameters) [128777 128785])
                    ("special" variable nil (reparse-symbol function_parameters) [128787 128794]))                  )
                nil [128737 129162])
            ("_numbers" code nil nil [129322 129355])
            ("rounding_functions" variable nil nil [129468 129597])
            ("for" code nil nil [129598 129823])
            ("del" code nil nil [129824 129869])
            ("_ContextManager" type
               (:documentation "Context manager class to support localcontext().

      Sets a copy of the supplied context in __enter__() and restores
      the previous decimal context in __exit__()
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [130131 130168]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130103 130107])
                            ("new_context" variable nil (reparse-symbol function_parameters) [130109 130120]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [130090 130169])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130187 130191]))                          )
                        (reparse-symbol indented_block_body) [130173 130305])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [130322 130326])
                            ("t" variable nil (reparse-symbol function_parameters) [130328 130329])
                            ("v" variable nil (reparse-symbol function_parameters) [130331 130332])
                            ("tb" variable nil (reparse-symbol function_parameters) [130334 130336]))                          )
                        (reparse-symbol indented_block_body) [130309 130378]))                  
                :type "class")
                nil [129871 130378])
            ("Context" type
               (:documentation "Contains the context for a Decimal instance.

    Contains:
    prec - precision (for use in rounding, division, square roots..)
    rounding - rounding type (how you round)
    traps - If traps[exception] = 1, then the exception is
                    raised when it is caused.  Otherwise, a value is
                    substituted in.
    flags  - When an exception is caused, flags[exception] is set.
             (Whether or not the trap_enabler is set)
             Should be reset by user of Decimal instance.
    Emin -   Minimum exponent
    Emax -   Maximum exponent
    capitals -      If 1, 1*10^1 is printed as 1E+1.
                    If 0, printed as 1e1
    _clamp - If 1, change exponents if too high (Default 0)
    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("try" code nil (reparse-symbol indented_block_body) [131478 131558])
                            ("dc" code nil (reparse-symbol indented_block_body) [131609 131616])
                            ("dc" code nil (reparse-symbol indented_block_body) [131679 131690])
                            ("dc" code nil (reparse-symbol indented_block_body) [131741 131748])
                            ("dc" code nil (reparse-symbol indented_block_body) [131799 131806])
                            ("dc" code nil (reparse-symbol indented_block_body) [131869 131880])
                            ("dc" code nil (reparse-symbol indented_block_body) [131937 131946])
                            ("if" code nil (reparse-symbol indented_block_body) [131956 132083])
                            ("if" code nil (reparse-symbol indented_block_body) [132092 132308])
                            ("if" code nil (reparse-symbol indented_block_body) [132317 132544]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [131166 131170])
                            ("prec" variable nil (reparse-symbol function_parameters) [131172 131176])
                            ("rounding" variable nil (reparse-symbol function_parameters) [131183 131191])
                            ("traps" variable nil (reparse-symbol function_parameters) [131215 131220])
                            ("flags" variable nil (reparse-symbol function_parameters) [131227 131232])
                            ("Emin" variable nil (reparse-symbol function_parameters) [131256 131260])
                            ("Emax" variable nil (reparse-symbol function_parameters) [131267 131271])
                            ("capitals" variable nil (reparse-symbol function_parameters) [131295 131303])
                            ("_clamp" variable nil (reparse-symbol function_parameters) [131310 131316])
                            ("_ignored_flags" variable nil (reparse-symbol function_parameters) [131337 131351]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [131153 132544])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [132562 132566]))                          
                        :documentation "Show the current context.")
                        (reparse-symbol indented_block_body) [132549 133062])
                    ("clear_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133083 133087]))                          
                        :documentation "Reset all flags to zero")
                        (reparse-symbol indented_block_body) [133067 133193])
                    ("_shallow_copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133216 133220]))                          
                        :documentation "Returns a shallow copy from self.")
                        (reparse-symbol indented_block_body) [133198 133473])
                    ("copy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133487 133491]))                          
                        :documentation "Returns a deep copy from self.")
                        (reparse-symbol indented_block_body) [133478 133755])
                    ("__copy__" variable nil (reparse-symbol indented_block_body) [133759 133774])
                    ("_raise_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [133797 133801])
                            ("condition" variable nil (reparse-symbol function_parameters) [133803 133812])
                            ("explanation" variable nil (reparse-symbol function_parameters) [133814 133825])
                            ("args" variable nil (reparse-symbol function_parameters) [133834 133839]))                          
                        :documentation "Handles an error

        If the flag is in _ignored_flags, returns the default response.
        Otherwise, it sets the flag, then, if the corresponding
        trap_enabler is set, it reraises the exception.  Otherwise, it returns
        the default value after setting the flag.
        ")
                        (reparse-symbol indented_block_body) [133780 134635])
                    ("_ignore_all_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134662 134666]))                          
                        :documentation "Ignore all flags, if they are raised")
                        (reparse-symbol indented_block_body) [134640 134765])
                    ("_ignore_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [134788 134792])
                            ("flags" variable nil (reparse-symbol function_parameters) [134794 134800]))                          
                        :documentation "Ignore the flags, if they are raised")
                        (reparse-symbol indented_block_body) [134770 135039])
                    ("_regard_flags" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135062 135066])
                            ("flags" variable nil (reparse-symbol function_parameters) [135068 135074]))                          
                        :documentation "Stop ignoring the flags, if they are raised")
                        (reparse-symbol indented_block_body) [135044 135293])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [135364 135379])
                    ("Etiny" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135395 135399]))                          
                        :documentation "Returns Etiny (= Emin - prec + 1)")
                        (reparse-symbol indented_block_body) [135385 135496])
                    ("Etop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135510 135514]))                          
                        :documentation "Returns maximum exponent (= Emax - prec + 1)")
                        (reparse-symbol indented_block_body) [135501 135622])
                    ("_set_rounding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [135645 135649])
                            ("type" variable nil (reparse-symbol function_parameters) [135651 135655]))                          
                        :documentation "Sets the rounding type.

        Sets the rounding type, and returns the current (previous)
        rounding type.  Often used like:

        context = context.copy()
        # so you don't change the calling context
        # if an error occurs in the middle.
        rounding = context._set_rounding(ROUND_UP)
        val = self.__sub__(other, context=context)
        context._set_rounding(rounding)

        This will make it round up for that operation.
        ")
                        (reparse-symbol indented_block_body) [135627 136225])
                    ("create_decimal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136249 136253])
                            ("num" variable nil (reparse-symbol function_parameters) [136255 136258]))                          
                        :documentation "Creates a new Decimal instance but using self as context.

        This method implements the to-number operation of the
        IBM Decimal specification.")
                        (reparse-symbol indented_block_body) [136230 136942])
                    ("abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [136969 136973])
                            ("a" variable nil (reparse-symbol function_parameters) [136975 136976]))                          
                        :documentation "Returns the absolute value of the operand.

        If the operand is negative, the result is the same as using the minus
        operation on the operand.  Otherwise, the result is the same as using
        the plus operation on the operand.

        >>> ExtendedContext.abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.abs(Decimal('-100'))
        Decimal('100')
        >>> ExtendedContext.abs(Decimal('101.5'))
        Decimal('101.5')
        >>> ExtendedContext.abs(Decimal('-101.5'))
        Decimal('101.5')
        ")
                        (reparse-symbol indented_block_body) [136961 137579])
                    ("add" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137592 137596])
                            ("a" variable nil (reparse-symbol function_parameters) [137598 137599])
                            ("b" variable nil (reparse-symbol function_parameters) [137601 137602]))                          
                        :documentation "Return the sum of the two operands.

        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))
        Decimal('19.00')
        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))
        Decimal('1.02E+4')
        ")
                        (reparse-symbol indented_block_body) [137584 137892])
                    ("_apply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137908 137912])
                            ("a" variable nil (reparse-symbol function_parameters) [137914 137915]))                          )
                        (reparse-symbol indented_block_body) [137897 137951])
                    ("canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [137970 137974])
                            ("a" variable nil (reparse-symbol function_parameters) [137976 137977]))                          
                        :documentation "Returns the same Decimal object.

        As we do not have different encodings for the same number, the
        received object already is in its canonical form.

        >>> ExtendedContext.canonical(Decimal('2.50'))
        Decimal('2.50')
        ")
                        (reparse-symbol indented_block_body) [137956 138287])
                    ("compare" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [138304 138308])
                            ("a" variable nil (reparse-symbol function_parameters) [138310 138311])
                            ("b" variable nil (reparse-symbol function_parameters) [138313 138314]))                          
                        :documentation "Compares values numerically.

        If the signs of the operands differ, a value representing each operand
        ('-1' if the operand is less than zero, '0' if the operand is zero or
        negative zero, or '1' if the operand is greater than zero) is used in
        place of that operand for the comparison instead of the actual
        operand.

        The comparison is then effected by subtracting the second operand from
        the first and then returning a value according to the result of the
        subtraction: '-1' if the result is less than zero, '0' if the result is
        zero or negative zero, or '1' if the result is greater than zero.

        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))
        Decimal('0')
        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))
        Decimal('1')
        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [138292 139577])
                    ("compare_signal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [139601 139605])
                            ("a" variable nil (reparse-symbol function_parameters) [139607 139608])
                            ("b" variable nil (reparse-symbol function_parameters) [139610 139611]))                          
                        :documentation "Compares the values of the two operands numerically.

        It's pretty much like compare(), but all NaNs signal, with signaling
        NaNs taking precedence over quiet NaNs.

        >>> c = ExtendedContext
        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))
        Decimal('-1')
        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))
        Decimal('0')
        >>> c.flags[InvalidOperation] = 0
        >>> print c.flags[InvalidOperation]
        0
        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print c.flags[InvalidOperation]
        1
        >>> c.flags[InvalidOperation] = 0
        >>> print c.flags[InvalidOperation]
        0
        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))
        Decimal('NaN')
        >>> print c.flags[InvalidOperation]
        1
        ")
                        (reparse-symbol indented_block_body) [139582 140530])
                    ("compare_total" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [140553 140557])
                            ("a" variable nil (reparse-symbol function_parameters) [140559 140560])
                            ("b" variable nil (reparse-symbol function_parameters) [140562 140563]))                          
                        :documentation "Compares two operands using their abstract representation.

        This is not like the standard compare, which use their numerical
        value. Note that a total ordering is defined for all possible abstract
        representations.

        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))
        Decimal('-1')
        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))
        Decimal('0')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))
        Decimal('1')
        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))
        Decimal('-1')
        ")
                        (reparse-symbol indented_block_body) [140535 141454])
                    ("compare_total_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141481 141485])
                            ("a" variable nil (reparse-symbol function_parameters) [141487 141488])
                            ("b" variable nil (reparse-symbol function_parameters) [141490 141491]))                          
                        :documentation "Compares two operands using their abstract representation ignoring sign.

        Like compare_total, but with operand's sign ignored and assumed to be 0.
        ")
                        (reparse-symbol indented_block_body) [141459 141710])
                    ("copy_abs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [141728 141732])
                            ("a" variable nil (reparse-symbol function_parameters) [141734 141735]))                          
                        :documentation "Returns a copy of the operand with the sign set to 0.

        >>> ExtendedContext.copy_abs(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_abs(Decimal('-100'))
        Decimal('100')
        ")
                        (reparse-symbol indented_block_body) [141715 141997])
                    ("copy_decimal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142019 142023])
                            ("a" variable nil (reparse-symbol function_parameters) [142025 142026]))                          
                        :documentation "Returns a copy of the decimal objet.

        >>> ExtendedContext.copy_decimal(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))
        Decimal('-1.00')
        ")
                        (reparse-symbol indented_block_body) [142002 142280])
                    ("copy_negate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142301 142305])
                            ("a" variable nil (reparse-symbol function_parameters) [142307 142308]))                          
                        :documentation "Returns a copy of the operand with the sign inverted.

        >>> ExtendedContext.copy_negate(Decimal('101.5'))
        Decimal('-101.5')
        >>> ExtendedContext.copy_negate(Decimal('-101.5'))
        Decimal('101.5')
        ")
                        (reparse-symbol indented_block_body) [142285 142588])
                    ("copy_sign" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [142607 142611])
                            ("a" variable nil (reparse-symbol function_parameters) [142613 142614])
                            ("b" variable nil (reparse-symbol function_parameters) [142616 142617]))                          
                        :documentation "Copies the second operand's sign to the first one.

        In detail, it returns a copy of the first operand with the sign
        equal to the sign of the second operand.

        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))
        Decimal('1.50')
        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))
        Decimal('-1.50')
        ")
                        (reparse-symbol indented_block_body) [142593 143239])
                    ("divide" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [143255 143259])
                            ("a" variable nil (reparse-symbol function_parameters) [143261 143262])
                            ("b" variable nil (reparse-symbol function_parameters) [143264 143265]))                          
                        :documentation "Decimal division in a specified context.

        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))
        Decimal('0.333333333')
        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))
        Decimal('0.666666667')
        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))
        Decimal('2.5')
        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))
        Decimal('0.1')
        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))
        Decimal('1')
        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))
        Decimal('4.00')
        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))
        Decimal('1.20')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))
        Decimal('1000')
        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))
        Decimal('1.20E+6')
        ")
                        (reparse-symbol indented_block_body) [143244 144281])
                    ("divide_int" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144301 144305])
                            ("a" variable nil (reparse-symbol function_parameters) [144307 144308])
                            ("b" variable nil (reparse-symbol function_parameters) [144310 144311]))                          
                        :documentation "Divides two numbers and returns the integer part of the result.

        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))
        Decimal('0')
        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))
        Decimal('3')
        ")
                        (reparse-symbol indented_block_body) [144286 144716])
                    ("divmod" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [144732 144736])
                            ("a" variable nil (reparse-symbol function_parameters) [144738 144739])
                            ("b" variable nil (reparse-symbol function_parameters) [144741 144742]))                          
                        :documentation "Return (a // b, a % b)

        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))
        (Decimal('2'), Decimal('2'))
        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))
        (Decimal('2'), Decimal('0'))
        ")
                        (reparse-symbol indented_block_body) [144721 145029])
                    ("exp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145042 145046])
                            ("a" variable nil (reparse-symbol function_parameters) [145048 145049]))                          
                        :documentation "Returns e ** a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.exp(Decimal('-Infinity'))
        Decimal('0')
        >>> c.exp(Decimal('-1'))
        Decimal('0.367879441')
        >>> c.exp(Decimal('0'))
        Decimal('1')
        >>> c.exp(Decimal('1'))
        Decimal('2.71828183')
        >>> c.exp(Decimal('0.693147181'))
        Decimal('2.00000000')
        >>> c.exp(Decimal('+Infinity'))
        Decimal('Infinity')
        ")
                        (reparse-symbol indented_block_body) [145034 145597])
                    ("fma" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [145610 145614])
                            ("a" variable nil (reparse-symbol function_parameters) [145616 145617])
                            ("b" variable nil (reparse-symbol function_parameters) [145619 145620])
                            ("c" variable nil (reparse-symbol function_parameters) [145622 145623]))                          
                        :documentation "Returns a multiplied by b, plus c.

        The first two operands are multiplied together, using multiply,
        the third operand is then added to the result of that
        multiplication, using add, all with only one final rounding.

        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))
        Decimal('22')
        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))
        Decimal('-8')
        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))
        Decimal('1.38435736E+12')
        ")
                        (reparse-symbol indented_block_body) [145602 146258])
                    ("is_canonical" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146280 146284])
                            ("a" variable nil (reparse-symbol function_parameters) [146286 146287]))                          
                        :documentation "Return True if the operand is canonical; otherwise return False.

        Currently, the encoding of a Decimal instance is always
        canonical, so this method returns True for any Decimal.

        >>> ExtendedContext.is_canonical(Decimal('2.50'))
        True
        ")
                        (reparse-symbol indented_block_body) [146263 146611])
                    ("is_finite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [146630 146634])
                            ("a" variable nil (reparse-symbol function_parameters) [146636 146637]))                          
                        :documentation "Return True if the operand is finite; otherwise return False.

        A Decimal instance is considered finite if it is neither
        infinite nor a NaN.

        >>> ExtendedContext.is_finite(Decimal('2.50'))
        True
        >>> ExtendedContext.is_finite(Decimal('-0.3'))
        True
        >>> ExtendedContext.is_finite(Decimal('0'))
        True
        >>> ExtendedContext.is_finite(Decimal('Inf'))
        False
        >>> ExtendedContext.is_finite(Decimal('NaN'))
        False
        ")
                        (reparse-symbol indented_block_body) [146616 147186])
                    ("is_infinite" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147207 147211])
                            ("a" variable nil (reparse-symbol function_parameters) [147213 147214]))                          
                        :documentation "Return True if the operand is infinite; otherwise return False.

        >>> ExtendedContext.is_infinite(Decimal('2.50'))
        False
        >>> ExtendedContext.is_infinite(Decimal('-Inf'))
        True
        >>> ExtendedContext.is_infinite(Decimal('NaN'))
        False
        ")
                        (reparse-symbol indented_block_body) [147191 147547])
                    ("is_nan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147563 147567])
                            ("a" variable nil (reparse-symbol function_parameters) [147569 147570]))                          
                        :documentation "Return True if the operand is a qNaN or sNaN;
        otherwise return False.

        >>> ExtendedContext.is_nan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_nan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_nan(Decimal('-sNaN'))
        True
        ")
                        (reparse-symbol indented_block_body) [147552 147897])
                    ("is_normal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [147916 147920])
                            ("a" variable nil (reparse-symbol function_parameters) [147922 147923]))                          
                        :documentation "Return True if the operand is a normal number;
        otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_normal(Decimal('2.50'))
        True
        >>> c.is_normal(Decimal('0.1E-999'))
        False
        >>> c.is_normal(Decimal('0.00'))
        False
        >>> c.is_normal(Decimal('-Inf'))
        False
        >>> c.is_normal(Decimal('NaN'))
        False
        ")
                        (reparse-symbol indented_block_body) [147902 148437])
                    ("is_qnan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148454 148458])
                            ("a" variable nil (reparse-symbol function_parameters) [148460 148461]))                          
                        :documentation "Return True if the operand is a quiet NaN; otherwise return False.

        >>> ExtendedContext.is_qnan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_qnan(Decimal('NaN'))
        True
        >>> ExtendedContext.is_qnan(Decimal('sNaN'))
        False
        ")
                        (reparse-symbol indented_block_body) [148442 148781])
                    ("is_signed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [148800 148804])
                            ("a" variable nil (reparse-symbol function_parameters) [148806 148807]))                          
                        :documentation "Return True if the operand is negative; otherwise return False.

        >>> ExtendedContext.is_signed(Decimal('2.50'))
        False
        >>> ExtendedContext.is_signed(Decimal('-12'))
        True
        >>> ExtendedContext.is_signed(Decimal('-0'))
        True
        ")
                        (reparse-symbol indented_block_body) [148786 149129])
                    ("is_snan" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149146 149150])
                            ("a" variable nil (reparse-symbol function_parameters) [149152 149153]))                          
                        :documentation "Return True if the operand is a signaling NaN;
        otherwise return False.

        >>> ExtendedContext.is_snan(Decimal('2.50'))
        False
        >>> ExtendedContext.is_snan(Decimal('NaN'))
        False
        >>> ExtendedContext.is_snan(Decimal('sNaN'))
        True
        ")
                        (reparse-symbol indented_block_body) [149134 149485])
                    ("is_subnormal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [149507 149511])
                            ("a" variable nil (reparse-symbol function_parameters) [149513 149514]))                          
                        :documentation "Return True if the operand is subnormal; otherwise return False.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.is_subnormal(Decimal('2.50'))
        False
        >>> c.is_subnormal(Decimal('0.1E-999'))
        True
        >>> c.is_subnormal(Decimal('0.00'))
        False
        >>> c.is_subnormal(Decimal('-Inf'))
        False
        >>> c.is_subnormal(Decimal('NaN'))
        False
        ")
                        (reparse-symbol indented_block_body) [149490 150032])
                    ("is_zero" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150049 150053])
                            ("a" variable nil (reparse-symbol function_parameters) [150055 150056]))                          
                        :documentation "Return True if the operand is a zero; otherwise return False.

        >>> ExtendedContext.is_zero(Decimal('0'))
        True
        >>> ExtendedContext.is_zero(Decimal('2.50'))
        False
        >>> ExtendedContext.is_zero(Decimal('-0E+2'))
        True
        ")
                        (reparse-symbol indented_block_body) [150037 150369])
                    ("ln" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150381 150385])
                            ("a" variable nil (reparse-symbol function_parameters) [150387 150388]))                          
                        :documentation "Returns the natural (base e) logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.ln(Decimal('0'))
        Decimal('-Infinity')
        >>> c.ln(Decimal('1.000'))
        Decimal('0')
        >>> c.ln(Decimal('2.71828183'))
        Decimal('1.00000000')
        >>> c.ln(Decimal('10'))
        Decimal('2.30258509')
        >>> c.ln(Decimal('+Infinity'))
        Decimal('Infinity')
        ")
                        (reparse-symbol indented_block_body) [150374 150909])
                    ("log10" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [150924 150928])
                            ("a" variable nil (reparse-symbol function_parameters) [150930 150931]))                          
                        :documentation "Returns the base 10 logarithm of the operand.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.log10(Decimal('0'))
        Decimal('-Infinity')
        >>> c.log10(Decimal('0.001'))
        Decimal('-3')
        >>> c.log10(Decimal('1.000'))
        Decimal('0')
        >>> c.log10(Decimal('2'))
        Decimal('0.301029996')
        >>> c.log10(Decimal('10'))
        Decimal('1')
        >>> c.log10(Decimal('70'))
        Decimal('1.84509804')
        >>> c.log10(Decimal('+Infinity'))
        Decimal('Infinity')
        ")
                        (reparse-symbol indented_block_body) [150914 151569])
                    ("logb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [151583 151587])
                            ("a" variable nil (reparse-symbol function_parameters) [151589 151590]))                          
                        :documentation " Returns the exponent of the magnitude of the operand's MSD.

        The result is the integer which is the exponent of the magnitude
        of the most significant digit of the operand (as though the
        operand were truncated to a single digit while maintaining the
        value of that digit and without limiting the resulting exponent).

        >>> ExtendedContext.logb(Decimal('250'))
        Decimal('2')
        >>> ExtendedContext.logb(Decimal('2.50'))
        Decimal('0')
        >>> ExtendedContext.logb(Decimal('0.03'))
        Decimal('-2')
        >>> ExtendedContext.logb(Decimal('0'))
        Decimal('-Infinity')
        ")
                        (reparse-symbol indented_block_body) [151574 152290])
                    ("logical_and" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [152311 152315])
                            ("a" variable nil (reparse-symbol function_parameters) [152317 152318])
                            ("b" variable nil (reparse-symbol function_parameters) [152320 152321]))                          
                        :documentation "Applies the logical operation 'and' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))
        Decimal('1000')
        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))
        Decimal('10')
        ")
                        (reparse-symbol indented_block_body) [152295 153061])
                    ("logical_invert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153085 153089])
                            ("a" variable nil (reparse-symbol function_parameters) [153091 153092]))                          
                        :documentation "Invert all the digits in the operand.

        The operand must be a logical number.

        >>> ExtendedContext.logical_invert(Decimal('0'))
        Decimal('111111111')
        >>> ExtendedContext.logical_invert(Decimal('1'))
        Decimal('111111110')
        >>> ExtendedContext.logical_invert(Decimal('111111111'))
        Decimal('0')
        >>> ExtendedContext.logical_invert(Decimal('101010101'))
        Decimal('10101010')
        ")
                        (reparse-symbol indented_block_body) [153066 153601])
                    ("logical_or" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [153621 153625])
                            ("a" variable nil (reparse-symbol function_parameters) [153627 153628])
                            ("b" variable nil (reparse-symbol function_parameters) [153630 153631]))                          
                        :documentation "Applies the logical operation 'or' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))
        Decimal('1110')
        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))
        Decimal('1110')
        ")
                        (reparse-symbol indented_block_body) [153606 154365])
                    ("logical_xor" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [154386 154390])
                            ("a" variable nil (reparse-symbol function_parameters) [154392 154393])
                            ("b" variable nil (reparse-symbol function_parameters) [154395 154396]))                          
                        :documentation "Applies the logical operation 'xor' between each operand's digits.

        The operands must be both logical numbers.

        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))
        Decimal('1')
        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))
        Decimal('0')
        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))
        Decimal('110')
        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))
        Decimal('1101')
        ")
                        (reparse-symbol indented_block_body) [154370 155137])
                    ("max" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155150 155154])
                            ("a" variable nil (reparse-symbol function_parameters) [155156 155157])
                            ("b" variable nil (reparse-symbol function_parameters) [155158 155159]))                          
                        :documentation "max compares two values numerically and returns the maximum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the maximum (closer to positive
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))
        Decimal('3')
        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        ")
                        (reparse-symbol indented_block_body) [155142 155967])
                    ("max_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [155984 155988])
                            ("a" variable nil (reparse-symbol function_parameters) [155990 155991])
                            ("b" variable nil (reparse-symbol function_parameters) [155993 155994]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [155972 156110])
                    ("min" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156123 156127])
                            ("a" variable nil (reparse-symbol function_parameters) [156129 156130])
                            ("b" variable nil (reparse-symbol function_parameters) [156131 156132]))                          
                        :documentation "min compares two values numerically and returns the minimum.

        If either operand is a NaN then the general rules apply.
        Otherwise, the operands are compared as though by the compare
        operation.  If they are numerically equal then the left-hand operand
        is chosen as the result.  Otherwise the minimum (closer to negative
        infinity) of the two operands is chosen as the result.

        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))
        Decimal('2')
        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))
        Decimal('-10')
        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))
        Decimal('1.0')
        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))
        Decimal('7')
        ")
                        (reparse-symbol indented_block_body) [156115 156944])
                    ("min_mag" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [156961 156965])
                            ("a" variable nil (reparse-symbol function_parameters) [156967 156968])
                            ("b" variable nil (reparse-symbol function_parameters) [156970 156971]))                          
                        :documentation "Compares the values numerically with their sign ignored.")
                        (reparse-symbol indented_block_body) [156949 157087])
                    ("minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157102 157106])
                            ("a" variable nil (reparse-symbol function_parameters) [157108 157109]))                          
                        :documentation "Minus corresponds to unary prefix minus in Python.

        The operation is evaluated using the same rules as subtract; the
        operation minus(a) is calculated as subtract('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.minus(Decimal('1.3'))
        Decimal('-1.3')
        >>> ExtendedContext.minus(Decimal('-1.3'))
        Decimal('1.3')
        ")
                        (reparse-symbol indented_block_body) [157092 157569])
                    ("multiply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [157587 157591])
                            ("a" variable nil (reparse-symbol function_parameters) [157593 157594])
                            ("b" variable nil (reparse-symbol function_parameters) [157596 157597]))                          
                        :documentation "multiply multiplies two operands.

        If either operand is a special value then the general rules apply.
        Otherwise, the operands are multiplied together ('long multiplication'),
        resulting in a number which may be as long as the sum of the lengths
        of the two operands.

        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))
        Decimal('3.60')
        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))
        Decimal('21')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))
        Decimal('0.72')
        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))
        Decimal('-0.0')
        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))
        Decimal('4.28135971E+11')
        ")
                        (reparse-symbol indented_block_body) [157574 158436])
                    ("next_minus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [158456 158460])
                            ("a" variable nil (reparse-symbol function_parameters) [158462 158463]))                          
                        :documentation "Returns the largest representable number smaller than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_minus(Decimal('1'))
        Decimal('0.999999999')
        >>> c.next_minus(Decimal('1E-1007'))
        Decimal('0E-1007')
        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))
        Decimal('-1.00000004')
        >>> c.next_minus(Decimal('Infinity'))
        Decimal('9.99999999E+999')
        ")
                        (reparse-symbol indented_block_body) [158441 159010])
                    ("next_plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159029 159033])
                            ("a" variable nil (reparse-symbol function_parameters) [159035 159036]))                          
                        :documentation "Returns the smallest representable number larger than a.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> ExtendedContext.next_plus(Decimal('1'))
        Decimal('1.00000001')
        >>> c.next_plus(Decimal('-1E-1007'))
        Decimal('-0E-1007')
        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))
        Decimal('-1.00000002')
        >>> c.next_plus(Decimal('-Infinity'))
        Decimal('-9.99999999E+999')
        ")
                        (reparse-symbol indented_block_body) [159015 159581])
                    ("next_toward" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [159602 159606])
                            ("a" variable nil (reparse-symbol function_parameters) [159608 159609])
                            ("b" variable nil (reparse-symbol function_parameters) [159611 159612]))                          
                        :documentation "Returns the number closest to a, in direction towards b.

        The result is the closest representable number from the first
        operand (but not the first operand) that is in the direction
        towards the second operand, unless the operands have the same
        value.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.next_toward(Decimal('1'), Decimal('2'))
        Decimal('1.00000001')
        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))
        Decimal('-0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))
        Decimal('-1.00000002')
        >>> c.next_toward(Decimal('1'), Decimal('0'))
        Decimal('0.999999999')
        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))
        Decimal('0E-1007')
        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))
        Decimal('-1.00000004')
        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))
        Decimal('-0.00')
        ")
                        (reparse-symbol indented_block_body) [159586 160685])
                    ("normalize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [160704 160708])
                            ("a" variable nil (reparse-symbol function_parameters) [160710 160711]))                          
                        :documentation "normalize reduces an operand to its simplest form.

        Essentially a plus operation with all trailing zeros removed from the
        result.

        >>> ExtendedContext.normalize(Decimal('2.1'))
        Decimal('2.1')
        >>> ExtendedContext.normalize(Decimal('-2.0'))
        Decimal('-2')
        >>> ExtendedContext.normalize(Decimal('1.200'))
        Decimal('1.2')
        >>> ExtendedContext.normalize(Decimal('-120'))
        Decimal('-1.2E+2')
        >>> ExtendedContext.normalize(Decimal('120.00'))
        Decimal('1.2E+2')
        >>> ExtendedContext.normalize(Decimal('0.00'))
        Decimal('0')
        ")
                        (reparse-symbol indented_block_body) [160690 161399])
                    ("number_class" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [161421 161425])
                            ("a" variable nil (reparse-symbol function_parameters) [161427 161428]))                          
                        :documentation "Returns an indication of the class of the operand.

        The class is one of the following strings:
          -sNaN
          -NaN
          -Infinity
          -Normal
          -Subnormal
          -Zero
          +Zero
          +Subnormal
          +Normal
          +Infinity

        >>> c = Context(ExtendedContext)
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.number_class(Decimal('Infinity'))
        '+Infinity'
        >>> c.number_class(Decimal('1E-10'))
        '+Normal'
        >>> c.number_class(Decimal('2.50'))
        '+Normal'
        >>> c.number_class(Decimal('0.1E-999'))
        '+Subnormal'
        >>> c.number_class(Decimal('0'))
        '+Zero'
        >>> c.number_class(Decimal('-0'))
        '-Zero'
        >>> c.number_class(Decimal('-0.1E-999'))
        '-Subnormal'
        >>> c.number_class(Decimal('-1E-10'))
        '-Normal'
        >>> c.number_class(Decimal('-2.50'))
        '-Normal'
        >>> c.number_class(Decimal('-Infinity'))
        '-Infinity'
        >>> c.number_class(Decimal('NaN'))
        'NaN'
        >>> c.number_class(Decimal('-NaN'))
        'NaN'
        >>> c.number_class(Decimal('sNaN'))
        'sNaN'
        ")
                        (reparse-symbol indented_block_body) [161404 162692])
                    ("plus" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [162706 162710])
                            ("a" variable nil (reparse-symbol function_parameters) [162712 162713]))                          
                        :documentation "Plus corresponds to unary prefix plus in Python.

        The operation is evaluated using the same rules as add; the
        operation plus(a) is calculated as add('0', a) where the '0'
        has the same exponent as the operand.

        >>> ExtendedContext.plus(Decimal('1.3'))
        Decimal('1.3')
        >>> ExtendedContext.plus(Decimal('-1.3'))
        Decimal('-1.3')
        ")
                        (reparse-symbol indented_block_body) [162697 163158])
                    ("power" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [163173 163177])
                            ("a" variable nil (reparse-symbol function_parameters) [163179 163180])
                            ("b" variable nil (reparse-symbol function_parameters) [163182 163183])
                            ("modulo" variable nil (reparse-symbol function_parameters) [163185 163191]))                          
                        :documentation "Raises a to the power of b, to modulo if given.

        With two arguments, compute a**b.  If a is negative then b
        must be integral.  The result will be inexact unless b is
        integral and the result is finite and can be expressed exactly
        in 'precision' digits.

        With three arguments, compute (a**b) % modulo.  For the
        three argument form, the following restrictions on the
        arguments hold:

         - all three arguments must be integral
         - b must be nonnegative
         - at least one of a or b must be nonzero
         - modulo must be nonzero and have at most 'precision' digits

        The result of pow(a, b, modulo) is identical to the result
        that would be obtained by computing (a**b) % modulo with
        unbounded precision, but is computed more efficiently.  It is
        always exact.

        >>> c = ExtendedContext.copy()
        >>> c.Emin = -999
        >>> c.Emax = 999
        >>> c.power(Decimal('2'), Decimal('3'))
        Decimal('8')
        >>> c.power(Decimal('-2'), Decimal('3'))
        Decimal('-8')
        >>> c.power(Decimal('2'), Decimal('-3'))
        Decimal('0.125')
        >>> c.power(Decimal('1.7'), Decimal('8'))
        Decimal('69.7575744')
        >>> c.power(Decimal('10'), Decimal('0.301029996'))
        Decimal('2.00000000')
        >>> c.power(Decimal('Infinity'), Decimal('-1'))
        Decimal('0')
        >>> c.power(Decimal('Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('Infinity'), Decimal('1'))
        Decimal('Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('-1'))
        Decimal('-0')
        >>> c.power(Decimal('-Infinity'), Decimal('0'))
        Decimal('1')
        >>> c.power(Decimal('-Infinity'), Decimal('1'))
        Decimal('-Infinity')
        >>> c.power(Decimal('-Infinity'), Decimal('2'))
        Decimal('Infinity')
        >>> c.power(Decimal('0'), Decimal('0'))
        Decimal('NaN')

        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))
        Decimal('11')
        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))
        Decimal('-11')
        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))
        Decimal('1')
        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))
        Decimal('11')
        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))
        Decimal('11729830')
        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))
        Decimal('-0')
        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))
        Decimal('1')
        ")
                        (reparse-symbol indented_block_body) [163163 165873])
                    ("quantize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [165891 165895])
                            ("a" variable nil (reparse-symbol function_parameters) [165897 165898])
                            ("b" variable nil (reparse-symbol function_parameters) [165900 165901]))                          
                        :documentation "Returns a value equal to 'a' (rounded), having the exponent of 'b'.

        The coefficient of the result is derived from that of the left-hand
        operand.  It may be rounded using the current rounding setting (if the
        exponent is being increased), multiplied by a positive power of ten (if
        the exponent is being decreased), or is unchanged (if the exponent is
        already equal to that of the right-hand operand).

        Unlike other operations, if the length of the coefficient after the
        quantize operation would be greater than precision then an Invalid
        operation condition is raised.  This guarantees that, unless there is
        an error condition, the exponent of the result of a quantize is always
        equal to that of the right-hand operand.

        Also unlike other operations, quantize will never raise Underflow, even
        if the result is subnormal and inexact.

        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))
        Decimal('2.170')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))
        Decimal('2.17')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))
        Decimal('2.2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))
        Decimal('2')
        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))
        Decimal('0E+1')
        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))
        Decimal('-Infinity')
        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))
        Decimal('-0')
        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))
        Decimal('-0E+5')
        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))
        Decimal('NaN')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))
        Decimal('217.0')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))
        Decimal('217')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))
        Decimal('2.2E+2')
        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))
        Decimal('2E+2')
        ")
                        (reparse-symbol indented_block_body) [165878 168333])
                    ("radix" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168348 168352]))                          
                        :documentation "Just returns 10, as this is Decimal, :)

        >>> ExtendedContext.radix()
        Decimal('10')
        ")
                        (reparse-symbol indented_block_body) [168338 168504])
                    ("remainder" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [168523 168527])
                            ("a" variable nil (reparse-symbol function_parameters) [168529 168530])
                            ("b" variable nil (reparse-symbol function_parameters) [168532 168533]))                          
                        :documentation "Returns the remainder from integer division.

        The result is the residue of the dividend after the operation of
        calculating integer division as described for divide-integer, rounded
        to precision digits if necessary.  The sign of the result, if
        non-zero, is the same as that of the original dividend.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))
        Decimal('2.1')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))
        Decimal('1.0')
        ")
                        (reparse-symbol indented_block_body) [168509 169679])
                    ("remainder_near" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [169703 169707])
                            ("a" variable nil (reparse-symbol function_parameters) [169709 169710])
                            ("b" variable nil (reparse-symbol function_parameters) [169712 169713]))                          
                        :documentation "Returns to be \"a - b * n\", where n is the integer nearest the exact
        value of \"x / b\" (if two integers are equally near then the even one
        is chosen).  If the result is equal to 0 then its sign will be the
        sign of a.

        This operation will fail under the same conditions as integer division
        (that is, if integer division on the same two operands would fail, the
        remainder cannot be calculated).

        >>> ExtendedContext.remainder_near(Decimal('2.1'), Decimal('3'))
        Decimal('-0.9')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('6'))
        Decimal('-2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('3'))
        Decimal('1')
        >>> ExtendedContext.remainder_near(Decimal('-10'), Decimal('3'))
        Decimal('-1')
        >>> ExtendedContext.remainder_near(Decimal('10.2'), Decimal('1'))
        Decimal('0.2')
        >>> ExtendedContext.remainder_near(Decimal('10'), Decimal('0.3'))
        Decimal('0.1')
        >>> ExtendedContext.remainder_near(Decimal('3.6'), Decimal('1.3'))
        Decimal('-0.3')
        ")
                        (reparse-symbol indented_block_body) [169684 170900])
                    ("rotate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [170916 170920])
                            ("a" variable nil (reparse-symbol function_parameters) [170922 170923])
                            ("b" variable nil (reparse-symbol function_parameters) [170925 170926]))                          
                        :documentation "Returns a rotated copy of a, b times.

        The coefficient of the result is a rotated copy of the digits in
        the coefficient of the first operand.  The number of places of
        rotation is taken from the absolute value of the second operand,
        with the rotation being to the left if the second operand is
        positive or to the right otherwise.

        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))
        Decimal('400000003')
        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))
        Decimal('12')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))
        Decimal('891234567')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))
        Decimal('345678912')
        ")
                        (reparse-symbol indented_block_body) [170905 171844])
                    ("same_quantum" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [171866 171870])
                            ("a" variable nil (reparse-symbol function_parameters) [171872 171873])
                            ("b" variable nil (reparse-symbol function_parameters) [171875 171876]))                          
                        :documentation "Returns True if the two operands have the same exponent.

        The result is never affected by either the sign or the coefficient of
        either operand.

        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))
        False
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))
        True
        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))
        False
        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))
        True
        ")
                        (reparse-symbol indented_block_body) [171849 172447])
                    ("scaleb" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172464 172468])
                            ("a" variable nil (reparse-symbol function_parameters) [172470 172471])
                            ("b" variable nil (reparse-symbol function_parameters) [172473 172474]))                          
                        :documentation "Returns the first operand after adding the second value its exp.

        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))
        Decimal('0.0750')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))
        Decimal('7.50')
        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))
        Decimal('7.50E+3')
        ")
                        (reparse-symbol indented_block_body) [172452 172884])
                    ("shift" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [172899 172903])
                            ("a" variable nil (reparse-symbol function_parameters) [172905 172906])
                            ("b" variable nil (reparse-symbol function_parameters) [172908 172909]))                          
                        :documentation "Returns a shifted copy of a, b times.

        The coefficient of the result is a shifted copy of the digits
        in the coefficient of the first operand.  The number of places
        to shift is taken from the absolute value of the second operand,
        with the shift being to the left if the second operand is
        positive or to the right otherwise.  Digits shifted into the
        coefficient are zeros.

        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))
        Decimal('400000000')
        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))
        Decimal('0')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))
        Decimal('1234567')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))
        Decimal('123456789')
        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))
        Decimal('345678900')
        ")
                        (reparse-symbol indented_block_body) [172889 173868])
                    ("sqrt" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [173882 173886])
                            ("a" variable nil (reparse-symbol function_parameters) [173888 173889]))                          
                        :documentation "Square root of a non-negative number to context precision.

        If the result must be inexact, it is rounded using the round-half-even
        algorithm.

        >>> ExtendedContext.sqrt(Decimal('0'))
        Decimal('0')
        >>> ExtendedContext.sqrt(Decimal('-0'))
        Decimal('-0')
        >>> ExtendedContext.sqrt(Decimal('0.39'))
        Decimal('0.624499800')
        >>> ExtendedContext.sqrt(Decimal('100'))
        Decimal('10')
        >>> ExtendedContext.sqrt(Decimal('1'))
        Decimal('1')
        >>> ExtendedContext.sqrt(Decimal('1.0'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('1.00'))
        Decimal('1.0')
        >>> ExtendedContext.sqrt(Decimal('7'))
        Decimal('2.64575131')
        >>> ExtendedContext.sqrt(Decimal('10'))
        Decimal('3.16227766')
        >>> ExtendedContext.prec
        9
        ")
                        (reparse-symbol indented_block_body) [173873 174811])
                    ("subtract" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [174829 174833])
                            ("a" variable nil (reparse-symbol function_parameters) [174835 174836])
                            ("b" variable nil (reparse-symbol function_parameters) [174838 174839]))                          
                        :documentation "Return the difference between the two operands.

        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))
        Decimal('0.23')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))
        Decimal('0.00')
        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))
        Decimal('-0.77')
        ")
                        (reparse-symbol indented_block_body) [174816 175239])
                    ("to_eng_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175262 175266])
                            ("a" variable nil (reparse-symbol function_parameters) [175268 175269]))                          
                        :documentation "Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        ")
                        (reparse-symbol indented_block_body) [175244 175453])
                    ("to_sci_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175476 175480])
                            ("a" variable nil (reparse-symbol function_parameters) [175482 175483]))                          
                        :documentation "Converts a number to a string, using scientific notation.

        The operation is not affected by the context.
        ")
                        (reparse-symbol indented_block_body) [175458 175661])
                    ("to_integral_exact" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [175688 175692])
                            ("a" variable nil (reparse-symbol function_parameters) [175694 175695]))                          
                        :documentation "Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting; Inexact and Rounded flags
        are allowed in this operation.  The rounding mode is taken from the
        context.

        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_exact(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))
        Decimal('-Infinity')
        ")
                        (reparse-symbol indented_block_body) [175666 176893])
                    ("to_integral_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [176920 176924])
                            ("a" variable nil (reparse-symbol function_parameters) [176926 176927]))                          
                        :documentation "Rounds to an integer.

        When the operand has a negative exponent, the result is the same
        as using the quantize() operation using the given operand as the
        left-hand-operand, 1E+0 as the right-hand-operand, and the precision
        of the operand as the precision setting, except that no flags will
        be set.  The rounding mode is taken from the context.

        >>> ExtendedContext.to_integral_value(Decimal('2.1'))
        Decimal('2')
        >>> ExtendedContext.to_integral_value(Decimal('100'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('100.0'))
        Decimal('100')
        >>> ExtendedContext.to_integral_value(Decimal('101.5'))
        Decimal('102')
        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))
        Decimal('-102')
        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))
        Decimal('1.0E+6')
        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))
        Decimal('7.89E+77')
        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))
        Decimal('-Infinity')
        ")
                        (reparse-symbol indented_block_body) [176898 178094])
                    ("to_integral" variable nil (reparse-symbol indented_block_body) [178181 178212]))                  
                :type "class")
                nil [130379 178213])
            ("_WorkRep" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [178242 178274])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [178396 178803]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178369 178373])
                            ("value" variable nil (reparse-symbol function_parameters) [178375 178380]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [178356 178803])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [178821 178825]))                          )
                        (reparse-symbol indented_block_body) [178808 178892])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [178897 178915]))                  
                :type "class")
                nil [178214 178916])
            ("_normalize" function
               (:documentation "Normalizes op1, op2 to have the same exp and length of coefficient.

    Done during addition.
    "
                :arguments 
                  ( ("op1" variable nil (reparse-symbol function_parameters) [178934 178937])
                    ("op2" variable nil (reparse-symbol function_parameters) [178939 178942])
                    ("prec" variable nil (reparse-symbol function_parameters) [178944 178948]))                  )
                nil [178919 179820])
            ("_nbits" function
               (:documentation "Number of bits in binary representation of the positive integer n,
    or 0 if n == 0.
    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [180191 180192])
                    ("correction" variable nil (reparse-symbol function_parameters) [180194 180204]))                  )
                nil [180180 180629])
            ("_sqrt_nearest" function
               (:documentation "Closest integer to the square root of the positive integer n.  a is
    an initial approximation to the square root.  Any positive integer
    will do for a, but the closer a is to the square root of n the
    faster convergence will be.

    "
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [180648 180649])
                    ("a" variable nil (reparse-symbol function_parameters) [180651 180652]))                  )
                nil [180630 181083])
            ("_rshift_nearest" function
               (:documentation "Given an integer x and a nonnegative integer shift, return closest
    integer to x / 2**shift; use round-to-even in case of a tie.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [181104 181105])
                    ("shift" variable nil (reparse-symbol function_parameters) [181107 181112]))                  )
                nil [181084 181341])
            ("_div_nearest" function
               (:documentation "Closest integer to a/b, a and b positive integers; rounds to even
    in the case of a tie.

    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [181359 181360])
                    ("b" variable nil (reparse-symbol function_parameters) [181362 181363]))                  )
                nil [181342 181531])
            ("_ilog" function
               (:documentation "Integer approximation to M*log(x/M), with absolute error boundable
    in terms only of x/M.

    Given positive integers x and M, return an integer approximation to
    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference
    between the approximation and the exact result is at most 22.  For
    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In
    both cases these are upper bounds on the error; it will usually be
    much smaller."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [181542 181543])
                    ("M" variable nil (reparse-symbol function_parameters) [181545 181546])
                    ("L" variable nil (reparse-symbol function_parameters) [181548 181549]))                  )
                nil [181532 183402])
            ("_dlog10" function
               (:documentation "Given integers c, e and p with c > 0, p >= 0, compute an integer
    approximation to 10**p * log10(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [183415 183416])
                    ("e" variable nil (reparse-symbol function_parameters) [183418 183419])
                    ("p" variable nil (reparse-symbol function_parameters) [183421 183422]))                  )
                nil [183403 184408])
            ("_dlog" function
               (:documentation "Given integers c, e and p with c > 0, compute an integer
    approximation to 10**p * log(c*10**e), with an absolute error of
    at most 1.  Assumes that c*10**e is not exactly 1."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [184419 184420])
                    ("e" variable nil (reparse-symbol function_parameters) [184422 184423])
                    ("p" variable nil (reparse-symbol function_parameters) [184425 184426]))                  )
                nil [184409 185967])
            ("_Log10Memoize" type
               (:documentation "Class to compute, store, and allow retrieval of, digits of the
    constant log(10) = 2.302585....  This constant is needed by
    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [186230 186293]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186215 186219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [186202 186294])
                    ("getdigits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [186313 186317])
                            ("p" variable nil (reparse-symbol function_parameters) [186319 186320]))                          
                        :documentation "Given an integer p >= 0, return floor(10**p)*log(10).

        For example, self.getdigits(3) returns 2302.
        ")
                        (reparse-symbol indented_block_body) [186299 187430]))                  
                :type "class")
                nil [185968 187430])
            ("_log10_digits" variable nil nil [187431 187472])
            ("_iexp" function
               (:documentation "Given integers x and M, M > 0, such that x/M is small in absolute
    value, compute an integer approximation to M*exp(x/M).  For 0 <=
    x/M <= 2.4, the absolute error in the result is bounded by 60 (and
    is usually much smaller)."
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [187484 187485])
                    ("M" variable nil (reparse-symbol function_parameters) [187487 187488])
                    ("L" variable nil (reparse-symbol function_parameters) [187490 187491]))                  )
                nil [187474 188638])
            ("_dexp" function
               (:documentation "Compute an approximation to exp(c*10**e), with p decimal places of
    precision.

    Returns integers d, f such that:

      10**(p-1) <= d <= 10**p, and
      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f

    In other words, d*10**f is an approximation to exp(c*10**e) with p
    digits of precision, and with an error in d of at most 1.  This is
    almost, but not quite, the same as the error being < 1ulp: when d
    = 10**(p-1) the error could be up to 10 ulp."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [188649 188650])
                    ("e" variable nil (reparse-symbol function_parameters) [188652 188653])
                    ("p" variable nil (reparse-symbol function_parameters) [188655 188656]))                  )
                nil [188639 189820])
            ("_dpower" function
               (:documentation "Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and
    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:

      10**(p-1) <= c <= 10**p, and
      (c-1)*10**e < x**y < (c+1)*10**e

    in other words, c*10**e is an approximation to x**y with p digits
    of precision, and with an error in c of at most 1.  (This is
    almost, but not quite, the same as the error being < 1ulp: when c
    == 10**(p-1) we can only guarantee error < 10ulp.)

    We assume that: x is positive and not equal to 1, and y is nonzero.
    "
                :arguments 
                  ( ("xc" variable nil (reparse-symbol function_parameters) [189833 189835])
                    ("xe" variable nil (reparse-symbol function_parameters) [189837 189839])
                    ("yc" variable nil (reparse-symbol function_parameters) [189841 189843])
                    ("ye" variable nil (reparse-symbol function_parameters) [189845 189847])
                    ("p" variable nil (reparse-symbol function_parameters) [189849 189850]))                  )
                nil [189821 191251])
            ("_log10_lb" function
               (:documentation "Compute a lower bound for 100*log10(c) for a positive integer c."
                :arguments 
                  ( ("c" variable nil (reparse-symbol function_parameters) [191266 191267])
                    ("correction" variable nil (reparse-symbol function_parameters) [191269 191279]))                  )
                nil [191252 191618])
            ("_convert_other" function
               (:documentation "Convert other to Decimal.

    Verifies that it's ok to use in an implicit construction.
    "
                :arguments 
                  ( ("other" variable nil (reparse-symbol function_parameters) [191715 191720])
                    ("raiseit" variable nil (reparse-symbol function_parameters) [191722 191729]))                  )
                nil [191696 192076])
            ("DefaultContext" variable nil nil [192273 192489])
            ("BasicContext" variable nil nil [192699 192862])
            ("ExtendedContext" variable nil nil [192864 192970])
            ("re" include nil nil [193551 193560])
            ("_parser" variable nil nil [193561 194332])
            ("_all_zeros" variable nil nil [194334 194370])
            ("_exact_half" variable nil nil [194371 194409])
            ("_parse_format_specifier_regex" variable nil nil [194807 195035])
            ("del" code nil nil [195037 195043])
            ("_parse_format_specifier" function
               (:documentation "Parse and validate a format specifier.

    Turns a standard numeric format specifier into a dict, with the
    following entries:

      fill: fill character to pad field to minimum width
      align: alignment type, either '<', '>', '=' or '^'
      sign: either '+', '-' or ' '
      minimumwidth: nonnegative integer giving minimum width
      precision: nonnegative integer giving precision, or None
      type: one of the characters 'eEfFgG%', or None
      unicode: either True or False (always True for Python 3.x)

    "
                :arguments 
                  ( ("format_spec" variable nil (reparse-symbol function_parameters) [195073 195084]))                  )
                nil [195045 197336])
            ("_format_align" function
               (:documentation "Given an unpadded, non-aligned numeric string, add padding and
    aligment to conform with the given format specifier dictionary (as
    output from parse_format_specifier).

    It's assumed that if body is negative then it starts with '-'.
    Any leading sign ('-' or '+') is stripped from the body before
    applying the alignment and padding rules, and replaced in the
    appropriate position.

    "
                :arguments 
                  ( ("body" variable nil (reparse-symbol function_parameters) [197355 197359])
                    ("spec_dict" variable nil (reparse-symbol function_parameters) [197361 197370]))                  )
                nil [197337 198831])
            ("_Infinity" variable nil nil [198929 198955])
            ("_NegativeInfinity" variable nil nil [198956 198991])
            ("_NaN" variable nil nil [198992 199013])
            ("_Zero" variable nil nil [199014 199032])
            ("_One" variable nil nil [199033 199050])
            ("_NegativeOne" variable nil nil [199051 199077])
            ("_SignedInfinity" variable nil nil [199128 199176])
            ("if" code nil nil [199180 199274]))          
      :file "decimal.py"
      :pointmax 199274
      :fsize 199273
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 131889 . 131893) (IF 131910 . 131912) (ELSE 131932 . 131936) (NAME 131815 . 131819) (IF 131840 . 131842) (ELSE 131864 . 131868) (NAME 131757 . 131761) (IF 131774 . 131776) (ELSE 131794 . 131798) (NAME 131699 . 131703) (IF 131716 . 131718) (ELSE 131736 . 131740) (NAME 131625 . 131629) (IF 131650 . 131652) (ELSE 131674 . 131678) (NAME 131567 . 131571) (IF 131584 . 131586) (ELSE 131604 . 131608)))
    (semanticdb-table "numbers.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for numbers, according to PEP 3141.

TODO: Fill out more detailed documentation on the operators.\"\"\"" code nil nil [102 234])
            ("__future__" include nil nil [236 267])
            ("abc" include nil nil [268 325])
            ("__all__" variable nil nil [327 390])
            ("Number" type
               (:documentation "All numbers inherit from this class.

    If you just want to check if an argument x is a number, without
    caring what kind, use isinstance(x, Number).
    "
                :superclasses ("object")
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [588 611])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [616 630])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [708 723]))                  
                :type "class")
                nil [392 724])
            ("Complex" type
               (:documentation "Complex defines the operations that work on the builtin complex type.

    In short, those are: a conversion to complex, .real, .imag, +, -,
    *, /, abs(), .conjugate, ==, and !=.

    If it is given heterogenous arguments, and doesn't have special
    knowledge about them, it should fall back to the builtin complex
    type as described below.
    "
                :superclasses ("Number")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [1499 1513])
                    ("__complex__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1555 1559]))                          
                        :documentation "Return a builtin complex instance. Called for complex(self).")
                        (reparse-symbol indented_block_body) [1519 1637])
                    ("__nonzero__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1689 1693]))                          
                        :documentation "True if self != 0. Called for bool(self).")
                        (reparse-symbol indented_block_body) [1673 1777])
                    ("real" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1813 1817]))                          
                        :documentation "Retrieve the real component of this number.

        This should subclass Real.
        ")
                        (reparse-symbol indented_block_body) [1782 1957])
                    ("imag" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1993 1997]))                          
                        :documentation "Retrieve the real component of this number.

        This should subclass Real.
        ")
                        (reparse-symbol indented_block_body) [1962 2137])
                    ("__add__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2174 2178])
                            ("other" variable nil (reparse-symbol function_parameters) [2180 2185]))                          
                        :documentation "self + other")
                        (reparse-symbol indented_block_body) [2142 2249])
                    ("__radd__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2287 2291])
                            ("other" variable nil (reparse-symbol function_parameters) [2293 2298]))                          
                        :documentation "other + self")
                        (reparse-symbol indented_block_body) [2254 2362])
                    ("__neg__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2399 2403]))                          
                        :documentation "-self")
                        (reparse-symbol indented_block_body) [2367 2460])
                    ("__pos__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2497 2501]))                          
                        :documentation "+self")
                        (reparse-symbol indented_block_body) [2465 2558])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2575 2579])
                            ("other" variable nil (reparse-symbol function_parameters) [2581 2586]))                          
                        :documentation "self - other")
                        (reparse-symbol indented_block_body) [2563 2645])
                    ("__rsub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2663 2667])
                            ("other" variable nil (reparse-symbol function_parameters) [2669 2674]))                          
                        :documentation "other - self")
                        (reparse-symbol indented_block_body) [2650 2733])
                    ("__mul__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2770 2774])
                            ("other" variable nil (reparse-symbol function_parameters) [2776 2781]))                          
                        :documentation "self * other")
                        (reparse-symbol indented_block_body) [2738 2845])
                    ("__rmul__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2883 2887])
                            ("other" variable nil (reparse-symbol function_parameters) [2889 2894]))                          
                        :documentation "other * self")
                        (reparse-symbol indented_block_body) [2850 2958])
                    ("__div__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2995 2999])
                            ("other" variable nil (reparse-symbol function_parameters) [3001 3006]))                          
                        :documentation "self / other without __future__ division

        May promote to float.
        ")
                        (reparse-symbol indented_block_body) [2963 3138])
                    ("__rdiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3176 3180])
                            ("other" variable nil (reparse-symbol function_parameters) [3182 3187]))                          
                        :documentation "other / self without __future__ division")
                        (reparse-symbol indented_block_body) [3143 3279])
                    ("__truediv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3320 3324])
                            ("other" variable nil (reparse-symbol function_parameters) [3326 3331]))                          
                        :documentation "self / other with __future__ division.

        Should promote to float when necessary.
        ")
                        (reparse-symbol indented_block_body) [3284 3479])
                    ("__rtruediv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3521 3525])
                            ("other" variable nil (reparse-symbol function_parameters) [3527 3532]))                          
                        :documentation "other / self with __future__ division")
                        (reparse-symbol indented_block_body) [3484 3621])
                    ("__pow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3658 3662])
                            ("exponent" variable nil (reparse-symbol function_parameters) [3664 3672]))                          
                        :documentation "self**exponent; should promote to float or complex when necessary.")
                        (reparse-symbol indented_block_body) [3626 3790])
                    ("__rpow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3828 3832])
                            ("base" variable nil (reparse-symbol function_parameters) [3834 3838]))                          
                        :documentation "base ** self")
                        (reparse-symbol indented_block_body) [3795 3902])
                    ("__abs__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3939 3943]))                          
                        :documentation "Returns the Real distance from 0. Called for abs(self).")
                        (reparse-symbol indented_block_body) [3907 4050])
                    ("conjugate" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4089 4093]))                          
                        :documentation "(x+y*i).conjugate() returns (x-y*i).")
                        (reparse-symbol indented_block_body) [4055 4181])
                    ("__eq__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4217 4221])
                            ("other" variable nil (reparse-symbol function_parameters) [4223 4228]))                          
                        :documentation "self == other")
                        (reparse-symbol indented_block_body) [4186 4293])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4309 4313])
                            ("other" variable nil (reparse-symbol function_parameters) [4315 4320]))                          
                        :documentation "self != other")
                        (reparse-symbol indented_block_body) [4298 4448]))                  
                :type "class")
                nil [1107 4448])
            ("Complex" code nil nil [4449 4474])
            ("Real" type
               (:documentation "To Complex, Real adds the operations that work on real numbers.

    In short, those are: a conversion to float, trunc(), divmod,
    %, <, <=, >, and >=.

    Real also provides defaults for the derived operations.
    "
                :superclasses ("Complex")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [4734 4748])
                    ("__float__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4788 4792]))                          
                        :documentation "Any Real can be converted to a native float object.

        Called for float(self).")
                        (reparse-symbol indented_block_body) [4754 4928])
                    ("__trunc__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4967 4971]))                          
                        :documentation "trunc(self): Truncates self to an Integral.

        Returns an Integral i such that:
          * i>0 iff self>0;
          * abs(i) <= abs(self);
          * for any Integral j satisfying the first two conditions,
            abs(i) >= abs(j) [i.e. i has \"maximal\" abs among those].
        i.e. \"truncate towards 0\".
        ")
                        (reparse-symbol indented_block_body) [4933 5350])
                    ("__divmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5370 5374])
                            ("other" variable nil (reparse-symbol function_parameters) [5376 5381]))                          
                        :documentation "divmod(self, other): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        ")
                        (reparse-symbol indented_block_body) [5355 5597])
                    ("__rdivmod__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5618 5622])
                            ("other" variable nil (reparse-symbol function_parameters) [5624 5629]))                          
                        :documentation "divmod(other, self): The pair (self // other, self % other).

        Sometimes this can be computed faster than the pair of
        operations.
        ")
                        (reparse-symbol indented_block_body) [5602 5845])
                    ("__floordiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5887 5891])
                            ("other" variable nil (reparse-symbol function_parameters) [5893 5898]))                          
                        :documentation "self // other: The floor() of self/other.")
                        (reparse-symbol indented_block_body) [5850 5991])
                    ("__rfloordiv__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6034 6038])
                            ("other" variable nil (reparse-symbol function_parameters) [6040 6045]))                          
                        :documentation "other // self: The floor() of other/self.")
                        (reparse-symbol indented_block_body) [5996 6138])
                    ("__mod__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6175 6179])
                            ("other" variable nil (reparse-symbol function_parameters) [6181 6186]))                          
                        :documentation "self % other")
                        (reparse-symbol indented_block_body) [6143 6250])
                    ("__rmod__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6288 6292])
                            ("other" variable nil (reparse-symbol function_parameters) [6294 6299]))                          
                        :documentation "other % self")
                        (reparse-symbol indented_block_body) [6255 6363])
                    ("__lt__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6399 6403])
                            ("other" variable nil (reparse-symbol function_parameters) [6405 6410]))                          
                        :documentation "self < other

        < on Reals defines a total ordering, except perhaps for NaN.")
                        (reparse-symbol indented_block_body) [6368 6544])
                    ("__le__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6580 6584])
                            ("other" variable nil (reparse-symbol function_parameters) [6586 6591]))                          
                        :documentation "self <= other")
                        (reparse-symbol indented_block_body) [6549 6656])
                    ("__complex__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6737 6741]))                          
                        :documentation "complex(self) == complex(float(self), 0)")
                        (reparse-symbol indented_block_body) [6721 6835])
                    ("real" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6863 6867]))                          
                        :documentation "Real numbers are their real component.")
                        (reparse-symbol indented_block_body) [6840 6944])
                    ("imag" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6972 6976]))                          
                        :documentation "Real numbers have no imaginary component.")
                        (reparse-symbol indented_block_body) [6949 7052])
                    ("conjugate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7071 7075]))                          
                        :documentation "Conjugate is a no-op for Reals.")
                        (reparse-symbol indented_block_body) [7057 7145]))                  
                :type "class")
                nil [4477 7145])
            ("Real" code nil nil [7146 7166])
            ("Rational" type
               (:documentation ".numerator and .denominator should be in lowest terms."
                :superclasses ("Real")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7261 7275])
                    ("numerator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7317 7321]))                          
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7281 7358])
                    ("denominator" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7401 7405]))                          
                        :decorators 
                          ( ("abstractproperty" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [7363 7442])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7522 7526]))                          
                        :documentation "float(self) = self.numerator / self.denominator

        It's important that this conversion use the integer's \"true\"
        division rather than casting one side to float before dividing
        so that ratios of huge integers convert without overflowing.

        ")
                        (reparse-symbol indented_block_body) [7508 7860]))                  
                :type "class")
                nil [7169 7860])
            ("Integral" type
               (:documentation "Integral adds a conversion to long and the bit-string operations."
                :superclasses ("Rational")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [7969 7983])
                    ("__long__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8022 8026]))                          
                        :documentation "long(self)")
                        (reparse-symbol indented_block_body) [7989 8088])
                    ("__index__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8107 8111]))                          
                        :documentation "index(self)")
                        (reparse-symbol indented_block_body) [8093 8166])
                    ("__pow__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8203 8207])
                            ("exponent" variable nil (reparse-symbol function_parameters) [8209 8217])
                            ("modulus" variable nil (reparse-symbol function_parameters) [8219 8226]))                          
                        :documentation "self ** exponent % modulus, but maybe faster.

        Accept the modulus argument if you want to support the
        3-argument version of pow(). Raise a TypeError if exponent < 0
        or any argument isn't Integral. Otherwise, just implement the
        2-argument version described in Complex.
        ")
                        (reparse-symbol indented_block_body) [8171 8591])
                    ("__lshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8631 8635])
                            ("other" variable nil (reparse-symbol function_parameters) [8637 8642]))                          
                        :documentation "self << other")
                        (reparse-symbol indented_block_body) [8596 8707])
                    ("__rlshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8748 8752])
                            ("other" variable nil (reparse-symbol function_parameters) [8754 8759]))                          
                        :documentation "other << self")
                        (reparse-symbol indented_block_body) [8712 8824])
                    ("__rshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8864 8868])
                            ("other" variable nil (reparse-symbol function_parameters) [8870 8875]))                          
                        :documentation "self >> other")
                        (reparse-symbol indented_block_body) [8829 8940])
                    ("__rrshift__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8981 8985])
                            ("other" variable nil (reparse-symbol function_parameters) [8987 8992]))                          
                        :documentation "other >> self")
                        (reparse-symbol indented_block_body) [8945 9057])
                    ("__and__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9094 9098])
                            ("other" variable nil (reparse-symbol function_parameters) [9100 9105]))                          
                        :documentation "self & other")
                        (reparse-symbol indented_block_body) [9062 9169])
                    ("__rand__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9207 9211])
                            ("other" variable nil (reparse-symbol function_parameters) [9213 9218]))                          
                        :documentation "other & self")
                        (reparse-symbol indented_block_body) [9174 9282])
                    ("__xor__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9319 9323])
                            ("other" variable nil (reparse-symbol function_parameters) [9325 9330]))                          
                        :documentation "self ^ other")
                        (reparse-symbol indented_block_body) [9287 9394])
                    ("__rxor__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9432 9436])
                            ("other" variable nil (reparse-symbol function_parameters) [9438 9443]))                          
                        :documentation "other ^ self")
                        (reparse-symbol indented_block_body) [9399 9507])
                    ("__or__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9543 9547])
                            ("other" variable nil (reparse-symbol function_parameters) [9549 9554]))                          
                        :documentation "self | other")
                        (reparse-symbol indented_block_body) [9512 9618])
                    ("__ror__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9655 9659])
                            ("other" variable nil (reparse-symbol function_parameters) [9661 9666]))                          
                        :documentation "other | self")
                        (reparse-symbol indented_block_body) [9623 9730])
                    ("__invert__" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9770 9774]))                          
                        :documentation "~self")
                        (reparse-symbol indented_block_body) [9735 9831])
                    ("__float__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9920 9924]))                          
                        :documentation "float(self) == float(long(self))")
                        (reparse-symbol indented_block_body) [9906 10007])
                    ("numerator" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10040 10044]))                          
                        :documentation "Integers are their own numerators.")
                        (reparse-symbol indented_block_body) [10012 10117])
                    ("denominator" function
                       (:parent "dummy"
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10152 10156]))                          
                        :documentation "Integers have a denominator of 1.")
                        (reparse-symbol indented_block_body) [10122 10224]))                  
                :type "class")
                nil [7862 10224])
            ("Integral" code nil nil [10225 10247])
            ("Integral" code nil nil [10248 10271]))          
      :file "numbers.py"
      :pointmax 10272
      :fsize 10271
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
      :file "sre_constants.py"
      :pointmax 7138
      :fsize 7137
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "unittest.py"
      :major-mode 'python-mode
      :tags 
        '( ("'''
Python unit testing framework, based on Erich Gamma's JUnit and Kent Beck's
Smalltalk testing framework.

This module contains the core framework classes that form the basis of
specific test cases and suites (TestCase, TestSuite etc.), and also a
text-based utility class for running the tests and reporting the results
 (TextTestRunner).

Simple usage:

    import unittest

    class IntegerArithmenticTestCase(unittest.TestCase):
        def testAdd(self):  ## test method names begin 'test*'
            self.assertEquals((1 + 2), 3)
            self.assertEquals(0 + 1, 1)
        def testMultiply(self):
            self.assertEquals((0 * 10), 0)
            self.assertEquals((5 * 8), 40)

    if __name__ == '__main__':
        unittest.main()

Further information is available in the bundled documentation, and from

  http://docs.python.org/lib/module-unittest.html

Copyright (c) 1999-2003 Steve Purcell
This module is free software, and you may redistribute it and/or modify
it under the same terms as Python itself, so long as this copyright message
and disclaimer are retained in their original form.

IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF
THIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN \"AS IS\" BASIS,
AND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
'''" code nil nil [1 1679])
            ("__author__" variable nil nil [1681 1709])
            ("__email__" variable nil nil [1710 1756])
            ("__version__" variable nil nil [1757 1797])
            ("time" include nil nil [1799 1810])
            ("sys" include nil nil [1811 1821])
            ("traceback" include nil nil [1822 1838])
            ("os" include nil nil [1839 1848])
            ("types" include nil nil [1849 1861])
            ("__all__" variable nil nil [2054 2195])
            ("__all__" code nil nil [2253 2319])
            ("if" code nil nil [2505 2890])
            ("_CmpToKey" function (:arguments 
              ( ("mycmp" variable nil (reparse-symbol function_parameters) [2905 2910]))              ) nil [2891 3143])
            ("__metaclass__" variable nil nil [3405 3425])
            ("_strclass" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [3441 3444]))              ) nil [3427 3499])
            ("__unittest" variable nil nil [3500 3514])
            ("TestResult" type
               (:documentation "Holder for test result information.

    Test results are automatically managed by the TestCase and TestSuite
    classes, and do not need to be explicitly manipulated by writers of tests.

    Each instance holds the total number of tests run, and collections of
    failures and errors that occurred among those test runs. The collections
    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the
    formatted traceback of the error that occurred.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4050 4068])
                            ("self" variable nil (reparse-symbol indented_block_body) [4077 4093])
                            ("self" variable nil (reparse-symbol indented_block_body) [4102 4119])
                            ("self" variable nil (reparse-symbol indented_block_body) [4128 4151]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4035 4039]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4022 4152])
                    ("startTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4171 4175])
                            ("test" variable nil (reparse-symbol function_parameters) [4177 4181]))                          )
                        (reparse-symbol indented_block_body) [4157 4282])
                    ("stopTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4300 4304])
                            ("test" variable nil (reparse-symbol function_parameters) [4306 4310]))                          )
                        (reparse-symbol indented_block_body) [4287 4376])
                    ("addError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4394 4398])
                            ("test" variable nil (reparse-symbol function_parameters) [4400 4404])
                            ("err" variable nil (reparse-symbol function_parameters) [4406 4409]))                          
                        :documentation "Called when an error has occurred. 'err' is a tuple of values as
        returned by sys.exc_info().
        ")
                        (reparse-symbol indented_block_body) [4381 4608])
                    ("addFailure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4628 4632])
                            ("test" variable nil (reparse-symbol function_parameters) [4634 4638])
                            ("err" variable nil (reparse-symbol function_parameters) [4640 4643]))                          
                        :documentation "Called when an error has occurred. 'err' is a tuple of values as
        returned by sys.exc_info().")
                        (reparse-symbol indented_block_body) [4613 4835])
                    ("addSuccess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4855 4859])
                            ("test" variable nil (reparse-symbol function_parameters) [4861 4865]))                          )
                        (reparse-symbol indented_block_body) [4840 4937])
                    ("wasSuccessful" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4960 4964]))                          )
                        (reparse-symbol indented_block_body) [4942 5083])
                    ("stop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5097 5101]))                          )
                        (reparse-symbol indented_block_body) [5088 5188])
                    ("_exc_info_to_string" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5217 5221])
                            ("err" variable nil (reparse-symbol function_parameters) [5223 5226])
                            ("test" variable nil (reparse-symbol function_parameters) [5228 5232]))                          
                        :documentation "Converts a sys.exc_info()-style tuple of values into a string.")
                        (reparse-symbol indented_block_body) [5193 5771])
                    ("_is_relevant_tb_level" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5802 5806])
                            ("tb" variable nil (reparse-symbol function_parameters) [5808 5810]))                          )
                        (reparse-symbol indented_block_body) [5776 5866])
                    ("_count_relevant_tb_levels" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5901 5905])
                            ("tb" variable nil (reparse-symbol function_parameters) [5907 5909]))                          )
                        (reparse-symbol indented_block_body) [5871 6062])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6080 6084]))                          )
                        (reparse-symbol indented_block_body) [6067 6254]))                  
                :type "class")
                nil [3516 6254])
            ("TestCase" type
               (:documentation "A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.
    "
                :members 
                  ( ("failureException" variable nil (reparse-symbol indented_block_body) [7436 7469])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Create an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        \"\"\"" code nil (reparse-symbol indented_block_body) [7525 7728])
                            ("try" code nil (reparse-symbol indented_block_body) [7737 8036]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7488 7492])
                            ("methodName" variable nil (reparse-symbol function_parameters) [7494 7504]))                          
                        :documentation "Create an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7475 8036])
                    ("setUp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8051 8055]))                          )
                        (reparse-symbol indented_block_body) [8041 8147])
                    ("tearDown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8165 8169]))                          )
                        (reparse-symbol indented_block_body) [8152 8261])
                    ("countTestCases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8285 8289]))                          )
                        (reparse-symbol indented_block_body) [8266 8309])
                    ("defaultTestResult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8336 8340]))                          )
                        (reparse-symbol indented_block_body) [8314 8371])
                    ("shortDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8397 8401]))                          
                        :documentation "Returns a one-line description of the test, or None if no
        description has been provided.

        The default implementation of this method returns the first line of
        the specified test method's docstring.
        ")
                        (reparse-symbol indented_block_body) [8376 8740])
                    ("id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8752 8756]))                          )
                        (reparse-symbol indented_block_body) [8745 8834])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8850 8854])
                            ("other" variable nil (reparse-symbol function_parameters) [8856 8861]))                          )
                        (reparse-symbol indented_block_body) [8839 8993])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9009 9013])
                            ("other" variable nil (reparse-symbol function_parameters) [9015 9020]))                          )
                        (reparse-symbol indented_block_body) [8998 9056])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9074 9078]))                          )
                        (reparse-symbol indented_block_body) [9061 9137])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9154 9158]))                          )
                        (reparse-symbol indented_block_body) [9142 9238])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9256 9260]))                          )
                        (reparse-symbol indented_block_body) [9243 9368])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9381 9385])
                            ("result" variable nil (reparse-symbol function_parameters) [9387 9393]))                          )
                        (reparse-symbol indented_block_body) [9373 10407])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10425 10429])
                            ("args" variable nil (reparse-symbol function_parameters) [10431 10436])
                            ("kwds" variable nil (reparse-symbol function_parameters) [10438 10444]))                          )
                        (reparse-symbol indented_block_body) [10412 10486])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10501 10505]))                          
                        :documentation "Run the test without collecting errors in a TestResult")
                        (reparse-symbol indented_block_body) [10491 10668])
                    ("_exc_info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10687 10691]))                          
                        :documentation "Return a version of sys.exc_info() with the traceback frame
           minimised; usually the top level of the traceback frame is not
           needed.
        ")
                        (reparse-symbol indented_block_body) [10673 10900])
                    ("fail" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10914 10918])
                            ("msg" variable nil (reparse-symbol function_parameters) [10920 10923]))                          
                        :documentation "Fail immediately, with the given message.")
                        (reparse-symbol indented_block_body) [10905 11028])
                    ("failIf" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11044 11048])
                            ("expr" variable nil (reparse-symbol function_parameters) [11050 11054])
                            ("msg" variable nil (reparse-symbol function_parameters) [11056 11059]))                          )
                        (reparse-symbol indented_block_body) [11033 11168])
                    ("failUnless" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11188 11192])
                            ("expr" variable nil (reparse-symbol function_parameters) [11194 11198])
                            ("msg" variable nil (reparse-symbol function_parameters) [11200 11203]))                          
                        :documentation "Fail the test unless the expression is true.")
                        (reparse-symbol indented_block_body) [11173 11324])
                    ("failUnlessRaises" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11350 11354])
                            ("excClass" variable nil (reparse-symbol function_parameters) [11356 11364])
                            ("callableObj" variable nil (reparse-symbol function_parameters) [11366 11377])
                            ("args" variable nil (reparse-symbol function_parameters) [11379 11384])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [11386 11394]))                          
                        :documentation "Fail unless an exception of class excClass is thrown
           by callableObj when invoked with arguments args and keyword
           arguments kwargs. If a different type of exception is
           thrown, it will not be caught, and the test case will be
           deemed to have suffered an error, exactly as for an
           unexpected exception.
        ")
                        (reparse-symbol indented_block_body) [11329 12067])
                    ("failUnlessEqual" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12092 12096])
                            ("first" variable nil (reparse-symbol function_parameters) [12098 12103])
                            ("second" variable nil (reparse-symbol function_parameters) [12105 12111])
                            ("msg" variable nil (reparse-symbol function_parameters) [12113 12116]))                          
                        :documentation "Fail if the two objects are unequal as determined by the '=='
           operator.
        ")
                        (reparse-symbol indented_block_body) [12072 12361])
                    ("failIfEqual" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12382 12386])
                            ("first" variable nil (reparse-symbol function_parameters) [12388 12393])
                            ("second" variable nil (reparse-symbol function_parameters) [12395 12401])
                            ("msg" variable nil (reparse-symbol function_parameters) [12403 12406]))                          
                        :documentation "Fail if the two objects are equal as determined by the '=='
           operator.
        ")
                        (reparse-symbol indented_block_body) [12366 12645])
                    ("failUnlessAlmostEqual" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12676 12680])
                            ("first" variable nil (reparse-symbol function_parameters) [12682 12687])
                            ("second" variable nil (reparse-symbol function_parameters) [12689 12695])
                            ("places" variable nil (reparse-symbol function_parameters) [12697 12703])
                            ("msg" variable nil (reparse-symbol function_parameters) [12707 12710]))                          
                        :documentation "Fail if the two objects are unequal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most signficant digit).
        ")
                        (reparse-symbol indented_block_body) [12650 13238])
                    ("failIfAlmostEqual" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13265 13269])
                            ("first" variable nil (reparse-symbol function_parameters) [13271 13276])
                            ("second" variable nil (reparse-symbol function_parameters) [13278 13284])
                            ("places" variable nil (reparse-symbol function_parameters) [13286 13292])
                            ("msg" variable nil (reparse-symbol function_parameters) [13296 13299]))                          
                        :documentation "Fail if the two objects are equal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most signficant digit).
        ")
                        (reparse-symbol indented_block_body) [13243 13825])
                    ("assertEqual" variable nil (reparse-symbol indented_block_body) [13868 13912])
                    ("assertNotEqual" variable nil (reparse-symbol indented_block_body) [13918 13964])
                    ("assertAlmostEqual" variable nil (reparse-symbol indented_block_body) [13970 14032])
                    ("assertNotAlmostEqual" variable nil (reparse-symbol indented_block_body) [14038 14102])
                    ("assertRaises" variable nil (reparse-symbol indented_block_body) [14108 14139])
                    ("assert_" variable nil (reparse-symbol indented_block_body) [14145 14178])
                    ("assertFalse" variable nil (reparse-symbol indented_block_body) [14184 14204]))                  
                :type "class")
                nil [6255 14205])
            ("TestSuite" type
               (:documentation "A test suite is a composite test consisting of a number of TestCases.

    For use, create an instance of TestSuite, then add test case instances.
    When all tests have been added, the suite can be passed to a test
    runner, such as TextTestRunner. It will run the individual test cases
    in the order in which they were added, aggregating the results. When
    subclassing, do not forget to call the base class constructor.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [14713 14729])
                            ("self" code nil (reparse-symbol indented_block_body) [14738 14758]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14688 14692])
                            ("tests" variable nil (reparse-symbol function_parameters) [14694 14699]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14675 14759])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14777 14781]))                          )
                        (reparse-symbol indented_block_body) [14764 14858])
                    ("__str__" variable nil (reparse-symbol indented_block_body) [14863 14881])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14898 14902])
                            ("other" variable nil (reparse-symbol function_parameters) [14904 14909]))                          )
                        (reparse-symbol indented_block_body) [14887 15022])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15038 15042])
                            ("other" variable nil (reparse-symbol function_parameters) [15044 15049]))                          )
                        (reparse-symbol indented_block_body) [15027 15085])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [15150 15165])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15184 15188]))                          )
                        (reparse-symbol indented_block_body) [15171 15224])
                    ("countTestCases" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15248 15252]))                          )
                        (reparse-symbol indented_block_body) [15229 15370])
                    ("addTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15387 15391])
                            ("test" variable nil (reparse-symbol function_parameters) [15393 15397]))                          )
                        (reparse-symbol indented_block_body) [15375 15816])
                    ("addTests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15834 15838])
                            ("tests" variable nil (reparse-symbol function_parameters) [15840 15845]))                          )
                        (reparse-symbol indented_block_body) [15821 16028])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16041 16045])
                            ("result" variable nil (reparse-symbol function_parameters) [16047 16053]))                          )
                        (reparse-symbol indented_block_body) [16033 16192])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16210 16214])
                            ("args" variable nil (reparse-symbol function_parameters) [16216 16221])
                            ("kwds" variable nil (reparse-symbol function_parameters) [16223 16229]))                          )
                        (reparse-symbol indented_block_body) [16197 16271])
                    ("debug" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16286 16290]))                          
                        :documentation "Run the tests without collecting errors in a TestResult")
                        (reparse-symbol indented_block_body) [16276 16409]))                  
                :type "class")
                nil [14208 16409])
            ("FunctionTestCase" type
               (:documentation "A test case that wraps a test function.

    This is useful for slipping pre-existing test functions into the
    unittest framework. Optionally, set-up and tidy-up functions can be
    supplied. As with TestCase, the tidy-up ('tearDown') function will
    always be called if the set-up ('setUp') function ran successfully.
    "
                :superclasses ("TestCase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("TestCase" code nil (reparse-symbol indented_block_body) [16890 16913])
                            ("self" variable nil (reparse-symbol indented_block_body) [16922 16946])
                            ("self" variable nil (reparse-symbol indented_block_body) [16955 16985])
                            ("self" variable nil (reparse-symbol indented_block_body) [16994 17020])
                            ("self" variable nil (reparse-symbol indented_block_body) [17029 17061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16803 16807])
                            ("testFunc" variable nil (reparse-symbol function_parameters) [16809 16817])
                            ("setUp" variable nil (reparse-symbol function_parameters) [16819 16824])
                            ("tearDown" variable nil (reparse-symbol function_parameters) [16831 16839])
                            ("description" variable nil (reparse-symbol function_parameters) [16863 16874]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [16790 17062])
                    ("setUp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17077 17081]))                          )
                        (reparse-symbol indented_block_body) [17067 17156])
                    ("tearDown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17174 17178]))                          )
                        (reparse-symbol indented_block_body) [17161 17259])
                    ("runTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17276 17280]))                          )
                        (reparse-symbol indented_block_body) [17264 17309])
                    ("id" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17321 17325]))                          )
                        (reparse-symbol indented_block_body) [17314 17368])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17384 17388])
                            ("other" variable nil (reparse-symbol function_parameters) [17390 17395]))                          )
                        (reparse-symbol indented_block_body) [17373 17704])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17720 17724])
                            ("other" variable nil (reparse-symbol function_parameters) [17726 17731]))                          )
                        (reparse-symbol indented_block_body) [17709 17767])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17785 17789]))                          )
                        (reparse-symbol indented_block_body) [17772 17945])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17962 17966]))                          )
                        (reparse-symbol indented_block_body) [17950 18050])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18068 18072]))                          )
                        (reparse-symbol indented_block_body) [18055 18156])
                    ("shortDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18182 18186]))                          )
                        (reparse-symbol indented_block_body) [18161 18354]))                  
                :type "class")
                nil [16411 18354])
            ("TestLoader" type
               (:documentation "This class is responsible for loading tests according to various
    criteria and returning them wrapped in a TestSuite
    "
                :members 
                  ( ("testMethodPrefix" variable nil (reparse-symbol indented_block_body) [18702 18727])
                    ("sortTestMethodsUsing" variable nil (reparse-symbol indented_block_body) [18732 18758])
                    ("suiteClass" variable nil (reparse-symbol indented_block_body) [18763 18785])
                    ("loadTestsFromTestCase" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18817 18821])
                            ("testCaseClass" variable nil (reparse-symbol function_parameters) [18823 18836]))                          
                        :documentation "Return a suite of all tests cases contained in testCaseClass")
                        (reparse-symbol indented_block_body) [18791 19319])
                    ("loadTestsFromModule" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19348 19352])
                            ("module" variable nil (reparse-symbol function_parameters) [19354 19360]))                          
                        :documentation "Return a suite of all tests cases contained in the given module")
                        (reparse-symbol indented_block_body) [19324 19738])
                    ("loadTestsFromName" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19765 19769])
                            ("name" variable nil (reparse-symbol function_parameters) [19771 19775])
                            ("module" variable nil (reparse-symbol function_parameters) [19777 19783]))                          
                        :documentation "Return a suite of all tests cases given a string specifier.

        The name may resolve either to a module, a test case class, a
        test method within a test case class, or a callable object which
        returns a TestCase or TestSuite instance.

        The method optionally resolves the names relative to a given module.
        ")
                        (reparse-symbol indented_block_body) [19743 21593])
                    ("loadTestsFromNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21621 21625])
                            ("names" variable nil (reparse-symbol function_parameters) [21627 21632])
                            ("module" variable nil (reparse-symbol function_parameters) [21634 21640]))                          
                        :documentation "Return a suite of all tests cases found using the given sequence
        of string specifiers. See 'loadTestsFromName()'.
        ")
                        (reparse-symbol indented_block_body) [21598 21906])
                    ("getTestCaseNames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21932 21936])
                            ("testCaseClass" variable nil (reparse-symbol function_parameters) [21938 21951]))                          
                        :documentation "Return a sorted sequence of method names found within testCaseClass
        ")
                        (reparse-symbol indented_block_body) [21911 22444]))                  
                :type "class")
                nil [18545 22444])
            ("defaultTestLoader" variable nil nil [22447 22479])
            ("_makeLoader" function (:arguments 
              ( ("prefix" variable nil (reparse-symbol function_parameters) [22732 22738])
                ("sortUsing" variable nil (reparse-symbol function_parameters) [22740 22749])
                ("suiteClass" variable nil (reparse-symbol function_parameters) [22751 22761]))              ) nil [22716 22944])
            ("getTestCaseNames" function (:arguments 
              ( ("testCaseClass" variable nil (reparse-symbol function_parameters) [22966 22979])
                ("prefix" variable nil (reparse-symbol function_parameters) [22981 22987])
                ("sortUsing" variable nil (reparse-symbol function_parameters) [22989 22998]))              ) nil [22945 23079])
            ("makeSuite" function (:arguments 
              ( ("testCaseClass" variable nil (reparse-symbol function_parameters) [23094 23107])
                ("prefix" variable nil (reparse-symbol function_parameters) [23109 23115])
                ("sortUsing" variable nil (reparse-symbol function_parameters) [23124 23133])
                ("suiteClass" variable nil (reparse-symbol function_parameters) [23139 23149]))              ) nil [23080 23253])
            ("findTestCases" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [23272 23278])
                ("prefix" variable nil (reparse-symbol function_parameters) [23280 23286])
                ("sortUsing" variable nil (reparse-symbol function_parameters) [23295 23304])
                ("suiteClass" variable nil (reparse-symbol function_parameters) [23310 23320]))              ) nil [23254 23415])
            ("_WritelnDecorator" type
               (:documentation "Used to decorate file-like objects with a handy 'writeln' method"
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [23725 23745]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23703 23707])
                            ("stream" variable nil (reparse-symbol function_parameters) [23708 23714]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23690 23746])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23767 23771])
                            ("attr" variable nil (reparse-symbol function_parameters) [23773 23777]))                          )
                        (reparse-symbol indented_block_body) [23751 23821])
                    ("writeln" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23838 23842])
                            ("arg" variable nil (reparse-symbol function_parameters) [23844 23847]))                          )
                        (reparse-symbol indented_block_body) [23826 23960]))                  
                :type "class")
                nil [23586 23960])
            ("_TextTestResult" type
               (:documentation "A test result class that can print formatted text results to a stream.

    Used by TextTestRunner.
    "
                :superclasses ("TestResult")
                :members 
                  ( ("separator1" code nil (reparse-symbol indented_block_body) [24116 24137])
                    ("separator2" code nil (reparse-symbol indented_block_body) [24142 24163])
                    ("__init__" function
                       (:suite 
                          ( ("TestResult" code nil (reparse-symbol indented_block_body) [24230 24255])
                            ("self" variable nil (reparse-symbol indented_block_body) [24264 24284])
                            ("self" code nil (reparse-symbol indented_block_body) [24293 24321])
                            ("self" code nil (reparse-symbol indented_block_body) [24330 24356])
                            ("self" variable nil (reparse-symbol indented_block_body) [24365 24397]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24182 24186])
                            ("stream" variable nil (reparse-symbol function_parameters) [24188 24194])
                            ("descriptions" variable nil (reparse-symbol function_parameters) [24196 24208])
                            ("verbosity" variable nil (reparse-symbol function_parameters) [24210 24219]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24169 24398])
                    ("getDescription" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24422 24426])
                            ("test" variable nil (reparse-symbol function_parameters) [24428 24432]))                          )
                        (reparse-symbol indented_block_body) [24403 24564])
                    ("startTest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24583 24587])
                            ("test" variable nil (reparse-symbol function_parameters) [24589 24593]))                          )
                        (reparse-symbol indented_block_body) [24569 24790])
                    ("addSuccess" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24810 24814])
                            ("test" variable nil (reparse-symbol function_parameters) [24816 24820]))                          )
                        (reparse-symbol indented_block_body) [24795 25019])
                    ("addError" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25037 25041])
                            ("test" variable nil (reparse-symbol function_parameters) [25043 25047])
                            ("err" variable nil (reparse-symbol function_parameters) [25049 25052]))                          )
                        (reparse-symbol indented_block_body) [25024 25257])
                    ("addFailure" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25277 25281])
                            ("test" variable nil (reparse-symbol function_parameters) [25283 25287])
                            ("err" variable nil (reparse-symbol function_parameters) [25289 25292]))                          )
                        (reparse-symbol indented_block_body) [25262 25498])
                    ("printErrors" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25519 25523]))                          )
                        (reparse-symbol indented_block_body) [25503 25699])
                    ("printErrorList" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25723 25727])
                            ("flavour" variable nil (reparse-symbol function_parameters) [25729 25736])
                            ("errors" variable nil (reparse-symbol function_parameters) [25738 25744]))                          )
                        (reparse-symbol indented_block_body) [25704 26002]))                  
                :type "class")
                nil [23962 26002])
            ("TextTestRunner" type
               (:documentation "A test runner class that displays results in textual form.

    It prints out the names of tests as they are run, errors as they
    occur, and a summary of the results at the end of the test run.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26318 26357])
                            ("self" variable nil (reparse-symbol indented_block_body) [26366 26398])
                            ("self" variable nil (reparse-symbol indented_block_body) [26407 26433]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26255 26259])
                            ("stream" variable nil (reparse-symbol function_parameters) [26261 26267])
                            ("descriptions" variable nil (reparse-symbol function_parameters) [26280 26292])
                            ("verbosity" variable nil (reparse-symbol function_parameters) [26296 26305]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26242 26434])
                    ("_makeResult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26455 26459]))                          )
                        (reparse-symbol indented_block_body) [26439 26541])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26554 26558])
                            ("test" variable nil (reparse-symbol function_parameters) [26560 26564]))                          )
                        (reparse-symbol indented_block_body) [26546 27516]))                  
                :type "class")
                nil [26004 27516])
            ("TestProgram" type
               (:documentation "A command-line program that runs a set of tests; this is primarily
       for making test modules conveniently executable.
    "
                :members 
                  ( ("USAGE" variable nil (reparse-symbol indented_block_body) [27892 28433])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [28595 28820])
                            ("if" code nil (reparse-symbol indented_block_body) [28828 28873])
                            ("self" variable nil (reparse-symbol indented_block_body) [28881 28899])
                            ("self" variable nil (reparse-symbol indented_block_body) [28908 28938])
                            ("self" variable nil (reparse-symbol indented_block_body) [28947 28975])
                            ("self" variable nil (reparse-symbol indented_block_body) [28984 29012])
                            ("self" variable nil (reparse-symbol indented_block_body) [29021 29062])
                            ("self" code nil (reparse-symbol indented_block_body) [29071 29091])
                            ("self" code nil (reparse-symbol indented_block_body) [29100 29115]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28451 28455])
                            ("module" variable nil (reparse-symbol function_parameters) [28457 28463])
                            ("defaultTest" variable nil (reparse-symbol function_parameters) [28476 28487])
                            ("argv" variable nil (reparse-symbol function_parameters) [28511 28515])
                            ("testRunner" variable nil (reparse-symbol function_parameters) [28522 28532])
                            ("testLoader" variable nil (reparse-symbol function_parameters) [28556 28566]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [28438 29116])
                    ("usageExit" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29135 29139])
                            ("msg" variable nil (reparse-symbol function_parameters) [29141 29144]))                          )
                        (reparse-symbol indented_block_body) [29121 29239])
                    ("parseArgs" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29258 29262])
                            ("argv" variable nil (reparse-symbol function_parameters) [29264 29268]))                          )
                        (reparse-symbol indented_block_body) [29244 30124])
                    ("createTests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30145 30149]))                          )
                        (reparse-symbol indented_block_body) [30129 30291])
                    ("runTests" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30309 30313]))                          )
                        (reparse-symbol indented_block_body) [30296 30882]))                  
                :type "class")
                nil [27731 30882])
            ("main" variable nil nil [30883 30901])
            ("if" code nil nil [31109 31158]))          
      :file "unittest.py"
      :pointmax 31158
      :fsize 31157
      :lastmodtime '(21135 18932 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "platform.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\" This module tries to retrieve as much platform-identifying data as
    possible. It makes this information available via function APIs.

    If called from the command line, it prints the platform
    information concatenated as single string to stdout. The output
    format is useable as part of a filename.

\"\"\"" code nil nil [28 346])
            ("__copyright__" variable nil nil [4409 5460])
            ("__version__" variable nil nil [5462 5483])
            ("re" include nil nil [5485 5508])
            ("os" include nil nil [5485 5508])
            ("string" include nil nil [5485 5508])
            ("sys" include nil nil [5485 5508])
            ("_libc_search" variable nil nil [5538 5751])
            ("libc_ver" function
               (:documentation " Tries to determine the libc version that the file executable
        (which defaults to the Python interpreter) is linked against.

        Returns a tuple of strings (lib,version) which default to the
        given parameters in case the lookup fails.

        Note that the function has intimate knowledge of how different
        libc versions add symbols to the executable and thus is probably
        only useable for executables compiled using gcc.

        The file is read and scanned in chunks of chunksize bytes.

    "
                :arguments 
                  ( ("executable" variable nil (reparse-symbol function_parameters) [5766 5776])
                    ("lib" variable nil (reparse-symbol function_parameters) [5792 5795])
                    ("version" variable nil (reparse-symbol function_parameters) [5799 5806])
                    ("chunksize" variable nil (reparse-symbol function_parameters) [5825 5834]))                  )
                nil [5753 7574])
            ("_dist_try_harder" function
               (:documentation " Tries some special tricks to get the distribution
        information in case the default method fails.

        Currently supports older SuSE Linux, Caldera OpenLinux and
        Slackware Linux distributions.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [7596 7604])
                    ("version" variable nil (reparse-symbol function_parameters) [7605 7612])
                    ("id" variable nil (reparse-symbol function_parameters) [7613 7615]))                  )
                nil [7575 9410])
            ("_release_filename" variable nil nil [9411 9472])
            ("_lsb_release_version" variable nil nil [9473 9664])
            ("_release_version" variable nil nil [9665 9850])
            ("_supported_dists" variable nil nil [10085 10263])
            ("_parse_release_file" function (:arguments 
              ( ("firstline" variable nil (reparse-symbol function_parameters) [10289 10298]))              ) nil [10265 11027])
            ("_test_parse_release_file" function nil nil [11028 11928])
            ("linux_distribution" function
               (:documentation " Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        supported_dists may be given to define the set of Linux
        distributions to look for. It defaults to a list of currently
        supported Linux distributions identified by their release file
        name.

        If full_distribution_name is true (default), the full
        distribution read from the OS is returned. Otherwise the short
        name taken from supported_dists is used.

        Returns a tuple (distname,version,id) which default to the
        args given as parameters.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [11952 11960])
                    ("version" variable nil (reparse-symbol function_parameters) [11965 11972])
                    ("id" variable nil (reparse-symbol function_parameters) [11977 11979])
                    ("supported_dists" variable nil (reparse-symbol function_parameters) [12008 12023])
                    ("full_distribution_name" variable nil (reparse-symbol function_parameters) [12065 12087]))                  )
                nil [11929 13636])
            ("dist" function
               (:documentation " Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        Returns a tuple (distname,version,id) which default to the
        args given as parameters.

    "
                :arguments 
                  ( ("distname" variable nil (reparse-symbol function_parameters) [13686 13694])
                    ("version" variable nil (reparse-symbol function_parameters) [13698 13705])
                    ("id" variable nil (reparse-symbol function_parameters) [13709 13711])
                    ("supported_dists" variable nil (reparse-symbol function_parameters) [13726 13741]))                  )
                nil [13677 14282])
            ("_popen" type
               (:documentation " Fairly portable (alternative) popen implementation.

        This is mostly needed in case os.popen() is not available, or
        doesn't work as advertised, e.g. in Win9X GUI programs like
        PythonWin or IDLE.

        Writing to the pipe is currently not supported.

    "
                :members 
                  ( ("tmpfile" variable nil (reparse-symbol indented_block_body) [14594 14606])
                    ("pipe" variable nil (reparse-symbol indented_block_body) [14611 14622])
                    ("bufsize" variable nil (reparse-symbol indented_block_body) [14627 14641])
                    ("mode" variable nil (reparse-symbol indented_block_body) [14646 14656])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [14717 14806])
                            ("tempfile" include nil (reparse-symbol indented_block_body) [14814 14829])
                            ("self" variable nil (reparse-symbol indented_block_body) [14838 14880])
                            ("os" code nil (reparse-symbol indented_block_body) [14889 14923])
                            ("self" variable nil (reparse-symbol indented_block_body) [14932 14962])
                            ("self" variable nil (reparse-symbol indented_block_body) [14971 14993])
                            ("self" variable nil (reparse-symbol indented_block_body) [15002 15018]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14675 14679])
                            ("cmd" variable nil (reparse-symbol function_parameters) [14680 14683])
                            ("mode" variable nil (reparse-symbol function_parameters) [14684 14688])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [14693 14700]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [14662 15019])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15033 15037]))                          )
                        (reparse-symbol indented_block_body) [15024 15073])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15092 15096]))                          )
                        (reparse-symbol indented_block_body) [15078 15178])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15193 15197])
                            ("remove" variable nil (reparse-symbol function_parameters) [15214 15220])
                            ("error" variable nil (reparse-symbol function_parameters) [15231 15236]))                          )
                        (reparse-symbol indented_block_body) [15183 15485])
                    ("__del__" variable nil (reparse-symbol indented_block_body) [15502 15517]))                  
                :type "class")
                nil [14283 15518])
            ("popen" function
               (:documentation " Portable popen() interface.
    "
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [15529 15532])
                    ("mode" variable nil (reparse-symbol function_parameters) [15534 15538])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [15544 15551]))                  )
                nil [15519 16549])
            ("_norm_version" function
               (:documentation " Normalize the version and build strings and return a single
        version string using the format major.minor.build (or patchlevel).
    "
                :arguments 
                  ( ("version" variable nil (reparse-symbol function_parameters) [16568 16575])
                    ("build" variable nil (reparse-symbol function_parameters) [16577 16582]))                  )
                nil [16550 16994])
            ("_ver_output" variable nil nil [16995 17120])
            ("_syscmd_ver" function
               (:documentation " Tries to figure out the OS version used and returns
        a tuple (system,release,version).

        It uses the \"ver\" shell command for this which is known
        to exists on Windows, DOS and OS/2. XXX Others too ?

        In case this fails, the given parameters are used as
        defaults.

    "
                :arguments 
                  ( ("system" variable nil (reparse-symbol function_parameters) [17138 17144])
                    ("release" variable nil (reparse-symbol function_parameters) [17149 17156])
                    ("version" variable nil (reparse-symbol function_parameters) [17161 17168])
                    ("supported_platforms" variable nil (reparse-symbol function_parameters) [17189 17208]))                  )
                nil [17122 18777])
            ("_win32_getvalue" function
               (:documentation " Read a value for name from the registry key.

        In case this fails, default is returned.

    "
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [18798 18801])
                    ("name" variable nil (reparse-symbol function_parameters) [18802 18806])
                    ("default" variable nil (reparse-symbol function_parameters) [18807 18814]))                  )
                nil [18778 19259])
            ("win32_ver" function
               (:documentation " Get additional version information from the Windows Registry
        and return a tuple (version,csd,ptype) referring to version
        number, CSD level and OS type (multi/single
        processor).

        As a hint: ptype returns 'Uniprocessor Free' on single
        processor NT machines and 'Multiprocessor Free' on multi
        processor machines. The 'Free' refers to the OS version being
        free of debugging code. It could also state 'Checked' which
        means the OS version uses debugging code, i.e. code that
        checks arguments, ranges, etc. (Thomas Heller).

        Note: this function works best with Mark Hammond's win32
        package installed, but also on Python 2.3 and later. It
        obviously only runs on Win32 compatible platforms.

    "
                :arguments 
                  ( ("release" variable nil (reparse-symbol function_parameters) [19274 19281])
                    ("version" variable nil (reparse-symbol function_parameters) [19285 19292])
                    ("csd" variable nil (reparse-symbol function_parameters) [19296 19299])
                    ("ptype" variable nil (reparse-symbol function_parameters) [19303 19308]))                  )
                nil [19260 25181])
            ("_mac_ver_lookup" function (:arguments 
              ( ("selectors" variable nil (reparse-symbol function_parameters) [25202 25211])
                ("default" variable nil (reparse-symbol function_parameters) [25212 25219]))              ) nil [25182 25477])
            ("_bcd2str" function (:arguments 
              ( ("bcd" variable nil (reparse-symbol function_parameters) [25491 25494]))              ) nil [25478 25522])
            ("_mac_ver_gestalt" function (:documentation "
        Thanks to Mark R. Levinson for mailing documentation links and
        code examples for this function. Documentation for the
        gestalt() API is available online at:

           http://www.rgaros.nl/gestalt/
    ") nil [25523 26829])
            ("_mac_ver_xml" function nil nil [26830 27334])
            ("mac_ver" function
               (:documentation " Get MacOS version information and return it as tuple (release,
        versioninfo, machine) with versioninfo being a tuple (version,
        dev_stage, non_release_version).

        Entries which cannot be determined are set to the paramter values
        which default to ''. All tuple entries are strings.
    "
                :arguments 
                  ( ("release" variable nil (reparse-symbol function_parameters) [27348 27355])
                    ("versioninfo" variable nil (reparse-symbol function_parameters) [27359 27370])
                    ("machine" variable nil (reparse-symbol function_parameters) [27382 27389]))                  )
                nil [27336 28169])
            ("_java_getprop" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [28188 28192])
                ("default" variable nil (reparse-symbol function_parameters) [28193 28200]))              ) nil [28170 28411])
            ("java_ver" function
               (:documentation " Version interface for Jython.

        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being
        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a
        tuple (os_name,os_version,os_arch).

        Values which cannot be determined are set to the defaults
        given as parameters (which all default to '').

    "
                :arguments 
                  ( ("release" variable nil (reparse-symbol function_parameters) [28425 28432])
                    ("vendor" variable nil (reparse-symbol function_parameters) [28436 28442])
                    ("vminfo" variable nil (reparse-symbol function_parameters) [28446 28452])
                    ("osinfo" variable nil (reparse-symbol function_parameters) [28464 28470]))                  )
                nil [28412 29631])
            ("system_alias" function
               (:documentation " Returns (system,release,version) aliased to common
        marketing names used for some systems.

        It also does some reordering of the information in some cases
        where it would otherwise cause confusion.

    "
                :arguments 
                  ( ("system" variable nil (reparse-symbol function_parameters) [29675 29681])
                    ("release" variable nil (reparse-symbol function_parameters) [29682 29689])
                    ("version" variable nil (reparse-symbol function_parameters) [29690 29697]))                  )
                nil [29658 31287])
            ("_platform" function
               (:documentation " Helper to format the platform string in a filename
        compatible format e.g. \"system-version-machine\".
    "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [31332 31337]))                  )
                nil [31318 52620]))          
      :file "platform.py"
      :pointmax 52620
      :fsize 52619
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((INDENT_BLOCK 43676 . 43765) (NEWLINE 43675 . 43676) (DEDENT 43642 . 43642) (NAME 43642 . 43661) (LPAREN 43674 . 43675) (NEWLINE 43263 . 43264) (COLON 43262 . 43263) (RPAREN 43261 . 43262) (DEDENT 43247 . 43247) (DEF 43247 . 43250) (LPAREN 43260 . 43261) (NEWLINE 43095 . 43096) (COLON 43094 . 43095) (RPAREN 43093 . 43094) (DEDENT 43081 . 43081) (DEF 43081 . 43084) (LPAREN 43092 . 43093) (NEWLINE 42910 . 42911) (COLON 42909 . 42910) (RPAREN 42908 . 42909) (DEDENT 42896 . 42896) (DEF 42896 . 42899) (LPAREN 42907 . 42908) (NEWLINE 42731 . 42732) (COLON 42730 . 42731) (RPAREN 42729 . 42730) (DEDENT 42717 . 42717) (DEF 42717 . 42720) (LPAREN 42728 . 42729) (NEWLINE 42524 . 42525) (COLON 42523 . 42524) (RPAREN 42522 . 42523) (DEDENT 42513 . 42513) (DEF 42513 . 42516) (LPAREN 42521 . 42522) (NEWLINE 42336 . 42337) (COLON 42335 . 42336) (RPAREN 42334 . 42335) (DEDENT 42323 . 42323) (DEF 42323 . 42326) (LPAREN 42333 . 42334) (NEWLINE 37711 . 37712) (COLON 37710 . 37711) (RPAREN 37709 . 37710) (DEF 37699 . 37702) (LPAREN 37708 . 37709) (NEWLINE 34970 . 34971) (COLON 34969 . 34970) (RPAREN 34968 . 34969) (DEF 34907 . 34910) (LPAREN 34923 . 34924) (PERIOD 34899 . 34900) (RPAREN 34898 . 34899) (LPAREN 34889 . 34890) (NEWLINE 34855 . 34856) (RBRACE 34854 . 34855) (INDENT_BLOCK 34769 . 34854) (NEWLINE 34768 . 34769) (DEDENT 34743 . 34743) (NAME 34743 . 34764) (LBRACE 34767 . 34768) (NEWLINE 33870 . 33871) (COLON 33869 . 33870) (RPAREN 33868 . 33869) (DEDENT 33834 . 33834) (DEF 33834 . 33837) (LPAREN 33850 . 33851) (NEWLINE 33410 . 33411) (COLON 33409 . 33410) (RPAREN 33408 . 33409) (DEDENT 33373 . 33373) (DEF 33373 . 33376) (LPAREN 33390 . 33391) (NEWLINE 33073 . 33074) (COLON 33072 . 33073) (RPAREN 33071 . 33072) (DEDENT 33042 . 33042) (DEF 33042 . 33045) (LPAREN 33062 . 33063) (NEWLINE 33008 . 33009) (COLON 33007 . 33008) (DEDENT 33003 . 33003) (ELSE 33003 . 33007) (NEWLINE 32759 . 32760) (COLON 32758 . 32759) (RPAREN 32757 . 32758) (DEDENT 32725 . 32725) (IF 32725 . 32727) (LPAREN 32739 . 32740) (NEWLINE 32387 . 32388) (COLON 32386 . 32387) (RPAREN 32385 . 32386) (DEDENT 32365 . 32365) (DEF 32365 . 32368) (LPAREN 32374 . 32375)))
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxsplit]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxsplit is
    given, only the first maxsplit occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [16084 16092]))                  )
                nil [16059 16391])
            ("try" code nil nil [16633 16838])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17284 17288])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17290 17303])
                            ("args" variable nil (reparse-symbol function_parameters) [17305 17310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17312 17320]))                          )
                        (reparse-symbol indented_block_body) [17273 17380])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17397 17401])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17403 17416])
                            ("args" variable nil (reparse-symbol function_parameters) [17418 17422])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17424 17430]))                          )
                        (reparse-symbol indented_block_body) [17385 17611])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17629 17633])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17635 17648])
                            ("args" variable nil (reparse-symbol function_parameters) [17650 17654])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17656 17662])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17664 17673])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17675 17690]))                          )
                        (reparse-symbol indented_block_body) [17616 18920])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18940 18944])
                            ("key" variable nil (reparse-symbol function_parameters) [18946 18949])
                            ("args" variable nil (reparse-symbol function_parameters) [18951 18955])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18957 18963]))                          )
                        (reparse-symbol indented_block_body) [18926 19081])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19109 19113])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19115 19124])
                            ("args" variable nil (reparse-symbol function_parameters) [19126 19130])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19132 19138]))                          )
                        (reparse-symbol indented_block_body) [19087 19154])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19177 19181])
                            ("value" variable nil (reparse-symbol function_parameters) [19183 19188])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19190 19201]))                          )
                        (reparse-symbol indented_block_body) [19160 19246])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19270 19274])
                            ("value" variable nil (reparse-symbol function_parameters) [19276 19281])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19283 19293]))                          )
                        (reparse-symbol indented_block_body) [19252 19610])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19985 19989])
                            ("format_string" variable nil (reparse-symbol function_parameters) [19991 20004]))                          )
                        (reparse-symbol indented_block_body) [19975 20056])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20333 20337])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20339 20349])
                            ("args" variable nil (reparse-symbol function_parameters) [20351 20355])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20357 20363]))                          )
                        (reparse-symbol indented_block_body) [20319 20746]))                  
                :type "class")
                nil [17244 20746]))          
      :file "string.py"
      :pointmax 20746
      :fsize 20745
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "webbrowser.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Interfaces for launching and remotely controlling Web browsers.\"\"\"" code nil nil [1 70])
            ("os" include nil nil [102 111])
            ("shlex" include nil nil [112 124])
            ("sys" include nil nil [125 135])
            ("stat" include nil nil [136 147])
            ("subprocess" include nil nil [148 165])
            ("time" include nil nil [166 177])
            ("__all__" variable nil nil [179 253])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [283 287]))                  
                :type "class")
                nil [255 288])
            ("_browsers" variable nil nil [289 303])
            ("_tryorder" variable nil nil [359 373])
            ("register" function
               (:documentation "Register a browser connector and, optionally, connection."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [438 442])
                    ("klass" variable nil (reparse-symbol function_parameters) [444 449])
                    ("instance" variable nil (reparse-symbol function_parameters) [451 459])
                    ("update_tryorder" variable nil (reparse-symbol function_parameters) [466 481]))                  )
                nil [425 725])
            ("get" function
               (:documentation "Return a browser launcher instance appropriate for the environment."
                :arguments 
                  ( ("using" variable nil (reparse-symbol function_parameters) [734 739]))                  )
                nil [726 1669])
            ("open" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [1866 1869])
                ("new" variable nil (reparse-symbol function_parameters) [1871 1874])
                ("autoraise" variable nil (reparse-symbol function_parameters) [1878 1887]))              ) nil [1857 2034])
            ("open_new" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [2048 2051]))              ) nil [2035 2078])
            ("open_new_tab" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [2096 2099]))              ) nil [2079 2126])
            ("_synthesize" function
               (:documentation "Attempt to synthesize a controller base on existing controllers.

    This is useful to create a controller when a user specifies a path to
    an entry in the BROWSER environment variable -- we can copy a general
    controller to operate using a specific installation of the desired
    browser in this way.

    If we can't create a controller in this way, or if there is no
    executable for the requested browser, return [None, None].

    "
                :arguments 
                  ( ("browser" variable nil (reparse-symbol function_parameters) [2144 2151])
                    ("update_tryorder" variable nil (reparse-symbol function_parameters) [2153 2168]))                  )
                nil [2128 3255])
            ("if" code nil nil [3257 3801])
            ("_iscommand" function
               (:documentation "Return True if cmd is executable or can be found on the executable
    search path."
                :arguments 
                  ( ("cmd" variable nil (reparse-symbol function_parameters) [3817 3820]))                  )
                nil [3802 4180])
            ("BaseBrowser" type
               (:documentation "Parent class for all browsers. Do not use directly."
                :superclasses ("object")
                :members 
                  ( ("args" variable nil (reparse-symbol indented_block_body) [4302 4315])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4358 4374])
                            ("self" variable nil (reparse-symbol indented_block_body) [4383 4403]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4334 4338])
                            ("name" variable nil (reparse-symbol function_parameters) [4340 4344]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4321 4404])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4418 4422])
                            ("url" variable nil (reparse-symbol function_parameters) [4424 4427])
                            ("new" variable nil (reparse-symbol function_parameters) [4429 4432])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [4436 4445]))                          )
                        (reparse-symbol indented_block_body) [4409 4484])
                    ("open_new" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4502 4506])
                            ("url" variable nil (reparse-symbol function_parameters) [4508 4511]))                          )
                        (reparse-symbol indented_block_body) [4489 4547])
                    ("open_new_tab" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4569 4573])
                            ("url" variable nil (reparse-symbol function_parameters) [4575 4578]))                          )
                        (reparse-symbol indented_block_body) [4552 4614]))                  
                :type "class")
                nil [4208 4614])
            ("GenericBrowser" type
               (:documentation "Class for all browsers started with a command
       and without remote functionality."
                :superclasses ("BaseBrowser")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4787 5010])
                            ("self" variable nil (reparse-symbol indented_block_body) [5018 5061]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4766 4770])
                            ("name" variable nil (reparse-symbol function_parameters) [4772 4776]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4753 5062])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5076 5080])
                            ("url" variable nil (reparse-symbol function_parameters) [5082 5085])
                            ("new" variable nil (reparse-symbol function_parameters) [5087 5090])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [5094 5103]))                          )
                        (reparse-symbol indented_block_body) [5067 5481]))                  
                :type "class")
                nil [4616 5481])
            ("BackgroundBrowser" type
               (:documentation "Class for all browsers which are to be started in the
       background."
                :superclasses ("GenericBrowser")
                :members 
                  ( ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5621 5625])
                            ("url" variable nil (reparse-symbol function_parameters) [5627 5630])
                            ("new" variable nil (reparse-symbol function_parameters) [5632 5635])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [5639 5648]))                          )
                        (reparse-symbol indented_block_body) [5612 6193]))                  
                :type "class")
                nil [5483 6193])
            ("UnixBrowser" type
               (:documentation "Parent class for all Unix browsers with remote functionality."
                :superclasses ("BaseBrowser")
                :members 
                  ( ("raise_opts" variable nil (reparse-symbol indented_block_body) [6304 6321])
                    ("remote_args" variable nil (reparse-symbol indented_block_body) [6326 6357])
                    ("remote_action" variable nil (reparse-symbol indented_block_body) [6362 6382])
                    ("remote_action_newwin" variable nil (reparse-symbol indented_block_body) [6387 6414])
                    ("remote_action_newtab" variable nil (reparse-symbol indented_block_body) [6419 6446])
                    ("background" variable nil (reparse-symbol indented_block_body) [6451 6469])
                    ("redirect_stdout" variable nil (reparse-symbol indented_block_body) [6474 6496])
                    ("_invoke" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6514 6518])
                            ("args" variable nil (reparse-symbol function_parameters) [6520 6524])
                            ("remote" variable nil (reparse-symbol function_parameters) [6526 6532])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [6534 6543]))                          )
                        (reparse-symbol indented_block_body) [6502 8126])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8140 8144])
                            ("url" variable nil (reparse-symbol function_parameters) [8146 8149])
                            ("new" variable nil (reparse-symbol function_parameters) [8151 8154])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [8158 8167]))                          )
                        (reparse-symbol indented_block_body) [8131 9033]))                  
                :type "class")
                nil [6195 9033])
            ("Mozilla" type
               (:documentation "Launcher class for Mozilla/Netscape browsers."
                :superclasses ("UnixBrowser")
                :members 
                  ( ("raise_opts" variable nil (reparse-symbol indented_block_body) [9124 9159])
                    ("remote_args" variable nil (reparse-symbol indented_block_body) [9165 9212])
                    ("remote_action" variable nil (reparse-symbol indented_block_body) [9217 9235])
                    ("remote_action_newwin" variable nil (reparse-symbol indented_block_body) [9240 9276])
                    ("remote_action_newtab" variable nil (reparse-symbol indented_block_body) [9281 9314])
                    ("background" variable nil (reparse-symbol indented_block_body) [9320 9337]))                  
                :type "class")
                nil [9035 9338])
            ("Netscape" variable nil nil [9339 9357])
            ("Galeon" type
               (:documentation "Launcher class for Galeon/Epiphany browsers."
                :superclasses ("UnixBrowser")
                :members 
                  ( ("raise_opts" variable nil (reparse-symbol indented_block_body) [9447 9476])
                    ("remote_args" variable nil (reparse-symbol indented_block_body) [9481 9512])
                    ("remote_action" variable nil (reparse-symbol indented_block_body) [9517 9537])
                    ("remote_action_newwin" variable nil (reparse-symbol indented_block_body) [9542 9569])
                    ("background" variable nil (reparse-symbol indented_block_body) [9575 9592]))                  
                :type "class")
                nil [9360 9593])
            ("Opera" type
               (:superclasses ("UnixBrowser")
                :members 
                  ( ("\"Launcher class for Opera browser.\"" code nil (reparse-symbol indented_block_body) [9625 9660])
                    ("raise_opts" variable nil (reparse-symbol indented_block_body) [9666 9693])
                    ("remote_args" variable nil (reparse-symbol indented_block_body) [9699 9746])
                    ("remote_action" variable nil (reparse-symbol indented_block_body) [9751 9769])
                    ("remote_action_newwin" variable nil (reparse-symbol indented_block_body) [9774 9810])
                    ("remote_action_newtab" variable nil (reparse-symbol indented_block_body) [9815 9849])
                    ("background" variable nil (reparse-symbol indented_block_body) [9854 9871]))                  
                :type "class")
                nil [9595 9872])
            ("Elinks" type
               (:superclasses ("UnixBrowser")
                :members 
                  ( ("\"Launcher class for Elinks browsers.\"" code nil (reparse-symbol indented_block_body) [9905 9942])
                    ("remote_args" variable nil (reparse-symbol indented_block_body) [9948 9995])
                    ("remote_action" variable nil (reparse-symbol indented_block_body) [10000 10018])
                    ("remote_action_newwin" variable nil (reparse-symbol indented_block_body) [10023 10059])
                    ("remote_action_newtab" variable nil (reparse-symbol indented_block_body) [10064 10097])
                    ("background" variable nil (reparse-symbol indented_block_body) [10102 10120])
                    ("redirect_stdout" variable nil (reparse-symbol indented_block_body) [10238 10261]))                  
                :type "class")
                nil [9874 10262])
            ("Konqueror" type
               (:documentation "Controller for the KDE File Manager (kfm, or Konqueror).

    See the output of ``kfmclient --commands``
    for more information on the Konqueror remote-control interface.
    "
                :superclasses ("BaseBrowser")
                :members 
                  ( ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10496 10500])
                            ("url" variable nil (reparse-symbol function_parameters) [10502 10505])
                            ("new" variable nil (reparse-symbol function_parameters) [10507 10510])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [10514 10523]))                          )
                        (reparse-symbol indented_block_body) [10487 12230]))                  
                :type "class")
                nil [10264 12230])
            ("Grail" type
               (:superclasses ("BaseBrowser")
                :members 
                  ( ("_find_grail_rc" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12460 12464]))                          )
                        (reparse-symbol indented_block_body) [12441 13291])
                    ("_remote" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13308 13312])
                            ("action" variable nil (reparse-symbol function_parameters) [13314 13320]))                          )
                        (reparse-symbol indented_block_body) [13296 13454])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13468 13472])
                            ("url" variable nil (reparse-symbol function_parameters) [13474 13477])
                            ("new" variable nil (reparse-symbol function_parameters) [13479 13482])
                            ("autoraise" variable nil (reparse-symbol function_parameters) [13486 13495]))                          )
                        (reparse-symbol indented_block_body) [13459 13641]))                  
                :type "class")
                nil [12232 13641])
            ("register_X_browsers" function nil nil [13797 15352])
            ("if" code nil nil [15384 15440])
            ("if" code nil nil [15469 16030])
            ("if" code nil nil [16067 17029])
            ("try" code nil nil [17064 17354])
            ("if" code nil nil [17355 19550])
            ("if" code nil nil [19585 19776])
            ("if" code nil nil [19916 20437])
            ("main" function nil nil [20480 21035])
            ("if" code nil nil [21036 21074]))          
      :file "webbrowser.py"
      :pointmax 21074
      :fsize 21073
      :lastmodtime '(21135 18933 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "shlex.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A lexical analyzer class for simple shell-like syntaxes.\"\"\"" code nil nil [30 92])
            ("os.path" include nil nil [396 410])
            ("sys" include nil nil [411 421])
            ("collections" include nil nil [422 451])
            ("try" code nil nil [453 547])
            ("__all__" variable nil nil [548 576])
            ("shlex" type
               (:members 
                  ( ("\"A lexical analyzer class for simple shell-like syntaxes.\"" code nil (reparse-symbol indented_block_body) [595 653])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [727 806])
                            ("if" code nil (reparse-symbol indented_block_body) [814 992])
                            ("self" variable nil (reparse-symbol indented_block_body) [1000 1018])
                            ("if" code nil (reparse-symbol indented_block_body) [1027 1105])
                            ("self" variable nil (reparse-symbol indented_block_body) [1113 1134])
                            ("self" variable nil (reparse-symbol indented_block_body) [1143 1256])
                            ("if" code nil (reparse-symbol indented_block_body) [1265 1411])
                            ("self" variable nil (reparse-symbol indented_block_body) [1419 1446])
                            ("self" variable nil (reparse-symbol indented_block_body) [1455 1484])
                            ("self" variable nil (reparse-symbol indented_block_body) [1493 1512]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [671 675])
                            ("instream" variable nil (reparse-symbol function_parameters) [677 685])
                            ("infile" variable nil (reparse-symbol function_parameters) [692 698])
                            ("posix" variable nil (reparse-symbol function_parameters) [705 710]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [658 11138]))                  
                :type "class")
                nil [578 11138]))          
      :file "shlex.py"
      :pointmax 11138
      :fsize 11137
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax '((NAME 9660 . 9665) (NAME 9724 . 9729) (COLON 9729 . 9730) (NAME 9228 . 9231) (NAME 9232 . 9243) (NAME 9252 . 9257) (STRING_LITERAL 9257 . 9649) (NAME 9649 . 9654) (COLON 9654 . 9655) (NAME 7996 . 7999) (NAME 8000 . 8010) (NAME 8019 . 8024) (STRING_LITERAL 8024 . 9219) (NAME 9219 . 9224) (COLON 9224 . 9225) (NAME 7167 . 7170) (NAME 7171 . 7174) (NAME 7185 . 7190) (STRING_LITERAL 7190 . 7291) (NAME 7291 . 7293) (NAME 7294 . 7301) (NAME 7302 . 7311) (STRING_LITERAL 7311 . 7987) (NAME 7987 . 7992) (COLON 7992 . 7993) (NAME 6280 . 6283) (NAME 6284 . 6287) (NAME 6298 . 6303) (STRING_LITERAL 6303 . 6404) (NAME 6404 . 6406) (NAME 6407 . 6414) (NAME 6415 . 6424) (STRING_LITERAL 6424 . 7158) (NAME 7158 . 7163) (COLON 7163 . 7164) (NAME 4915 . 4918) (NAME 4919 . 4929) (NAME 4944 . 4949) (STRING_LITERAL 4949 . 6271) (NAME 6271 . 6276) (COLON 6276 . 6277) (NAME 4906 . 4911) (COLON 4911 . 4912) (STRING_LITERAL 4442 . 4488) (NAME 4488 . 4489) (NAME 4490 . 4493) (NAME 4494 . 4503) (COLON 4503 . 4504) (IN 4434 . 4436) (STRING_LITERAL 4130 . 4427) (NAME 4427 . 4432) (COLON 4432 . 4433) (NAME 4114 . 4119) (COLON 4119 . 4120) (NAME 3261 . 3266) (STRING_LITERAL 3267 . 4046) (NAME 4046 . 4051) (COLON 4051 . 4052) (NAME 3246 . 3251) (COLON 3251 . 3252) (NAME 2928 . 2930) (STRING_LITERAL 2942 . 3017) (NAME 3110 . 3111) (NAME 3112 . 3120) (RPAREN 3120 . 3121) (NAME 2666 . 2668) (NAME 2669 . 2675) (STRING_LITERAL 2678 . 2913) (NAME 2913 . 2918) (COLON 2918 . 2919) (NAME 2581 . 2583) (NAME 2584 . 2588) (STRING_LITERAL 2591 . 2651) (NAME 2651 . 2656) (COLON 2656 . 2657) (NAME 2050 . 2055) (STRING_LITERAL 2056 . 2170) (NAME 2170 . 2174) (NAME 2175 . 2177) (NAME 2178 . 2183) (NAME 2184 . 2190) (NAME 2191 . 2195) (NAME 2196 . 2199) (NAME 2200 . 2205) (STRING_LITERAL 2205 . 2566) (NAME 2566 . 2571) (COLON 2571 . 2572) (NAME 1521 . 1525) (NAME 1928 . 1932) (NAME 1933 . 1934) (NAME 1935 . 1940) (NAME 1941 . 1945) (NAME 1946 . 1949) (NAME 1950 . 1955) (NAME 1956 . 1962) (NAME 1963 . 1965) (NAME 1966 . 1969) (NAME 1970 . 1979) (NAME 1980 . 1986) (STRING_LITERAL 1986 . 2035) (NAME 2035 . 2040) (COLON 2040 . 2041)))
    (semanticdb-table "stat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("SF_ARCHIVED" variable nil nil [1589 1614])
            ("SF_IMMUTABLE" variable nil nil [1615 1640])
            ("SF_APPEND" variable nil nil [1641 1666])
            ("SF_NOUNLINK" variable nil nil [1667 1692])
            ("SF_SNAPSHOT" variable nil nil [1693 1718]))          
      :file "stat.py"
      :pointmax 1719
      :fsize 1718
      :lastmodtime '(19690 55975 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib!python2.6!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
