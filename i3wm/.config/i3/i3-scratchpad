#!/bin/bash

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <http://unlicense.org/>
#
# This is the my extended version of https://gitlab.com/aquator/i3-scratchpad
# v1.1 - original version: a44fd4ff
# v1.2 - 1. add -f flag to focus first if the window is opened but unfocused, 2022-07-14
#        2. fix the bug that it only resizes the window into the specified size
#        when you toggle it back from scratchpad
# v1.3 - add -k flag to keep the previous window size and position
#        when toggling it back from scratchpad, 2022-07-14
# v1.4 - add -F flag to avoid a window as floating window, 2022-07-14
# v1.5 - add -K flag to kill a window, 2022-07-14
# v1.6 - add -T flag to toggle floating window smartly, 2022-07-14
# v1.7 - 1. reverse -F, do not float by default if not set in i3/config,
#        it will create tiling window and resize, you can notice the resize
#        and most programs don't need float in i3/config
#        2. remove -K flag since it is only one command, 2022-07-15
# v1.8 - 1. remove -t, always toggle, that's scrachpad, give -t to -F which toggles floating/tiling smartly
#        2. remove -f, always focus first, give -f flag to -F which float enabled
#        2. fix issue when new created and opened window in another workspace
#        (not been to scratchpad yet), toggle to focus fails, 2022-07-17
# v1.9 - 1. remove -m/-o/-u/-w/-v flags, replace -V with -v flag, remove echoit function, clean some echo/log

VERSION="1.8"

print_help() {
	printf 'Usage: %s [[-a] [-d <size>] [-p <pos>] [-s <screen>] [-f]] [-t] [-k] [-v] <command>\n' "$script_name"
	printf 'Executes a program in a positioned scratchpad.\n'
	printf 'so executing the same command will re-use the existing window, if it still exists.\n'
	printf '\nArguments:\n'
	printf ' -a <anchor>   Sets where to calculate position from. Valid values are\n'
	printf '               top-left, top-center, top-right\n'
	printf '               center-left, center-center, center-right\n'
	printf '               bottom-left, bottom-center, bottom-right\n'
	printf '               Can be shortened as: tl, tc, tr, cl, cc, cr, bl, bc, br\n'
	printf '               Position will be calculated from anchor point of screen to anchor\n'
	printf '               point of window. Default is center-center.\n'
	printf ' -d <size>     Dimensions of window in pixels, in WIDTHxHEIGHT format.\n'
	printf '               Percentages of the screen dimensions can be used as well. Default is 50%%x50%%\n'
	printf ' -h            Prints this help page.\n'
	printf ' -f            Float enabled, better to set in i3/config, you will see the floating move when using only -f.\n'
	printf ' -k            Keep window layout, restore its size and position when toggle it back.\n'
	printf ' -K            Kill a window.\n'
	printf ' -p <pos>      Position of terminal on pixels, in X,Y format.\n'
	printf '               Negative values can be used as well. Default is 0,0\n'
	printf ' -s <screen>   Screen identifier, as listed in xrandr. Falls back to primary screen.\n'
	printf ' -t            Toggle floating window smartly.\n'
	printf ' -v            Print version information.\n'
	printf '\nExample:\n'
	printf ' # Calendar at the bottom right of primary screen with 32px bottom margin:\n'
	printf ' $ %s -d200x200 -abr -p0,-32 -wtu cal\n' "$script_name"
}

}

toggle_floating_smart() {
	# hard part, parse json of `i3-msg -t get_tree > /tmp/tree.json | prettier -w /tmp/tree.json && vim /tmp/tree.json`, search for `"floating": "user_on"`
	# in the same level, get the value of "window", then this window is floating, compare it with the active window id
	floating_window_ids=$(i3-msg -t get_tree | jq -r --arg sk floating --arg sv user_on --arg pv window '.. | objects | select(contains({($sk): $sv})) | .[$pv]')
	window_focused_id="$(xdotool getactivewindow)"
	# NOTE: do not put the same command part(floating toggle) in is-msg in if-else into one above here,
	# it has some werid toggle-small-to-bigger resize effect
	if [[ "$floating_window_ids" == *"$window_focused_id"* ]]; then
		debug 'The active window' "$window_focused_id" 'was a floting window, make it a tiling window'
		# border + no-window-bar for tiling window
		i3-msg -q -- "[id=\"$window_focused_id\"] floating toggle; [id=\"$window_focused_id\"] border pixel 3"
	else
		debug 'The active window' "$window_focused_id" 'was a tiling window, make it a floating window'
		# toggle a window manually to set specific 75%x75% size
		# no-border + window-bar for floating window
		i3-msg -q -- "[id=\"$window_focused_id\"] floating toggle; [id=\"$window_focused_id\"] resize set 75 ppt 75 ppt; [id=\"$window_focused_id\"] move position center"
		# NOTE: no -d options for ./script -t for Dropdown, so it won't be a big window size, toggle Dropdown will do as all other windows
		i3-msg -q -- "[id=\"$window_focused_id\"] border normal 0"
	fi
	exit 0
}

main() {
	local screen_width screen_height offset_x offset_y width height x_pos y_pos \
		command window_focused_id window_state wid_file pid_dir

	pid_dir=${XDG_RUNTIME_DIR:-"/tmp"}

	parse_aruments "$@"

	# already_running return 0 = true, first run return 1
	if already_running; then
		exit 0
	fi

	start_and_save_wid_and_pid
}

parse_aruments() {
	local script_name dim='\([0-9]\+%\?\)' pos='\(-\?[0-9]\+\)' anchor='cc'
	script_name="$(basename "$0")"
	while getopts ad:hfkp:s:tvV arg; do
		case $arg in
		a) anchor="$OPTARG" ;;
		d) read -r width height < <(sed -n "s/^${dim}x${dim}$/\1 \2/p" <<<"$OPTARG") ;;
		h) print_help && exit 0 ;;
		f) float=true ;;
		k) keep=true ;;
		p) read -r x_pos y_pos < <(sed -n "s/^${pos},${pos}$/\1 \2/p" <<<"$OPTARG") ;;
		s) screen="$OPTARG" ;;
		t) toggle_floating_smart && exit 0 ;;
		v) printf 'Version %s\n' "$VERSION" && exit 0 ;;
		*) print_help && exit 1 ;;
		esac
	done
	shift $((OPTIND - 1))
	command="$*"
	if [ -z "$command" ]; then
		printf 'Command argument is missing. See %s -h.\n' "$script_name" >&2
		exit 1
	fi
	wid_file="$pid_dir/i3-sp-$(md5sum <<<"$command" | cut -f1 -d' ')"

	if [[ "$anchor" =~ ^(top|center|bottom)-(left|center|right)$ ]]; then
		anchor=$(sed -n 's/^\([tcb]\)[^-]\+-\([lcr]\).*$/\1\2/p' <<<"$anchor")
	fi

	if [[ ! "$anchor" =~ ^([tcb])([lcr])$ ]]; then
		printf 'Anchor "%s" is invalid. See %s -h.\n' "$anchor" "$script_name" >&2
		exit 1
	fi

	ensure_screen
	parse_dimensions
}

ensure_screen() {
	if [ -n "$screen" ] && [ "$(xrandr --listactivemonitors | sed -n '2,$s/^.*\s\(\S\+\)$/\1/p' | grep -xc "$screen")" -eq 0 ]; then
		unset screen
	fi

	if [ -z "$screen" ]; then
		screen=$(xrandr | sed -n 's/^\(\S\+\).*primary.*$/\1/p')
	fi
}

parse_dimensions() {
	width=${width:-50%}
	height=${height:-50%}
	x_pos=${x_pos:-0}
	y_pos=${y_pos:-0}

	read -r screen_width screen_height offset_x offset_y < <(xrandr | sed -n "s/^$screen .*connected[^0-9]* \([0-9]\+\)x\([0-9]\+\)\([+-][0-9]\+\)\([+-][0-9]\+\).*$/\1 \2 \3 \4/p")

	if [[ "$width" =~ %$ ]]; then
		width=$((screen_width * ${width//%/} / 100))
	fi
	if [[ "$height" =~ %$ ]]; then
		height=$((screen_height * ${height//%/} / 100))
	fi

	case "$anchor" in
	t?) y_pos=$((y_pos + offset_y)) ;;
	c?) y_pos=$((y_pos + ((screen_height - height) / 2) + offset_y)) ;;
	b?) y_pos=$((y_pos + screen_height - height + offset_y)) ;;
	esac

	case "$anchor" in
	?l) x_pos=$((x_pos + offset_x)) ;;
	?c) x_pos=$((x_pos + ((screen_width - width) / 2) + offset_x)) ;;
	?r) x_pos=$((x_pos + screen_width - width + offset_x)) ;;
	esac

	debug 'Calculated window dimensions are [' "x: $x_pos" "y: $y_pos" "w: $width" "h: $height" ']'
}

already_running() {
	local window_id pid window_pid
	debug 'Checking wid file' "$wid_file"
	if [ -f "$wid_file" ] && [ -r "$wid_file" ]; then
		read -r window_id pid <"$wid_file"
	fi
	if [ -n "$window_id" ]; then
		debug 'Last window id was' "$window_id"
		if [ "$(wmctrl -l | grep -c "^$window_id ")" -gt 0 ]; then
			debug 'Window still exist'
			if [ -n "$pid" ]; then
				window_pid=$(xdotool getwindowpid "$window_id")
				debug 'Pid of window is' "$window_pid"
				if [ "$pid" -ne "$window_pid" ]; then
					debug 'PID does not match, window id reused?'
					return 1
				fi
			else
				debug 'Last pid not found'
			fi
			window_state=$(xprop -id "$window_id" | sed -n 's/^.*window state: \(.*\)$/\1/p')
			debug 'Toggle mode on, current window state is' "$window_state"
			# NOTE: if the window is opened/visiable but in another i3 workspace, its window_state is "Withdrawn"
			# if the window is in scratchpad and hidden, its window_state is "Withdrawn",
			# both can use `i3-msg -q -- "[id="37748740"] focus"` to focus its window, other situations are all "Normal"
			if [[ "$window_state" != 'Withdrawn' ]]; then
				debug 'Moving to scratchpad'
				toggle_window
				return 0
			fi
			show_window_in_position
			return 0
		fi
	fi
	return 1
}

start_and_save_wid_and_pid() {
	local window_id pid

	debug 'Launching command' "$command"
	window_id=$(printf '0x%08x\n' "$(i3-msg -q "exec --no-startup-id \"$command\"" && i3-msg -t subscribe '[ "window" ]' | sed -n 's/.*"window":\([0-9]\+\).*/\1/p')")
	if [ -z "$window_id" ]; then
		printf 'Can not find window with id %s\n' "$window_id" >&2
		rm -f "$wid_file"
		return 1
	fi

	pid="$(xdotool getwindowpid "$window_id")"
	if [ -z "$pid" ]; then
		printf 'Can not find pid for window id %s\n' "$window_id" >&2
		rm -f "$wid_file"
		return 1
	fi
	debug 'PID of window is' "$pid"

	debug 'Saving window_id' "$window_id" 'and pid' "$pid" 'to wid file' "$wid_file"
	printf '%s %s\n' "$window_id" "$pid" >"$wid_file"

	show_window_in_position
}

show_window_in_position() {
	window_focused_id="$(xdotool getactivewindow)"
	if [ "$window_focused_id" != "$(printf "%d" "$window_id")" ]; then
		i3-msg -q -- "[id=\"$window_id\"] focus"
	fi

			else
				debug 'The window' "$window_id" 'is alredy a floting window'
				window_focused_classname="$(xdotool getactivewindow getwindowclassname)"
				if [ "Dropdown" = "$window_focused_classname" ]; then
					i3-msg -q -- "[id=\"$window_id\"] move position $x_pos px $y_pos px;[id=\"$window_id\"] resize set $width px $height px"
					i3-msg -q -- "[id=\"$window_id\" class=\"(^Dropdown$)\" ] border pixel 0"
				else
					i3-msg -q -- "[id=\"$window_id\" class=\"^(?!Dropdown$)\" ] border normal 0"
				fi
			fi
		else
			floating_window_ids=$(i3-msg -t get_tree | jq -r --arg sk floating --arg sv user_on --arg pv window '.. | objects | select(contains({($sk): $sv})) | .[$pv]')
			window_focused_id="$(xdotool getactivewindow)"

			if [[ "$floating_window_ids" == *"$window_focused_id"* ]]; then
				i3-msg -q -- "[id=\"$window_focused_id\"] floating toggle"
				debug 'The active window' "$window_focused_id" 'was a floting window, now it is a tiling window'
				# border + no-window-bar for tiling window
				i3-msg -q -- "[id=\"$window_focused_id\"] border pixel 3"
			fi
		fi
	else
		fi
	fi
}

toggle_window() {
	window_focused_id="$(xdotool getactivewindow)"
	# the printf part is to convert hex to dec
	if [[ "$window_focused_id" -ne "$(printf "%d" "$window_id")" ]]; then
		debug 'window_id does not match current window_focused_id and -f is given, will focus the window_id first'
		show_window_in_position && return 0
	else
		i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;"
	fi
}

debug() {
		printf '%s\n' "$*" # >>/tmp/i3-scratchpad.log
}

[ -z "$BASH_LOADABLES_PATH" ] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
enable -f sleep sleep

main "$@"
