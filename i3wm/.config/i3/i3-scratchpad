#!/bin/bash

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <http://unlicense.org/>
#
# This is my extended version of https://gitlab.com/aquator/i3-scratchpad
# v1.1 - original version: a44fd4ff
# v1.2 - 1. add -f flag to focus first if the window is opened but unfocused, 2022-07-14
#        2. fix the bug that it only resizes the window into the specified size
#        when you toggle it back from scratchpad
# v1.3 - add -k flag to keep the previous window size and position
#        when toggling it back from scratchpad, 2022-07-14
# v1.4 - add -F flag to avoid a window as floating window, 2022-07-14
# v1.5 - add -K flag to kill a window, 2022-07-14
# v1.6 - add -T flag to toggle floating window smartly, 2022-07-14
# v1.7 - 1. reverse -F, do not float by default if not set in i3/config,
#        it will create tiling window and resize, you can notice the resize
#        and most programs don't need float in i3/config
#        2. remove -K flag since it is only one command, 2022-07-15
# v1.8 - 1. remove -t, always toggle, that's scrachpad, give -t to -F which toggles floating/tiling smartly
#        2. remove -f, always focus first, give -f flag to -F which float enabled
#        3. fix issue when new created and opened window in another workspace
#        (not been to scratchpad yet), toggle to focus fails, 2022-07-17
# v2.0 - 1. remove -m/-o/-u/-w/-v flags, replace -V with -v flag, remove echoit function, clean some echo/log
#        2. rewrite debug function to use notify-send and print line-num/calling-function/script-name,
#        then comment out and rewrite all debug references
#        3. rewrite -a flag to use top-left if the flag is passed, otherwise use center-center
#        4. fix Dropdown kitty position issue
#        5. clean the handling -k (keep) flag
#        6. reorder all functions, merge toggle_window content into the reference part and remove it
#        7. add new_window variable to check if it is a new created window(not into scratchpad yet)
#        8. rewrite some i3-msg lines, 2022-07-26
# v2.1 - 1. add -F to always focus the window first if it is not focused,
#        this strategy is enabled by default in older version,
#        useful for clicks in i3status-rust bar and Dropdown terminal,
#        2. add -w to open program in specific workspace
#        3. change comment about window_state, 2022-08-10
# v2.2 - 1. fix issue of occasionally opening a new program when it is already running,
#        by replacing wmctrl with /proc/$pid/status, since wmctrl sometimes fails with
#        `X Error of failed request:  BadWindow (invalid Window parameter)...` message,
#        link: github.com/i3/i3/issues/4339
#        2. remove xdotool/wmctrl/xprop that may fail on some programs/situations, refer above link
#        3. fix issue when opening a program directly into a workspace,
#        4. replace some printf with debug, 2022-09-01

VERSION="2.2"

print_help() {
	printf 'Usage: %s [[-a] [-d <size>] [-p <pos>] [-s <screen>] [-f]] [-F] [-t] [-k] [-w <workspace>] [-v] <command>\n' "$script_name"
	printf 'Executes a program in a positioned scratchpad.\n'
	printf 'so executing the same command will re-use the existing window, if it still exists.\n'
	printf '\nArguments:\n'
	printf ' -a            Calculate position from top-left, otherwise use center-center\n'
	printf ' -d <size>     Dimensions of window in pixels, in WIDTHxHEIGHT format.\n'
	printf '               Percentages of the screen dimensions can be used as well. Default is 50%%x50%%\n'
	printf ' -h            Prints this help page.\n'
	printf ' -f            Float enabled, better to set in i3/config, you will see the floating move when using only -f.\n'
	printf ' -F            Always focus first.\n'
	printf ' -k            Keep window layout, restore its size and position when toggle it back.\n'
	printf ' -K            Kill a window.\n'
	printf ' -p <pos>      Position of terminal on pixels, in X,Y format.\n'
	printf '               Negative values can be used as well. Default is 0,0\n'
	printf ' -s <screen>   Screen identifier, as listed in xrandr. Falls back to primary screen.\n'
	printf ' -t            Toggle floating window smartly.\n'
	printf ' -w            Open a program in a specific workspace.\n'
	printf ' -v            Print version information.\n'
	printf '\nExample:\n'
	printf ' $ %s -d200x200 -a -p0,-32 -t kitty\n' "$script_name"
}

toggle_floating_smart() {
	# hard part, parse json of `i3-msg -t get_tree > /tmp/tree.json | prettier -w /tmp/tree.json && vim /tmp/tree.json`, search for `"floating": "user_on"`
	# in the same level, get the value of "window", then this window is floating, compare it with the active window id
	floating_window_ids=$(i3-msg -t get_tree | jq -r --arg sk floating --arg sv user_on --arg pv window '.. | objects | select(contains({($sk): $sv})) | .[$pv]')
	window_focused_id="$(xdotool getactivewindow)"
	# NOTE: do not put the same command part(floating toggle) in is-msg in if-else into one above here,
	# it has some werid toggle-small-to-bigger resize effect
	if [[ "$floating_window_ids" == *"$window_focused_id"* ]]; then
		# debug "The active window $window_focused_id was a floting window, make it a tiling window"
		# border + no-window-bar for tiling window
		i3-msg -q -- "[id=\"$window_focused_id\"] floating toggle; border pixel 3"
	else
		# debug "The active window $window_focused_id was a tiling window, make it a floating window"
		# toggle a window manually to set specific 75%x75% size
		# no-border + window-bar for floating window
		# NOTE: no -d options for ./script -t for Dropdown, so it won't be a big window size, toggle Dropdown will do as all other windows
		i3-msg -q -- "[id=\"$window_focused_id\"] border normal 0; floating toggle; resize set 75 ppt 75 ppt; move position center"
	fi
	exit 0
}

debug() {
	notify-send -u critical "$*" "$(caller 0)"
}

show_window_in_position() {
	if [ -n "$workspace" ]; then
		i3-msg -q "workspace --no-auto-back-and-forth $workspace"
	fi
	if ! test -z "$window_id_in_file"; then
		window_id=$window_id_in_file
	fi
	i3-msg -q -- "[id=\"$window_id\"] focus"

	if [ -n "$float" ]; then
		if [ -z "$keep" ]; then # -k is not passed, previous focus command from scratcpad will restore size and position
			# debug "The window $window_id is alredy a floting window, now resize and re-position"
			window_focused_classname="$(xdotool getactivewindow getwindowclassname)"
			if [ "Dropdown" = "$window_focused_classname" ]; then
				i3-msg -q -- "[id=\"$window_id\"] border pixel 0; move position $x_pos px $y_pos px; resize set $width px $height px"
			else
				i3-msg -q -- "[id=\"$window_id\"] border normal 0"
				if [ -z "$new_window" ]; then
					# debug "not new_window, now resize and re-position"
					# NOTE:FIXME: the size/position got from parse_dimensions are a bit different from size/position from i3/config
					# so, when it focuses back from scratchpad, there will be a little movement when resize/re-position
					i3-msg -q -- "[id=\"$window_id\"] move position $x_pos px $y_pos px; resize set $width px $height px;"
				fi
			fi
		fi
	else
		floating_window_ids=$(i3-msg -t get_tree | jq -r --arg sk floating --arg sv user_on --arg pv window '.. | objects | select(contains({($sk): $sv})) | .[$pv]')
		window_focused_id="$(xdotool getactivewindow)"

		if [[ "$floating_window_ids" == *"$window_focused_id"* ]]; then
			# debug "The active window $window_focused_id was a floating window, now it is a tiling window"
			# border + no-window-bar for tiling window
			i3-msg -q -- "[id=\"$window_focused_id\"] floating toggle; border pixel 3"
		fi
	fi
}

already_running() {
	local window_id_in_file pid_in_file command_in_file
	if [ -f "$wid_file" ] && [ -r "$wid_file" ]; then
		read -r window_id_in_file pid_in_file command_in_file <"$wid_file"
	else
		return 1
	fi
	command_in_file=$(echo $command_in_file | tr -d '"')
	# debug "command: $command, command_in_file: $command_in_file, wid_file: $wid_file, window_id: $window_id, window_id_in_file: $window_id_in_file, pid_in_file: $pid_in_file"
	if [[ -n "$window_id_in_file" && -f "/proc/$pid_in_file/status" && "$command_in_file" == "$command" ]]; then
		# TODO: debug, issue of toggling one program but another is triggered
		if test $(grep -l "$window_id_in_file" /run/user/1000/i3-sp* | wc -l) -gt 1; then
			debug "ERROR: command_in_file: $command_in_file, command: $command, wid_file: $wid_file, window_id_in_file: $window_id_in_file, pid_in_file: $pid_in_file"
			debug "ERROR: window_id_in_file: $window_id_in_file in two files in /run/user/1000/i3-sp*"
			return 1
		fi
		window_focused_id="$(xdotool getactivewindow)"
		windows_in_scratchpad=$(i3-msg -t get_tree | jq ".nodes|.[]|.|.nodes|.[]|.nodes|.[]|select(.name==\"__i3_scratch\")|.floating_nodes|.[]|.nodes|.[]|.window")
		# the printf part is to convert hex to dec
		# debug "windows_in_scratchpad: $windows_in_scratchpad, window_focused_id: $window_focused_id"
		if [[ "${windows_in_scratchpad[*]}" == *"$(printf "%d" "$window_id_in_file")"* || -n "$focus" && "$window_focused_id" != "$(printf "%d" "$window_id_in_file")" ]]; then
			show_window_in_position
		else
			i3-msg -q -- "[id=\"$window_id_in_file\"] move to scratchpad"
		fi
		return 0
	else # not already_running
		# debug "already_running() returns 1(false), window_id: $window_id, pid: $pid, command: $command"
		rm -f "$wid_file"
		return 1
	fi
}

start_and_save_wid_and_pid() {
	local window_id pid new_window

	if [ -n "$workspace" ]; then
		i3-msg -q "workspace --no-auto-back-and-forth $workspace"
	fi
	window_id="$(i3-msg -q "exec --no-startup-id \"$command\"" && i3-msg -t subscribe '[ "window" ]' | sed -n 's/.*"window":\([0-9]\+\).*/\1/p')"
	if [ -z "$window_id" ]; then
		debug "Can not find window with id: $window_id, command: $command"
		rm -f "$wid_file"
		return 1
	fi

	# NOTE: xdotool from window_id may fail if running in already_running function from some programs
	# debug "window_id: $window_id, command: $command"
	pid="$(xdotool getwindowpid "$window_id")"
	if [ -z "$pid" ]; then
		debug "Can not find pid for window id: $window_id"
		rm -f "$wid_file"
		return 1
	fi

	# TODO: debug
	if [ -f "$wid_file" ] && [ -r "$wid_file" ]; then
		local window_id_in_file pid_in_file command_in_file
		read -r window_id_in_file pid_in_file command_in_file <"$wid_file"
		command_in_file=$(echo "$command_in_file" | tr -d '"')
		if [[ "$command_in_file" != "$command" ]]; then
			debug "ALERT: command_in_file: $command_in_file != command: $command, wid_file: $wid_file, window_id_in_file: $window_id_in_file, pid_id_in_file: $window_id_in_file"
			return 1
		fi
	fi
	# debug end

	# debug "New window, window_id: $window_id, pid: $pid, save info to wid file $wid_file"
	printf '%s %s "%s"\n' "$window_id" "$pid" "$command" >"$wid_file"

	new_window=true
	show_window_in_position
}

ensure_screen() {
	if [ -n "$screen" ] && [ "$(xrandr --listactivemonitors | sed -n '2,$s/^.*\s\(\S\+\)$/\1/p' | grep -xc "$screen")" -eq 0 ]; then
		unset screen
	fi

	if [ -z "$screen" ]; then
		screen=$(xrandr | sed -n 's/^\(\S\+\).*primary.*$/\1/p')
	fi
}

parse_dimensions() {
	width=${width:-50%}
	height=${height:-50%}
	x_pos=${x_pos:-0}
	y_pos=${y_pos:-0}

	read -r screen_width screen_height offset_x offset_y < <(xrandr | sed -n "s/^$screen .*connected[^0-9]* \([0-9]\+\)x\([0-9]\+\)\([+-][0-9]\+\)\([+-][0-9]\+\).*$/\1 \2 \3 \4/p")

	if [[ "$width" =~ %$ ]]; then
		width=$((screen_width * ${width//%/} / 100))
	fi
	if [[ "$height" =~ %$ ]]; then
		height=$((screen_height * ${height//%/} / 100))
	fi

	if [ -n "$anchor" ]; then
		# start from top-left
		y_pos=$((y_pos + offset_y))
		x_pos=$((x_pos + offset_x))
	else
		# start from center-center
		y_pos=$((y_pos + ((screen_height - height) / 2) + offset_y))
		x_pos=$((x_pos + ((screen_width - width) / 2) + offset_x))
	fi
	# debug "Calculated window dimensions are x: $x_pos, y: $y_pos, w: $width, h: $height"
}

parse_aruments() {
	local script_name dim='\([0-9]\+%\?\)' pos='\(-\?[0-9]\+\)'
	script_name="$(basename "$0")"
	while getopts ad:hfFkp:s:tw:vV arg; do
		case $arg in
		a) anchor=true ;;
		d) read -r width height < <(sed -n "s/^${dim}x${dim}$/\1 \2/p" <<<"$OPTARG") ;;
		h) print_help && exit 0 ;;
		f) float=true ;;
		F) focus=true ;;
		k) keep=true ;;
		p) read -r x_pos y_pos < <(sed -n "s/^${pos},${pos}$/\1 \2/p" <<<"$OPTARG") ;;
		s) screen="$OPTARG" ;;
		t) toggle_floating_smart && exit 0 ;;
		w) workspace="$OPTARG" ;;
		v) printf 'Version %s\n' "$VERSION" && exit 0 ;;
		*) print_help && exit 1 ;;
		esac
	done
	shift $((OPTIND - 1))
	command="$*"
	if [ -z "$command" ]; then
		debug "Command argument is missing, check -h"
		exit 1
	fi
	# wid_file="$pid_dir/i3-sp-$(md5sum <<<"$command" | cut -f1 -d' ')"
	wid_file="$pid_dir/i3-sp-$(md5sum <<<"$command" | cut -f1 -d' ')"

	ensure_screen
	parse_dimensions
}

main() {
	local screen_width screen_height offset_x offset_y width height x_pos y_pos \
		command window_focused_id wid_file pid_dir focus workspace

	pid_dir=${XDG_RUNTIME_DIR:-"/tmp"}

	parse_aruments "$@"

	# already_running return 0 = true, first-run will return 1
	if already_running; then
		exit 0
	fi

	start_and_save_wid_and_pid
}

[ -z "$BASH_LOADABLES_PATH" ] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
enable -f sleep sleep

main "$@"
