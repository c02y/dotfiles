#!/bin/bash

# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# For more information, please refer to <http://unlicense.org/>
#
# This is the my extended version of https://gitlab.com/aquator/i3-scratchpad
# v1.1 - original version: a44fd4ff
# v1.2 - 1. add -f flag to focus first if the window is opened but unfocused, 2022-07-14
#        2. fix the bug that it only resizes the window into the specified size
#        when you toggle it back from scratchpad
# v1.3 - add -k flag to keep the previous window size and position
#        when toggling it back from scratchpad, 2022-07-14
# v1.4 - add -F flag to avoid the comman/program as floating windowe, 2022-07-14

VERSION="1.2"

print_help() {
	printf 'Usage: %s [[-a <anchor>] [-d <size>] [-p <pos>] [-s <screen>] [-F]] [-m <edge>] [-f] [-k] [-t] [-u [-w][-o <opts>]] [-v] [-V] <command>\n' "$script_name"
	printf 'Executes a program in a positioned scratchpad, optionally wrapped in a URxvt window.\n'
	printf 'Caches optional URxvt wrapper script and stores window id at XDG_RUNTIME_DIR based on command,\n'
	printf 'so executing the same command will re-use the existing window, if it still exists.\n'
	printf '\nArguments:\n'
	printf ' -a <anchor>   Sets where to calculate position from. Valid values are\n'
	printf '               top-left, top-center, top-right\n'
	printf '               center-left, center-center, center-right\n'
	printf '               bottom-left, bottom-center, bottom-right\n'
	printf '               Can be shortened as: tl, tc, tr, cl, cc, cr, bl, bc, br\n'
	printf '               Position will be calculated from anchor point of screen to anchor\n'
	printf '               point of window. Default is center-center.\n'
	printf ' -d <size>     Dimensions of window in pixels, in WIDTHxHEIGHT format.\n'
	printf '               Percentages of the screen dimensions can be used as well. Default is 50%%x50%%\n'
	printf ' -h            Prints this help page.\n'
	printf ' -m <edge>     Animates the movement to target position from specified edge.\n'
	printf '               Valid values are top, left, bottom, right, or short t, l, b, r\n'
	printf ' -f            Focus first is not foused, only necessary when used with -t.\n'
	printf ' -F            Float disable, using tiling instead, will ignore -d if -d is used.\n'
	printf ' -k            Keep window layout, restore its size and position when toggle it back.\n'
	printf ' -o <opts>     Extra URxvt options to pass.\n'
	printf ' -p <pos>      Position of terminal on pixels, in X,Y format.\n'
	printf '               Negative values can be used as well. Default is 0,0\n'
	printf ' -s <screen>   Screen identifier, as listed in xrandr. Falls back to primary screen.\n'
	printf ' -t            Toggles the window.\n'
	printf ' -u            Use URxvt terminal to launch the command - for command line apps.\n'
	printf ' -v            Verbose, for debugging.\n'
	printf ' -V            Print version information.\n'
	printf ' -w            Hides the cursor and waits for keypress before closing the\n'
	printf '               terminal window. Useful for commands immediately returning.\n'
	printf '\nExample:\n'
	printf ' # Calendar at the bottom right of primary screen with 32px bottom margin:\n'
	printf ' $ %s -d200x200 -abr -p0,-32 -wtu cal\n' "$script_name"
}

echoit() {
	# get the line where this fucntion is called
	LINE=${BASH_LINENO[$((${#BASH_LINENO[@]} - 4))]}
	# get value of a value of a value, if $1 = "name", ${!1} = $name
	echo L$LINE: "$1": "${!1}" >>/tmp/i3-scratchpad.log
	[ -n "$2" ] && exit
}

main() {
	# echo "================================" >>/tmp/i3-scratchpad.log
	local screen_width screen_height offset_x offset_y width height x_pos y_pos \
		urxvt move wait command urxvt_opts toggle verbose \
		wid_file pid_dir animation_frame_delay=0.01

	pid_dir=${XDG_RUNTIME_DIR:-"/tmp"}

	parse_aruments "$@"

	if already_running; then
		exit 0
	fi

	start_and_save_wid_and_pid
}

parse_aruments() {
	local script_name dim='\([0-9]\+%\?\)' pos='\(-\?[0-9]\+\)' anchor='cc'
	script_name="$(basename "$0")"
	while getopts a:d:hfFkm:o:p:s:tuvVw arg; do
		case $arg in
		a) anchor="$OPTARG" ;;
		d) read -r width height < <(sed -n "s/^${dim}x${dim}$/\1 \2/p" <<<"$OPTARG") ;;
		h) print_help && exit 0 ;;
		f) focus=true ;;
		F) float_disable=true ;;
		k) keep=true ;;
		m) move="$OPTARG" ;;
		o) urxvt_opts="$OPTARG" ;;
		p) read -r x_pos y_pos < <(sed -n "s/^${pos},${pos}$/\1 \2/p" <<<"$OPTARG") ;;
		s) screen="$OPTARG" ;;
		t) toggle=true ;;
		u) urxvt=true ;;
		v) verbose=true ;;
		V) printf 'Version %s\n' "$VERSION" && exit 0 ;;
		w) wait=true ;;
		*) print_help && exit 1 ;;
		esac
	done
	shift $((OPTIND - 1))
	command="$*"
	if [ -z "$command" ]; then
		printf 'Command argument is missing. See %s -h.\n' "$script_name" >&2
		exit 1
	fi
	wid_file="$pid_dir/i3-sp-$(md5sum <<<"$command" | cut -f1 -d' ')"

	if [[ "$anchor" =~ ^(top|center|bottom)-(left|center|right)$ ]]; then
		anchor=$(sed -n 's/^\([tcb]\)[^-]\+-\([lcr]\).*$/\1\2/p' <<<"$anchor")
	fi

	if [[ ! "$anchor" =~ ^([tcb])([lcr])$ ]]; then
		printf 'Anchor "%s" is invalid. See %s -h.\n' "$anchor" "$script_name" >&2
		exit 1
	fi

	if [[ "$move" =~ ^(top|bottom|left|right)$ ]]; then
		move=$(sed -n 's/^\([tblr]\).*$/\1/p' <<<"$move")
	fi

	if [[ -n "$move" && ! "$move" =~ ^[tblr]$ ]]; then
		printf 'Move "%s" is invalid. See %s -h.\n' "$move" "$script_name" >&2
		exit 1
	fi

	ensure_screen
	parse_dimensions
}

ensure_screen() {
	if [ -n "$screen" ] && [ "$(xrandr --listactivemonitors | sed -n '2,$s/^.*\s\(\S\+\)$/\1/p' | grep -xc "$screen")" -eq 0 ]; then
		unset screen
	fi

	if [ -z "$screen" ]; then
		screen=$(xrandr | sed -n 's/^\(\S\+\).*primary.*$/\1/p')
	fi
}

parse_dimensions() {
	width=${width:-50%}
	height=${height:-50%}
	x_pos=${x_pos:-0}
	y_pos=${y_pos:-0}

	read -r screen_width screen_height offset_x offset_y < <(xrandr | sed -n "s/^$screen .*connected[^0-9]* \([0-9]\+\)x\([0-9]\+\)\([+-][0-9]\+\)\([+-][0-9]\+\).*$/\1 \2 \3 \4/p")

	if [[ "$width" =~ %$ ]]; then
		width=$((screen_width * ${width//%/} / 100))
	fi
	if [[ "$height" =~ %$ ]]; then
		height=$((screen_height * ${height//%/} / 100))
	fi

	case "$anchor" in
	t?) y_pos=$((y_pos + offset_y)) ;;
	c?) y_pos=$((y_pos + ((screen_height - height) / 2) + offset_y)) ;;
	b?) y_pos=$((y_pos + screen_height - height + offset_y)) ;;
	esac

	case "$anchor" in
	?l) x_pos=$((x_pos + offset_x)) ;;
	?c) x_pos=$((x_pos + ((screen_width - width) / 2) + offset_x)) ;;
	?r) x_pos=$((x_pos + screen_width - width + offset_x)) ;;
	esac

	debug 'Calculated window dimensions are [' "x: $x_pos" "y: $y_pos" "w: $width" "h: $height" ']'
}

already_running() {
	local window_id window_state pid window_pid
	debug 'Checking wid file' "$wid_file"
	if [ -f "$wid_file" ] && [ -r "$wid_file" ]; then
		read -r window_id pid <"$wid_file"
	fi
	if [ -n "$window_id" ]; then
		debug 'Last window id was' "$window_id"
		if [ "$(wmctrl -l | grep -c "^$window_id ")" -gt 0 ]; then
			debug 'Window still exist'
			if [ -n "$pid" ]; then
				window_pid=$(xdotool getwindowpid "$window_id")
				debug 'Pid of window is' "$window_pid"
				if [ "$pid" -ne "$window_pid" ]; then
					debug 'PID does not match, window id reused?'
					return 1
				fi
			else
				debug 'Last pid not found'
			fi
			if [ -n "$toggle" ]; then
				window_state=$(xprop -id "$window_id" | sed -n 's/^.*window state: \(.*\)$/\1/p')
				debug 'Toggle mode on, current window state is' "$window_state"
				if [[ "$window_state" != 'Withdrawn' ]]; then
					debug 'Moving to scratchpad'
					toggle_window
					return 0
				fi
			fi
			show_window_in_position
			return 0
		fi
	fi
	return 1
}

start_and_save_wid_and_pid() {
	local window_id pid

	if [ -n "$urxvt" ]; then
		create_urxvt_wrapper
	fi

	debug 'Launching command' "$command"
	window_id=$(printf '0x%08x\n' "$(i3-msg -q "exec --no-startup-id \"$command\"" && i3-msg -t subscribe '[ "window" ]' | sed -n 's/.*"window":\([0-9]\+\).*/\1/p')")
	if [ -z "$window_id" ]; then
		printf 'Can not find window with id %s\n' "$window_id" >&2
		rm -f "$wid_file"
		return 1
	fi

	pid="$(xdotool getwindowpid "$window_id")"
	if [ -z "$pid" ]; then
		printf 'Can not find pid for window id %s\n' "$window_id" >&2
		rm -f "$wid_file"
		return 1
	fi
	debug 'PID of window is' "$pid"

	debug 'Saving window_id' "$window_id" 'and pid' "$pid" 'to wid file' "$wid_file"
	printf '%s %s\n' "$window_id" "$pid" >"$wid_file"

	show_window_in_position
}

show_window_in_position() {
	if [ -z "$move" ]; then
		if [ -n "$float_disable" ]; then
			i3-save-tree >/tmp/i3-save-tree.json
			i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;[id=\"$window_id\"] scratchpad show"
			# `borer none` command works only on situation when only one tiling window is in the workspace
			i3-msg -q -- "[id=\"$window_id\"] floating toggle; [id=\"$window_id\"] border none"
			if [ -n "$keep" ]; then
				# TODO: restore layout for tiling windows, left/right/up/down position, and window size, border...
				# the json file generated by i3-save-tree cannot be directly parsed by i3-msg append_layout
				# TODO: this part is complicated, do not try to save and restore the layouy
				# only trying to solave one thing: toggle the left tiling window, when you toggle it back,
				# it becomes the right window, and the size if you resized cannot be restored
				# drop this feature
				echo
			fi
			return 0
		fi
		if [ -n "$keep" ]; then
			window_currnet_info="$(xwininfo -id "$window_id")"
			depth_current=$(echo "$window_currnet_info" | awk '/Depth/ {print $2}')
			x_pos_current=$(echo "$window_currnet_info" | awk '/Absolute upper-left X/ {print $4}')
			y_pos_current="$(($(echo "$window_currnet_info" | awk '/Absolute upper-left Y/ {print $4}') - depth_current))"
			width_current=$(echo "$window_currnet_info" | awk '/Width/ {print $2}')
			height_current="$(($(echo "$window_currnet_info" | awk '/Height/ {print $2}') + depth_current))"

			debug 'Moving to scratchpad, showing and keeping the previous window size and position'
			i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;[id=\"$window_id\"] scratchpad show;[id=\"$window_id\"] move position $x_pos_current px $y_pos_current px;[id=\"$window_id\"] resize set $width_current px $height_current px"
			return 0
		else
			debug 'Moving to scratchpad, showing and resizing'
			# NOTE: if putting the following two lines into one, it won't resize the window to the specified size
			i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;[id=\"$window_id\"] scratchpad show"
			i3-msg -q -- "[id=\"$window_id\"] move position $x_pos px $y_pos px;[id=\"$window_id\"] resize set $width px $height px"
			return 0
		fi
	fi

	local x x_inc=0 x_end y y_inc=0 y_end
	x=$x_pos
	y=$y_pos
	x_end=$x_pos
	y_end=$y_pos
	case "$move" in
	t)
		y=$((offset_y - height + 1))
		y_inc=$(((y_pos - y) / 4))
		;;
	b)
		y=$((offset_y + screen_height - 1))
		y_inc=$(((y_pos - y) / 4))
		;;
	l)
		x=$((offset_x - width + 1))
		x_inc=$(((x_pos - x) / 4))
		;;
	r)
		x=$((offset_x + screen_width - 1))
		x_inc=$(((x_pos - x) / 4))
		;;
	esac

	if [ -n "$float_disable" ]; then
		i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;[id=\"$window_id\"] scratchpad show"
		i3-msg -q -- "floating toggle"
	else
		i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;[id=\"$window_id\"] scratchpad show;[id=\"$window_id\"] move position $x px $y px;[id=\"$window_id\"] resize set $width px $height px"
	fi
	debug 'Starting show animation'
	while [[ ($x_inc -lt 0 && $x -gt $x_end) || ($x_inc -gt 0 && $x -lt $x_end) || ($y_inc -lt 0 && $y -gt $y_end) || ($y_inc -gt 0 && $y -lt $y_end) ]]; do
		animate
	done
	debug 'Animation completed'
	i3-msg -q -- "[id=\"$window_id\"] move position $x_pos px $y_pos px"
}

toggle_window() {
	window_focused_id="$(xdotool getactivewindow)"
	# the printf part is to convert hex to dec
	if [[ "$window_focused_id" -ne "$(printf "%d" "$window_id")" && -n "$focus" ]]; then
		debug 'window_id does not match current window_focused_id and -f is given, will focus the window_id first'
		show_window_in_position && return 0
	else
		if [ -n "$move" ]; then
			[ -z "$BASH_LOADABLES_PATH" ] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
			local x x_inc=0 x_end y y_inc=0 y_end
			x=$x_pos
			y=$y_pos
			x_end=$x_pos
			y_end=$y_pos
			case "$move" in
			t)
				y_end=$((offset_y - height))
				y_inc=$(((y_end - y_pos) / 20))
				;;
			b)
				y_end=$((offset_y + screen_height - 1))
				y_inc=$(((y_end - y_pos) / 20))
				;;
			l)
				x_end=$((offset_x - width))
				x_inc=$(((x_end - x_pos) / 20))
				;;
			r)
				x_end=$((offset_x + screen_width - 1))
				x_inc=$(((x_end - x_pos) / 20))
				;;
			esac
			debug 'Starting hide animation'
			while [[ ($x_inc -gt 0 && $x -lt $x_end) || ($x_inc -lt 0 && $x -gt $x_end) || ($y_inc -gt 0 && $y -lt $y_end) || ($y_inc -lt 0 && $y -gt $y_end) ]]; do
				animate
			done
			debug 'Animation completed'
		fi

		i3-msg -q -- "[id=\"$window_id\"] move to scratchpad;"
	fi
}

animate() {
	debug 'Moving to [' "$x" "$y" '] with increment [' "$x_inc" "$y_inc" ']'
	i3-msg -q -- "[id=\"$window_id\"] move position $x px $y px"
	y=$((y + y_inc))
	x=$((x + x_inc))
	if [[ ($x -lt $x_pos && $x_inc -le 0) || ($x -gt $x_pos && $x_inc -ge 0) ]]; then
		x_inc=$((x_inc * 125 / 100))
	else
		x_inc=$((x_inc * 100 / 125))
	fi
	if [[ ($y -lt $y_pos && $y_inc -le 0) || ($y -gt $y_pos && $y_inc -ge 0) ]]; then
		y_inc=$((y_inc * 125 / 100))
	else
		y_inc=$((y_inc * 100 / 125))
	fi
	sleep "$animation_frame_delay"
}

create_urxvt_wrapper() {
	local wrapper_file
	wrapper_file="$wid_file$(if [ -n "$wait" ]; then printf '_W'; fi).sh"
	if [ -f "$wrapper_file" ] && [ -x "$wrapper_file" ]; then
		debug 'Wrapper' "$wrapper_file" 'file already exists.'
	else
		debug 'Creating wrapper file' "$wrapper_file" 'with URxvt command wrapper'
		printf '#!/bin/bash\n' >"$wrapper_file"
		printf 'clear\n' >>"$wrapper_file"
		printf '%s\n' "$command" >>"$wrapper_file"
		if [ -n "$wait" ]; then
			printf 'printf "\\e[?25l"\n' >>"$wrapper_file"
			printf 'read -r -n1\n' >>"$wrapper_file"
		fi
		chmod u+x "$wrapper_file"
		if [ -n "$verbose" ]; then
			cat "$wrapper_file"
		fi
	fi
	command="urxvt $urxvt_opts -e '$wrapper_file'"
}

debug() {
	if [ -n "$verbose" ]; then
		printf '%s\n' "$*" # >>/tmp/i3-scratchpad.log
	fi
}

[ -z "$BASH_LOADABLES_PATH" ] && BASH_LOADABLES_PATH=$(pkg-config bash --variable=loadablesdir 2>/dev/null)
enable -f sleep sleep

main "$@"
