#!/bin/bash

# 0. put this script into ~/.local/bin/
# 1. Create a emacsclient.desktop in ~/.local/share/applications/emacsclient.desktop
# 1.1 if you are using non-GUI or launcher is unnecessary, omit this step including the next
# 1.2 if you are using an OS without systemctl installed, omit this step including the next
#
# emacsclient.desktop:
#
# [Desktop Entry]
# Type=Application
# Encoding=UTF-8
# Icon=/usr/share/icons/hicolor/scalable/apps/emacs.svg
# Name=emacsclient
# Comment=Emacs daemon/client
# Type=Application
# Exec=/home/chz/.local/bin/emm
# Terminal=false
# StartupNofity=true
# Categories=
#
# 2. config your shortcut to this file in System Settings
# 3. the default emacs.service(~/.config/systemd/user/emacs.service or ~/anaconda3/lib/systemd/user/emacs.service)
#    may not work for emacsclient, replace the ExecStop with the following line
# ExecStop=/usr/bin/emacsclient --eval "(let (kill-emacs-hook)(kill-emacs))"

print_usage() {
	cat <<EOF
$(basename $0) -- emacs server and emacsclient manage script

Usage: $(basename $0)
	   -h to print this usage
	   -a to start org-agenda-list
	   -b to edit this bin/script using emacsclient
	   -c to quickly add todo using org-capture
	   -C to check the existence of daemon and the count of emacsclients
	   -d to start emacs --debug-init
	   -e [file] to edit using emacs, default is init.el
	   -E to edit init.el using emacsclient
	   -f to edit config.fish using emacsclient
	   -k to kill emacs daemon
	   -m [repo] to start magit in a repo, default is ./
	   -o [org_file] to start orgmode for a file, default is ~/Org/todo.org
	   -p profile emacs(startup time, cpu and mem)
	   -q to start emacs -q --no-splash
	   -r to restart emacs daemon and start a emacsclient
	   -s to switch between Spacemacs and Vanilla emacs
	   -t to time the startup of emacs
	   -u update all packages, only works for Spacemacs
	   -v edit VIMRC with emacsclient
	   -x to start emacsclient in terminal even inside GUI DE
EOF
	exit 0
}

check_socket_file() {
	if [ "$flag_systemctl" == "1" ]; then
		# this is only needed when using systemctl+emacs.service
		# After emacs.service is started, it takes several seconds for the socket file to be created
		# after that, emacsclient can be usable, or it will print "emacsclient: connect: Connection refused"
		# so keep checking the exists of the socket
		while [ -z "$(lsof -w -c emacs | grep 'server type' | tr -s " " | cut -d' ' -f8)" ]; do # empty
			sleep 0.5
		done
	else
		return
	fi
}

check_daemon_status() {
	if ps -ef | grep -v grep | grep 'emacs' | grep 'daemon' >/dev/null; then
		return 0
	else
		return 1
	fi
}

kill_emacs_server() {
	if check_daemon_status; then
		# once you kill the process, it will restart automatically
		ps -ef | grep -v grep | grep 'emacs' | grep 'daemon' | awk '{print $2}' | xargs kill -9
		if [ "$flag_systemctl" == "1" ]; then
			systemctl --user stop emacs.service
		fi
		echo "emacs server is killed!"
	else
		echo "No emacs daemon is running!"
	fi
}

check_running_emacsclient() {
	if check_daemon_status; then
		check_socket_file

		timeout 1 emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" >/dev/null
		if [ "$?" -ne 0 ]; then
			# emacsclient gets stuck #
			read -e -n 1 -p 'Running emacsclient gets stuck, kill it? [Y/n]: '
			if [ "$REPLY" == "y" ]; then
				kill_emacs_server
				exit 1
			else
				exit 0
			fi
		fi
		echo "Count of emacsclients:"
		emacsclient -n -e "(- (length (frame-list)) 1) "
		exit 0
	else
		echo "No emacs daemon is running!"
		exit 0
	fi
}

kill_running_emacsclient() {
	if check_daemon_status; then
		check_socket_file

		# using emacsclient process won't work for GUI since no emacsclient process exists
		timeout 1 emacsclient -n -e "(length (frame-list))" >/dev/null
		if [ "$?" -ne 0 ]; then
			# emacsclient gets stuck #
			read -e -n 1 -p 'Running emacsclient gets stuck, kill it? [Y/n]: '
			if [ "$REPLY" == "y" ]; then
				return 1
			else
				exit
			fi
		fi
		emacsclient -n -e "(if (> (length (frame-list)) 1) 't)" | grep -q t >/dev/null
		if [ "$?" -eq 0 ]; then # has emacsclient opened
			read -e -n 1 -p 'Running emacsclient exists, kill(switch to emacs frame if unsaved)? [Y/n]: '
			if [ "$REPLY" == "y" ]; then
				# Note that if modified buffers unsaved, you have to switch to the emacsclient to save manually
				emacsclient -n -e "(save-some-buffers)" >/dev/null
			else
				echo "Cancel and exit!"
				exit
			fi
		fi
	fi
}

copy_service() {
	# emacs.service may exist in /usr/lib/systemd/user/emacs.service
	# if so, copy_service won't do anything, systemctl command will link it into ~/.config/systemd/user/
	if [ ! -f ~/.config/systemd/user/emacs.service ] && [ -f ~/anaconda3/lib/systemd/user/emacs.service ]; then
		mkdir -p ~/.config/systemd/user
		cp -rfv ~/anaconda3/lib/systemd/user/emacs.service ~/.config/systemd/user/
	fi
}

restart_emacs_server() {
	if check_daemon_status; then
		# systemctl --user restart emacs.service # systemctl takes too much time
		# once you kill the process, it will restart automatically
		ps -ef | grep -v grep | grep 'emacs' | grep 'daemon' | awk '{print $2}' | xargs kill -9
		echo "emacs server is restarted!"
	fi
}

start_magit() {
	pwd_old=$PWD
	if [ -d $1 ]; then
		if [ "$1" != "." ]; then
			cd $1
		fi
		# check if $1 is under git control
		git rev-parse --is-inside-work-tree >/dev/null 2>&1
		if [ "$?" -ne 0 ]; then
			echo "$1 is not a git repo!"
			cd --
			exit 1
		fi

		# To get rid of prompt: "repo A is a repository. Create another in B"
		# This works well even if A/B is a submodule
		sub=0
		if [[ "$PWD" =~ ^$pwd_old ]] || [[ "$pwd_old" =~ ^$PWD ]]; then
			sub=1
		fi
		if [ "$1" == "." ] || [ "$sub" == "1" ]; then
			cmd="-e '(progn (magit-status) (delete-other-windows))'"
		elif [ "$1" != "." ] && [ "$sub" != "1" ]; then
			repo=$PWD
			cmd="-e '(progn (magit-status \"$repo\") (delete-other-windows))'"
			cd --
		fi
	else
		echo "$1 is not even a directory!"
		exit 1
	fi
}

repo="."
file="$EMACS_EL"
cmd=
flag_s=0 # switch between Spacemacs and Vanilla emacs
flag_x=0 # start emacsclient in terminal even inside GUI DE

# even if systemctl command exists, `systemctl --user` may not work
# `systemctl --user` may return 0 even it fails
if systemctl --user -q >/dev/null 2>&1; then
	flag_systemctl=1
else
	flag_systemctl=0
fi

while getopts ":habcCdeEfkmopqrstuvx" args; do # prefix-: no warning for illegal option
	case "$args" in
	h | \?) # \? for illegal option
		print_usage
		;;
	a)
		# cmd="-e '(org-agenda-list)'"
		cmd="-e '(execute-kbd-macro (kbd \"C-c a a c\"))'"
		;;
	b)
		file="$HOME/.local/bin/emm"
		cmd="$file"
		;;
	c)
		cmd="-e '(org-capture)'"
		;;
	C)
		ps -ef | grep -v grep | grep emacs
		check_running_emacsclient
		;;
	d)
		echo "Start 'emacs --debug-init'"
		rm ~/.emacs.d/init.elc >/dev/null 2>&1
		emacs --no-splash --debug-init >/dev/null 2>&1
		exit 0
		;;
	e)
		if [ ! -z ${@:$OPTIND} ]; then # if no argv is given, using default
			file=${@:$OPTIND}
			OPTIND=$((OPTIND + 1))
		fi
		echo "Edit $file using emacs..."
		emacs --no-splash $file >/dev/null 2>&1
		exit 0
		;;
	E)
		cmd="$file"
		;;
	f)
		file="$HOME/.config/fish/config.fish"
		cmd="$file"
		;;
	k)
		kill_running_emacsclient
		kill_emacs_server
		exit 0
		;;
	m)
		if [ ! -z ${@:$OPTIND} ]; then # if no argv is given, using default
			repo=${@:$OPTIND}
			OPTIND=$((OPTIND + 1))
		fi
		start_magit $repo
		;;
	o)
		if [ ! -z ${@:$OPTIND} ]; then # if no argv is given, using default
			file=${@:$OPTIND}
			OPTIND=$((OPTIND + 1))
		else
			file="$HOME/Org/todo.org"
		fi
		cmd="$file"
		;;
	p)
		echo "Profile emacs, startup time, cpu and mem..."
		emacs --debug-init --timed-requires --profile >/dev/null 2>&1
		exit 0
		;;
	q)
		echo "Start emacs -q --no-splash..."
		emacs -q --no-splash >/dev/null 2>&1
		exit 0
		;;
	r)
		kill_running_emacsclient
		restart_emacs_server
		;;
	s)
		flag_s=1
		;;
	t)
		echo "Time the startup of emacs..."
		time emacs --debug-init -eval '(kill-emacs)'
		exit 0
		;;
	u)
		echo "update packages in CLI, only works for Spacemacs..."
		git -C ~/.emacs.d pull -v
		emacs --batch -l ~/.emacs.d/init.el --eval="(configuration-layer/update-packages t)"
		emacs --batch -l ~/.emacs.d/init.el --eval="(configuration-layer/update-packages t)"
		exit 0
		;;
	v)
		echo "Editing VIMRC"
		file=$VIMRC
		cmd=$file
		;;
	x)
		flag_x=1
		;;
	esac
done
shift $((OPTIND - 1)) # remove options that have already been handled from $@

if [ "$flag_s" -eq 1 ]; then
	echo "Switch between Spacemacs and Vanilla emacs..."
	if [ -d ~/.emacs.d/core ]; then # check if directory exists
		# -e in read - add newline after the the type in prompt, to avoid echo string after the prompt
		# unnecessary to add an empty echo
		read -e -n 1 -p "Currently using Spacemacs, switch to Vanilla emacs? [Y/SPC/n]: "
		if [ "$REPLY" == "y" ] || [ "$REPLY" == " " ]; then
			if [ -d ~/se.emacs.d ]; then
				echo "$HOME/se.emacs.d already exists, exit!"
				exit 1
			fi
			mv -vi ~/.emacs.d ~/se.emacs.d
			if [ -d ~/ve.emacs.d ]; then
				mv -vi ~/ve.emacs.d ~/.emacs.d
			else
				echo "bak directory of Vanilla emacs(~/ve.emacs.d) doesn't exist, exit!"
				exit 1
			fi
		else
			echo "Cancel and exit!"
			exit 0
		fi
	elif [ -d ~/.emacs.d/lisp ]; then
		read -e -n 1 -p "Currently using Vanilla emacs, switch to Spacemacs? [Y/SPC/n]: "
		if [ "$REPLY" == "y" ] || [ "$REPLY" == " " ]; then
			if [ -d ~/ve.emacs.d ]; then
				echo "$HOME/ve.emacs.d already exists, exit!"
				exit 1
			fi
			mv -vi ~/.emacs.d ~/ve.emacs.d
			if [ -d ~/se.emacs.d ]; then
				mv -vi ~/se.emacs.d ~/.emacs.d
			else
				echo "bak directory of Spacemacs(~/se.emacs.d) doesn't exist, exit!"
				exit 1
			fi
		else
			echo "Cancel and exit!"
			exit 0
		fi
	else
		echo "Both directories of Spacemacs and Vanilla emacs do not exist, exit!"
		exit 1
	fi
	if [ -d ~/.emacs.d/lisp ]; then # start emacs directly without daemon
		emacs $@
		exit
	elif [ -d ~/.emacs.d/core ]; then # ask if start Spacemacs
		read -e -n 1 -p "Opening Spacemacs? [Y/SPC/n]: "
		if [ "$REPLY" == "y" ] || [ "$REPLY" == " " ]; then
			echo "Starting Spacemacs..."
		else
			echo "Cancel and exit!"
			exit
		fi
	fi
fi

if [ "$flag_x" -eq 1 ]; then
	if ! check_daemon_status; then
		echo "Start emacs daemon..."
		emacs --daemon >/dev/null 2>&1
	fi
	echo "Start emacsclient -a \"\" -t..."
	emacsclient -a "" -t $@
	exit 0
fi

if [ "$flag_systemctl" == "1" ]; then
	if ! check_daemon_status; then
		copy_service
		echo "Start emacs service..."
		systemctl --user enable emacs.service
		systemctl --user start emacs.service
	fi
else
	if ! check_daemon_status; then
		echo "Start emacs daemon..."
		emacs --daemon >/dev/null 2>&1
	fi
fi
if check_daemon_status; then
	check_socket_file
	echo "Start emacsclient..."
	if [ -z "$DISPLAY" ]; then # empty, non-GUI
		# use eval since $cmd is string(command) in variable
		eval emacsclient -a "" -n -c $cmd $@
	else
		# "" here forces the GUI running without holding the terminal, like &
		eval "emacsclient -a \"\" -n -F \"'(fullscreen . maximized)\" -c $cmd" $@ >/dev/null
	fi
fi
if [ "$DISPLAY" ]; then # using GUI
	# if the focused window is not emacs, minimize it
	if ! xdotool getwindowfocus getwindowname | grep -i emacs >/dev/null; then
		xdotool getwindowfocus windowminimize
	fi
fi
